{"ast":null,"code":"const EventEmitter = require('events').EventEmitter;\n\nconst shortid = require('shortid');\n\nconst {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK\n} = require('./constants');\n\nlet cluster;\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n  return (worker, requestEvent) => {\n    if (requestEvent && requestEvent.type === requestType) {\n      emitter.emit(masterEvent, requestEvent.name, () => {\n        // grant lock to worker\n        worker.send({\n          type: grantType,\n          name: requestEvent.name,\n          identifier: requestEvent.identifier\n        }); // wait for worker to finish\n\n        return new Promise(resolve => {\n          const releaseEventListener = releaseEvent => {\n            if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n              worker.removeListener('message', releaseEventListener);\n              resolve();\n            }\n          };\n\n          worker.on('message', releaseEventListener);\n        });\n      });\n    }\n  };\n};\n\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n  return () => {\n    const id = shortid.generate();\n    process.send({\n      type: requestType,\n      identifier: id,\n      name\n    });\n    return new Promise(resolve => {\n      const listener = event => {\n        if (event && event.type === grantType && event.identifier === id) {\n          process.removeListener('message', listener); // grant lock\n\n          resolve(() => {\n            // release lock\n            process.send({\n              type: releaseType,\n              identifier: id,\n              name\n            });\n          });\n        }\n      };\n\n      process.on('message', listener);\n    });\n  };\n};\n\nmodule.exports = options => {\n  try {\n    cluster = require('cluster');\n\n    if (!Object.keys(cluster).length) {\n      return;\n    }\n  } catch (_) {\n    return;\n  }\n\n  if (cluster.isMaster || options.singleProcess) {\n    const emitter = new EventEmitter();\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));\n    return emitter;\n  }\n\n  return {\n    isWorker: true,\n    readLock: name => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n    writeLock: name => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/mortice/lib/node.js"],"names":["EventEmitter","require","shortid","WORKER_REQUEST_READ_LOCK","WORKER_RELEASE_READ_LOCK","MASTER_GRANT_READ_LOCK","WORKER_REQUEST_WRITE_LOCK","WORKER_RELEASE_WRITE_LOCK","MASTER_GRANT_WRITE_LOCK","cluster","handleWorkerLockRequest","emitter","masterEvent","requestType","releaseType","grantType","worker","requestEvent","type","emit","name","send","identifier","Promise","resolve","releaseEventListener","releaseEvent","removeListener","on","makeWorkerLockRequest","id","generate","process","listener","event","module","exports","options","Object","keys","length","_","isMaster","singleProcess","isWorker","readLock","writeLock"],"mappings":"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","sourcesContent":["const EventEmitter = require('events').EventEmitter\nconst shortid = require('shortid')\nconst {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK\n} = require('./constants')\nlet cluster\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n  return (worker, requestEvent) => {\n    if (requestEvent && requestEvent.type === requestType) {\n      emitter.emit(masterEvent, requestEvent.name, () => {\n        // grant lock to worker\n        worker.send({\n          type: grantType,\n          name: requestEvent.name,\n          identifier: requestEvent.identifier\n        })\n\n        // wait for worker to finish\n        return new Promise((resolve) => {\n          const releaseEventListener = (releaseEvent) => {\n            if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n              worker.removeListener('message', releaseEventListener)\n              resolve()\n            }\n          }\n\n          worker.on('message', releaseEventListener)\n        })\n      })\n    }\n  }\n}\n\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n  return () => {\n    const id = shortid.generate()\n\n    process.send({\n      type: requestType,\n      identifier: id,\n      name\n    })\n\n    return new Promise((resolve) => {\n      const listener = (event) => {\n        if (event && event.type === grantType && event.identifier === id) {\n          process.removeListener('message', listener)\n\n          // grant lock\n          resolve(() => {\n            // release lock\n            process.send({\n              type: releaseType,\n              identifier: id,\n              name\n            })\n          })\n        }\n      }\n\n      process.on('message', listener)\n    })\n  }\n}\n\nmodule.exports = (options) => {\n  try {\n    cluster = require('cluster')\n\n    if (!Object.keys(cluster).length) {\n      return\n    }\n  } catch (_) {\n    return\n  }\n\n  if (cluster.isMaster || options.singleProcess) {\n    const emitter = new EventEmitter()\n\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK))\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK))\n\n    return emitter\n  }\n\n  return {\n    isWorker: true,\n    readLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n    writeLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}