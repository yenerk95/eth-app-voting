{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('event-iterator'),\n    EventIterator = _require2.EventIterator; // copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\n\n\nfunction isArrayBuffer(obj) {\n  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';\n}\n\nmodule.exports = function (socket) {\n  var removeListener = socket.removeEventListener || socket.removeListener;\n\n  var source = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var messages, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            messages = new EventIterator(function (push, stop, fail) {\n              socket.addEventListener('message', push);\n              socket.addEventListener('error', fail);\n              socket.addEventListener('close', stop);\n            }, function (push, stop, fail) {\n              removeListener.call(socket, 'message', push);\n              removeListener.call(socket, 'error', fail);\n              removeListener.call(socket, 'close', stop);\n            }, {\n              highWaterMark: Infinity\n            });\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(messages);\n\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 11:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 19;\n              break;\n            }\n\n            _value2 = _value, data = _value2.data;\n            _context.next = 16;\n            return isArrayBuffer(data) ? Buffer.from(data) : data;\n\n          case 16:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n\n          case 19:\n            _context.next = 25;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 25:\n            _context.prev = 25;\n            _context.prev = 26;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 30;\n              break;\n            }\n\n            _context.next = 30;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 30:\n            _context.prev = 30;\n\n            if (!_didIteratorError) {\n              _context.next = 33;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 33:\n            return _context.finish(30);\n\n          case 34:\n            return _context.finish(25);\n\n          case 35:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 21, 25, 35], [26,, 30, 34]]);\n  }))();\n\n  var connected = socket.readyState === 1;\n  var connError;\n  socket.addEventListener('open', function () {\n    connected = true;\n    connError = null;\n  });\n  socket.addEventListener('close', function () {\n    connected = false;\n    connError = null;\n  });\n  socket.addEventListener('error', function (err) {\n    if (!connected) connError = err;\n  });\n\n  source.connected = function () {\n    return new Promise(function (resolve, reject) {\n      if (connected) return resolve();\n      if (connError) return reject(connError);\n\n      var cleanUp = function cleanUp(cont) {\n        removeListener.call(socket, 'open', onOpen);\n        removeListener.call(socket, 'error', onError);\n        cont();\n      };\n\n      var onOpen = function onOpen() {\n        return cleanUp(resolve);\n      };\n\n      var onError = function onError(err) {\n        return cleanUp(function () {\n          return reject(err);\n        });\n      };\n\n      socket.addEventListener('open', onOpen);\n      socket.addEventListener('error', onError);\n    });\n  };\n\n  return source;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-ws/source.js"],"names":["require","Buffer","EventIterator","isArrayBuffer","obj","ArrayBuffer","constructor","name","byteLength","module","exports","socket","removeListener","removeEventListener","source","messages","push","stop","fail","addEventListener","call","highWaterMark","Infinity","data","from","connected","readyState","connError","err","Promise","resolve","reject","cleanUp","cont","onOpen","onError"],"mappings":"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","sourcesContent":["const { Buffer } = require('buffer')\nconst { EventIterator } = require('event-iterator')\n\n// copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\nmodule.exports = socket => {\n  const removeListener = socket.removeEventListener || socket.removeListener\n\n  const source = (async function * () {\n    const messages = new EventIterator(\n      (push, stop, fail) => {\n        socket.addEventListener('message', push)\n        socket.addEventListener('error', fail)\n        socket.addEventListener('close', stop)\n      },\n      (push, stop, fail) => {\n        removeListener.call(socket, 'message', push)\n        removeListener.call(socket, 'error', fail)\n        removeListener.call(socket, 'close', stop)\n      },\n      { highWaterMark: Infinity }\n    )\n\n    for await (const { data } of messages) {\n      yield isArrayBuffer(data) ? Buffer.from(data) : data\n    }\n  })()\n\n  let connected = socket.readyState === 1\n  let connError\n\n  socket.addEventListener('open', () => {\n    connected = true\n    connError = null\n  })\n\n  socket.addEventListener('close', () => {\n    connected = false\n    connError = null\n  })\n\n  socket.addEventListener('error', err => {\n    if (!connected) connError = err\n  })\n\n  source.connected = () => new Promise((resolve, reject) => {\n    if (connected) return resolve()\n    if (connError) return reject(connError)\n\n    const cleanUp = cont => {\n      removeListener.call(socket, 'open', onOpen)\n      removeListener.call(socket, 'error', onError)\n      cont()\n    }\n\n    const onOpen = () => cleanUp(resolve)\n    const onError = err => cleanUp(() => reject(err))\n\n    socket.addEventListener('open', onOpen)\n    socket.addEventListener('error', onError)\n  })\n\n  return source\n}\n"]},"metadata":{},"sourceType":"script"}