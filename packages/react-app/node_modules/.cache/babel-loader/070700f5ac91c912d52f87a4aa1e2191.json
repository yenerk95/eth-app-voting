{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Big = require('bignumber.js');\n\nvar CID = require('cids');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var bitswap = _ref.bitswap;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var snapshot;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              snapshot = bitswap.stat().snapshot;\n              return _context.abrupt(\"return\", {\n                provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n                blocksReceived: new Big(snapshot.blocksReceived),\n                wantlist: Array.from(bitswap.getWantlist()).map(function (e) {\n                  return e[1].cid;\n                }),\n                peers: bitswap.peers().map(function (id) {\n                  return new CID(id.toB58String());\n                }),\n                dupBlksReceived: new Big(snapshot.dupBlksReceived),\n                dupDataReceived: new Big(snapshot.dupDataReceived),\n                dataReceived: new Big(snapshot.dataReceived),\n                blocksSent: new Big(snapshot.blocksSent),\n                dataSent: new Big(snapshot.dataSent)\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function stat() {\n      return _stat.apply(this, arguments);\n    }\n\n    return stat;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/bitswap/stat.js"],"names":["Big","require","CID","withTimeoutOption","module","exports","bitswap","snapshot","stat","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","wantlist","Array","from","getWantlist","map","e","cid","peers","id","toB58String","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;eAC8BA,OAAO,CAAC,aAAD,C;IAA7BE,iB,YAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAiB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAChC,SAAOH,iBAAiB;AAAA,yEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;AAC1CI,cAAAA,QADiB,GACND,OAAO,CAACE,IAAR,GAAeD,QADT;AAAA,+CAGhB;AACLE,gBAAAA,aAAa,EAAEC,QAAQ,CAACH,QAAQ,CAACI,oBAAT,CAA8BC,QAA9B,EAAD,CADlB;AAELC,gBAAAA,cAAc,EAAE,IAAIb,GAAJ,CAAQO,QAAQ,CAACM,cAAjB,CAFX;AAGLC,gBAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWV,OAAO,CAACW,WAAR,EAAX,EAAkCC,GAAlC,CAAsC,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAT;AAAA,iBAAvC,CAHL;AAILC,gBAAAA,KAAK,EAAEf,OAAO,CAACe,KAAR,GAAgBH,GAAhB,CAAoB,UAAAI,EAAE;AAAA,yBAAI,IAAIpB,GAAJ,CAAQoB,EAAE,CAACC,WAAH,EAAR,CAAJ;AAAA,iBAAtB,CAJF;AAKLC,gBAAAA,eAAe,EAAE,IAAIxB,GAAJ,CAAQO,QAAQ,CAACiB,eAAjB,CALZ;AAMLC,gBAAAA,eAAe,EAAE,IAAIzB,GAAJ,CAAQO,QAAQ,CAACkB,eAAjB,CANZ;AAOLC,gBAAAA,YAAY,EAAE,IAAI1B,GAAJ,CAAQO,QAAQ,CAACmB,YAAjB,CAPT;AAQLC,gBAAAA,UAAU,EAAE,IAAI3B,GAAJ,CAAQO,QAAQ,CAACoB,UAAjB,CARP;AASLC,gBAAAA,QAAQ,EAAE,IAAI5B,GAAJ,CAAQO,QAAQ,CAACqB,QAAjB;AATL,eAHgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBpB,IAAhB;AAAA;AAAA;;AAAA,WAAgBA,IAAhB;AAAA,MAAxB;AAeD,CAhBD","sourcesContent":["'use strict'\n\nconst Big = require('bignumber.js')\nconst CID = require('cids')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ bitswap }) => {\n  return withTimeoutOption(async function stat () { // eslint-disable-line require-await\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: new Big(snapshot.blocksReceived),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers().map(id => new CID(id.toB58String())),\n      dupBlksReceived: new Big(snapshot.dupBlksReceived),\n      dupDataReceived: new Big(snapshot.dupDataReceived),\n      dataReceived: new Big(snapshot.dataReceived),\n      blocksSent: new Big(snapshot.blocksSent),\n      dataSent: new Big(snapshot.dataSent)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}