{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar dirBuilder = require('./dir');\n\nvar fileBuilder = require('./file');\n\nfunction dagBuilder(_x, _x2, _x3) {\n  return _dagBuilder.apply(this, arguments);\n}\n\nfunction _dagBuilder() {\n  _dagBuilder = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(source, block, options) {\n    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _value;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context3.prev = 2;\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n              var entry, _source, chunker, chunkValidator;\n\n              return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      entry = _value;\n\n                      if (entry.path) {\n                        if (entry.path.substring(0, 2) === './') {\n                          options.wrapWithDirectory = true;\n                        }\n\n                        entry.path = entry.path.split('/').filter(function (path) {\n                          return path && path !== '.';\n                        }).join('/');\n                      }\n\n                      if (!entry.content) {\n                        _context2.next = 11;\n                        break;\n                      }\n\n                      _source = entry.content; // wrap in iterator if it is array-like or not an iterator\n\n                      if (!_source[Symbol.asyncIterator] && !_source[Symbol.iterator] || _source.length !== undefined) {\n                        _source = _defineProperty({}, Symbol.iterator, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                          return _regeneratorRuntime.wrap(function _callee$(_context) {\n                            while (1) {\n                              switch (_context.prev = _context.next) {\n                                case 0:\n                                  _context.next = 2;\n                                  return entry.content;\n\n                                case 2:\n                                case \"end\":\n                                  return _context.stop();\n                              }\n                            }\n                          }, _callee);\n                        }));\n                      }\n\n                      if (typeof options.chunker === 'function') {\n                        chunker = options.chunker;\n                      } else if (options.chunker === 'rabin') {\n                        chunker = require('../chunker/rabin');\n                      } else {\n                        chunker = require('../chunker/fixed-size');\n                      }\n\n                      if (typeof options.chunkValidator === 'function') {\n                        chunkValidator = options.chunkValidator;\n                      } else {\n                        chunkValidator = require('./validate-chunks');\n                      } // item is a file\n\n\n                      _context2.next = 9;\n                      return function () {\n                        return fileBuilder(entry, chunker(chunkValidator(_source, options), options), block, options);\n                      };\n\n                    case 9:\n                      _context2.next = 13;\n                      break;\n\n                    case 11:\n                      _context2.next = 13;\n                      return function () {\n                        return dirBuilder(entry, block, options);\n                      };\n\n                    case 13:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _loop);\n            });\n            _iterator = _asyncIterator(source);\n\n          case 5:\n            _context3.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            _step = _context3.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context3.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 11:\n            _value = _context3.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context3.next = 17;\n              break;\n            }\n\n            return _context3.delegateYield(_loop(), \"t0\", 14);\n\n          case 14:\n            _iteratorNormalCompletion = true;\n            _context3.next = 5;\n            break;\n\n          case 17:\n            _context3.next = 23;\n            break;\n\n          case 19:\n            _context3.prev = 19;\n            _context3.t1 = _context3[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context3.t1;\n\n          case 23:\n            _context3.prev = 23;\n            _context3.prev = 24;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context3.next = 28;\n              break;\n            }\n\n            _context3.next = 28;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 28:\n            _context3.prev = 28;\n\n            if (!_didIteratorError) {\n              _context3.next = 31;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 31:\n            return _context3.finish(28);\n\n          case 32:\n            return _context3.finish(23);\n\n          case 33:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2, null, [[2, 19, 23, 33], [24,, 28, 32]]);\n  }));\n  return _dagBuilder.apply(this, arguments);\n}\n\nmodule.exports = dagBuilder;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/dag-builder/index.js"],"names":["dirBuilder","require","fileBuilder","dagBuilder","source","block","options","entry","path","substring","wrapWithDirectory","split","filter","join","content","Symbol","asyncIterator","iterator","length","undefined","chunker","chunkValidator","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst dirBuilder = require('./dir')\nconst fileBuilder = require('./file')\n\nasync function * dagBuilder (source, block, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true\n      }\n\n      entry.path = entry.path\n        .split('/')\n        .filter(path => path && path !== '.')\n        .join('/')\n    }\n\n    if (entry.content) {\n      let source = entry.content\n\n      // wrap in iterator if it is array-like or not an iterator\n      if ((!source[Symbol.asyncIterator] && !source[Symbol.iterator]) || source.length !== undefined) {\n        source = {\n          [Symbol.iterator]: function * () {\n            yield entry.content\n          }\n        }\n      }\n\n      let chunker\n\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker\n      } else if (options.chunker === 'rabin') {\n        chunker = require('../chunker/rabin')\n      } else {\n        chunker = require('../chunker/fixed-size')\n      }\n\n      let chunkValidator\n\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator\n      } else {\n        chunkValidator = require('./validate-chunks')\n      }\n\n      // item is a file\n      yield () => fileBuilder(entry, chunker(chunkValidator(source, options), options), block, options)\n    } else {\n      // item is a directory\n      yield () => dirBuilder(entry, block, options)\n    }\n  }\n}\n\nmodule.exports = dagBuilder\n"]},"metadata":{},"sourceType":"script"}