{"ast":null,"code":"'use strict';\n\nvar _require = require('datastore-core'),\n    TieredDatastore = _require.TieredDatastore;\n\nvar get = require('dlv');\n\nvar PubsubDatastore = require('./pubsub-datastore');\n\nvar OfflineDatastore = require('./offline-datastore');\n\nmodule.exports = function (_ref) {\n  var libp2p = _ref.libp2p,\n      repo = _ref.repo,\n      peerId = _ref.peerId,\n      options = _ref.options;\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  var ipnsStores = []; // Add IPNS pubsub if enabled\n\n  var pubsubDs;\n\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    var pubsub = libp2p.pubsub;\n    var localDatastore = repo.datastore;\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId);\n    ipnsStores.push(pubsubDs);\n  } // DHT should not be added as routing if we are offline or it is disabled\n\n\n  if (get(options, 'offline') || !get(options, 'libp2p.config.dht.enabled', false)) {\n    var offlineDatastore = new OfflineDatastore(repo);\n    ipnsStores.push(offlineDatastore);\n  } else {\n    ipnsStores.push(libp2p._dht);\n  } // Create ipns routing with a set of datastores\n\n\n  return new TieredDatastore(ipnsStores);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/ipns/routing/config.js"],"names":["require","TieredDatastore","get","PubsubDatastore","OfflineDatastore","module","exports","libp2p","repo","peerId","options","ipnsStores","pubsubDs","pubsub","localDatastore","datastore","push","offlineDatastore","_dht"],"mappings":"AAAA;;eAE4BA,OAAO,CAAC,gBAAD,C;IAA3BC,e,YAAAA,e;;AACR,IAAMC,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AAEA,IAAMG,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAA/B;;AACA,IAAMI,gBAAgB,GAAGJ,OAAO,CAAC,qBAAD,CAAhC;;AAEAK,MAAM,CAACC,OAAP,GAAiB,gBAAuC;AAAA,MAApCC,MAAoC,QAApCA,MAAoC;AAAA,MAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,MAAtBC,MAAsB,QAAtBA,MAAsB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AACtD;AACA,MAAMC,UAAU,GAAG,EAAnB,CAFsD,CAItD;;AACA,MAAIC,QAAJ;;AACA,MAAIV,GAAG,CAACQ,OAAD,EAAU,yBAAV,EAAqC,KAArC,CAAP,EAAoD;AAClD,QAAMG,MAAM,GAAGN,MAAM,CAACM,MAAtB;AACA,QAAMC,cAAc,GAAGN,IAAI,CAACO,SAA5B;AAEAH,IAAAA,QAAQ,GAAG,IAAIT,eAAJ,CAAoBU,MAApB,EAA4BC,cAA5B,EAA4CL,MAA5C,CAAX;AACAE,IAAAA,UAAU,CAACK,IAAX,CAAgBJ,QAAhB;AACD,GAZqD,CActD;;;AACA,MAAIV,GAAG,CAACQ,OAAD,EAAU,SAAV,CAAH,IAA2B,CAACR,GAAG,CAACQ,OAAD,EAAU,2BAAV,EAAuC,KAAvC,CAAnC,EAAkF;AAChF,QAAMO,gBAAgB,GAAG,IAAIb,gBAAJ,CAAqBI,IAArB,CAAzB;AACAG,IAAAA,UAAU,CAACK,IAAX,CAAgBC,gBAAhB;AACD,GAHD,MAGO;AACLN,IAAAA,UAAU,CAACK,IAAX,CAAgBT,MAAM,CAACW,IAAvB;AACD,GApBqD,CAsBtD;;;AACA,SAAO,IAAIjB,eAAJ,CAAoBU,UAApB,CAAP;AACD,CAxBD","sourcesContent":["'use strict'\n\nconst { TieredDatastore } = require('datastore-core')\nconst get = require('dlv')\n\nconst PubsubDatastore = require('./pubsub-datastore')\nconst OfflineDatastore = require('./offline-datastore')\n\nmodule.exports = ({ libp2p, repo, peerId, options }) => {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    const pubsub = libp2p.pubsub\n    const localDatastore = repo.datastore\n\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // DHT should not be added as routing if we are offline or it is disabled\n  if (get(options, 'offline') || !get(options, 'libp2p.config.dht.enabled', false)) {\n    const offlineDatastore = new OfflineDatastore(repo)\n    ipnsStores.push(offlineDatastore)\n  } else {\n    ipnsStores.push(libp2p._dht)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n"]},"metadata":{},"sourceType":"script"}