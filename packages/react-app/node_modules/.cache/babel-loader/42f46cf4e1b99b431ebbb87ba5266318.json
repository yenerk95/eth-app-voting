{"ast":null,"code":"'use strict';\n\nconst throttle = require('lodash.throttle');\n\nexports = module.exports = TimeCache;\n\nfunction TimeCache(options) {\n  if (!(this instanceof TimeCache)) {\n    return new TimeCache(options);\n  }\n\n  options = options || {};\n  const validity = options.validity || 30; // seconds\n\n  const entries = new Map();\n  const sweep = throttle(() => {\n    entries.forEach((entry, key) => {\n      const v = entry.validity || validity;\n      const delta = getTimeElapsed(entry.timestamp);\n\n      if (delta > v) {\n        entries.delete(key);\n      }\n    });\n  }, 200);\n\n  this.put = (key, value, validity) => {\n    if (!this.has(key)) {\n      entries.set(key, {\n        value: value,\n        timestamp: new Date(),\n        validity: validity\n      });\n    }\n\n    sweep();\n  };\n\n  this.get = key => {\n    if (entries.has(key)) {\n      return entries.get(key).value;\n    } else {\n      throw new Error('key does not exist');\n    }\n  };\n\n  this.has = key => {\n    return entries.has(key);\n  };\n}\n\nfunction getTimeElapsed(prevTime) {\n  const currentTime = new Date();\n  const a = currentTime.getTime() - prevTime.getTime();\n  return Math.floor(a / 1000);\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/time-cache/src/index.js"],"names":["throttle","require","exports","module","TimeCache","options","validity","entries","Map","sweep","forEach","entry","key","v","delta","getTimeElapsed","timestamp","delete","put","value","has","set","Date","get","Error","prevTime","currentTime","a","getTime","Math","floor"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AACAC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,SAA3B;;AAEA,SAASA,SAAT,CAAoBC,OAApB,EAA6B;AAC3B,MAAI,EAAE,gBAAgBD,SAAlB,CAAJ,EAAkC;AAChC,WAAO,IAAIA,SAAJ,CAAcC,OAAd,CAAP;AACD;;AAEDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,QAAMC,QAAQ,GAAGD,OAAO,CAACC,QAAR,IAAoB,EAArC,CAP2B,CAOa;;AAExC,QAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AAEA,QAAMC,KAAK,GAAGT,QAAQ,CAAC,MAAM;AAC3BO,IAAAA,OAAO,CAACG,OAAR,CAAgB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC9B,YAAMC,CAAC,GAAGF,KAAK,CAACL,QAAN,IAAkBA,QAA5B;AACA,YAAMQ,KAAK,GAAGC,cAAc,CAACJ,KAAK,CAACK,SAAP,CAA5B;;AACA,UAAIF,KAAK,GAAGD,CAAZ,EAAe;AACbN,QAAAA,OAAO,CAACU,MAAR,CAAeL,GAAf;AACD;AACF,KAND;AAOD,GARqB,EAQnB,GARmB,CAAtB;;AAUA,OAAKM,GAAL,GAAW,CAACN,GAAD,EAAMO,KAAN,EAAab,QAAb,KAA0B;AACnC,QAAI,CAAC,KAAKc,GAAL,CAASR,GAAT,CAAL,EAAoB;AAClBL,MAAAA,OAAO,CAACc,GAAR,CAAYT,GAAZ,EAAiB;AACfO,QAAAA,KAAK,EAAEA,KADQ;AAEfH,QAAAA,SAAS,EAAE,IAAIM,IAAJ,EAFI;AAGfhB,QAAAA,QAAQ,EAAEA;AAHK,OAAjB;AAKD;;AAEDG,IAAAA,KAAK;AACN,GAVD;;AAYA,OAAKc,GAAL,GAAYX,GAAD,IAAS;AAClB,QAAIL,OAAO,CAACa,GAAR,CAAYR,GAAZ,CAAJ,EAAsB;AACpB,aAAOL,OAAO,CAACgB,GAAR,CAAYX,GAAZ,EAAiBO,KAAxB;AACD,KAFD,MAEO;AACL,YAAM,IAAIK,KAAJ,CAAU,oBAAV,CAAN;AACD;AACF,GAND;;AAQA,OAAKJ,GAAL,GAAYR,GAAD,IAAS;AAClB,WAAOL,OAAO,CAACa,GAAR,CAAYR,GAAZ,CAAP;AACD,GAFD;AAGD;;AAED,SAASG,cAAT,CAAyBU,QAAzB,EAAmC;AACjC,QAAMC,WAAW,GAAG,IAAIJ,IAAJ,EAApB;AACA,QAAMK,CAAC,GAAGD,WAAW,CAACE,OAAZ,KAAwBH,QAAQ,CAACG,OAAT,EAAlC;AAEA,SAAOC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,IAAf,CAAP;AACD","sourcesContent":["'use strict'\n\nconst throttle = require('lodash.throttle')\nexports = module.exports = TimeCache\n\nfunction TimeCache (options) {\n  if (!(this instanceof TimeCache)) {\n    return new TimeCache(options)\n  }\n\n  options = options || {}\n\n  const validity = options.validity || 30 // seconds\n\n  const entries = new Map()\n\n  const sweep = throttle(() => {\n    entries.forEach((entry, key) => {\n      const v = entry.validity || validity\n      const delta = getTimeElapsed(entry.timestamp)\n      if (delta > v) {\n        entries.delete(key)\n      }\n    })\n  }, 200)\n\n  this.put = (key, value, validity) => {\n    if (!this.has(key)) {\n      entries.set(key, {\n        value: value,\n        timestamp: new Date(),\n        validity: validity\n      })\n    }\n\n    sweep()\n  }\n\n  this.get = (key) => {\n    if (entries.has(key)) {\n      return entries.get(key).value\n    } else {\n      throw new Error('key does not exist')\n    }\n  }\n\n  this.has = (key) => {\n    return entries.has(key)\n  }\n}\n\nfunction getTimeElapsed (prevTime) {\n  const currentTime = new Date()\n  const a = currentTime.getTime() - prevTime.getTime()\n\n  return Math.floor(a / 1000)\n}\n"]},"metadata":{},"sourceType":"script"}