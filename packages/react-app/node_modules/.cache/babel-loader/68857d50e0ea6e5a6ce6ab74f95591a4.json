{"ast":null,"code":"'use strict';\n\nvar multibase = require('multibase');\n\nvar ipns = require('ipns');\n\nmodule.exports = {\n  encodeBase32: function encodeBase32(buf) {\n    var m = multibase.encode('base32', buf).slice(1); // slice off multibase codec\n\n    return m.toString().toUpperCase(); // should be uppercase for interop with go\n  },\n  validator: {\n    func: function func(key, record, cb) {\n      return ipns.validator.validate(record, key, cb);\n    }\n  },\n  selector: function selector(k, records) {\n    return ipns.validator.select(records[0], records[1]);\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/ipns/routing/utils.js"],"names":["multibase","require","ipns","module","exports","encodeBase32","buf","m","encode","slice","toString","toUpperCase","validator","func","key","record","cb","validate","selector","k","records","select"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,YAAY,EAAE,sBAACC,GAAD,EAAS;AACrB,QAAMC,CAAC,GAAGP,SAAS,CAACQ,MAAV,CAAiB,QAAjB,EAA2BF,GAA3B,EAAgCG,KAAhC,CAAsC,CAAtC,CAAV,CADqB,CAC8B;;AAEnD,WAAOF,CAAC,CAACG,QAAF,GAAaC,WAAb,EAAP,CAHqB,CAGa;AACnC,GALc;AAMfC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,cAACC,GAAD,EAAMC,MAAN,EAAcC,EAAd;AAAA,aAAqBd,IAAI,CAACU,SAAL,CAAeK,QAAf,CAAwBF,MAAxB,EAAgCD,GAAhC,EAAqCE,EAArC,CAArB;AAAA;AADG,GANI;AASfE,EAAAA,QAAQ,EAAE,kBAACC,CAAD,EAAIC,OAAJ;AAAA,WAAgBlB,IAAI,CAACU,SAAL,CAAeS,MAAf,CAAsBD,OAAO,CAAC,CAAD,CAA7B,EAAkCA,OAAO,CAAC,CAAD,CAAzC,CAAhB;AAAA;AATK,CAAjB","sourcesContent":["'use strict'\n\nconst multibase = require('multibase')\nconst ipns = require('ipns')\n\nmodule.exports = {\n  encodeBase32: (buf) => {\n    const m = multibase.encode('base32', buf).slice(1) // slice off multibase codec\n\n    return m.toString().toUpperCase() // should be uppercase for interop with go\n  },\n  validator: {\n    func: (key, record, cb) => ipns.validator.validate(record, key, cb)\n  },\n  selector: (k, records) => ipns.validator.select(records[0], records[1])\n}\n"]},"metadata":{},"sourceType":"script"}