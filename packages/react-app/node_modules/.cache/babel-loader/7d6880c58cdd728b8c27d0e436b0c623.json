{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar importer = require('ipfs-unixfs-importer');\n\nvar normaliseAddInput = require('ipfs-core-utils/src/files/normalise-input');\n\nvar _require = require('./utils'),\n    parseChunkerString = _require.parseChunkerString;\n\nvar pipe = require('it-pipe');\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nmodule.exports = function (_ref4) {\n  var block = _ref4.block,\n      gcLock = _ref4.gcLock,\n      preload = _ref4.preload,\n      pin = _ref4.pin,\n      constructorOptions = _ref4.options;\n  var isShardingEnabled = constructorOptions.EXPERIMENTAL && constructorOptions.EXPERIMENTAL.sharding;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _add = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, options) {\n      var opts, total, prog, iterator, releaseLock;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              opts = _objectSpread(_objectSpread({\n                shardSplitThreshold: isShardingEnabled ? 1000 : Infinity\n              }, options), {}, {\n                strategy: 'balanced'\n              }, parseChunkerString(options.chunker)); // CID v0 is for multihashes encoded with sha2-256\n\n              if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n                opts.cidVersion = 1;\n              }\n\n              if (opts.trickle) {\n                opts.strategy = 'trickle';\n              }\n\n              delete opts.trickle;\n\n              if (opts.progress) {\n                total = 0;\n                prog = opts.progress;\n\n                opts.progress = function (bytes) {\n                  total += bytes;\n                  prog(total);\n                };\n              }\n\n              iterator = pipe(normaliseAddInput(source), function (source) {\n                return importer(source, block, _objectSpread(_objectSpread({}, opts), {}, {\n                  pin: false\n                }));\n              }, transformFile(opts), preloadFile(preload, opts), pinFile(pin, opts));\n              _context.next = 9;\n              return _awaitAsyncGenerator(gcLock.readLock());\n\n            case 9:\n              releaseLock = _context.sent;\n              _context.prev = 10;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iterator), _awaitAsyncGenerator), \"t0\", 12);\n\n            case 12:\n              _context.prev = 12;\n              releaseLock();\n              return _context.finish(12);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[10,, 12, 15]]);\n    }));\n\n    function add(_x, _x2) {\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  }());\n};\n\nfunction transformFile(opts) {\n  return /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(source) {\n      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, file, cid, path;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context2.prev = 2;\n              _iterator = _asyncIterator(source);\n\n            case 4:\n              _context2.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 6:\n              _step = _context2.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context2.next = 10;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 10:\n              _value = _context2.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context2.next = 22;\n                break;\n              }\n\n              file = _value;\n              cid = file.cid;\n\n              if (opts.cidVersion === 1) {\n                cid = cid.toV1();\n              }\n\n              path = file.path ? file.path : cid.toString();\n\n              if (opts.wrapWithDirectory && !file.path) {\n                path = '';\n              }\n\n              _context2.next = 19;\n              return {\n                path: path,\n                cid: cid,\n                size: file.size,\n                mode: file.unixfs && file.unixfs.mode,\n                mtime: file.unixfs && file.unixfs.mtime\n              };\n\n            case 19:\n              _iteratorNormalCompletion = true;\n              _context2.next = 4;\n              break;\n\n            case 22:\n              _context2.next = 28;\n              break;\n\n            case 24:\n              _context2.prev = 24;\n              _context2.t0 = _context2[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context2.t0;\n\n            case 28:\n              _context2.prev = 28;\n              _context2.prev = 29;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context2.next = 33;\n                break;\n              }\n\n              _context2.next = 33;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 33:\n              _context2.prev = 33;\n\n              if (!_didIteratorError) {\n                _context2.next = 36;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 36:\n              return _context2.finish(33);\n\n            case 37:\n              return _context2.finish(28);\n\n            case 38:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 24, 28, 38], [29,, 33, 37]]);\n    }));\n\n    return function (_x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nfunction preloadFile(preload, opts) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(source) {\n      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, file, isRootFile, shouldPreload;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _context3.prev = 2;\n              _iterator2 = _asyncIterator(source);\n\n            case 4:\n              _context3.next = 6;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 6:\n              _step2 = _context3.sent;\n              _iteratorNormalCompletion2 = _step2.done;\n              _context3.next = 10;\n              return _awaitAsyncGenerator(_step2.value);\n\n            case 10:\n              _value2 = _context3.sent;\n\n              if (_iteratorNormalCompletion2) {\n                _context3.next = 21;\n                break;\n              }\n\n              file = _value2;\n              isRootFile = !file.path || opts.wrapWithDirectory ? file.path === '' : !file.path.includes('/');\n              shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false;\n\n              if (shouldPreload) {\n                preload(file.cid);\n              }\n\n              _context3.next = 18;\n              return file;\n\n            case 18:\n              _iteratorNormalCompletion2 = true;\n              _context3.next = 4;\n              break;\n\n            case 21:\n              _context3.next = 27;\n              break;\n\n            case 23:\n              _context3.prev = 23;\n              _context3.t0 = _context3[\"catch\"](2);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context3.t0;\n\n            case 27:\n              _context3.prev = 27;\n              _context3.prev = 28;\n\n              if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                _context3.next = 32;\n                break;\n              }\n\n              _context3.next = 32;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 32:\n              _context3.prev = 32;\n\n              if (!_didIteratorError2) {\n                _context3.next = 35;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 35:\n              return _context3.finish(32);\n\n            case 36:\n              return _context3.finish(27);\n\n            case 37:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 23, 27, 37], [28,, 32, 36]]);\n    }));\n\n    return function (_x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n\nfunction pinFile(pin, opts) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(source) {\n      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, file, isRootDir, shouldPin;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iteratorNormalCompletion3 = true;\n              _didIteratorError3 = false;\n              _context4.prev = 2;\n              _iterator3 = _asyncIterator(source);\n\n            case 4:\n              _context4.next = 6;\n              return _awaitAsyncGenerator(_iterator3.next());\n\n            case 6:\n              _step3 = _context4.sent;\n              _iteratorNormalCompletion3 = _step3.done;\n              _context4.next = 10;\n              return _awaitAsyncGenerator(_step3.value);\n\n            case 10:\n              _value3 = _context4.sent;\n\n              if (_iteratorNormalCompletion3) {\n                _context4.next = 23;\n                break;\n              }\n\n              file = _value3;\n              // Pin a file if it is the root dir of a recursive add or the single file\n              // of a direct add.\n              isRootDir = !file.path.includes('/');\n              shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash;\n\n              if (!shouldPin) {\n                _context4.next = 18;\n                break;\n              }\n\n              _context4.next = 18;\n              return _awaitAsyncGenerator(pin.add(file.cid, {\n                preload: false,\n                lock: false\n              }));\n\n            case 18:\n              _context4.next = 20;\n              return file;\n\n            case 20:\n              _iteratorNormalCompletion3 = true;\n              _context4.next = 4;\n              break;\n\n            case 23:\n              _context4.next = 29;\n              break;\n\n            case 25:\n              _context4.prev = 25;\n              _context4.t0 = _context4[\"catch\"](2);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context4.t0;\n\n            case 29:\n              _context4.prev = 29;\n              _context4.prev = 30;\n\n              if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {\n                _context4.next = 34;\n                break;\n              }\n\n              _context4.next = 34;\n              return _awaitAsyncGenerator(_iterator3.return());\n\n            case 34:\n              _context4.prev = 34;\n\n              if (!_didIteratorError3) {\n                _context4.next = 37;\n                break;\n              }\n\n              throw _iteratorError3;\n\n            case 37:\n              return _context4.finish(34);\n\n            case 38:\n              return _context4.finish(29);\n\n            case 39:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[2, 25, 29, 39], [30,, 34, 38]]);\n    }));\n\n    return function (_x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/add/index.js"],"names":["importer","require","normaliseAddInput","parseChunkerString","pipe","withTimeoutOption","module","exports","block","gcLock","preload","pin","constructorOptions","options","isShardingEnabled","EXPERIMENTAL","sharding","source","opts","shardSplitThreshold","Infinity","strategy","chunker","hashAlg","cidVersion","trickle","progress","total","prog","bytes","iterator","transformFile","preloadFile","pinFile","readLock","releaseLock","add","file","cid","toV1","path","toString","wrapWithDirectory","size","mode","unixfs","mtime","isRootFile","includes","shouldPreload","onlyHash","isRootDir","shouldPin","lock"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,2CAAD,CAAjC;;eAC+BA,OAAO,CAAC,SAAD,C;IAA9BE,kB,YAAAA,kB;;AACR,IAAMC,IAAI,GAAGH,OAAO,CAAC,SAAD,CAApB;;gBAC8BA,OAAO,CAAC,aAAD,C;IAA7BI,iB,aAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,iBAAkE;AAAA,MAA/DC,KAA+D,SAA/DA,KAA+D;AAAA,MAAxDC,MAAwD,SAAxDA,MAAwD;AAAA,MAAhDC,OAAgD,SAAhDA,OAAgD;AAAA,MAAvCC,GAAuC,SAAvCA,GAAuC;AAAA,MAAzBC,kBAAyB,SAAlCC,OAAkC;AACjF,MAAMC,iBAAiB,GAAGF,kBAAkB,CAACG,YAAnB,IAAmCH,kBAAkB,CAACG,YAAnB,CAAgCC,QAA7F;AAEA,SAAOX,iBAAiB;AAAA,0EAAC,iBAAsBY,MAAtB,EAA8BJ,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEMK,cAAAA,IAHiB;AAIrBC,gBAAAA,mBAAmB,EAAEL,iBAAiB,GAAG,IAAH,GAAUM;AAJ3B,iBAKlBP,OALkB;AAMrBQ,gBAAAA,QAAQ,EAAE;AANW,iBAOlBlB,kBAAkB,CAACU,OAAO,CAACS,OAAT,CAPA,GAUvB;;AACA,kBAAIJ,IAAI,CAACK,OAAL,IAAgBL,IAAI,CAACK,OAAL,KAAiB,UAAjC,IAA+CL,IAAI,CAACM,UAAL,KAAoB,CAAvE,EAA0E;AACxEN,gBAAAA,IAAI,CAACM,UAAL,GAAkB,CAAlB;AACD;;AAED,kBAAIN,IAAI,CAACO,OAAT,EAAkB;AAChBP,gBAAAA,IAAI,CAACG,QAAL,GAAgB,SAAhB;AACD;;AAED,qBAAOH,IAAI,CAACO,OAAZ;;AAEA,kBAAIP,IAAI,CAACQ,QAAT,EAAmB;AACbC,gBAAAA,KADa,GACL,CADK;AAEXC,gBAAAA,IAFW,GAEJV,IAAI,CAACQ,QAFD;;AAIjBR,gBAAAA,IAAI,CAACQ,QAAL,GAAgB,UAACG,KAAD,EAAW;AACzBF,kBAAAA,KAAK,IAAIE,KAAT;AACAD,kBAAAA,IAAI,CAACD,KAAD,CAAJ;AACD,iBAHD;AAID;;AAEKG,cAAAA,QA/BiB,GA+BN1B,IAAI,CACnBF,iBAAiB,CAACe,MAAD,CADE,EAEnB,UAAAA,MAAM;AAAA,uBAAIjB,QAAQ,CAACiB,MAAD,EAAST,KAAT,kCACbU,IADa;AAEhBP,kBAAAA,GAAG,EAAE;AAFW,mBAAZ;AAAA,eAFa,EAMnBoB,aAAa,CAACb,IAAD,CANM,EAOnBc,WAAW,CAACtB,OAAD,EAAUQ,IAAV,CAPQ,EAQnBe,OAAO,CAACtB,GAAD,EAAMO,IAAN,CARY,CA/BE;AAAA;AAAA,0CA0CGT,MAAM,CAACyB,QAAP,EA1CH;;AAAA;AA0CjBC,cAAAA,WA1CiB;AAAA;AA6CrB,mFAAQL,QAAR;;AA7CqB;AAAA;AA+CrBK,cAAAA,WAAW;AA/CU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAkBC,GAAlB;AAAA;AAAA;;AAAA,WAAkBA,GAAlB;AAAA,MAAxB;AAkDD,CArDD;;AAuDA,SAASL,aAAT,CAAwBb,IAAxB,EAA8B;AAC5B;AAAA,0EAAO,kBAAkBD,MAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCACoBA,MADpB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACYoB,cAAAA,IADZ;AAECC,cAAAA,GAFD,GAEOD,IAAI,CAACC,GAFZ;;AAIH,kBAAIpB,IAAI,CAACM,UAAL,KAAoB,CAAxB,EAA2B;AACzBc,gBAAAA,GAAG,GAAGA,GAAG,CAACC,IAAJ,EAAN;AACD;;AAEGC,cAAAA,IARD,GAQQH,IAAI,CAACG,IAAL,GAAYH,IAAI,CAACG,IAAjB,GAAwBF,GAAG,CAACG,QAAJ,EARhC;;AAUH,kBAAIvB,IAAI,CAACwB,iBAAL,IAA0B,CAACL,IAAI,CAACG,IAApC,EAA0C;AACxCA,gBAAAA,IAAI,GAAG,EAAP;AACD;;AAZE;AAcH,qBAAM;AACJA,gBAAAA,IAAI,EAAJA,IADI;AAEJF,gBAAAA,GAAG,EAAHA,GAFI;AAGJK,gBAAAA,IAAI,EAAEN,IAAI,CAACM,IAHP;AAIJC,gBAAAA,IAAI,EAAEP,IAAI,CAACQ,MAAL,IAAeR,IAAI,CAACQ,MAAL,CAAYD,IAJ7B;AAKJE,gBAAAA,KAAK,EAAET,IAAI,CAACQ,MAAL,IAAeR,IAAI,CAACQ,MAAL,CAAYC;AAL9B,eAAN;;AAdG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAuBD;;AAED,SAASd,WAAT,CAAsBtB,OAAtB,EAA+BQ,IAA/B,EAAqC;AACnC;AAAA,2EAAO,kBAAkBD,MAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACoBA,MADpB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACYoB,cAAAA,IADZ;AAEGU,cAAAA,UAFH,GAEgB,CAACV,IAAI,CAACG,IAAN,IAActB,IAAI,CAACwB,iBAAnB,GACfL,IAAI,CAACG,IAAL,KAAc,EADC,GAEf,CAACH,IAAI,CAACG,IAAL,CAAUQ,QAAV,CAAmB,GAAnB,CAJF;AAMGC,cAAAA,aANH,GAMmBF,UAAU,IAAI,CAAC7B,IAAI,CAACgC,QAApB,IAAgChC,IAAI,CAACR,OAAL,KAAiB,KANpE;;AAQH,kBAAIuC,aAAJ,EAAmB;AACjBvC,gBAAAA,OAAO,CAAC2B,IAAI,CAACC,GAAN,CAAP;AACD;;AAVE;AAYH,qBAAMD,IAAN;;AAZG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAeD;;AAED,SAASJ,OAAT,CAAkBtB,GAAlB,EAAuBO,IAAvB,EAA6B;AAC3B;AAAA,2EAAO,kBAAkBD,MAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACoBA,MADpB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACYoB,cAAAA,IADZ;AAEH;AACA;AACMc,cAAAA,SAJH,GAIe,CAACd,IAAI,CAACG,IAAL,CAAUQ,QAAV,CAAmB,GAAnB,CAJhB;AAKGI,cAAAA,SALH,GAKe,CAAClC,IAAI,CAACP,GAAL,IAAY,IAAZ,GAAmB,IAAnB,GAA0BO,IAAI,CAACP,GAAhC,KAAwCwC,SAAxC,IAAqD,CAACjC,IAAI,CAACgC,QAL1E;;AAAA,mBAOCE,SAPD;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAUKzC,GAAG,CAACyB,GAAJ,CAAQC,IAAI,CAACC,GAAb,EAAkB;AACtB5B,gBAAAA,OAAO,EAAE,KADa;AAEtB2C,gBAAAA,IAAI,EAAE;AAFgB,eAAlB,CAVL;;AAAA;AAAA;AAgBH,qBAAMhB,IAAN;;AAhBG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAmBD","sourcesContent":["'use strict'\n\nconst importer = require('ipfs-unixfs-importer')\nconst normaliseAddInput = require('ipfs-core-utils/src/files/normalise-input')\nconst { parseChunkerString } = require('./utils')\nconst pipe = require('it-pipe')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ block, gcLock, preload, pin, options: constructorOptions }) => {\n  const isShardingEnabled = constructorOptions.EXPERIMENTAL && constructorOptions.EXPERIMENTAL.sharding\n\n  return withTimeoutOption(async function * add (source, options) {\n    options = options || {}\n\n    const opts = {\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      ...options,\n      strategy: 'balanced',\n      ...parseChunkerString(options.chunker)\n    }\n\n    // CID v0 is for multihashes encoded with sha2-256\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle'\n    }\n\n    delete opts.trickle\n\n    if (opts.progress) {\n      let total = 0\n      const prog = opts.progress\n\n      opts.progress = (bytes) => {\n        total += bytes\n        prog(total)\n      }\n    }\n\n    const iterator = pipe(\n      normaliseAddInput(source),\n      source => importer(source, block, {\n        ...opts,\n        pin: false\n      }),\n      transformFile(opts),\n      preloadFile(preload, opts),\n      pinFile(pin, opts)\n    )\n\n    const releaseLock = await gcLock.readLock()\n\n    try {\n      yield * iterator\n    } finally {\n      releaseLock()\n    }\n  })\n}\n\nfunction transformFile (opts) {\n  return async function * (source) {\n    for await (const file of source) {\n      let cid = file.cid\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      let path = file.path ? file.path : cid.toString()\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = ''\n      }\n\n      yield {\n        path,\n        cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      }\n    }\n  }\n}\n\nfunction preloadFile (preload, opts) {\n  return async function * (source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory\n        ? file.path === ''\n        : !file.path.includes('/')\n\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false\n\n      if (shouldPreload) {\n        preload(file.cid)\n      }\n\n      yield file\n    }\n  }\n}\n\nfunction pinFile (pin, opts) {\n  return async function * (source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !file.path.includes('/')\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash\n\n      if (shouldPin) {\n        // Note: addAsyncIterator() has already taken a GC lock, so tell\n        // pin.add() not to take a (second) GC lock\n        await pin.add(file.cid, {\n          preload: false,\n          lock: false\n        })\n      }\n\n      yield file\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}