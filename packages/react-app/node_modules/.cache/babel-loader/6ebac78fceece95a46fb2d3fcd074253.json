{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst errcode = require('err-code');\n\nconst libp2pRecord = require('libp2p-record');\n\nconst {\n  MemoryDatastore\n} = require('interface-datastore');\n\nconst RoutingTable = require('./routing');\n\nconst utils = require('./utils');\n\nconst c = require('./constants');\n\nconst Network = require('./network');\n\nconst contentFetching = require('./content-fetching');\n\nconst contentRouting = require('./content-routing');\n\nconst peerRouting = require('./peer-routing');\n\nconst Message = require('./message');\n\nconst Providers = require('./providers');\n\nconst RandomWalk = require('./random-walk');\n\nconst QueryManager = require('./query-manager');\n\nconst Record = libp2pRecord.Record;\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\n\nclass KadDHT extends EventEmitter {\n  /**\n   * Random walk options\n   * @typedef {Object} randomWalkOptions\n   * @property {boolean} enabled discovery enabled (default: true)\n   * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n   * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n   * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n   * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n   */\n\n  /**\n   * Create a new KadDHT.\n   * @param {Object} props\n   * @param {Libp2p} [props.libp2p] the libp2p instance\n   * @param {Dialer} props.dialer libp2p dialer instance\n   * @param {PeerId} props.peerId peer's peerId\n   * @param {PeerStore} props.peerStore libp2p peerStore\n   * @param {Object} props.registrar libp2p registrar instance\n   * @param {function} props.registrar.handle\n   * @param {function} props.registrar.register\n   * @param {function} props.registrar.unregister\n   * @param {number} props.kBucketSize k-bucket size (default 20)\n   * @param {boolean} props.clientMode If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)\n   * @param {number} props.concurrency alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore datastore (default MemoryDatastore)\n   * @param {object} props.validators validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors selectors object with namespace as keys and function(key, records)\n   * @param {randomWalkOptions} options.randomWalk randomWalk options\n   */\n  constructor({\n    libp2p,\n    dialer,\n    peerId,\n    peerStore,\n    registrar,\n    datastore = new MemoryDatastore(),\n    kBucketSize = c.K,\n    clientMode = false,\n    concurrency = c.ALPHA,\n    validators = {},\n    selectors = {},\n    randomWalk = {}\n  }) {\n    super();\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer');\n    }\n    /**\n     * Local reference to the libp2p instance. May be undefined.\n     * @type {Libp2p}\n     */\n\n\n    this.libp2p = libp2p;\n    /**\n     * Local reference to the libp2p dialer instance\n     * @type {Dialer}\n     */\n\n    this.dialer = dialer;\n    /**\n     * Local peer-id\n     * @type {PeerId}\n     */\n\n    this.peerId = peerId;\n    /**\n     * Local PeerStore\n     * @type {PeerStore}\n     */\n\n    this.peerStore = peerStore;\n    /**\n     * Local peer info\n     * @type {Registrar}\n     */\n\n    this.registrar = registrar;\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n\n    this.kBucketSize = kBucketSize;\n    this._clientMode = clientMode;\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     * @type {number}\n     */\n\n    this.concurrency = concurrency;\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     * @type {number}\n     */\n\n    this.disjointPaths = Math.ceil(this.kBucketSize / 2);\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n\n    this.routingTable = new RoutingTable(this.peerId, this.kBucketSize);\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n\n    this.datastore = datastore;\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n\n    this.providers = new Providers(this.datastore, this.peerId);\n    this.validators = {\n      pk: libp2pRecord.validator.validators.pk,\n      ...validators\n    };\n    this.selectors = {\n      pk: libp2pRecord.selection.selectors.pk,\n      ...selectors\n    };\n    this.network = new Network(this);\n    this._log = utils.logger(this.peerId);\n    /**\n     * Random walk management\n     *\n     * @type {RandomWalk}\n     */\n\n    this.randomWalk = new RandomWalk(this, randomWalk);\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n\n    this._queryManager = new QueryManager();\n    this._running = false; // DHT components\n\n    this.contentFetching = contentFetching(this);\n    this.contentRouting = contentRouting(this);\n    this.peerRouting = peerRouting(this);\n  }\n  /**\n   * Is this DHT running.\n   * @type {bool}\n   */\n\n\n  get isStarted() {\n    return this._running;\n  }\n  /**\n   * Start listening to incoming connections.\n   * @returns {Promise<void>}\n   */\n\n\n  async start() {\n    this._running = true;\n    this.providers.start();\n\n    this._queryManager.start();\n\n    await this.network.start(); // Start random walk, it will not run if it's disabled\n\n    this.randomWalk.start();\n  }\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   * @returns {Promise<void>}\n   */\n\n\n  stop() {\n    this._running = false;\n    this.randomWalk.stop();\n    this.providers.stop();\n\n    this._queryManager.stop();\n\n    return this.network.stop();\n  }\n  /**\n   * Store the given key/value  pair in the DHT.\n   * @param {Buffer} key\n   * @param {Buffer} value\n   * @param {Object} [options] - put options\n   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n   * @returns {Promise<void>}\n   */\n\n\n  async put(key, value, options = {}) {\n    // eslint-disable-line require-await\n    return this.contentFetching.put(key, value, options);\n  }\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   * @param {Buffer} key\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Buffer>}\n   */\n\n\n  async get(key, options = {}) {\n    // eslint-disable-line require-await\n    return this.contentFetching.get(key, options);\n  }\n  /**\n   * Get the `n` values to the given key without sorting.\n   * @param {Buffer} key\n   * @param {number} nvals\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}\n   */\n\n\n  async getMany(key, nvals, options = {}) {\n    // eslint-disable-line require-await\n    return this.contentFetching.getMany(key, nvals, options);\n  } // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value.\n   * @param {CID} key\n   * @returns {Promise<void>}\n   */\n\n\n  async provide(key) {\n    // eslint-disable-line require-await\n    return this.contentRouting.provide(key);\n  }\n  /**\n   * Search the dht for up to `K` providers of the given CID.\n   * @param {CID} key\n   * @param {Object} options - findProviders options\n   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n   * @param {number} options.maxNumProviders - maximum number of providers to find\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n\n\n  async *findProviders(key, options = {}) {\n    for await (const peerData of this.contentRouting.findProviders(key, options)) {\n      yield peerData;\n    }\n  } // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID.\n   *\n   * @param {PeerId} id\n   * @param {Object} options - findPeer options\n   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n\n\n  async findPeer(id, options = {}) {\n    // eslint-disable-line require-await\n    return this.peerRouting.findPeer(id, options);\n  }\n  /**\n   * Kademlia 'node lookup' operation.\n   * @param {Buffer} key\n   * @param {Object} [options]\n   * @param {boolean} [options.shallow] shallow query (default: false)\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n\n\n  async *getClosestPeers(key, options = {\n    shallow: false\n  }) {\n    for await (const pId of this.peerRouting.getClosestPeers(key, options)) {\n      yield pId;\n    }\n  }\n  /**\n   * Get the public key for the given peer id.\n   * @param {PeerId} peer\n   * @returns {Promise<PubKey>}\n   */\n\n\n  async getPublicKey(peer) {\n    // eslint-disable-line require-await\n    return this.peerRouting.getPublicKey(peer);\n  } // ----------- Discovery -----------\n\n\n  _peerDiscovered(peerId, multiaddrs) {\n    this.emit('peer', {\n      id: peerId,\n      multiaddrs\n    });\n  } // ----------- Internals -----------\n\n  /**\n   * Returns the routing tables closest peers, for the key of\n   * the message.\n   *\n   * @param {Message} msg\n   * @returns {Promise<Array<{ id: PeerId, multiaddrs: Multiaddr[] }>>}\n   * @private\n   */\n\n\n  async _nearestPeersToQuery(msg) {\n    const key = await utils.convertBuffer(msg.key);\n    const ids = this.routingTable.closestPeers(key, this.kBucketSize);\n    return ids.map(p => {\n      const peer = this.peerStore.get(p);\n      return {\n        id: p,\n        multiaddrs: peer ? peer.addresses.map(address => address.multiaddr) : []\n      };\n    });\n  }\n  /**\n   * Get the nearest peers to the given query, but iff closer\n   * than self.\n   *\n   * @param {Message} msg\n   * @param {PeerId} peerId\n   * @returns {Promise<Array<{ id: PeerId, multiaddrs: Multiaddr[] }>>}\n   * @private\n   */\n\n\n  async _betterPeersToQuery(msg, peerId) {\n    this._log('betterPeersToQuery');\n\n    const closer = await this._nearestPeersToQuery(msg);\n    return closer.filter(closer => {\n      if (this._isSelf(closer.id)) {\n        // Should bail, not sure\n        this._log.error('trying to return self as closer');\n\n        return false;\n      }\n\n      return !closer.id.isEqual(peerId);\n    });\n  }\n  /**\n   * Try to fetch a given record by from the local datastore.\n   * Returns the record iff it is still valid, meaning\n   * - it was either authored by this node, or\n   * - it was received less than `MAX_RECORD_AGE` ago.\n   *\n   * @param {Buffer} key\n   * @returns {Promise<Record>}\n   * @private\n   */\n\n\n  async _checkLocalDatastore(key) {\n    this._log('checkLocalDatastore: %b', key);\n\n    const dsKey = utils.bufferToKey(key); // Fetch value from ds\n\n    let rawRecord;\n\n    try {\n      rawRecord = await this.datastore.get(dsKey);\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined;\n      }\n\n      throw err;\n    } // Create record from the returned bytes\n\n\n    const record = Record.deserialize(rawRecord);\n\n    if (!record) {\n      throw errcode('Invalid record', 'ERR_INVALID_RECORD');\n    } // Check validity: compare time received with max record age\n\n\n    if (record.timeReceived == null || utils.now() - record.timeReceived > c.MAX_RECORD_AGE) {\n      // If record is bad delete it and return\n      await this.datastore.delete(dsKey);\n      return undefined;\n    } // Record is valid\n\n\n    return record;\n  }\n  /**\n   * Add the peer to the routing table and update it in the peerStore.\n   * @param {PeerId} peerId\n   * @returns {Promise<void>}\n   * @private\n   */\n\n\n  async _add(peerId) {\n    await this.routingTable.add(peerId);\n  }\n  /**\n   * Verify a record without searching the DHT.\n   *\n   * @param {Record} record\n   * @returns {Promise<void>}\n   * @private\n   */\n\n\n  async _verifyRecordLocally(record) {\n    this._log('verifyRecordLocally');\n\n    await libp2pRecord.validator.verifyRecord(this.validators, record);\n  }\n  /**\n   * Is the given peer id our PeerId?\n   *\n   * @param {PeerId} other\n   * @returns {bool}\n   *\n   * @private\n   */\n\n\n  _isSelf(other) {\n    return other && this.peerId.id.equals(other.id);\n  }\n  /**\n   * Store the given key/value pair at the peer `target`.\n   *\n   * @param {Buffer} key\n   * @param {Buffer} rec - encoded record\n   * @param {PeerId} target\n   * @returns {Promise<void>}\n   *\n   * @private\n   */\n\n\n  async _putValueToPeer(key, rec, target) {\n    const msg = new Message(Message.TYPES.PUT_VALUE, key, 0);\n    msg.record = rec;\n    const resp = await this.network.sendRequest(target, msg);\n\n    if (!resp.record.value.equals(Record.deserialize(rec).value)) {\n      throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID');\n    }\n  }\n  /**\n   * Query a particular peer for the value for the given key.\n   * It will either return the value or a list of closer peers.\n   *\n   * Note: The peerStore is updated with new addresses found for the given peer.\n   *\n   * @param {PeerId} peer\n   * @param {Buffer} key\n   * @returns {Promise<{Record, Array<{ id: PeerId, multiaddrs: Multiaddr[] }}>}\n   * @private\n   */\n\n\n  async _getValueOrPeers(peer, key) {\n    const msg = await this._getValueSingle(peer, key);\n    const peers = msg.closerPeers;\n    const record = msg.record;\n\n    if (record) {\n      // We have a record\n      try {\n        await this._verifyRecordOnline(record);\n      } catch (err) {\n        const errMsg = 'invalid record received, discarded';\n\n        this._log(errMsg);\n\n        throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD');\n      }\n\n      return {\n        record,\n        peers\n      };\n    }\n\n    if (peers.length > 0) {\n      return {\n        peers\n      };\n    }\n\n    throw errcode(new Error('Not found'), 'ERR_NOT_FOUND');\n  }\n  /**\n   * Get a value via rpc call for the given parameters.\n   *\n   * @param {PeerId} peer\n   * @param {Buffer} key\n   * @returns {Promise<Message>}\n   * @private\n   */\n\n\n  async _getValueSingle(peer, key) {\n    // eslint-disable-line require-await\n    const msg = new Message(Message.TYPES.GET_VALUE, key, 0);\n    return this.network.sendRequest(peer, msg);\n  }\n  /**\n   * Verify a record, fetching missing public keys from the network.\n   * Calls back with an error if the record is invalid.\n   *\n   * @param {Record} record\n   * @returns {Promise<void>}\n   * @private\n   */\n\n\n  async _verifyRecordOnline(record) {\n    await libp2pRecord.validator.verifyRecord(this.validators, record);\n  }\n\n}\n\nmodule.exports = KadDHT;\nmodule.exports.multicodec = c.PROTOCOL_DHT;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/index.js"],"names":["EventEmitter","require","errcode","libp2pRecord","MemoryDatastore","RoutingTable","utils","c","Network","contentFetching","contentRouting","peerRouting","Message","Providers","RandomWalk","QueryManager","Record","KadDHT","constructor","libp2p","dialer","peerId","peerStore","registrar","datastore","kBucketSize","K","clientMode","concurrency","ALPHA","validators","selectors","randomWalk","Error","_clientMode","disjointPaths","Math","ceil","routingTable","providers","pk","validator","selection","network","_log","logger","_queryManager","_running","isStarted","start","stop","put","key","value","options","get","getMany","nvals","provide","findProviders","peerData","findPeer","id","getClosestPeers","shallow","pId","getPublicKey","peer","_peerDiscovered","multiaddrs","emit","_nearestPeersToQuery","msg","convertBuffer","ids","closestPeers","map","p","addresses","address","multiaddr","_betterPeersToQuery","closer","filter","_isSelf","error","isEqual","_checkLocalDatastore","dsKey","bufferToKey","rawRecord","err","code","undefined","record","deserialize","timeReceived","now","MAX_RECORD_AGE","delete","_add","add","_verifyRecordLocally","verifyRecord","other","equals","_putValueToPeer","rec","target","TYPES","PUT_VALUE","resp","sendRequest","_getValueOrPeers","_getValueSingle","peers","closerPeers","_verifyRecordOnline","errMsg","length","GET_VALUE","module","exports","multicodec","PROTOCOL_DHT"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst errcode = require('err-code')\n\nconst libp2pRecord = require('libp2p-record')\nconst { MemoryDatastore } = require('interface-datastore')\n\nconst RoutingTable = require('./routing')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Network = require('./network')\nconst contentFetching = require('./content-fetching')\nconst contentRouting = require('./content-routing')\nconst peerRouting = require('./peer-routing')\nconst Message = require('./message')\nconst Providers = require('./providers')\nconst RandomWalk = require('./random-walk')\nconst QueryManager = require('./query-manager')\n\nconst Record = libp2pRecord.Record\n\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nclass KadDHT extends EventEmitter {\n  /**\n   * Random walk options\n   * @typedef {Object} randomWalkOptions\n   * @property {boolean} enabled discovery enabled (default: true)\n   * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n   * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n   * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n   * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n   */\n\n  /**\n   * Create a new KadDHT.\n   * @param {Object} props\n   * @param {Libp2p} [props.libp2p] the libp2p instance\n   * @param {Dialer} props.dialer libp2p dialer instance\n   * @param {PeerId} props.peerId peer's peerId\n   * @param {PeerStore} props.peerStore libp2p peerStore\n   * @param {Object} props.registrar libp2p registrar instance\n   * @param {function} props.registrar.handle\n   * @param {function} props.registrar.register\n   * @param {function} props.registrar.unregister\n   * @param {number} props.kBucketSize k-bucket size (default 20)\n   * @param {boolean} props.clientMode If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)\n   * @param {number} props.concurrency alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore datastore (default MemoryDatastore)\n   * @param {object} props.validators validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors selectors object with namespace as keys and function(key, records)\n   * @param {randomWalkOptions} options.randomWalk randomWalk options\n   */\n  constructor ({\n    libp2p,\n    dialer,\n    peerId,\n    peerStore,\n    registrar,\n    datastore = new MemoryDatastore(),\n    kBucketSize = c.K,\n    clientMode = false,\n    concurrency = c.ALPHA,\n    validators = {},\n    selectors = {},\n    randomWalk = {}\n  }) {\n    super()\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer')\n    }\n\n    /**\n     * Local reference to the libp2p instance. May be undefined.\n     * @type {Libp2p}\n     */\n    this.libp2p = libp2p\n\n    /**\n     * Local reference to the libp2p dialer instance\n     * @type {Dialer}\n     */\n    this.dialer = dialer\n\n    /**\n     * Local peer-id\n     * @type {PeerId}\n     */\n    this.peerId = peerId\n\n    /**\n     * Local PeerStore\n     * @type {PeerStore}\n     */\n    this.peerStore = peerStore\n\n    /**\n     * Local peer info\n     * @type {Registrar}\n     */\n    this.registrar = registrar\n\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n    this.kBucketSize = kBucketSize\n\n    this._clientMode = clientMode\n\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     * @type {number}\n     */\n    this.concurrency = concurrency\n\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     * @type {number}\n     */\n    this.disjointPaths = Math.ceil(this.kBucketSize / 2)\n\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n    this.routingTable = new RoutingTable(this.peerId, this.kBucketSize)\n\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n    this.datastore = datastore\n\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n    this.providers = new Providers(this.datastore, this.peerId)\n\n    this.validators = {\n      pk: libp2pRecord.validator.validators.pk,\n      ...validators\n    }\n\n    this.selectors = {\n      pk: libp2pRecord.selection.selectors.pk,\n      ...selectors\n    }\n\n    this.network = new Network(this)\n\n    this._log = utils.logger(this.peerId)\n\n    /**\n     * Random walk management\n     *\n     * @type {RandomWalk}\n     */\n    this.randomWalk = new RandomWalk(this, randomWalk)\n\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n    this._queryManager = new QueryManager()\n\n    this._running = false\n\n    // DHT components\n    this.contentFetching = contentFetching(this)\n    this.contentRouting = contentRouting(this)\n    this.peerRouting = peerRouting(this)\n  }\n\n  /**\n   * Is this DHT running.\n   * @type {bool}\n   */\n  get isStarted () {\n    return this._running\n  }\n\n  /**\n   * Start listening to incoming connections.\n   * @returns {Promise<void>}\n   */\n  async start () {\n    this._running = true\n    this.providers.start()\n    this._queryManager.start()\n    await this.network.start()\n\n    // Start random walk, it will not run if it's disabled\n    this.randomWalk.start()\n  }\n\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   * @returns {Promise<void>}\n   */\n  stop () {\n    this._running = false\n    this.randomWalk.stop()\n    this.providers.stop()\n    this._queryManager.stop()\n    return this.network.stop()\n  }\n\n  /**\n   * Store the given key/value  pair in the DHT.\n   * @param {Buffer} key\n   * @param {Buffer} value\n   * @param {Object} [options] - put options\n   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n   * @returns {Promise<void>}\n   */\n  async put (key, value, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.put(key, value, options)\n  }\n\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   * @param {Buffer} key\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Buffer>}\n   */\n  async get (key, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.get(key, options)\n  }\n\n  /**\n   * Get the `n` values to the given key without sorting.\n   * @param {Buffer} key\n   * @param {number} nvals\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}\n   */\n  async getMany (key, nvals, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.getMany(key, nvals, options)\n  }\n\n  // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value.\n   * @param {CID} key\n   * @returns {Promise<void>}\n   */\n  async provide (key) { // eslint-disable-line require-await\n    return this.contentRouting.provide(key)\n  }\n\n  /**\n   * Search the dht for up to `K` providers of the given CID.\n   * @param {CID} key\n   * @param {Object} options - findProviders options\n   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n   * @param {number} options.maxNumProviders - maximum number of providers to find\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async * findProviders (key, options = {}) {\n    for await (const peerData of this.contentRouting.findProviders(key, options)) {\n      yield peerData\n    }\n  }\n\n  // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID.\n   *\n   * @param {PeerId} id\n   * @param {Object} options - findPeer options\n   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async findPeer (id, options = {}) { // eslint-disable-line require-await\n    return this.peerRouting.findPeer(id, options)\n  }\n\n  /**\n   * Kademlia 'node lookup' operation.\n   * @param {Buffer} key\n   * @param {Object} [options]\n   * @param {boolean} [options.shallow] shallow query (default: false)\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async * getClosestPeers (key, options = { shallow: false }) {\n    for await (const pId of this.peerRouting.getClosestPeers(key, options)) {\n      yield pId\n    }\n  }\n\n  /**\n   * Get the public key for the given peer id.\n   * @param {PeerId} peer\n   * @returns {Promise<PubKey>}\n   */\n  async getPublicKey (peer) { // eslint-disable-line require-await\n    return this.peerRouting.getPublicKey(peer)\n  }\n\n  // ----------- Discovery -----------\n\n  _peerDiscovered (peerId, multiaddrs) {\n    this.emit('peer', {\n      id: peerId,\n      multiaddrs\n    })\n  }\n\n  // ----------- Internals -----------\n\n  /**\n   * Returns the routing tables closest peers, for the key of\n   * the message.\n   *\n   * @param {Message} msg\n   * @returns {Promise<Array<{ id: PeerId, multiaddrs: Multiaddr[] }>>}\n   * @private\n   */\n  async _nearestPeersToQuery (msg) {\n    const key = await utils.convertBuffer(msg.key)\n    const ids = this.routingTable.closestPeers(key, this.kBucketSize)\n\n    return ids.map((p) => {\n      const peer = this.peerStore.get(p)\n\n      return {\n        id: p,\n        multiaddrs: peer ? peer.addresses.map((address) => address.multiaddr) : []\n      }\n    })\n  }\n\n  /**\n   * Get the nearest peers to the given query, but iff closer\n   * than self.\n   *\n   * @param {Message} msg\n   * @param {PeerId} peerId\n   * @returns {Promise<Array<{ id: PeerId, multiaddrs: Multiaddr[] }>>}\n   * @private\n   */\n  async _betterPeersToQuery (msg, peerId) {\n    this._log('betterPeersToQuery')\n    const closer = await this._nearestPeersToQuery(msg)\n\n    return closer.filter((closer) => {\n      if (this._isSelf(closer.id)) {\n        // Should bail, not sure\n        this._log.error('trying to return self as closer')\n        return false\n      }\n\n      return !closer.id.isEqual(peerId)\n    })\n  }\n\n  /**\n   * Try to fetch a given record by from the local datastore.\n   * Returns the record iff it is still valid, meaning\n   * - it was either authored by this node, or\n   * - it was received less than `MAX_RECORD_AGE` ago.\n   *\n   * @param {Buffer} key\n   * @returns {Promise<Record>}\n   * @private\n   */\n\n  async _checkLocalDatastore (key) {\n    this._log('checkLocalDatastore: %b', key)\n    const dsKey = utils.bufferToKey(key)\n\n    // Fetch value from ds\n    let rawRecord\n    try {\n      rawRecord = await this.datastore.get(dsKey)\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined\n      }\n      throw err\n    }\n\n    // Create record from the returned bytes\n    const record = Record.deserialize(rawRecord)\n\n    if (!record) {\n      throw errcode('Invalid record', 'ERR_INVALID_RECORD')\n    }\n\n    // Check validity: compare time received with max record age\n    if (record.timeReceived == null ||\n      utils.now() - record.timeReceived > c.MAX_RECORD_AGE) {\n      // If record is bad delete it and return\n      await this.datastore.delete(dsKey)\n      return undefined\n    }\n\n    // Record is valid\n    return record\n  }\n\n  /**\n   * Add the peer to the routing table and update it in the peerStore.\n   * @param {PeerId} peerId\n   * @returns {Promise<void>}\n   * @private\n   */\n  async _add (peerId) {\n    await this.routingTable.add(peerId)\n  }\n\n  /**\n   * Verify a record without searching the DHT.\n   *\n   * @param {Record} record\n   * @returns {Promise<void>}\n   * @private\n   */\n\n  async _verifyRecordLocally (record) {\n    this._log('verifyRecordLocally')\n\n    await libp2pRecord.validator.verifyRecord(this.validators, record)\n  }\n\n  /**\n   * Is the given peer id our PeerId?\n   *\n   * @param {PeerId} other\n   * @returns {bool}\n   *\n   * @private\n   */\n\n  _isSelf (other) {\n    return other && this.peerId.id.equals(other.id)\n  }\n\n  /**\n   * Store the given key/value pair at the peer `target`.\n   *\n   * @param {Buffer} key\n   * @param {Buffer} rec - encoded record\n   * @param {PeerId} target\n   * @returns {Promise<void>}\n   *\n   * @private\n   */\n\n  async _putValueToPeer (key, rec, target) {\n    const msg = new Message(Message.TYPES.PUT_VALUE, key, 0)\n    msg.record = rec\n\n    const resp = await this.network.sendRequest(target, msg)\n\n    if (!resp.record.value.equals(Record.deserialize(rec).value)) {\n      throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID')\n    }\n  }\n\n  /**\n   * Query a particular peer for the value for the given key.\n   * It will either return the value or a list of closer peers.\n   *\n   * Note: The peerStore is updated with new addresses found for the given peer.\n   *\n   * @param {PeerId} peer\n   * @param {Buffer} key\n   * @returns {Promise<{Record, Array<{ id: PeerId, multiaddrs: Multiaddr[] }}>}\n   * @private\n   */\n\n  async _getValueOrPeers (peer, key) {\n    const msg = await this._getValueSingle(peer, key)\n\n    const peers = msg.closerPeers\n    const record = msg.record\n\n    if (record) {\n      // We have a record\n      try {\n        await this._verifyRecordOnline(record)\n      } catch (err) {\n        const errMsg = 'invalid record received, discarded'\n        this._log(errMsg)\n        throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD')\n      }\n\n      return { record, peers }\n    }\n\n    if (peers.length > 0) {\n      return { peers }\n    }\n\n    throw errcode(new Error('Not found'), 'ERR_NOT_FOUND')\n  }\n\n  /**\n   * Get a value via rpc call for the given parameters.\n   *\n   * @param {PeerId} peer\n   * @param {Buffer} key\n   * @returns {Promise<Message>}\n   * @private\n   */\n\n  async _getValueSingle (peer, key) { // eslint-disable-line require-await\n    const msg = new Message(Message.TYPES.GET_VALUE, key, 0)\n    return this.network.sendRequest(peer, msg)\n  }\n\n  /**\n   * Verify a record, fetching missing public keys from the network.\n   * Calls back with an error if the record is invalid.\n   *\n   * @param {Record} record\n   * @returns {Promise<void>}\n   * @private\n   */\n\n  async _verifyRecordOnline (record) {\n    await libp2pRecord.validator.verifyRecord(this.validators, record)\n  }\n}\n\nmodule.exports = KadDHT\nmodule.exports.multicodec = c.PROTOCOL_DHT\n"]},"metadata":{},"sourceType":"script"}