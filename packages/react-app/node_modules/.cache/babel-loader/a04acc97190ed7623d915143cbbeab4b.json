{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar TLRU = require('../../utils/tlru');\n\nvar _require = require('p-queue'),\n    PQueue = _require.default;\n\nvar HTTP = require('ipfs-utils/src/http'); // Avoid sending multiple queries for the same hostname by caching results\n\n\nvar cache = new TLRU(1000); // TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\n\nvar ttl = 60 * 1000; // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nvar httpQueue = new PQueue({\n  concurrency: 4\n});\n\nvar ipfsPath = function ipfsPath(response) {\n  if (response.Path) return response.Path;\n  throw new Error(response.Message);\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(fqdn, opts) {\n    var resolveDnslink;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // eslint-disable-line require-await\n            resolveDnslink = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fqdn, opts) {\n                var searchParams, query, _response, response;\n\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        opts = opts || {};\n                        searchParams = new URLSearchParams(opts);\n                        searchParams.set('arg', fqdn); // try cache first\n\n                        query = searchParams.toString();\n\n                        if (!(!opts.nocache && cache.has(query))) {\n                          _context2.next = 7;\n                          break;\n                        }\n\n                        _response = cache.get(query);\n                        return _context2.abrupt(\"return\", ipfsPath(_response));\n\n                      case 7:\n                        _context2.next = 9;\n                        return httpQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                          var res, query, json;\n                          return _regeneratorRuntime.wrap(function _callee$(_context) {\n                            while (1) {\n                              switch (_context.prev = _context.next) {\n                                case 0:\n                                  _context.next = 2;\n                                  return HTTP.get('https://ipfs.io/api/v0/dns', {\n                                    searchParams: searchParams\n                                  });\n\n                                case 2:\n                                  res = _context.sent;\n                                  query = new URL(res.url).search.slice(1);\n                                  _context.next = 6;\n                                  return res.json();\n\n                                case 6:\n                                  json = _context.sent;\n                                  cache.set(query, json, ttl);\n                                  return _context.abrupt(\"return\", json);\n\n                                case 9:\n                                case \"end\":\n                                  return _context.stop();\n                              }\n                            }\n                          }, _callee);\n                        })));\n\n                      case 9:\n                        response = _context2.sent;\n                        return _context2.abrupt(\"return\", ipfsPath(response));\n\n                      case 11:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function resolveDnslink(_x3, _x4) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            return _context3.abrupt(\"return\", resolveDnslink(fqdn, opts));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/runtime/dns-browser.js"],"names":["TLRU","require","PQueue","default","HTTP","cache","ttl","httpQueue","concurrency","ipfsPath","response","Path","Error","Message","module","exports","fqdn","opts","resolveDnslink","searchParams","URLSearchParams","set","query","toString","nocache","has","get","add","res","URL","url","search","slice","json"],"mappings":"AAAA;AACA;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;eAC4BA,OAAO,CAAC,SAAD,C;IAAlBC,M,YAATC,O;;AACR,IAAMC,IAAI,GAAGH,OAAO,CAAC,qBAAD,CAApB,C,CAEA;;;AACA,IAAMI,KAAK,GAAG,IAAIL,IAAJ,CAAS,IAAT,CAAd,C,CACA;AACA;AACA;;AACA,IAAMM,GAAG,GAAG,KAAK,IAAjB,C,CAEA;AACA;;AACA,IAAMC,SAAS,GAAG,IAAIL,MAAJ,CAAW;AAAEM,EAAAA,WAAW,EAAE;AAAf,CAAX,CAAlB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AAC7B,MAAIA,QAAQ,CAACC,IAAb,EAAmB,OAAOD,QAAQ,CAACC,IAAhB;AACnB,QAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,OAAnB,CAAN;AACD,CAHD;;AAKAC,MAAM,CAACC,OAAP;AAAA,sEAAiB,kBAAOC,IAAP,EAAaC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;AACjCC,YAAAA,cADS;AAAA,mFACQ,kBAAOF,IAAP,EAAaC,IAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBA,wBAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEME,wBAAAA,YAHe,GAGA,IAAIC,eAAJ,CAAoBH,IAApB,CAHA;AAIrBE,wBAAAA,YAAY,CAACE,GAAb,CAAiB,KAAjB,EAAwBL,IAAxB,EAJqB,CAMrB;;AACMM,wBAAAA,KAPe,GAOPH,YAAY,CAACI,QAAb,EAPO;;AAAA,8BAQjB,CAACN,IAAI,CAACO,OAAN,IAAiBnB,KAAK,CAACoB,GAAN,CAAUH,KAAV,CARA;AAAA;AAAA;AAAA;;AASbZ,wBAAAA,SATa,GASFL,KAAK,CAACqB,GAAN,CAAUJ,KAAV,CATE;AAAA,0DAUZb,QAAQ,CAACC,SAAD,CAVI;;AAAA;AAAA;AAAA,+BAcEH,SAAS,CAACoB,GAAV,wEAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAGjBvB,IAAI,CAACsB,GAAL,CAAS,4BAAT,EAAuC;AAAEP,oCAAAA,YAAY,EAAZA;AAAF,mCAAvC,CAHiB;;AAAA;AAG7BS,kCAAAA,GAH6B;AAI7BN,kCAAAA,KAJ6B,GAIrB,IAAIO,GAAJ,CAAQD,GAAG,CAACE,GAAZ,EAAiBC,MAAjB,CAAwBC,KAAxB,CAA8B,CAA9B,CAJqB;AAAA;AAAA,yCAKhBJ,GAAG,CAACK,IAAJ,EALgB;;AAAA;AAK7BA,kCAAAA,IAL6B;AAMnC5B,kCAAAA,KAAK,CAACgB,GAAN,CAAUC,KAAV,EAAiBW,IAAjB,EAAuB3B,GAAvB;AANmC,mEAQ5B2B,IAR4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAd,GAdF;;AAAA;AAcfvB,wBAAAA,QAde;AAAA,0DAwBdD,QAAQ,CAACC,QAAD,CAxBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADR;;AAAA,8BACTQ,cADS;AAAA;AAAA;AAAA;;AAAA,8CA4BRA,cAAc,CAACF,IAAD,EAAOC,IAAP,CA5BN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* eslint-env browser */\n'use strict'\n\nconst TLRU = require('../../utils/tlru')\nconst { default: PQueue } = require('p-queue')\nconst HTTP = require('ipfs-utils/src/http')\n\n// Avoid sending multiple queries for the same hostname by caching results\nconst cache = new TLRU(1000)\n// TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\nconst ttl = 60 * 1000\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new PQueue({ concurrency: 4 })\n\nconst ipfsPath = (response) => {\n  if (response.Path) return response.Path\n  throw new Error(response.Message)\n}\n\nmodule.exports = async (fqdn, opts) => { // eslint-disable-line require-await\n  const resolveDnslink = async (fqdn, opts) => {\n    opts = opts || {}\n\n    const searchParams = new URLSearchParams(opts)\n    searchParams.set('arg', fqdn)\n\n    // try cache first\n    const query = searchParams.toString()\n    if (!opts.nocache && cache.has(query)) {\n      const response = cache.get(query)\n      return ipfsPath(response)\n    }\n\n    // fallback to delegated DNS resolver\n    const response = await httpQueue.add(async () => {\n      // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n      // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n      const res = await HTTP.get('https://ipfs.io/api/v0/dns', { searchParams })\n      const query = new URL(res.url).search.slice(1)\n      const json = await res.json()\n      cache.set(query, json, ttl)\n\n      return json\n    })\n    return ipfsPath(response)\n  }\n\n  return resolveDnslink(fqdn, opts)\n}\n"]},"metadata":{},"sourceType":"script"}