{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar persist = require('../../utils/persist');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nfunction bufferImporter(_x, _x2, _x3, _x4) {\n  return _bufferImporter.apply(this, arguments);\n}\n\nfunction _bufferImporter() {\n  _bufferImporter = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file, source, block, options) {\n    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _value;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context3.prev = 2;\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n              var buffer;\n              return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      buffer = _value;\n                      _context2.next = 3;\n                      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                        var unixfs, opts;\n                        return _regeneratorRuntime.wrap(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                options.progress(buffer.length);\n                                opts = _objectSpread({}, options);\n\n                                if (options.rawLeaves) {\n                                  opts.codec = 'raw';\n                                  opts.cidVersion = 1;\n                                } else {\n                                  unixfs = new UnixFS({\n                                    type: options.leafType,\n                                    data: buffer,\n                                    mtime: file.mtime,\n                                    mode: file.mode\n                                  });\n                                  buffer = new DAGNode(unixfs.marshal()).serialize();\n                                }\n\n                                _context.next = 5;\n                                return persist(buffer, block, opts);\n\n                              case 5:\n                                _context.t0 = _context.sent;\n                                _context.t1 = unixfs;\n                                _context.t2 = buffer.length;\n                                return _context.abrupt(\"return\", {\n                                  cid: _context.t0,\n                                  unixfs: _context.t1,\n                                  size: _context.t2\n                                });\n\n                              case 9:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _callee);\n                      }));\n\n                    case 3:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _loop);\n            });\n            _iterator = _asyncIterator(source);\n\n          case 5:\n            _context3.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            _step = _context3.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context3.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 11:\n            _value = _context3.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context3.next = 17;\n              break;\n            }\n\n            return _context3.delegateYield(_loop(), \"t0\", 14);\n\n          case 14:\n            _iteratorNormalCompletion = true;\n            _context3.next = 5;\n            break;\n\n          case 17:\n            _context3.next = 23;\n            break;\n\n          case 19:\n            _context3.prev = 19;\n            _context3.t1 = _context3[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context3.t1;\n\n          case 23:\n            _context3.prev = 23;\n            _context3.prev = 24;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context3.next = 28;\n              break;\n            }\n\n            _context3.next = 28;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 28:\n            _context3.prev = 28;\n\n            if (!_didIteratorError) {\n              _context3.next = 31;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 31:\n            return _context3.finish(28);\n\n          case 32:\n            return _context3.finish(23);\n\n          case 33:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2, null, [[2, 19, 23, 33], [24,, 28, 32]]);\n  }));\n  return _bufferImporter.apply(this, arguments);\n}\n\nmodule.exports = bufferImporter;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/dag-builder/file/buffer-importer.js"],"names":["UnixFS","require","persist","DAGNode","bufferImporter","file","source","block","options","buffer","progress","length","opts","rawLeaves","codec","cidVersion","unixfs","type","leafType","data","mtime","mode","marshal","serialize","cid","size","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;eAGIA,OAAO,CAAC,aAAD,C;IADTE,O,YAAAA,O;;SAGeC,c;;;;;+EAAjB,kBAAiCC,IAAjC,EAAuCC,MAAvC,EAA+CC,KAA/C,EAAsDC,OAAtD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACiBC,sBAAAA,MADjB;AAAA;AAEI,mGAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AACJD,gCAAAA,OAAO,CAACE,QAAR,CAAiBD,MAAM,CAACE,MAAxB;AAGMC,gCAAAA,IAJF,qBAKCJ,OALD;;AAQJ,oCAAIA,OAAO,CAACK,SAAZ,EAAuB;AACrBD,kCAAAA,IAAI,CAACE,KAAL,GAAa,KAAb;AACAF,kCAAAA,IAAI,CAACG,UAAL,GAAkB,CAAlB;AACD,iCAHD,MAGO;AACLC,kCAAAA,MAAM,GAAG,IAAIhB,MAAJ,CAAW;AAClBiB,oCAAAA,IAAI,EAAET,OAAO,CAACU,QADI;AAElBC,oCAAAA,IAAI,EAAEV,MAFY;AAGlBW,oCAAAA,KAAK,EAAEf,IAAI,CAACe,KAHM;AAIlBC,oCAAAA,IAAI,EAAEhB,IAAI,CAACgB;AAJO,mCAAX,CAAT;AAOAZ,kCAAAA,MAAM,GAAG,IAAIN,OAAJ,CAAYa,MAAM,CAACM,OAAP,EAAZ,EAA8BC,SAA9B,EAAT;AACD;;AApBG;AAAA,uCAuBSrB,OAAO,CAACO,MAAD,EAASF,KAAT,EAAgBK,IAAhB,CAvBhB;;AAAA;AAAA;AAAA,8CAwBFI,MAxBE;AAAA,8CAyBIP,MAAM,CAACE,MAzBX;AAAA;AAuBFa,kCAAAA,GAvBE;AAwBFR,kCAAAA,MAxBE;AAyBFS,kCAAAA,IAzBE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAN;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAC2BnB,MAD3B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiCAoB,MAAM,CAACC,OAAP,GAAiBvB,cAAjB","sourcesContent":["'use strict'\n\nconst UnixFS = require('ipfs-unixfs')\nconst persist = require('../../utils/persist')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\n\nasync function * bufferImporter (file, source, block, options) {\n  for await (let buffer of source) {\n    yield async () => {\n      options.progress(buffer.length)\n      let unixfs\n\n      const opts = {\n        ...options\n      }\n\n      if (options.rawLeaves) {\n        opts.codec = 'raw'\n        opts.cidVersion = 1\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer,\n          mtime: file.mtime,\n          mode: file.mode\n        })\n\n        buffer = new DAGNode(unixfs.marshal()).serialize()\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      }\n    }\n  }\n}\n\nmodule.exports = bufferImporter\n"]},"metadata":{},"sourceType":"script"}