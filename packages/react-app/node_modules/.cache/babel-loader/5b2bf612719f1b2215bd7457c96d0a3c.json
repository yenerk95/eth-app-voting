{"ast":null,"code":"'use strict';\n/**\n * A list of unique peers.\n */\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar PeerList = /*#__PURE__*/function () {\n  function PeerList() {\n    _classCallCheck(this, PeerList);\n\n    this.list = [];\n  }\n  /**\n   * Add a new peer. Returns `true` if it was a new one\n   *\n   * @param {PeerData} peerData\n   * @returns {bool}\n   */\n\n\n  _createClass(PeerList, [{\n    key: \"push\",\n    value: function push(peerData) {\n      if (!this.has(peerData.id)) {\n        this.list.push(peerData);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Check if this PeerData is already in here.\n     *\n     * @param {PeerId} peerId\n     * @returns {bool}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(peerId) {\n      var match = this.list.find(function (i) {\n        return i.id.isEqual(peerId);\n      });\n      return Boolean(match);\n    }\n    /**\n     * Get the list as an array.\n     *\n     * @returns {Array<PeerData>}\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.list.slice();\n    }\n    /**\n     * Remove the last element\n     *\n     * @returns {PeerData}\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      return this.list.pop();\n    }\n    /**\n     * The length of the list\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.list.length;\n    }\n  }]);\n\n  return PeerList;\n}();\n\nmodule.exports = PeerList;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/peer-list/index.js"],"names":["PeerList","list","peerData","has","id","push","peerId","match","find","i","isEqual","Boolean","slice","pop","length","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;IAGMA,Q;AACJ,sBAAe;AAAA;;AACb,SAAKC,IAAL,GAAY,EAAZ;AACD;AAED;;;;;;;;;;yBAMMC,Q,EAAU;AACd,UAAI,CAAC,KAAKC,GAAL,CAASD,QAAQ,CAACE,EAAlB,CAAL,EAA4B;AAC1B,aAAKH,IAAL,CAAUI,IAAV,CAAeH,QAAf;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;;wBAMKI,M,EAAQ;AACX,UAAMC,KAAK,GAAG,KAAKN,IAAL,CAAUO,IAAV,CAAe,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACL,EAAF,CAAKM,OAAL,CAAaJ,MAAb,CAAP;AAAA,OAAf,CAAd;AACA,aAAOK,OAAO,CAACJ,KAAD,CAAd;AACD;AAED;;;;;;;;8BAKW;AACT,aAAO,KAAKN,IAAL,CAAUW,KAAV,EAAP;AACD;AAED;;;;;;;;0BAKO;AACL,aAAO,KAAKX,IAAL,CAAUY,GAAV,EAAP;AACD;AAED;;;;;;;;wBAKc;AACZ,aAAO,KAAKZ,IAAL,CAAUa,MAAjB;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBhB,QAAjB","sourcesContent":["'use strict'\n\n/**\n * A list of unique peers.\n */\nclass PeerList {\n  constructor () {\n    this.list = []\n  }\n\n  /**\n   * Add a new peer. Returns `true` if it was a new one\n   *\n   * @param {PeerData} peerData\n   * @returns {bool}\n   */\n  push (peerData) {\n    if (!this.has(peerData.id)) {\n      this.list.push(peerData)\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Check if this PeerData is already in here.\n   *\n   * @param {PeerId} peerId\n   * @returns {bool}\n   */\n  has (peerId) {\n    const match = this.list.find((i) => i.id.isEqual(peerId))\n    return Boolean(match)\n  }\n\n  /**\n   * Get the list as an array.\n   *\n   * @returns {Array<PeerData>}\n   */\n  toArray () {\n    return this.list.slice()\n  }\n\n  /**\n   * Remove the last element\n   *\n   * @returns {PeerData}\n   */\n  pop () {\n    return this.list.pop()\n  }\n\n  /**\n   * The length of the list\n   *\n   * @type {number}\n   */\n  get length () {\n    return this.list.length\n  }\n}\n\nmodule.exports = PeerList\n"]},"metadata":{},"sourceType":"script"}