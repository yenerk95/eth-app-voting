{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar errors = require('./errors');\n\nvar debug = require('debug');\n\nvar log = debug('repo:lock');\nvar lockFile = 'repo.lock';\nvar LOCKS = {};\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<Object>}\n */\n\nexports.lock = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dir) {\n    var file, closer;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // eslint-disable-line require-await\n            file = dir + '/' + lockFile;\n            log('locking %s', file);\n\n            if (!(LOCKS[file] === true)) {\n              _context2.next = 4;\n              break;\n            }\n\n            throw new errors.LockExistsError(\"Lock already being held for file: \".concat(file));\n\n          case 4:\n            LOCKS[file] = true;\n            closer = {\n              close: function close() {\n                return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          // eslint-disable-line require-await\n                          if (LOCKS[file]) {\n                            delete LOCKS[file];\n                          }\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))();\n              }\n            };\n            return _context2.abrupt(\"return\", closer);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {bool}\n */\n\n\nexports.locked = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dir) {\n    var file;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // eslint-disable-line require-await\n            file = dir + '/' + lockFile;\n            log(\"checking lock: \".concat(file));\n            return _context3.abrupt(\"return\", Boolean(LOCKS[file]));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo/src/lock-memory.js"],"names":["errors","require","debug","log","lockFile","LOCKS","exports","lock","dir","file","LockExistsError","closer","close","locked","Boolean"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAME,GAAG,GAAGD,KAAK,CAAC,WAAD,CAAjB;AAEA,IAAME,QAAQ,GAAG,WAAjB;AAEA,IAAMC,KAAK,GAAG,EAAd;AAEA;;;;;;;AAMAC,OAAO,CAACC,IAAR;AAAA,sEAAe,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiB;AACxBC,YAAAA,IADO,GACAD,GAAG,GAAG,GAAN,GAAYJ,QADZ;AAEbD,YAAAA,GAAG,CAAC,YAAD,EAAeM,IAAf,CAAH;;AAFa,kBAITJ,KAAK,CAACI,IAAD,CAAL,KAAgB,IAJP;AAAA;AAAA;AAAA;;AAAA,kBAKL,IAAIT,MAAM,CAACU,eAAX,6CAAgED,IAAhE,EALK;;AAAA;AAQbJ,YAAAA,KAAK,CAACI,IAAD,CAAL,GAAc,IAAd;AACME,YAAAA,MATO,GASE;AACPC,cAAAA,KADO,mBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAE;AACf,8BAAIP,KAAK,CAACI,IAAD,CAAT,EAAiB;AACf,mCAAOJ,KAAK,CAACI,IAAD,CAAZ;AACD;;AAHY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAId;AALY,aATF;AAAA,8CAgBNE,MAhBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA;AAmBA;;;;;;;;AAMAL,OAAO,CAACO,MAAR;AAAA,uEAAiB,kBAAOL,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiB;AAC1BC,YAAAA,IADS,GACFD,GAAG,GAAG,GAAN,GAAYJ,QADV;AAEfD,YAAAA,GAAG,0BAAmBM,IAAnB,EAAH;AAFe,8CAIRK,OAAO,CAACT,KAAK,CAACI,IAAD,CAAN,CAJC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst errors = require('./errors')\nconst debug = require('debug')\n\nconst log = debug('repo:lock')\n\nconst lockFile = 'repo.lock'\n\nconst LOCKS = {}\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<Object>}\n */\nexports.lock = async (dir) => { // eslint-disable-line require-await\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n\n  if (LOCKS[file] === true) {\n    throw new errors.LockExistsError(`Lock already being held for file: ${file}`)\n  }\n\n  LOCKS[file] = true\n  const closer = {\n    async close () { // eslint-disable-line require-await\n      if (LOCKS[file]) {\n        delete LOCKS[file]\n      }\n    }\n  }\n  return closer\n}\n\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {bool}\n */\nexports.locked = async (dir) => { // eslint-disable-line require-await\n  const file = dir + '/' + lockFile\n  log(`checking lock: ${file}`)\n\n  return Boolean(LOCKS[file])\n}\n"]},"metadata":{},"sourceType":"script"}