{"ast":null,"code":"const BufferList = require('bl/BufferList');\n\nmodule.exports = source => {\n  const reader = async function* () {\n    let bytes = yield; // Allows us to receive 8 when reader.next(8) is called\n\n    let bl = new BufferList();\n\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk);\n        bl = new BufferList();\n        continue;\n      }\n\n      bl.append(chunk);\n\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes);\n        bl.consume(bytes);\n        bytes = yield data; // If we no longer want a specific byte length, we yield the rest now\n\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl;\n            bl = new BufferList();\n          }\n\n          break; // bytes is null and/or no more buffer to yield\n        }\n      }\n    } // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n\n\n    if (bytes) {\n      throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), {\n        code: 'ERR_UNDER_READ',\n        buffer: bl\n      });\n    }\n  }();\n\n  reader.next();\n  return reader;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-reader/index.js"],"names":["BufferList","require","module","exports","source","reader","bytes","bl","chunk","append","length","data","shallowSlice","consume","Object","assign","Error","code","buffer","next"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;AACzB,QAAMC,MAAM,GAAI,mBAAoB;AAClC,QAAIC,KAAK,GAAG,KAAZ,CADkC,CAChB;;AAClB,QAAIC,EAAE,GAAG,IAAIP,UAAJ,EAAT;;AAEA,eAAW,MAAMQ,KAAjB,IAA0BJ,MAA1B,EAAkC;AAChC,UAAI,CAACE,KAAL,EAAY;AACVA,QAAAA,KAAK,GAAG,MAAMC,EAAE,CAACE,MAAH,CAAUD,KAAV,CAAd;AACAD,QAAAA,EAAE,GAAG,IAAIP,UAAJ,EAAL;AACA;AACD;;AAEDO,MAAAA,EAAE,CAACE,MAAH,CAAUD,KAAV;;AAEA,aAAOD,EAAE,CAACG,MAAH,IAAaJ,KAApB,EAA2B;AACzB,cAAMK,IAAI,GAAGJ,EAAE,CAACK,YAAH,CAAgB,CAAhB,EAAmBN,KAAnB,CAAb;AACAC,QAAAA,EAAE,CAACM,OAAH,CAAWP,KAAX;AACAA,QAAAA,KAAK,GAAG,MAAMK,IAAd,CAHyB,CAKzB;;AACA,YAAI,CAACL,KAAL,EAAY;AACV,cAAIC,EAAE,CAACG,MAAP,EAAe;AACbJ,YAAAA,KAAK,GAAG,MAAMC,EAAd;AACAA,YAAAA,EAAE,GAAG,IAAIP,UAAJ,EAAL;AACD;;AACD,gBALU,CAKJ;AACP;AACF;AACF,KA3BiC,CA6BlC;AACA;;;AACA,QAAIM,KAAJ,EAAW;AACT,YAAMQ,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,CAAW,uBAAsBV,KAAM,yBAAvC,CADI,EAEJ;AAAEW,QAAAA,IAAI,EAAE,gBAAR;AAA0BC,QAAAA,MAAM,EAAEX;AAAlC,OAFI,CAAN;AAID;AACF,GArCc,EAAf;;AAuCAF,EAAAA,MAAM,CAACc,IAAP;AACA,SAAOd,MAAP;AACD,CA1CD","sourcesContent":["const BufferList = require('bl/BufferList')\n\nmodule.exports = source => {\n  const reader = (async function * () {\n    let bytes = yield // Allows us to receive 8 when reader.next(8) is called\n    let bl = new BufferList()\n\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk)\n        bl = new BufferList()\n        continue\n      }\n\n      bl.append(chunk)\n\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes)\n        bl.consume(bytes)\n        bytes = yield data\n\n        // If we no longer want a specific byte length, we yield the rest now\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl\n            bl = new BufferList()\n          }\n          break // bytes is null and/or no more buffer to yield\n        }\n      }\n    }\n\n    // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n    if (bytes) {\n      throw Object.assign(\n        new Error(`stream ended before ${bytes} bytes became available`),\n        { code: 'ERR_UNDER_READ', buffer: bl }\n      )\n    }\n  })()\n\n  reader.next()\n  return reader\n}\n"]},"metadata":{},"sourceType":"script"}