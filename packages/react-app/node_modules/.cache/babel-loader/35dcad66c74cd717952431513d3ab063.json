{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar parallelBatch = require('it-parallel-batch');\n\nvar mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nvar defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  codec: 'dag-pb',\n  hashAlg: 'sha2-256',\n  leafType: 'file',\n  // 'raw'\n  cidVersion: 0,\n  progress: function progress() {\n    return function () {};\n  },\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763653,\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  pin: false,\n  recursive: false,\n  hidden: false,\n  preload: false,\n  chunkValidator: null,\n  importBuffer: null\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, block) {\n    var options,\n        opts,\n        dagBuilder,\n        treeBuilder,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _value,\n        entry,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            opts = mergeOptions(defaultOptions, options);\n\n            if (options.cidVersion > 0 && options.rawLeaves === undefined) {\n              // if the cid version is 1 or above, use raw leaves as this is\n              // what go does.\n              opts.rawLeaves = true;\n            }\n\n            if (options.hashAlg !== undefined && options.rawLeaves === undefined) {\n              // if a non-default hash alg has been specified, use raw leaves as this is\n              // what go does.\n              opts.rawLeaves = true;\n            } // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves\n\n\n            if (options.strategy === 'trickle') {\n              opts.leafType = 'raw';\n              opts.reduceSingleLeafToSelf = false;\n            }\n\n            if (options.format) {\n              opts.codec = options.format;\n            }\n\n            if (typeof options.dagBuilder === 'function') {\n              dagBuilder = options.dagBuilder;\n            } else {\n              dagBuilder = require('./dag-builder');\n            }\n\n            if (typeof options.treeBuilder === 'function') {\n              treeBuilder = options.treeBuilder;\n            } else {\n              treeBuilder = require('./tree-builder');\n            }\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 10;\n            _iterator = _asyncIterator(treeBuilder(parallelBatch(dagBuilder(source, block, opts), opts.fileImportConcurrency), block, opts));\n\n          case 12:\n            _context.next = 14;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 14:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 18;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 18:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 26;\n              break;\n            }\n\n            entry = _value;\n            _context.next = 23;\n            return {\n              cid: entry.cid,\n              path: entry.path,\n              unixfs: entry.unixfs,\n              size: entry.size\n            };\n\n          case 23:\n            _iteratorNormalCompletion = true;\n            _context.next = 12;\n            break;\n\n          case 26:\n            _context.next = 32;\n            break;\n\n          case 28:\n            _context.prev = 28;\n            _context.t0 = _context[\"catch\"](10);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 32:\n            _context.prev = 32;\n            _context.prev = 33;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 37;\n              break;\n            }\n\n            _context.next = 37;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 37:\n            _context.prev = 37;\n\n            if (!_didIteratorError) {\n              _context.next = 40;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 40:\n            return _context.finish(37);\n\n          case 41:\n            return _context.finish(32);\n\n          case 42:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[10, 28, 32, 42], [33,, 37, 41]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/index.js"],"names":["parallelBatch","require","mergeOptions","bind","ignoreUndefined","defaultOptions","chunker","strategy","rawLeaves","onlyHash","reduceSingleLeafToSelf","codec","hashAlg","leafType","cidVersion","progress","shardSplitThreshold","fileImportConcurrency","blockWriteConcurrency","minChunkSize","maxChunkSize","avgChunkSize","window","polynomial","maxChildrenPerNode","layerRepeat","wrapWithDirectory","pin","recursive","hidden","preload","chunkValidator","importBuffer","module","exports","source","block","options","opts","undefined","format","dagBuilder","treeBuilder","entry","cid","path","unixfs","size"],"mappings":"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","sourcesContent":["'use strict'\n\nconst parallelBatch = require('it-parallel-batch')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\n\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced', // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  codec: 'dag-pb',\n  hashAlg: 'sha2-256',\n  leafType: 'file', // 'raw'\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763653, // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  pin: false,\n  recursive: false,\n  hidden: false,\n  preload: false,\n  chunkValidator: null,\n  importBuffer: null\n}\n\nmodule.exports = async function * (source, block, options = {}) {\n  const opts = mergeOptions(defaultOptions, options)\n\n  if (options.cidVersion > 0 && options.rawLeaves === undefined) {\n    // if the cid version is 1 or above, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true\n  }\n\n  if (options.hashAlg !== undefined && options.rawLeaves === undefined) {\n    // if a non-default hash alg has been specified, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true\n  }\n\n  // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves\n  if (options.strategy === 'trickle') {\n    opts.leafType = 'raw'\n    opts.reduceSingleLeafToSelf = false\n  }\n\n  if (options.format) {\n    opts.codec = options.format\n  }\n\n  let dagBuilder\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder\n  } else {\n    dagBuilder = require('./dag-builder')\n  }\n\n  let treeBuilder\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder\n  } else {\n    treeBuilder = require('./tree-builder')\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(source, block, opts), opts.fileImportConcurrency), block, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}