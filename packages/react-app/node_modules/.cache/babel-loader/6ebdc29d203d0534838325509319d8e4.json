{"ast":null,"code":"'use strict';\n\nconst {\n  Adapter,\n  utils\n} = require('interface-datastore');\n\nconst map = utils.map;\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\n\nclass KeyTransformDatastore extends Adapter {\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n\n  open() {\n    return this.child.open();\n  }\n\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n\n  query(q, options) {\n    return map(this.child.query(q, options), e => {\n      e.key = this.transform.invert(e.key);\n      return e;\n    });\n  }\n\n  close() {\n    return this.child.close();\n  }\n\n}\n\nmodule.exports = KeyTransformDatastore;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/datastore-core/src/keytransform.js"],"names":["Adapter","utils","require","map","KeyTransformDatastore","constructor","child","transform","open","put","key","val","options","convert","get","has","delete","batch","b","value","commit","query","q","e","invert","close","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAqBC,OAAO,CAAC,qBAAD,CAAlC;;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACE,GAAlB;AAEA;;;;;;AAKA,MAAMC,qBAAN,SAAoCJ,OAApC,CAA4C;AAC1CK,EAAAA,WAAW,CAAEC,KAAF,EAASC,SAAT,EAAoB;AAC7B;AAEA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAEDC,EAAAA,IAAI,GAAI;AACN,WAAO,KAAKF,KAAL,CAAWE,IAAX,EAAP;AACD;;AAEDC,EAAAA,GAAG,CAAEC,GAAF,EAAOC,GAAP,EAAYC,OAAZ,EAAqB;AACtB,WAAO,KAAKN,KAAL,CAAWG,GAAX,CAAe,KAAKF,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAf,EAA4CC,GAA5C,EAAiDC,OAAjD,CAAP;AACD;;AAEDE,EAAAA,GAAG,CAAEJ,GAAF,EAAOE,OAAP,EAAgB;AACjB,WAAO,KAAKN,KAAL,CAAWQ,GAAX,CAAe,KAAKP,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAf,EAA4CE,OAA5C,CAAP;AACD;;AAEDG,EAAAA,GAAG,CAAEL,GAAF,EAAOE,OAAP,EAAgB;AACjB,WAAO,KAAKN,KAAL,CAAWS,GAAX,CAAe,KAAKR,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAf,EAA4CE,OAA5C,CAAP;AACD;;AAEDI,EAAAA,MAAM,CAAEN,GAAF,EAAOE,OAAP,EAAgB;AACpB,WAAO,KAAKN,KAAL,CAAWU,MAAX,CAAkB,KAAKT,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAlB,EAA+CE,OAA/C,CAAP;AACD;;AAEDK,EAAAA,KAAK,GAAI;AACP,UAAMC,CAAC,GAAG,KAAKZ,KAAL,CAAWW,KAAX,EAAV;AACA,WAAO;AACLR,MAAAA,GAAG,EAAE,CAACC,GAAD,EAAMS,KAAN,KAAgB;AACnBD,QAAAA,CAAC,CAACT,GAAF,CAAM,KAAKF,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAN,EAAmCS,KAAnC;AACD,OAHI;AAILH,MAAAA,MAAM,EAAGN,GAAD,IAAS;AACfQ,QAAAA,CAAC,CAACF,MAAF,CAAS,KAAKT,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAT;AACD,OANI;AAOLU,MAAAA,MAAM,EAAGR,OAAD,IAAa;AACnB,eAAOM,CAAC,CAACE,MAAF,CAASR,OAAT,CAAP;AACD;AATI,KAAP;AAWD;;AAEDS,EAAAA,KAAK,CAAEC,CAAF,EAAKV,OAAL,EAAc;AACjB,WAAOT,GAAG,CAAC,KAAKG,KAAL,CAAWe,KAAX,CAAiBC,CAAjB,EAAoBV,OAApB,CAAD,EAA+BW,CAAC,IAAI;AAC5CA,MAAAA,CAAC,CAACb,GAAF,GAAQ,KAAKH,SAAL,CAAeiB,MAAf,CAAsBD,CAAC,CAACb,GAAxB,CAAR;AACA,aAAOa,CAAP;AACD,KAHS,CAAV;AAID;;AAEDE,EAAAA,KAAK,GAAI;AACP,WAAO,KAAKnB,KAAL,CAAWmB,KAAX,EAAP;AACD;;AApDyC;;AAuD5CC,MAAM,CAACC,OAAP,GAAiBvB,qBAAjB","sourcesContent":["'use strict'\n\nconst { Adapter, utils } = require('interface-datastore')\nconst map = utils.map\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\nclass KeyTransformDatastore extends Adapter {\n  constructor (child, transform) {\n    super()\n\n    this.child = child\n    this.transform = transform\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  put (key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options)\n  }\n\n  get (key, options) {\n    return this.child.get(this.transform.convert(key), options)\n  }\n\n  has (key, options) {\n    return this.child.has(this.transform.convert(key), options)\n  }\n\n  delete (key, options) {\n    return this.child.delete(this.transform.convert(key), options)\n  }\n\n  batch () {\n    const b = this.child.batch()\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value)\n      },\n      delete: (key) => {\n        b.delete(this.transform.convert(key))\n      },\n      commit: (options) => {\n        return b.commit(options)\n      }\n    }\n  }\n\n  query (q, options) {\n    return map(this.child.query(q, options), e => {\n      e.key = this.transform.invert(e.key)\n      return e\n    })\n  }\n\n  close () {\n    return this.child.close()\n  }\n}\n\nmodule.exports = KeyTransformDatastore\n"]},"metadata":{},"sourceType":"script"}