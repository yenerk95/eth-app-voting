{"ast":null,"code":"'use strict';\n\nconst mergeOptions = require('merge-options');\n\nconst Constants = require('./constants');\n\nconst {\n  FaultTolerance\n} = require('./transport-manager');\n\nconst DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: []\n  },\n  connectionManager: {\n    minPeers: 25\n  },\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  dialer: {\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT\n  },\n  metrics: {\n    enabled: false\n  },\n  peerStore: {\n    persistence: false,\n    threshold: 5\n  },\n  config: {\n    dht: {\n      enabled: false,\n      kBucketSize: 20,\n      randomWalk: {\n        enabled: false,\n        // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86\n        queriesPerPeriod: 1,\n        interval: 300e3,\n        timeout: 10e3\n      }\n    },\n    peerDiscovery: {\n      autoDial: true\n    },\n    pubsub: {\n      enabled: true,\n      emitSelf: true,\n      signMessages: true,\n      strictSigning: true\n    },\n    relay: {\n      enabled: true,\n      hop: {\n        enabled: false,\n        active: false\n      }\n    },\n    transport: {}\n  }\n};\n\nmodule.exports.validate = opts => {\n  opts = mergeOptions(DefaultConfig, opts);\n  if (opts.modules.transport.length < 1) throw new Error(\"'options.modules.transport' must contain at least 1 transport\");\n  return opts;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/config.js"],"names":["mergeOptions","require","Constants","FaultTolerance","DefaultConfig","addresses","listen","announce","noAnnounce","connectionManager","minPeers","transportManager","faultTolerance","FATAL_ALL","dialer","maxParallelDials","MAX_PARALLEL_DIALS","maxDialsPerPeer","MAX_PER_PEER_DIALS","dialTimeout","DIAL_TIMEOUT","metrics","enabled","peerStore","persistence","threshold","config","dht","kBucketSize","randomWalk","queriesPerPeriod","interval","timeout","peerDiscovery","autoDial","pubsub","emitSelf","signMessages","strictSigning","relay","hop","active","transport","module","exports","validate","opts","modules","length","Error"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,qBAAD,CAAlC;;AAEA,MAAMG,aAAa,GAAG;AACpBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE,EADC;AAETC,IAAAA,QAAQ,EAAE,EAFD;AAGTC,IAAAA,UAAU,EAAE;AAHH,GADS;AAMpBC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,QAAQ,EAAE;AADO,GANC;AASpBC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,cAAc,EAAET,cAAc,CAACU;AADf,GATE;AAYpBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,gBAAgB,EAAEb,SAAS,CAACc,kBADtB;AAENC,IAAAA,eAAe,EAAEf,SAAS,CAACgB,kBAFrB;AAGNC,IAAAA,WAAW,EAAEjB,SAAS,CAACkB;AAHjB,GAZY;AAiBpBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF,GAjBW;AAoBpBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,WAAW,EAAE,KADJ;AAETC,IAAAA,SAAS,EAAE;AAFF,GApBS;AAwBpBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,GAAG,EAAE;AACHL,MAAAA,OAAO,EAAE,KADN;AAEHM,MAAAA,WAAW,EAAE,EAFV;AAGHC,MAAAA,UAAU,EAAE;AACVP,QAAAA,OAAO,EAAE,KADC;AACM;AAChBQ,QAAAA,gBAAgB,EAAE,CAFR;AAGVC,QAAAA,QAAQ,EAAE,KAHA;AAIVC,QAAAA,OAAO,EAAE;AAJC;AAHT,KADC;AAWNC,IAAAA,aAAa,EAAE;AACbC,MAAAA,QAAQ,EAAE;AADG,KAXT;AAcNC,IAAAA,MAAM,EAAE;AACNb,MAAAA,OAAO,EAAE,IADH;AAENc,MAAAA,QAAQ,EAAE,IAFJ;AAGNC,MAAAA,YAAY,EAAE,IAHR;AAINC,MAAAA,aAAa,EAAE;AAJT,KAdF;AAoBNC,IAAAA,KAAK,EAAE;AACLjB,MAAAA,OAAO,EAAE,IADJ;AAELkB,MAAAA,GAAG,EAAE;AACHlB,QAAAA,OAAO,EAAE,KADN;AAEHmB,QAAAA,MAAM,EAAE;AAFL;AAFA,KApBD;AA2BNC,IAAAA,SAAS,EAAE;AA3BL;AAxBY,CAAtB;;AAuDAC,MAAM,CAACC,OAAP,CAAeC,QAAf,GAA2BC,IAAD,IAAU;AAClCA,EAAAA,IAAI,GAAG9C,YAAY,CAACI,aAAD,EAAgB0C,IAAhB,CAAnB;AAEA,MAAIA,IAAI,CAACC,OAAL,CAAaL,SAAb,CAAuBM,MAAvB,GAAgC,CAApC,EAAuC,MAAM,IAAIC,KAAJ,CAAU,+DAAV,CAAN;AAEvC,SAAOH,IAAP;AACD,CAND","sourcesContent":["'use strict'\n\nconst mergeOptions = require('merge-options')\nconst Constants = require('./constants')\n\nconst { FaultTolerance } = require('./transport-manager')\n\nconst DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: []\n  },\n  connectionManager: {\n    minPeers: 25\n  },\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  dialer: {\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT\n  },\n  metrics: {\n    enabled: false\n  },\n  peerStore: {\n    persistence: false,\n    threshold: 5\n  },\n  config: {\n    dht: {\n      enabled: false,\n      kBucketSize: 20,\n      randomWalk: {\n        enabled: false, // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86\n        queriesPerPeriod: 1,\n        interval: 300e3,\n        timeout: 10e3\n      }\n    },\n    peerDiscovery: {\n      autoDial: true\n    },\n    pubsub: {\n      enabled: true,\n      emitSelf: true,\n      signMessages: true,\n      strictSigning: true\n    },\n    relay: {\n      enabled: true,\n      hop: {\n        enabled: false,\n        active: false\n      }\n    },\n    transport: {}\n  }\n}\n\nmodule.exports.validate = (opts) => {\n  opts = mergeOptions(DefaultConfig, opts)\n\n  if (opts.modules.transport.length < 1) throw new Error(\"'options.modules.transport' must contain at least 1 transport\")\n\n  return opts\n}\n"]},"metadata":{},"sourceType":"script"}