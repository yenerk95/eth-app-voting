{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error');\n\nconst handshake = require('./handshake');\n\nconst State = require('./state');\n\nconst Wrap = require('it-pb-rpc');\n\nconst {\n  int32BEDecode,\n  int32BEEncode\n} = require('it-length-prefixed');\n\nasync function secure(localPeer, duplex, remotePeer) {\n  // returns duplex\n  if (!localPeer) {\n    throw new Error('no local private key provided');\n  }\n\n  if (!duplex) {\n    throw new Error('no connection for the handshake provided');\n  }\n\n  const state = new State(localPeer, remotePeer);\n  const wrapped = Wrap(duplex, {\n    lengthDecoder: int32BEDecode,\n    lengthEncoder: int32BEEncode\n  });\n  await handshake(state, wrapped);\n  return {\n    conn: state.secure,\n    remotePeer: state.id.remote\n  };\n}\n\nmodule.exports = {\n  protocol: '/secio/1.0.0',\n  // since SECIO is symetric, we only need one function here\n  secureInbound: secure,\n  secureOutbound: secure\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-secio/src/index.js"],"names":["debug","require","log","error","handshake","State","Wrap","int32BEDecode","int32BEEncode","secure","localPeer","duplex","remotePeer","Error","state","wrapped","lengthDecoder","lengthEncoder","conn","id","remote","module","exports","protocol","secureInbound","secureOutbound"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGF,KAAK,CAAC,cAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,oBAAD,CAAjB;;AAEA,MAAMI,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,WAAD,CAApB;;AACA,MAAM;AAAEM,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,IAAmCP,OAAO,CAAC,oBAAD,CAAhD;;AAEA,eAAeQ,MAAf,CAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CC,UAA1C,EAAsD;AAAE;AACtD,MAAI,CAACF,SAAL,EAAgB;AACd,UAAM,IAAIG,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,MAAI,CAACF,MAAL,EAAa;AACX,UAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,QAAMC,KAAK,GAAG,IAAIT,KAAJ,CAAUK,SAAV,EAAqBE,UAArB,CAAd;AACA,QAAMG,OAAO,GAAGT,IAAI,CAACK,MAAD,EAAS;AAAEK,IAAAA,aAAa,EAAET,aAAjB;AAAgCU,IAAAA,aAAa,EAAET;AAA/C,GAAT,CAApB;AACA,QAAMJ,SAAS,CAACU,KAAD,EAAQC,OAAR,CAAf;AAEA,SAAO;AACLG,IAAAA,IAAI,EAAEJ,KAAK,CAACL,MADP;AAELG,IAAAA,UAAU,EAAEE,KAAK,CAACK,EAAN,CAASC;AAFhB,GAAP;AAID;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,QAAQ,EAAE,cADK;AAGf;AACAC,EAAAA,aAAa,EAAEf,MAJA;AAKfgB,EAAAA,cAAc,EAAEhB;AALD,CAAjB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\nconst handshake = require('./handshake')\nconst State = require('./state')\nconst Wrap = require('it-pb-rpc')\nconst { int32BEDecode, int32BEEncode } = require('it-length-prefixed')\n\nasync function secure (localPeer, duplex, remotePeer) { // returns duplex\n  if (!localPeer) {\n    throw new Error('no local private key provided')\n  }\n  if (!duplex) {\n    throw new Error('no connection for the handshake provided')\n  }\n\n  const state = new State(localPeer, remotePeer)\n  const wrapped = Wrap(duplex, { lengthDecoder: int32BEDecode, lengthEncoder: int32BEEncode })\n  await handshake(state, wrapped)\n\n  return {\n    conn: state.secure,\n    remotePeer: state.id.remote\n  }\n}\n\nmodule.exports = {\n  protocol: '/secio/1.0.0',\n\n  // since SECIO is symetric, we only need one function here\n  secureInbound: secure,\n  secureOutbound: secure\n}\n"]},"metadata":{},"sourceType":"script"}