{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst multihashing = require('multihashing-async');\n\nconst mh = multihashing.multihash;\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst base32 = require('base32.js');\n\nconst distance = require('xor-distance');\n\nconst pMap = require('p-map');\n\nconst {\n  Record\n} = require('libp2p-record');\n\nconst PeerId = require('peer-id');\n\nconst errcode = require('err-code');\n\nconst {\n  Buffer\n} = require('buffer');\n/**\n * Creates a DHT ID by hashing a given buffer.\n *\n * @param {Buffer} buf\n * @returns {Promise<Buffer>}\n */\n\n\nexports.convertBuffer = buf => {\n  return multihashing.digest(buf, 'sha2-256');\n};\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Buffer>}\n */\n\n\nexports.convertPeerId = peer => {\n  return multihashing.digest(peer.id, 'sha2-256');\n};\n/**\n * Convert a buffer to their SHA2-256 hash.\n *\n * @param {Buffer} buf\n * @returns {Key}\n */\n\n\nexports.bufferToKey = buf => {\n  return new Key('/' + exports.encodeBase32(buf), false);\n};\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Buffer}\n */\n\n\nexports.keyForPublicKey = peer => {\n  return Buffer.concat([Buffer.from('/pk/'), peer.id]);\n};\n\nexports.isPublicKeyKey = key => {\n  return key.slice(0, 4).toString() === '/pk/';\n};\n\nexports.fromPublicKeyKey = key => {\n  return new PeerId(key.slice(4));\n};\n/**\n * Get the current time as timestamp.\n *\n * @returns {number}\n */\n\n\nexports.now = () => {\n  return Date.now();\n};\n/**\n * Encode a given buffer into a base32 string.\n * @param {Buffer} buf\n * @returns {string}\n */\n\n\nexports.encodeBase32 = buf => {\n  const enc = new base32.Encoder();\n  return enc.write(buf).finalize();\n};\n/**\n * Decode a given base32 string into a buffer.\n * @param {string} raw\n * @returns {Buffer}\n */\n\n\nexports.decodeBase32 = raw => {\n  const dec = new base32.Decoder();\n  return Buffer.from(dec.write(raw).finalize());\n};\n/**\n * Sort peers by distance to the given `target`.\n *\n * @param {Array<PeerId>} peers\n * @param {Buffer} target\n * @returns {Array<PeerId>}\n */\n\n\nexports.sortClosestPeers = async (peers, target) => {\n  const distances = await pMap(peers, async peer => {\n    const id = await exports.convertPeerId(peer);\n    return {\n      peer: peer,\n      distance: distance(id, target)\n    };\n  });\n  return distances.sort(exports.xorCompare).map(d => d.peer);\n};\n/**\n * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.\n *\n * @param {Object} a\n * @param {Object} b\n * @returns {number}\n */\n\n\nexports.xorCompare = (a, b) => {\n  return distance.compare(a.distance, b.distance);\n};\n/**\n * Computes how many results to collect on each disjoint path, rounding up.\n * This ensures that we look for at least one result per path.\n *\n * @param {number} resultsWanted\n * @param {number} numPaths - total number of paths\n * @returns {number}\n */\n\n\nexports.pathSize = (resultsWanted, numPaths) => {\n  return Math.ceil(resultsWanted / numPaths);\n};\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Buffer} key\n * @param {Buffer} value\n * @returns {Buffer}\n */\n\n\nexports.createPutRecord = (key, value) => {\n  const timeReceived = new Date();\n  const rec = new Record(key, value, timeReceived);\n  return rec.serialize();\n};\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n * @returns {debug}\n *\n * @private\n */\n\n\nexports.logger = (id, subsystem) => {\n  const name = ['libp2p', 'dht'];\n\n  if (subsystem) {\n    name.push(subsystem);\n  }\n\n  if (id) {\n    name.push(`${id.toB58String().slice(0, 8)}`);\n  } // Add a formatter for converting to a base58 string\n\n\n  debug.formatters.b = v => {\n    return mh.toB58String(v);\n  };\n\n  const logger = debug(name.join(':'));\n  logger.error = debug(name.concat(['error']).join(':'));\n  return logger;\n};\n\nexports.TimeoutError = class TimeoutError extends Error {\n  get code() {\n    return 'ETIMEDOUT';\n  }\n\n};\n/**\n * Creates an async function that calls the given `asyncFn` and Errors\n * if it does not resolve within `time` ms\n *\n * @param {Function} [asyncFn]\n * @param {Number} [time]\n * @returns {Function}\n *\n * @private\n */\n\nexports.withTimeout = (asyncFn, time) => {\n  return async (...args) => {\n    // eslint-disable-line require-await\n    return Promise.race([asyncFn(...args), new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(errcode(new Error('Async function did not complete before timeout'), 'ETIMEDOUT'));\n      }, time);\n    })]);\n  };\n};\n/**\n * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.\n * Returns a promise that resolves when all items of the `asyncIterator` have been passed\n * through `asyncFn`.\n *\n * @param {AsyncIterable} [asyncIterator]\n * @param {Function} [asyncFn]\n * @returns {Array}\n *\n * @private\n */\n\n\nexports.mapParallel = async function (asyncIterator, asyncFn) {\n  const tasks = [];\n\n  for await (const item of asyncIterator) {\n    tasks.push(asyncFn(item));\n  }\n\n  return Promise.all(tasks);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/utils.js"],"names":["debug","require","multihashing","mh","multihash","Key","base32","distance","pMap","Record","PeerId","errcode","Buffer","exports","convertBuffer","buf","digest","convertPeerId","peer","id","bufferToKey","encodeBase32","keyForPublicKey","concat","from","isPublicKeyKey","key","slice","toString","fromPublicKeyKey","now","Date","enc","Encoder","write","finalize","decodeBase32","raw","dec","Decoder","sortClosestPeers","peers","target","distances","sort","xorCompare","map","d","a","b","compare","pathSize","resultsWanted","numPaths","Math","ceil","createPutRecord","value","timeReceived","rec","serialize","logger","subsystem","name","push","toB58String","formatters","v","join","error","TimeoutError","Error","code","withTimeout","asyncFn","time","args","Promise","race","resolve","reject","setTimeout","mapParallel","asyncIterator","tasks","item","all"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst multihashing = require('multihashing-async')\nconst mh = multihashing.multihash\nconst { Key } = require('interface-datastore')\nconst base32 = require('base32.js')\nconst distance = require('xor-distance')\nconst pMap = require('p-map')\nconst { Record } = require('libp2p-record')\nconst PeerId = require('peer-id')\nconst errcode = require('err-code')\nconst { Buffer } = require('buffer')\n\n/**\n * Creates a DHT ID by hashing a given buffer.\n *\n * @param {Buffer} buf\n * @returns {Promise<Buffer>}\n */\nexports.convertBuffer = (buf) => {\n  return multihashing.digest(buf, 'sha2-256')\n}\n\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Buffer>}\n */\nexports.convertPeerId = (peer) => {\n  return multihashing.digest(peer.id, 'sha2-256')\n}\n\n/**\n * Convert a buffer to their SHA2-256 hash.\n *\n * @param {Buffer} buf\n * @returns {Key}\n */\nexports.bufferToKey = (buf) => {\n  return new Key('/' + exports.encodeBase32(buf), false)\n}\n\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Buffer}\n */\nexports.keyForPublicKey = (peer) => {\n  return Buffer.concat([\n    Buffer.from('/pk/'),\n    peer.id\n  ])\n}\n\nexports.isPublicKeyKey = (key) => {\n  return key.slice(0, 4).toString() === '/pk/'\n}\n\nexports.fromPublicKeyKey = (key) => {\n  return new PeerId(key.slice(4))\n}\n\n/**\n * Get the current time as timestamp.\n *\n * @returns {number}\n */\nexports.now = () => {\n  return Date.now()\n}\n\n/**\n * Encode a given buffer into a base32 string.\n * @param {Buffer} buf\n * @returns {string}\n */\nexports.encodeBase32 = (buf) => {\n  const enc = new base32.Encoder()\n  return enc.write(buf).finalize()\n}\n\n/**\n * Decode a given base32 string into a buffer.\n * @param {string} raw\n * @returns {Buffer}\n */\nexports.decodeBase32 = (raw) => {\n  const dec = new base32.Decoder()\n  return Buffer.from(dec.write(raw).finalize())\n}\n\n/**\n * Sort peers by distance to the given `target`.\n *\n * @param {Array<PeerId>} peers\n * @param {Buffer} target\n * @returns {Array<PeerId>}\n */\nexports.sortClosestPeers = async (peers, target) => {\n  const distances = await pMap(peers, async (peer) => {\n    const id = await exports.convertPeerId(peer)\n\n    return {\n      peer: peer,\n      distance: distance(id, target)\n    }\n  })\n\n  return distances.sort(exports.xorCompare).map((d) => d.peer)\n}\n\n/**\n * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.\n *\n * @param {Object} a\n * @param {Object} b\n * @returns {number}\n */\nexports.xorCompare = (a, b) => {\n  return distance.compare(a.distance, b.distance)\n}\n\n/**\n * Computes how many results to collect on each disjoint path, rounding up.\n * This ensures that we look for at least one result per path.\n *\n * @param {number} resultsWanted\n * @param {number} numPaths - total number of paths\n * @returns {number}\n */\nexports.pathSize = (resultsWanted, numPaths) => {\n  return Math.ceil(resultsWanted / numPaths)\n}\n\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Buffer} key\n * @param {Buffer} value\n * @returns {Buffer}\n */\nexports.createPutRecord = (key, value) => {\n  const timeReceived = new Date()\n  const rec = new Record(key, value, timeReceived)\n\n  return rec.serialize()\n}\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n * @returns {debug}\n *\n * @private\n */\nexports.logger = (id, subsystem) => {\n  const name = ['libp2p', 'dht']\n  if (subsystem) {\n    name.push(subsystem)\n  }\n  if (id) {\n    name.push(`${id.toB58String().slice(0, 8)}`)\n  }\n\n  // Add a formatter for converting to a base58 string\n  debug.formatters.b = (v) => {\n    return mh.toB58String(v)\n  }\n\n  const logger = debug(name.join(':'))\n  logger.error = debug(name.concat(['error']).join(':'))\n\n  return logger\n}\n\nexports.TimeoutError = class TimeoutError extends Error {\n  get code () {\n    return 'ETIMEDOUT'\n  }\n}\n\n/**\n * Creates an async function that calls the given `asyncFn` and Errors\n * if it does not resolve within `time` ms\n *\n * @param {Function} [asyncFn]\n * @param {Number} [time]\n * @returns {Function}\n *\n * @private\n */\nexports.withTimeout = (asyncFn, time) => {\n  return async (...args) => { // eslint-disable-line require-await\n    return Promise.race([\n      asyncFn(...args),\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          reject(errcode(new Error('Async function did not complete before timeout'), 'ETIMEDOUT'))\n        }, time)\n      })\n    ])\n  }\n}\n\n/**\n * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.\n * Returns a promise that resolves when all items of the `asyncIterator` have been passed\n * through `asyncFn`.\n *\n * @param {AsyncIterable} [asyncIterator]\n * @param {Function} [asyncFn]\n * @returns {Array}\n *\n * @private\n */\nexports.mapParallel = async function (asyncIterator, asyncFn) {\n  const tasks = []\n  for await (const item of asyncIterator) {\n    tasks.push(asyncFn(item))\n  }\n  return Promise.all(tasks)\n}\n"]},"metadata":{},"sourceType":"script"}