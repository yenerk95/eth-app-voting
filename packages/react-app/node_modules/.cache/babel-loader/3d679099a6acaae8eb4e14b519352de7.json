{"ast":null,"code":"'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\nvar v6 = require('./constants.js');\n\nfunction groupPossibilities(possibilities) {\n  return sprintf('(%s)', possibilities.join('|'));\n}\n\nfunction padGroup(group) {\n  if (group.length < 4) {\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n\n  return group;\n}\n\nvar ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]';\n\nfunction simpleRegularExpression(groups) {\n  var zeroIndexes = [];\n  groups.forEach(function (group, i) {\n    var groupInteger = parseInt(group, 16);\n\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  }); // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\n    return groups.map(function (group, i) {\n      if (i === zeroIndex) {\n        var elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';\n        return groupPossibilities([padGroup(group), elision]);\n      }\n\n      return padGroup(group);\n    }).join(':');\n  }); // The simplest case\n\n  possibilities.push(groups.map(padGroup).join(':'));\n  return groupPossibilities(possibilities);\n}\n\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\n  var left = moreLeft ? '' : ':';\n  var right = moreRight ? '' : ':';\n  var possibilities = []; // 1. elision of everything (::)\n\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  } // 2. complete elision of the middle\n\n\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n\n  if (moreRight && !moreLeft || !moreRight && moreLeft) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  } // 4. elision from the left side\n\n\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1)); // 5. elision from the right side\n\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right)); // 6. no elision\n\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1)); // 7. elision (including sloppy elision) from the middle\n\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\n    for (var position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));\n    }\n  }\n\n  return groupPossibilities(possibilities);\n}\n/**\n * Generate a regular expression string that can be used to find or validate\n * all variations of this address\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {string}\n */\n\n\nexports.regularExpressionString = function (optionalSubString) {\n  if (optionalSubString === undefined) {\n    optionalSubString = false;\n  }\n\n  var output = []; // TODO: revisit why this is necessary\n\n  var address6 = new this.constructor(this.correctForm());\n\n  if (address6.elidedGroups === 0) {\n    // The simple case\n    output.push(simpleRegularExpression(address6.parsedAddress));\n  } else if (address6.elidedGroups === v6.GROUPS) {\n    // A completely elided address\n    output.push(possibleElisions(v6.GROUPS));\n  } else {\n    // A partially elided address\n    var halves = address6.address.split('::');\n\n    if (halves[0].length) {\n      output.push(simpleRegularExpression(halves[0].split(':')));\n    }\n\n    output.push(possibleElisions(address6.elidedGroups, halves[0].length !== 0, halves[1].length !== 0));\n\n    if (halves[1].length) {\n      output.push(simpleRegularExpression(halves[1].split(':')));\n    }\n\n    output = [output.join(':')];\n  }\n\n  if (!optionalSubString) {\n    output = [].concat('(?=^|', ADDRESS_BOUNDARY, '|[^\\\\w\\\\:])(', output, ')(?=[^\\\\w\\\\:]|', ADDRESS_BOUNDARY, '|$)');\n  }\n\n  return output.join('');\n};\n/**\n * Generate a regular expression that can be used to find or validate all\n * variations of this address.\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {RegExp}\n */\n\n\nexports.regularExpression = function (optionalSubstring) {\n  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ip-address/lib/v6/regular-expressions.js"],"names":["sprintf","require","v6","groupPossibilities","possibilities","join","padGroup","group","length","ADDRESS_BOUNDARY","simpleRegularExpression","groups","zeroIndexes","forEach","i","groupInteger","parseInt","push","map","zeroIndex","elision","GROUPS","possibleElisions","elidedGroups","moreLeft","moreRight","left","right","position","exports","regularExpressionString","optionalSubString","undefined","output","address6","constructor","correctForm","parsedAddress","halves","address","split","concat","regularExpression","optionalSubstring","RegExp"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,OAApC;;AAEA,IAAIE,EAAE,GAAGD,OAAO,CAAC,gBAAD,CAAhB;;AAEA,SAASE,kBAAT,CAA4BC,aAA5B,EAA2C;AACzC,SAAOJ,OAAO,CAAC,MAAD,EAASI,aAAa,CAACC,IAAd,CAAmB,GAAnB,CAAT,CAAd;AACD;;AAED,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;AACpB,WAAOR,OAAO,CAAC,WAAD,EAAc,IAAIO,KAAK,CAACC,MAAxB,EAAgCD,KAAhC,CAAd;AACD;;AAED,SAAOA,KAAP;AACD;;AAED,IAAIE,gBAAgB,GAAG,eAAvB;;AAEA,SAASC,uBAAT,CAAiCC,MAAjC,EAAyC;AACvC,MAAIC,WAAW,GAAG,EAAlB;AAEAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAAUN,KAAV,EAAiBO,CAAjB,EAAoB;AACjC,QAAIC,YAAY,GAAGC,QAAQ,CAACT,KAAD,EAAQ,EAAR,CAA3B;;AAEA,QAAIQ,YAAY,KAAK,CAArB,EAAwB;AACtBH,MAAAA,WAAW,CAACK,IAAZ,CAAiBH,CAAjB;AACD;AACF,GAND,EAHuC,CAWvC;AACA;;AACA,MAAIV,aAAa,GAAGQ,WAAW,CAACM,GAAZ,CAAgB,UAAUC,SAAV,EAAqB;AACvD,WAAOR,MAAM,CAACO,GAAP,CAAW,UAAUX,KAAV,EAAiBO,CAAjB,EAAoB;AACpC,UAAIA,CAAC,KAAKK,SAAV,EAAqB;AACnB,YAAIC,OAAO,GAAIN,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAKZ,EAAE,CAACmB,MAAH,GAAY,CAA9B,GAAmC,GAAnC,GAAyC,EAAvD;AAEA,eAAOlB,kBAAkB,CAAC,CAACG,QAAQ,CAACC,KAAD,CAAT,EAAkBa,OAAlB,CAAD,CAAzB;AACD;;AAED,aAAOd,QAAQ,CAACC,KAAD,CAAf;AACD,KARM,EAQJF,IARI,CAQC,GARD,CAAP;AASD,GAVmB,CAApB,CAbuC,CAyBvC;;AACAD,EAAAA,aAAa,CAACa,IAAd,CAAmBN,MAAM,CAACO,GAAP,CAAWZ,QAAX,EAAqBD,IAArB,CAA0B,GAA1B,CAAnB;AAEA,SAAOF,kBAAkB,CAACC,aAAD,CAAzB;AACD;;AAED,SAASkB,gBAAT,CAA0BC,YAA1B,EAAwCC,QAAxC,EAAkDC,SAAlD,EAA6D;AAC3D,MAAIC,IAAI,GAAGF,QAAQ,GAAG,EAAH,GAAQ,GAA3B;AACA,MAAIG,KAAK,GAAGF,SAAS,GAAG,EAAH,GAAQ,GAA7B;AAEA,MAAIrB,aAAa,GAAG,EAApB,CAJ2D,CAM3D;;AACA,MAAI,CAACoB,QAAD,IAAa,CAACC,SAAlB,EAA6B;AAC3BrB,IAAAA,aAAa,CAACa,IAAd,CAAmB,IAAnB;AACD,GAT0D,CAW3D;;;AACA,MAAIO,QAAQ,IAAIC,SAAhB,EAA2B;AACzBrB,IAAAA,aAAa,CAACa,IAAd,CAAmB,EAAnB;AACD;;AAED,MAAKQ,SAAS,IAAI,CAACD,QAAf,IAA6B,CAACC,SAAD,IAAcD,QAA/C,EAA0D;AACxD;AACApB,IAAAA,aAAa,CAACa,IAAd,CAAmB,GAAnB;AACD,GAnB0D,CAqB3D;;;AACAb,EAAAA,aAAa,CAACa,IAAd,CAAmBjB,OAAO,CAAC,mBAAD,EAAsB0B,IAAtB,EAA4BH,YAAY,GAAG,CAA3C,CAA1B,EAtB2D,CAwB3D;;AACAnB,EAAAA,aAAa,CAACa,IAAd,CAAmBjB,OAAO,CAAC,mBAAD,EAAsBuB,YAAY,GAAG,CAArC,EAAwCI,KAAxC,CAA1B,EAzB2D,CA2B3D;;AACAvB,EAAAA,aAAa,CAACa,IAAd,CAAmBjB,OAAO,CAAC,qBAAD,EAAwBuB,YAAY,GAAG,CAAvC,CAA1B,EA5B2D,CA8B3D;;AACA,OAAK,IAAIZ,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGY,YAAY,GAAG,CAA7C,EAAgDZ,MAAM,EAAtD,EAA0D;AACxD,SAAK,IAAIiB,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGL,YAAY,GAAGZ,MAAjD,EAAyDiB,QAAQ,EAAjE,EAAqE;AACnExB,MAAAA,aAAa,CAACa,IAAd,CAAmBjB,OAAO,CAAC,mCAAD,EACxB4B,QADwB,EAExBL,YAAY,GAAGK,QAAf,GAA0BjB,MAA1B,GAAmC,CAFX,CAA1B;AAGD;AACF;;AAED,SAAOR,kBAAkB,CAACC,aAAD,CAAzB;AACD;AAED;;;;;;;;;;AAQAyB,OAAO,CAACC,uBAAR,GAAkC,UAAUC,iBAAV,EAA6B;AAC7D,MAAIA,iBAAiB,KAAKC,SAA1B,EAAqC;AACnCD,IAAAA,iBAAiB,GAAG,KAApB;AACD;;AAED,MAAIE,MAAM,GAAG,EAAb,CAL6D,CAO7D;;AACA,MAAIC,QAAQ,GAAG,IAAI,KAAKC,WAAT,CAAqB,KAAKC,WAAL,EAArB,CAAf;;AAEA,MAAIF,QAAQ,CAACX,YAAT,KAA0B,CAA9B,EAAiC;AAC/B;AACAU,IAAAA,MAAM,CAAChB,IAAP,CAAYP,uBAAuB,CAACwB,QAAQ,CAACG,aAAV,CAAnC;AACD,GAHD,MAGO,IAAIH,QAAQ,CAACX,YAAT,KAA0BrB,EAAE,CAACmB,MAAjC,EAAyC;AAC9C;AACAY,IAAAA,MAAM,CAAChB,IAAP,CAAYK,gBAAgB,CAACpB,EAAE,CAACmB,MAAJ,CAA5B;AACD,GAHM,MAGA;AACL;AACA,QAAIiB,MAAM,GAAGJ,QAAQ,CAACK,OAAT,CAAiBC,KAAjB,CAAuB,IAAvB,CAAb;;AAEA,QAAIF,MAAM,CAAC,CAAD,CAAN,CAAU9B,MAAd,EAAsB;AACpByB,MAAAA,MAAM,CAAChB,IAAP,CAAYP,uBAAuB,CAAC4B,MAAM,CAAC,CAAD,CAAN,CAAUE,KAAV,CAAgB,GAAhB,CAAD,CAAnC;AACD;;AAEDP,IAAAA,MAAM,CAAChB,IAAP,CAAYK,gBAAgB,CAACY,QAAQ,CAACX,YAAV,EAC1Be,MAAM,CAAC,CAAD,CAAN,CAAU9B,MAAV,KAAqB,CADK,EAE1B8B,MAAM,CAAC,CAAD,CAAN,CAAU9B,MAAV,KAAqB,CAFK,CAA5B;;AAIA,QAAI8B,MAAM,CAAC,CAAD,CAAN,CAAU9B,MAAd,EAAsB;AACpByB,MAAAA,MAAM,CAAChB,IAAP,CAAYP,uBAAuB,CAAC4B,MAAM,CAAC,CAAD,CAAN,CAAUE,KAAV,CAAgB,GAAhB,CAAD,CAAnC;AACD;;AAEDP,IAAAA,MAAM,GAAG,CAACA,MAAM,CAAC5B,IAAP,CAAY,GAAZ,CAAD,CAAT;AACD;;AAED,MAAI,CAAC0B,iBAAL,EAAwB;AACtBE,IAAAA,MAAM,GAAG,GAAGQ,MAAH,CACP,OADO,EAEPhC,gBAFO,EAGP,cAHO,EAGSwB,MAHT,EAGiB,gBAHjB,EAIPxB,gBAJO,EAKP,KALO,CAAT;AAMD;;AAED,SAAOwB,MAAM,CAAC5B,IAAP,CAAY,EAAZ,CAAP;AACD,CA7CD;AA+CA;;;;;;;;;;AAQAwB,OAAO,CAACa,iBAAR,GAA4B,UAAUC,iBAAV,EAA6B;AACvD,SAAO,IAAIC,MAAJ,CAAW,KAAKd,uBAAL,CAA6Ba,iBAA7B,CAAX,EAA4D,GAA5D,CAAP;AACD,CAFD","sourcesContent":["'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\nvar v6 = require('./constants.js');\n\nfunction groupPossibilities(possibilities) {\n  return sprintf('(%s)', possibilities.join('|'));\n}\n\nfunction padGroup(group) {\n  if (group.length < 4) {\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n\n  return group;\n}\n\nvar ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]';\n\nfunction simpleRegularExpression(groups) {\n  var zeroIndexes = [];\n\n  groups.forEach(function (group, i) {\n    var groupInteger = parseInt(group, 16);\n\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  });\n\n  // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\n    return groups.map(function (group, i) {\n      if (i === zeroIndex) {\n        var elision = (i === 0 || i === v6.GROUPS - 1) ? ':' : '';\n\n        return groupPossibilities([padGroup(group), elision]);\n      }\n\n      return padGroup(group);\n    }).join(':');\n  });\n\n  // The simplest case\n  possibilities.push(groups.map(padGroup).join(':'));\n\n  return groupPossibilities(possibilities);\n}\n\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\n  var left = moreLeft ? '' : ':';\n  var right = moreRight ? '' : ':';\n\n  var possibilities = [];\n\n  // 1. elision of everything (::)\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  }\n\n  // 2. complete elision of the middle\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n\n  if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  }\n\n  // 4. elision from the left side\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));\n\n  // 5. elision from the right side\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));\n\n  // 6. no elision\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));\n\n  // 7. elision (including sloppy elision) from the middle\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\n    for (var position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}',\n        position,\n        elidedGroups - position - groups - 1));\n    }\n  }\n\n  return groupPossibilities(possibilities);\n}\n\n/**\n * Generate a regular expression string that can be used to find or validate\n * all variations of this address\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {string}\n */\nexports.regularExpressionString = function (optionalSubString) {\n  if (optionalSubString === undefined) {\n    optionalSubString = false;\n  }\n\n  var output = [];\n\n  // TODO: revisit why this is necessary\n  var address6 = new this.constructor(this.correctForm());\n\n  if (address6.elidedGroups === 0) {\n    // The simple case\n    output.push(simpleRegularExpression(address6.parsedAddress));\n  } else if (address6.elidedGroups === v6.GROUPS) {\n    // A completely elided address\n    output.push(possibleElisions(v6.GROUPS));\n  } else {\n    // A partially elided address\n    var halves = address6.address.split('::');\n\n    if (halves[0].length) {\n      output.push(simpleRegularExpression(halves[0].split(':')));\n    }\n\n    output.push(possibleElisions(address6.elidedGroups,\n      halves[0].length !== 0,\n      halves[1].length !== 0));\n\n    if (halves[1].length) {\n      output.push(simpleRegularExpression(halves[1].split(':')));\n    }\n\n    output = [output.join(':')];\n  }\n\n  if (!optionalSubString) {\n    output = [].concat(\n      '(?=^|',\n      ADDRESS_BOUNDARY,\n      '|[^\\\\w\\\\:])(', output, ')(?=[^\\\\w\\\\:]|',\n      ADDRESS_BOUNDARY,\n      '|$)');\n  }\n\n  return output.join('');\n};\n\n/**\n * Generate a regular expression that can be used to find or validate all\n * variations of this address.\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {RegExp}\n */\nexports.regularExpression = function (optionalSubstring) {\n  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');\n};\n"]},"metadata":{},"sourceType":"script"}