{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar crypto = require('./crypto');\n\nvar lp = require('it-length-prefixed');\n\nvar int32BEEncode = lp.int32BEEncode;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error'); // step 1. Propose\n// -- propose cipher suite + send pubkeys + nonce\n\nmodule.exports = /*#__PURE__*/function () {\n  var _propose = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(state, wrapped) {\n    var prop, msg;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            log('1. propose - start');\n            prop = crypto.createProposal(state);\n            log('1. propose - writing proposal', prop);\n            _context.next = 5;\n            return wrapped.write(lp.encode.single(prop, {\n              lengthEncoder: int32BEEncode\n            }));\n\n          case 5:\n            log('1. propose - reading proposal');\n            _context.next = 8;\n            return wrapped.readLP();\n\n          case 8:\n            msg = _context.sent.slice();\n            log('1. propose - read proposal', msg);\n            _context.next = 12;\n            return crypto.identify(state, msg);\n\n          case 12:\n            _context.next = 14;\n            return crypto.selectProtocols(state);\n\n          case 14:\n            log('1. propose - finish');\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function propose(_x, _x2) {\n    return _propose.apply(this, arguments);\n  }\n\n  return propose;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-secio/src/handshake/propose.js"],"names":["crypto","require","lp","int32BEEncode","debug","log","error","module","exports","state","wrapped","prop","createProposal","write","encode","single","lengthEncoder","readLP","msg","slice","identify","selectProtocols","propose"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,oBAAD,CAAlB;;IACQE,a,GAAkBD,E,CAAlBC,a;;AACR,IAAMC,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMI,GAAG,GAAGD,KAAK,CAAC,cAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,oBAAD,CAAjB,C,CAEA;AACA;;AACAG,MAAM,CAACC,OAAP;AAAA,0EAAiB,iBAAwBC,KAAxB,EAA+BC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACfL,YAAAA,GAAG,CAAC,oBAAD,CAAH;AAEMM,YAAAA,IAHS,GAGFX,MAAM,CAACY,cAAP,CAAsBH,KAAtB,CAHE;AAIfJ,YAAAA,GAAG,CAAC,+BAAD,EAAkCM,IAAlC,CAAH;AAJe;AAAA,mBAMTD,OAAO,CAACG,KAAR,CAAcX,EAAE,CAACY,MAAH,CAAUC,MAAV,CAAiBJ,IAAjB,EAAuB;AAAEK,cAAAA,aAAa,EAAEb;AAAjB,aAAvB,CAAd,CANS;;AAAA;AAQfE,YAAAA,GAAG,CAAC,+BAAD,CAAH;AARe;AAAA,mBASIK,OAAO,CAACO,MAAR,EATJ;;AAAA;AASTC,YAAAA,GATS,iBASsBC,KATtB;AAUfd,YAAAA,GAAG,CAAC,4BAAD,EAA+Ba,GAA/B,CAAH;AAVe;AAAA,mBAYTlB,MAAM,CAACoB,QAAP,CAAgBX,KAAhB,EAAuBS,GAAvB,CAZS;;AAAA;AAAA;AAAA,mBAaTlB,MAAM,CAACqB,eAAP,CAAuBZ,KAAvB,CAbS;;AAAA;AAefJ,YAAAA,GAAG,CAAC,qBAAD,CAAH;;AAfe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAgCiB,OAAhC;AAAA;AAAA;;AAAA,SAAgCA,OAAhC;AAAA","sourcesContent":["'use strict'\n\nconst crypto = require('./crypto')\nconst lp = require('it-length-prefixed')\nconst { int32BEEncode } = lp\nconst debug = require('debug')\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\n// step 1. Propose\n// -- propose cipher suite + send pubkeys + nonce\nmodule.exports = async function propose (state, wrapped) {\n  log('1. propose - start')\n\n  const prop = crypto.createProposal(state)\n  log('1. propose - writing proposal', prop)\n\n  await wrapped.write(lp.encode.single(prop, { lengthEncoder: int32BEEncode }))\n\n  log('1. propose - reading proposal')\n  const msg = (await wrapped.readLP()).slice()\n  log('1. propose - read proposal', msg)\n\n  await crypto.identify(state, msg)\n  await crypto.selectProtocols(state)\n\n  log('1. propose - finish')\n}\n"]},"metadata":{},"sourceType":"script"}