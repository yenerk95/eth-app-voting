{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar ciphers = require('./ciphers');\n\nvar cipherMode = require('./cipher-mode');\n\nexports.create = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key, iv) {\n    var mode, cipher, decipher, res;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // eslint-disable-line require-await\n            mode = cipherMode(key);\n            cipher = ciphers.createCipheriv(mode, key, iv);\n            decipher = ciphers.createDecipheriv(mode, key, iv);\n            res = {\n              encrypt: function encrypt(data) {\n                return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          return _context.abrupt(\"return\", cipher.update(data));\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))();\n              },\n              decrypt: function decrypt(data) {\n                return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          return _context2.abrupt(\"return\", decipher.update(data));\n\n                        case 1:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }))();\n              }\n            };\n            return _context3.abrupt(\"return\", res);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/aes/index.js"],"names":["ciphers","require","cipherMode","exports","create","key","iv","mode","cipher","createCipheriv","decipher","createDecipheriv","res","encrypt","data","update","decrypt"],"mappings":"AAAA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AAEAE,OAAO,CAACC,MAAR;AAAA,sEAAiB,kBAAgBC,GAAhB,EAAqBC,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AACpCC,YAAAA,IADS,GACFL,UAAU,CAACG,GAAD,CADR;AAETG,YAAAA,MAFS,GAEAR,OAAO,CAACS,cAAR,CAAuBF,IAAvB,EAA6BF,GAA7B,EAAkCC,EAAlC,CAFA;AAGTI,YAAAA,QAHS,GAGEV,OAAO,CAACW,gBAAR,CAAyBJ,IAAzB,EAA+BF,GAA/B,EAAoCC,EAApC,CAHF;AAKTM,YAAAA,GALS,GAKH;AACJC,cAAAA,OADI,mBACKC,IADL,EACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DACZN,MAAM,CAACO,MAAP,CAAcD,IAAd,CADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpB,eAHS;AAKJE,cAAAA,OALI,mBAKKF,IALL,EAKW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DACZJ,QAAQ,CAACK,MAAT,CAAgBD,IAAhB,CADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpB;AAPS,aALG;AAAA,8CAeRF,GAfQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst ciphers = require('./ciphers')\nconst cipherMode = require('./cipher-mode')\n\nexports.create = async function (key, iv) { // eslint-disable-line require-await\n  const mode = cipherMode(key)\n  const cipher = ciphers.createCipheriv(mode, key, iv)\n  const decipher = ciphers.createDecipheriv(mode, key, iv)\n\n  const res = {\n    async encrypt (data) { // eslint-disable-line require-await\n      return cipher.update(data)\n    },\n\n    async decrypt (data) { // eslint-disable-line require-await\n      return decipher.update(data)\n    }\n  }\n\n  return res\n}\n"]},"metadata":{},"sourceType":"script"}