{"ast":null,"code":"const cbor = require('ipld-dag-cbor').util;\n\nconst CID = require('cids');\n\nconst links = (obj, path = []) => {\n  if (Buffer.isBuffer(obj)) {\n    obj = cbor.deserialize(obj);\n  }\n\n  return function* () {\n    for (let key of Object.keys(obj)) {\n      let _path = path.slice();\n\n      _path.push(key);\n\n      let val = obj[key];\n\n      if (val && typeof val === 'object') {\n        if (Array.isArray(val)) {\n          for (let i = 0; i < val.length; i++) {\n            let __path = _path.slice();\n\n            __path.push(i);\n\n            let o = val[i];\n\n            if (CID.isCID(o)) {\n              yield [__path.join('/'), o];\n            } else if (typeof o === 'object') {\n              yield* links(o, _path);\n            }\n          }\n        } else {\n          if (CID.isCID(val)) {\n            yield [_path.join('/'), val];\n          } else {\n            yield* links(val, _path);\n          }\n        }\n      }\n    }\n  }();\n};\n\nmodule.exports = links;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/dag-cbor-links/index.js"],"names":["cbor","require","util","CID","links","obj","path","Buffer","isBuffer","deserialize","key","Object","keys","_path","slice","push","val","Array","isArray","i","length","__path","o","isCID","join","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,IAAtC;;AACA,MAAMC,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AAEA,MAAMG,KAAK,GAAG,CAACC,GAAD,EAAMC,IAAI,GAAG,EAAb,KAAoB;AAChC,MAAIC,MAAM,CAACC,QAAP,CAAgBH,GAAhB,CAAJ,EAA0B;AACxBA,IAAAA,GAAG,GAAGL,IAAI,CAACS,WAAL,CAAiBJ,GAAjB,CAAN;AACD;;AACD,SAAQ,aAAc;AACpB,SAAK,IAAIK,GAAT,IAAgBC,MAAM,CAACC,IAAP,CAAYP,GAAZ,CAAhB,EAAkC;AAChC,UAAIQ,KAAK,GAAGP,IAAI,CAACQ,KAAL,EAAZ;;AACAD,MAAAA,KAAK,CAACE,IAAN,CAAWL,GAAX;;AACA,UAAIM,GAAG,GAAGX,GAAG,CAACK,GAAD,CAAb;;AACA,UAAIM,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAClC,YAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtB,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,gBAAIE,MAAM,GAAGR,KAAK,CAACC,KAAN,EAAb;;AACAO,YAAAA,MAAM,CAACN,IAAP,CAAYI,CAAZ;;AACA,gBAAIG,CAAC,GAAGN,GAAG,CAACG,CAAD,CAAX;;AACA,gBAAIhB,GAAG,CAACoB,KAAJ,CAAUD,CAAV,CAAJ,EAAkB;AAChB,oBAAM,CAACD,MAAM,CAACG,IAAP,CAAY,GAAZ,CAAD,EAAmBF,CAAnB,CAAN;AACD,aAFD,MAEO,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AAChC,qBAAQlB,KAAK,CAACkB,CAAD,EAAIT,KAAJ,CAAb;AACD;AACF;AACF,SAXD,MAWO;AACL,cAAIV,GAAG,CAACoB,KAAJ,CAAUP,GAAV,CAAJ,EAAoB;AAClB,kBAAM,CAACH,KAAK,CAACW,IAAN,CAAW,GAAX,CAAD,EAAkBR,GAAlB,CAAN;AACD,WAFD,MAEO;AACL,mBAAQZ,KAAK,CAACY,GAAD,EAAMH,KAAN,CAAb;AACD;AACF;AACF;AACF;AACF,GA1BM,EAAP;AA2BD,CA/BD;;AAiCAY,MAAM,CAACC,OAAP,GAAiBtB,KAAjB","sourcesContent":["const cbor = require('ipld-dag-cbor').util\nconst CID = require('cids')\n\nconst links = (obj, path = []) => {\n  if (Buffer.isBuffer(obj)) {\n    obj = cbor.deserialize(obj)\n  }\n  return (function * () {\n    for (let key of Object.keys(obj)) {\n      let _path = path.slice()\n      _path.push(key)\n      let val = obj[key]\n      if (val && typeof val === 'object') {\n        if (Array.isArray(val)) {\n          for (let i = 0; i < val.length; i++) {\n            let __path = _path.slice()\n            __path.push(i)\n            let o = val[i]\n            if (CID.isCID(o)) {\n              yield [__path.join('/'), o]\n            } else if (typeof o === 'object') {\n              yield * links(o, _path)\n            }\n          }\n        } else {\n          if (CID.isCID(val)) {\n            yield [_path.join('/'), val]\n          } else {\n            yield * links(val, _path)\n          }\n        }\n      }\n    }\n  })()\n}\n\nmodule.exports = links\n"]},"metadata":{},"sourceType":"script"}