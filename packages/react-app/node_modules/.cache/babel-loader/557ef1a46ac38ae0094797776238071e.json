{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar log = require('debug')('ipfs:mfs:touch');\n\nvar errCode = require('err-code');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar toTrail = require('./utils/to-trail');\n\nvar addLink = require('./utils/add-link');\n\nvar updateTree = require('./utils/update-tree');\n\nvar updateMfsRoot = require('./utils/update-mfs-root');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar mc = require('multicodec');\n\nvar mh = require('multihashing-async').multihash;\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nvar defaultOptions = {\n  mtime: undefined,\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  signal: undefined\n};\n\nmodule.exports = function (context) {\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _mfsTouch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options) {\n      var _yield$toMfsPath, cid, mfsDirectory, name, exists, node, updatedCid, cidVersion, metadata, _metadata, trail, parent, parentNode, result, newRootCid;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              options = applyDefaultOptions(options, defaultOptions);\n              options.mtime = options.mtime || new Date();\n              log(\"Touching \".concat(path, \" mtime: \").concat(options.mtime));\n              _context.next = 6;\n              return toMfsPath(context, path, options);\n\n            case 6:\n              _yield$toMfsPath = _context.sent;\n              cid = _yield$toMfsPath.cid;\n              mfsDirectory = _yield$toMfsPath.mfsDirectory;\n              name = _yield$toMfsPath.name;\n              exists = _yield$toMfsPath.exists;\n              cidVersion = options.cidVersion;\n\n              if (exists) {\n                _context.next = 20;\n                break;\n              }\n\n              metadata = new UnixFS({\n                type: 'file',\n                mtime: options.mtime\n              });\n              node = new DAGNode(metadata.marshal());\n              _context.next = 17;\n              return context.ipld.put(node, mc.DAG_PB, {\n                cidVersion: options.cidVersion,\n                hashAlg: mh.names['sha2-256'],\n                onlyHash: !options.flush\n              });\n\n            case 17:\n              updatedCid = _context.sent;\n              _context.next = 32;\n              break;\n\n            case 20:\n              if (!(cid.codec !== 'dag-pb')) {\n                _context.next = 22;\n                break;\n              }\n\n              throw errCode(new Error(\"\".concat(path, \" was not a UnixFS node\")), 'ERR_NOT_UNIXFS');\n\n            case 22:\n              cidVersion = cid.version;\n              _context.next = 25;\n              return context.ipld.get(cid);\n\n            case 25:\n              node = _context.sent;\n              _metadata = UnixFS.unmarshal(node.Data);\n              _metadata.mtime = options.mtime;\n              node = new DAGNode(_metadata.marshal(), node.Links);\n              _context.next = 31;\n              return context.ipld.put(node, mc.DAG_PB, {\n                cidVersion: cid.version,\n                hashAlg: mh.names['sha2-256'],\n                onlyHash: !options.flush\n              });\n\n            case 31:\n              updatedCid = _context.sent;\n\n            case 32:\n              _context.next = 34;\n              return toTrail(context, mfsDirectory, options);\n\n            case 34:\n              trail = _context.sent;\n              parent = trail[trail.length - 1];\n              _context.next = 38;\n              return context.ipld.get(parent.cid);\n\n            case 38:\n              parentNode = _context.sent;\n              _context.next = 41;\n              return addLink(context, {\n                parent: parentNode,\n                name: name,\n                cid: updatedCid,\n                size: node.serialize().length,\n                flush: options.flush,\n                shardSplitThreshold: options.shardSplitThreshold,\n                hashAlg: 'sha2-256',\n                cidVersion: cidVersion\n              });\n\n            case 41:\n              result = _context.sent;\n              parent.cid = result.cid; // update the tree with the new child\n\n              _context.next = 45;\n              return updateTree(context, trail, options);\n\n            case 45:\n              newRootCid = _context.sent;\n              _context.next = 48;\n              return updateMfsRoot(context, newRootCid, options);\n\n            case 48:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function mfsTouch(_x, _x2) {\n      return _mfsTouch.apply(this, arguments);\n    }\n\n    return mfsTouch;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/touch.js"],"names":["applyDefaultOptions","require","toMfsPath","log","errCode","UnixFS","toTrail","addLink","updateTree","updateMfsRoot","DAGNode","mc","mh","multihash","withTimeoutOption","defaultOptions","mtime","undefined","flush","shardSplitThreshold","cidVersion","hashAlg","signal","module","exports","context","path","options","Date","cid","mfsDirectory","name","exists","metadata","type","node","marshal","ipld","put","DAG_PB","names","onlyHash","updatedCid","codec","Error","version","get","unmarshal","Data","Links","trail","parent","length","parentNode","size","serialize","result","newRootCid","mfsTouch"],"mappings":"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","sourcesContent":["'use strict'\n\nconst applyDefaultOptions = require('./utils/apply-default-options')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst log = require('debug')('ipfs:mfs:touch')\nconst errCode = require('err-code')\nconst UnixFS = require('ipfs-unixfs')\nconst toTrail = require('./utils/to-trail')\nconst addLink = require('./utils/add-link')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst { DAGNode } = require('ipld-dag-pb')\nconst mc = require('multicodec')\nconst mh = require('multihashing-async').multihash\nconst { withTimeoutOption } = require('../../utils')\n\nconst defaultOptions = {\n  mtime: undefined,\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  return withTimeoutOption(async function mfsTouch (path, options) {\n    options = options || {}\n    options = applyDefaultOptions(options, defaultOptions)\n    options.mtime = options.mtime || new Date()\n\n    log(`Touching ${path} mtime: ${options.mtime}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, options)\n\n    let node\n    let updatedCid\n\n    let cidVersion = options.cidVersion\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        mtime: options.mtime\n      })\n      node = new DAGNode(metadata.marshal())\n      updatedCid = await context.ipld.put(node, mc.DAG_PB, {\n        cidVersion: options.cidVersion,\n        hashAlg: mh.names['sha2-256'],\n        onlyHash: !options.flush\n      })\n    } else {\n      if (cid.codec !== 'dag-pb') {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n      }\n\n      cidVersion = cid.version\n\n      node = await context.ipld.get(cid)\n\n      const metadata = UnixFS.unmarshal(node.Data)\n      metadata.mtime = options.mtime\n\n      node = new DAGNode(metadata.marshal(), node.Links)\n\n      updatedCid = await context.ipld.put(node, mc.DAG_PB, {\n        cidVersion: cid.version,\n        hashAlg: mh.names['sha2-256'],\n        onlyHash: !options.flush\n      })\n    }\n\n    const trail = await toTrail(context, mfsDirectory, options)\n    const parent = trail[trail.length - 1]\n    const parentNode = await context.ipld.get(parent.cid)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: node.serialize().length,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: 'sha2-256',\n      cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, options)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, options)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}