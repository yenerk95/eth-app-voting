{"ast":null,"code":"'use strict';\n\nconst batch = require('it-batch');\n\nasync function* parallelBatch(source, size) {\n  size = parseInt(size);\n\n  if (isNaN(size) || size < 1) {\n    size = 1;\n  }\n\n  for await (let things of batch(source, size)) {\n    things = things.map(p => {\n      return p().then(res => ({\n        res\n      }), err => ({\n        err\n      }));\n    });\n\n    for (let i = 0; i < things.length; i++) {\n      const {\n        res,\n        err\n      } = await things[i];\n\n      if (err) {\n        throw err;\n      }\n\n      yield res;\n    }\n  }\n}\n\nmodule.exports = parallelBatch;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-parallel-batch/index.js"],"names":["batch","require","parallelBatch","source","size","parseInt","isNaN","things","map","p","then","res","err","i","length","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;;AAEA,gBAAiBC,aAAjB,CAAgCC,MAAhC,EAAwCC,IAAxC,EAA8C;AAC5CA,EAAAA,IAAI,GAAGC,QAAQ,CAACD,IAAD,CAAf;;AAEA,MAAIE,KAAK,CAACF,IAAD,CAAL,IAAeA,IAAI,GAAG,CAA1B,EAA6B;AAC3BA,IAAAA,IAAI,GAAG,CAAP;AACD;;AAED,aAAW,IAAIG,MAAf,IAAyBP,KAAK,CAACG,MAAD,EAASC,IAAT,CAA9B,EAA8C;AAC5CG,IAAAA,MAAM,GAAGA,MAAM,CAACC,GAAP,CAAWC,CAAC,IAAI;AACvB,aAAOA,CAAC,GAAGC,IAAJ,CAASC,GAAG,KAAK;AAAEA,QAAAA;AAAF,OAAL,CAAZ,EAA2BC,GAAG,KAAK;AAAEA,QAAAA;AAAF,OAAL,CAA9B,CAAP;AACD,KAFQ,CAAT;;AAIA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAM;AAAEF,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAe,MAAML,MAAM,CAACM,CAAD,CAAjC;;AAEA,UAAID,GAAJ,EAAS;AACP,cAAMA,GAAN;AACD;;AAED,YAAMD,GAAN;AACD;AACF;AACF;;AAEDI,MAAM,CAACC,OAAP,GAAiBd,aAAjB","sourcesContent":["'use strict'\n\nconst batch = require('it-batch')\n\nasync function * parallelBatch (source, size) {\n  size = parseInt(size)\n\n  if (isNaN(size) || size < 1) {\n    size = 1\n  }\n\n  for await (let things of batch(source, size)) {\n    things = things.map(p => {\n      return p().then(res => ({ res }), err => ({ err }))\n    })\n\n    for (let i = 0; i < things.length; i++) {\n      const { res, err } = await things[i]\n\n      if (err) {\n        throw err\n      }\n\n      yield res\n    }\n  }\n}\n\nmodule.exports = parallelBatch\n"]},"metadata":{},"sourceType":"script"}