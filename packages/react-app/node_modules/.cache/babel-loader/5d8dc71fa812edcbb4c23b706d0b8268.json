{"ast":null,"code":"'use strict'; // dns-nodejs gets replaced by dns-browser when webpacked/browserified\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dns = require('../runtime/dns-nodejs');\n\nvar _require = require('../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nfunction fqdnFixups(domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link');\n  }\n\n  return domain;\n}\n\nmodule.exports = function () {\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(domain, opts) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              opts = opts || {};\n\n              if (!(typeof domain !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Invalid arguments, domain must be a string');\n\n            case 3:\n              domain = fqdnFixups(domain);\n              return _context.abrupt(\"return\", dns(domain, opts));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/dns.js"],"names":["dns","require","withTimeoutOption","fqdnFixups","domain","endsWith","replace","module","exports","opts","Error"],"mappings":"AAAA,a,CAEA;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;eAC8BA,OAAO,CAAC,UAAD,C;IAA7BC,iB,YAAAA,iB;;AAER,SAASC,UAAT,CAAqBC,MAArB,EAA6B;AAC3B;AACA;AACA,MAAIA,MAAM,CAACC,QAAP,CAAgB,MAAhB,CAAJ,EAA6B;AAC3BD,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,OAAf,EAAwB,WAAxB,CAAT;AACD;;AACD,SAAOF,MAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB,YAAM;AACrB,SAAON,iBAAiB;AAAA,wEAAC,iBAAOE,MAAP,EAAeK,IAAf;AAAA;AAAA;AAAA;AAAA;AAA0B;AACjDA,cAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AADuB,oBAGnB,OAAOL,MAAP,KAAkB,QAHC;AAAA;AAAA;AAAA;;AAAA,oBAIf,IAAIM,KAAJ,CAAU,4CAAV,CAJe;;AAAA;AAOvBN,cAAAA,MAAM,GAAGD,UAAU,CAACC,MAAD,CAAnB;AAPuB,+CAShBJ,GAAG,CAACI,MAAD,EAASK,IAAT,CATa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MAAxB;AAWD,CAZD","sourcesContent":["'use strict'\n\n// dns-nodejs gets replaced by dns-browser when webpacked/browserified\nconst dns = require('../runtime/dns-nodejs')\nconst { withTimeoutOption } = require('../utils')\n\nfunction fqdnFixups (domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link')\n  }\n  return domain\n}\n\nmodule.exports = () => {\n  return withTimeoutOption(async (domain, opts) => { // eslint-disable-line require-await\n    opts = opts || {}\n\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string')\n    }\n\n    domain = fqdnFixups(domain)\n\n    return dns(domain, opts)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}