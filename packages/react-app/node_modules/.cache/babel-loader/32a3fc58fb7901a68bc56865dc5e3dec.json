{"ast":null,"code":"'use strict';\n\nconst TaskMerger = {\n  /**\n   * Indicates whether the given task has newer information than the active\n   * tasks with the same topic\n   * @param {Task} task\n   * @param {Task[]} tasksWithTopic\n   * @returns {boolean}\n   */\n  hasNewInfo(task, tasksWithTopic) {\n    let haveBlock = false;\n    let isWantBlock = false;\n\n    for (const existing of tasksWithTopic) {\n      if (existing.data.haveBlock) {\n        haveBlock = true;\n      }\n\n      if (existing.data.isWantBlock) {\n        isWantBlock = true;\n      }\n    } // If there is no active want-block and the new task is a want-block,\n    // the new task is better\n\n\n    if (!isWantBlock && task.data.isWantBlock) {\n      return true;\n    } // If we didn't have the block, and the new task indicates that we now\n    // do have the block, then we must also have size information for the\n    // block, so the new task has new information.\n\n\n    if (!haveBlock && task.data.haveBlock) {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Merge the information from the task into the existing pending task\n   * @param {Task} newTask\n   * @param {Task} existingTask\n   */\n  merge(newTask, existingTask) {\n    // Tasks look like this:\n    // {\n    //   topic: \"some topic\",\n    //   priority: 5,\n    //\n    //   # The size of the response on the wire. This is used to calculate\n    //   # how many tasks to pop off the request queue and add to a message.\n    //   # If the response is\n    //   # - a HAVE or DONT_HAVE\n    //   #   it is the size of the CID + type (HAVE/DONT_HAVE)\n    //   # - a block\n    //   #   it is the size of the block\n    //   size: 32,\n    //\n    //   data: {\n    //\n    //     # The size of the block, if known (if we don't have the block this is zero)\n    //     blockSize: 128 * 1024,\n    //\n    //     # Indicates if the request is for a block or for a HAVE\n    //     isWantBlock: false,\n    //\n    //     # Do we have the block?\n    //     # Note: a block can have size zero.\n    //     haveBlock: true,\n    //\n    //     # Indicates whether to send a DONT_HAVE response if we don't have\n    //     # the block.\n    //     # If this is false and we don't have the block, we just ignore the\n    //     # want-block request (useful for discovery where we query lots of\n    //     # peers but don't want a response unless the peer has the block).\n    //     sendDontHave: false\n    //   }\n    // }\n    //\n    // The merge function ignores the topic and priority as these don't change.\n    //\n    // We may receive new information about a want before the want has been\n    // popped from the queue in the following scenarios:\n    //\n    // - Replace want type:\n    //   1. Client sends want-have CID1\n    //   2. Client sends want-block CID1\n    //   In this case we should replace want-have with want-block, including\n    //   updating the task size to be the block size.\n    //\n    // - Replace DONT_HAVE with want:\n    //   1. Client sends want-have CID1 or want-block CID1\n    //   2. Local node doesn't have block for CID1\n    //   3. Local node receives block for CID1 from peer\n    //   In this case we should replace DONT_HAVE with the want, including\n    //   updating the task size and block size.\n    //\n    const taskData = newTask.data;\n    const existingData = existingTask.data; // If we didn't have block size information (because we didn't have the\n    // block) and we receive the block from a peer, update the task with the\n    // new block size\n\n    if (!existingData.haveBlock && taskData.haveBlock) {\n      existingData.haveBlock = taskData.haveBlock;\n      existingData.blockSize = taskData.blockSize;\n    } // If replacing a want-have with a want-block\n\n\n    if (!existingData.isWantBlock && taskData.isWantBlock) {\n      // Change the type from want-have to want-block\n      existingData.isWantBlock = true; // If the want-have was a DONT_HAVE, or the want-block has a size\n\n      if (!existingData.haveBlock || taskData.haveBlock) {\n        // Update the entry size\n        existingData.haveBlock = taskData.haveBlock;\n        existingTask.size = newTask.size;\n      }\n    } // If the task is a want-block, make sure the entry size is equal\n    // to the block size (because we will send the whole block)\n\n\n    if (existingData.isWantBlock && existingData.haveBlock) {\n      existingTask.size = existingData.blockSize;\n    }\n  }\n\n};\nmodule.exports = TaskMerger;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/decision-engine/task-merger.js"],"names":["TaskMerger","hasNewInfo","task","tasksWithTopic","haveBlock","isWantBlock","existing","data","merge","newTask","existingTask","taskData","existingData","blockSize","size","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAG;AACjB;;;;;;;AAOAC,EAAAA,UAAU,CAAEC,IAAF,EAAQC,cAAR,EAAwB;AAChC,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAIC,WAAW,GAAG,KAAlB;;AACA,SAAK,MAAMC,QAAX,IAAuBH,cAAvB,EAAuC;AACrC,UAAIG,QAAQ,CAACC,IAAT,CAAcH,SAAlB,EAA6B;AAC3BA,QAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,UAAIE,QAAQ,CAACC,IAAT,CAAcF,WAAlB,EAA+B;AAC7BA,QAAAA,WAAW,GAAG,IAAd;AACD;AACF,KAX+B,CAahC;AACA;;;AACA,QAAI,CAACA,WAAD,IAAgBH,IAAI,CAACK,IAAL,CAAUF,WAA9B,EAA2C;AACzC,aAAO,IAAP;AACD,KAjB+B,CAmBhC;AACA;AACA;;;AACA,QAAI,CAACD,SAAD,IAAcF,IAAI,CAACK,IAAL,CAAUH,SAA5B,EAAuC;AACrC,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAnCgB;;AAqCjB;;;;;AAKAI,EAAAA,KAAK,CAAEC,OAAF,EAAWC,YAAX,EAAyB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAMC,QAAQ,GAAGF,OAAO,CAACF,IAAzB;AACA,UAAMK,YAAY,GAAGF,YAAY,CAACH,IAAlC,CAxD4B,CA0D5B;AACA;AACA;;AACA,QAAI,CAACK,YAAY,CAACR,SAAd,IAA2BO,QAAQ,CAACP,SAAxC,EAAmD;AACjDQ,MAAAA,YAAY,CAACR,SAAb,GAAyBO,QAAQ,CAACP,SAAlC;AACAQ,MAAAA,YAAY,CAACC,SAAb,GAAyBF,QAAQ,CAACE,SAAlC;AACD,KAhE2B,CAkE5B;;;AACA,QAAI,CAACD,YAAY,CAACP,WAAd,IAA6BM,QAAQ,CAACN,WAA1C,EAAuD;AACrD;AACAO,MAAAA,YAAY,CAACP,WAAb,GAA2B,IAA3B,CAFqD,CAGrD;;AACA,UAAI,CAACO,YAAY,CAACR,SAAd,IAA2BO,QAAQ,CAACP,SAAxC,EAAmD;AACjD;AACAQ,QAAAA,YAAY,CAACR,SAAb,GAAyBO,QAAQ,CAACP,SAAlC;AACAM,QAAAA,YAAY,CAACI,IAAb,GAAoBL,OAAO,CAACK,IAA5B;AACD;AACF,KA5E2B,CA8E5B;AACA;;;AACA,QAAIF,YAAY,CAACP,WAAb,IAA4BO,YAAY,CAACR,SAA7C,EAAwD;AACtDM,MAAAA,YAAY,CAACI,IAAb,GAAoBF,YAAY,CAACC,SAAjC;AACD;AACF;;AA7HgB,CAAnB;AAgIAE,MAAM,CAACC,OAAP,GAAiBhB,UAAjB","sourcesContent":["'use strict'\n\nconst TaskMerger = {\n  /**\n   * Indicates whether the given task has newer information than the active\n   * tasks with the same topic\n   * @param {Task} task\n   * @param {Task[]} tasksWithTopic\n   * @returns {boolean}\n   */\n  hasNewInfo (task, tasksWithTopic) {\n    let haveBlock = false\n    let isWantBlock = false\n    for (const existing of tasksWithTopic) {\n      if (existing.data.haveBlock) {\n        haveBlock = true\n      }\n\n      if (existing.data.isWantBlock) {\n        isWantBlock = true\n      }\n    }\n\n    // If there is no active want-block and the new task is a want-block,\n    // the new task is better\n    if (!isWantBlock && task.data.isWantBlock) {\n      return true\n    }\n\n    // If we didn't have the block, and the new task indicates that we now\n    // do have the block, then we must also have size information for the\n    // block, so the new task has new information.\n    if (!haveBlock && task.data.haveBlock) {\n      return true\n    }\n\n    return false\n  },\n\n  /**\n   * Merge the information from the task into the existing pending task\n   * @param {Task} newTask\n   * @param {Task} existingTask\n   */\n  merge (newTask, existingTask) {\n    // Tasks look like this:\n    // {\n    //   topic: \"some topic\",\n    //   priority: 5,\n    //\n    //   # The size of the response on the wire. This is used to calculate\n    //   # how many tasks to pop off the request queue and add to a message.\n    //   # If the response is\n    //   # - a HAVE or DONT_HAVE\n    //   #   it is the size of the CID + type (HAVE/DONT_HAVE)\n    //   # - a block\n    //   #   it is the size of the block\n    //   size: 32,\n    //\n    //   data: {\n    //\n    //     # The size of the block, if known (if we don't have the block this is zero)\n    //     blockSize: 128 * 1024,\n    //\n    //     # Indicates if the request is for a block or for a HAVE\n    //     isWantBlock: false,\n    //\n    //     # Do we have the block?\n    //     # Note: a block can have size zero.\n    //     haveBlock: true,\n    //\n    //     # Indicates whether to send a DONT_HAVE response if we don't have\n    //     # the block.\n    //     # If this is false and we don't have the block, we just ignore the\n    //     # want-block request (useful for discovery where we query lots of\n    //     # peers but don't want a response unless the peer has the block).\n    //     sendDontHave: false\n    //   }\n    // }\n    //\n    // The merge function ignores the topic and priority as these don't change.\n    //\n    // We may receive new information about a want before the want has been\n    // popped from the queue in the following scenarios:\n    //\n    // - Replace want type:\n    //   1. Client sends want-have CID1\n    //   2. Client sends want-block CID1\n    //   In this case we should replace want-have with want-block, including\n    //   updating the task size to be the block size.\n    //\n    // - Replace DONT_HAVE with want:\n    //   1. Client sends want-have CID1 or want-block CID1\n    //   2. Local node doesn't have block for CID1\n    //   3. Local node receives block for CID1 from peer\n    //   In this case we should replace DONT_HAVE with the want, including\n    //   updating the task size and block size.\n    //\n\n    const taskData = newTask.data\n    const existingData = existingTask.data\n\n    // If we didn't have block size information (because we didn't have the\n    // block) and we receive the block from a peer, update the task with the\n    // new block size\n    if (!existingData.haveBlock && taskData.haveBlock) {\n      existingData.haveBlock = taskData.haveBlock\n      existingData.blockSize = taskData.blockSize\n    }\n\n    // If replacing a want-have with a want-block\n    if (!existingData.isWantBlock && taskData.isWantBlock) {\n      // Change the type from want-have to want-block\n      existingData.isWantBlock = true\n      // If the want-have was a DONT_HAVE, or the want-block has a size\n      if (!existingData.haveBlock || taskData.haveBlock) {\n        // Update the entry size\n        existingData.haveBlock = taskData.haveBlock\n        existingTask.size = newTask.size\n      }\n    }\n\n    // If the task is a want-block, make sure the entry size is equal\n    // to the block size (because we will send the whole block)\n    if (existingData.isWantBlock && existingData.haveBlock) {\n      existingTask.size = existingData.blockSize\n    }\n  }\n}\n\nmodule.exports = TaskMerger\n"]},"metadata":{},"sourceType":"script"}