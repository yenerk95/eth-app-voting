{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar toDuplex = require('./duplex');\n\nmodule.exports = function (transform) {\n  return /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var duplex;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              duplex = toDuplex(transform); // In a transform the sink and source are connected, an error in the sink\n              // will be thrown in the source also. Catch the sink error to avoid unhandled\n              // rejections and yield from the source.\n\n              duplex.sink(source).catch(function (_) {});\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(duplex.source), _awaitAsyncGenerator), \"t0\", 3);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/stream-to-it/transform.js"],"names":["toDuplex","require","module","exports","transform","source","duplex","sink","catch","_"],"mappings":";;;;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAAC,SAAS;AAAA;AAAA,0EAAI,iBAAkBC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,cAAAA,MADsB,GACbN,QAAQ,CAACI,SAAD,CADK,EAE5B;AACA;AACA;;AACAE,cAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,KAApB,CAA0B,UAAAC,CAAC,EAAI,CAAE,CAAjC;AACA,mFAAQH,MAAM,CAACD,MAAf;;AAN4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B","sourcesContent":["const toDuplex = require('./duplex')\n\nmodule.exports = transform => async function * (source) {\n  const duplex = toDuplex(transform)\n  // In a transform the sink and source are connected, an error in the sink\n  // will be thrown in the source also. Catch the sink error to avoid unhandled\n  // rejections and yield from the source.\n  duplex.sink(source).catch(_ => {})\n  yield * duplex.source\n}\n"]},"metadata":{},"sourceType":"script"}