{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nrequire('node-forge/lib/asn1');\n\nrequire('node-forge/lib/rsa');\n\nconst forge = require('node-forge/lib/forge');\n\nconst {\n  bigIntegerToUintBase64url,\n  base64urlToBigInteger\n} = require('./../util'); // Convert a PKCS#1 in ASN1 DER format to a JWK key\n\n\nexports.pkcs1ToJwk = function (bytes) {\n  const asn1 = forge.asn1.fromDer(bytes.toString('binary'));\n  const privateKey = forge.pki.privateKeyFromAsn1(asn1); // https://tools.ietf.org/html/rfc7518#section-6.3.1\n\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(privateKey.n),\n    e: bigIntegerToUintBase64url(privateKey.e),\n    d: bigIntegerToUintBase64url(privateKey.d),\n    p: bigIntegerToUintBase64url(privateKey.p),\n    q: bigIntegerToUintBase64url(privateKey.q),\n    dp: bigIntegerToUintBase64url(privateKey.dP),\n    dq: bigIntegerToUintBase64url(privateKey.dQ),\n    qi: bigIntegerToUintBase64url(privateKey.qInv),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key into PKCS#1 in ASN1 DER format\n\n\nexports.jwkToPkcs1 = function (jwk) {\n  const asn1 = forge.pki.privateKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e),\n    d: base64urlToBigInteger(jwk.d),\n    p: base64urlToBigInteger(jwk.p),\n    q: base64urlToBigInteger(jwk.q),\n    dP: base64urlToBigInteger(jwk.dp),\n    dQ: base64urlToBigInteger(jwk.dq),\n    qInv: base64urlToBigInteger(jwk.qi)\n  });\n  return Buffer.from(forge.asn1.toDer(asn1).getBytes(), 'binary');\n}; // Convert a PKCIX in ASN1 DER format to a JWK key\n\n\nexports.pkixToJwk = function (bytes) {\n  const asn1 = forge.asn1.fromDer(bytes.toString('binary'));\n  const publicKey = forge.pki.publicKeyFromAsn1(asn1);\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(publicKey.n),\n    e: bigIntegerToUintBase64url(publicKey.e),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key to PKCIX in ASN1 DER format\n\n\nexports.jwkToPkix = function (jwk) {\n  const asn1 = forge.pki.publicKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e)\n  });\n  return Buffer.from(forge.asn1.toDer(asn1).getBytes(), 'binary');\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/keys/rsa-utils.js"],"names":["Buffer","require","forge","bigIntegerToUintBase64url","base64urlToBigInteger","exports","pkcs1ToJwk","bytes","asn1","fromDer","toString","privateKey","pki","privateKeyFromAsn1","kty","n","e","d","p","q","dp","dP","dq","dQ","qi","qInv","alg","kid","jwkToPkcs1","jwk","privateKeyToAsn1","from","toDer","getBytes","pkixToJwk","publicKey","publicKeyFromAsn1","jwkToPkix","publicKeyToAsn1"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nrequire('node-forge/lib/asn1')\nrequire('node-forge/lib/rsa')\nconst forge = require('node-forge/lib/forge')\nconst { bigIntegerToUintBase64url, base64urlToBigInteger } = require('./../util')\n\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexports.pkcs1ToJwk = function (bytes) {\n  const asn1 = forge.asn1.fromDer(bytes.toString('binary'))\n  const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n\n  // https://tools.ietf.org/html/rfc7518#section-6.3.1\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(privateKey.n),\n    e: bigIntegerToUintBase64url(privateKey.e),\n    d: bigIntegerToUintBase64url(privateKey.d),\n    p: bigIntegerToUintBase64url(privateKey.p),\n    q: bigIntegerToUintBase64url(privateKey.q),\n    dp: bigIntegerToUintBase64url(privateKey.dP),\n    dq: bigIntegerToUintBase64url(privateKey.dQ),\n    qi: bigIntegerToUintBase64url(privateKey.qInv),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  }\n}\n\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexports.jwkToPkcs1 = function (jwk) {\n  const asn1 = forge.pki.privateKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e),\n    d: base64urlToBigInteger(jwk.d),\n    p: base64urlToBigInteger(jwk.p),\n    q: base64urlToBigInteger(jwk.q),\n    dP: base64urlToBigInteger(jwk.dp),\n    dQ: base64urlToBigInteger(jwk.dq),\n    qInv: base64urlToBigInteger(jwk.qi)\n  })\n\n  return Buffer.from(forge.asn1.toDer(asn1).getBytes(), 'binary')\n}\n\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexports.pkixToJwk = function (bytes) {\n  const asn1 = forge.asn1.fromDer(bytes.toString('binary'))\n  const publicKey = forge.pki.publicKeyFromAsn1(asn1)\n\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(publicKey.n),\n    e: bigIntegerToUintBase64url(publicKey.e),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  }\n}\n\n// Convert a JWK key to PKCIX in ASN1 DER format\nexports.jwkToPkix = function (jwk) {\n  const asn1 = forge.pki.publicKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e)\n  })\n\n  return Buffer.from(forge.asn1.toDer(asn1).getBytes(), 'binary')\n}\n"]},"metadata":{},"sourceType":"script"}