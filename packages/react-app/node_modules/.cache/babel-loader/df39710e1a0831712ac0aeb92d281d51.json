{"ast":null,"code":"'use strict';\n\nconst applyDefaultOptions = require('./utils/apply-default-options');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst log = require('debug')('ipfs:mfs:touch');\n\nconst errCode = require('err-code');\n\nconst UnixFS = require('ipfs-unixfs');\n\nconst toTrail = require('./utils/to-trail');\n\nconst addLink = require('./utils/add-link');\n\nconst updateTree = require('./utils/update-tree');\n\nconst updateMfsRoot = require('./utils/update-mfs-root');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst mc = require('multicodec');\n\nconst mh = require('multihashing-async').multihash;\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nconst defaultOptions = {\n  mtime: undefined,\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  signal: undefined\n};\n\nmodule.exports = context => {\n  return withTimeoutOption(async function mfsTouch(path, options) {\n    options = options || {};\n    options = applyDefaultOptions(options, defaultOptions);\n    options.mtime = options.mtime || new Date();\n    log(`Touching ${path} mtime: ${options.mtime}`);\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, options);\n    let node;\n    let updatedCid;\n    let cidVersion = options.cidVersion;\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        mtime: options.mtime\n      });\n      node = new DAGNode(metadata.marshal());\n      updatedCid = await context.ipld.put(node, mc.DAG_PB, {\n        cidVersion: options.cidVersion,\n        hashAlg: mh.names['sha2-256'],\n        onlyHash: !options.flush\n      });\n    } else {\n      if (cid.codec !== 'dag-pb') {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS');\n      }\n\n      cidVersion = cid.version;\n      node = await context.ipld.get(cid);\n      const metadata = UnixFS.unmarshal(node.Data);\n      metadata.mtime = options.mtime;\n      node = new DAGNode(metadata.marshal(), node.Links);\n      updatedCid = await context.ipld.put(node, mc.DAG_PB, {\n        cidVersion: cid.version,\n        hashAlg: mh.names['sha2-256'],\n        onlyHash: !options.flush\n      });\n    }\n\n    const trail = await toTrail(context, mfsDirectory, options);\n    const parent = trail[trail.length - 1];\n    const parentNode = await context.ipld.get(parent.cid);\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: node.serialize().length,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: 'sha2-256',\n      cidVersion\n    });\n    parent.cid = result.cid; // update the tree with the new child\n\n    const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree\n\n    await updateMfsRoot(context, newRootCid, options);\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/touch.js"],"names":["applyDefaultOptions","require","toMfsPath","log","errCode","UnixFS","toTrail","addLink","updateTree","updateMfsRoot","DAGNode","mc","mh","multihash","withTimeoutOption","defaultOptions","mtime","undefined","flush","shardSplitThreshold","cidVersion","hashAlg","signal","module","exports","context","mfsTouch","path","options","Date","cid","mfsDirectory","name","exists","node","updatedCid","metadata","type","marshal","ipld","put","DAG_PB","names","onlyHash","codec","Error","version","get","unmarshal","Data","Links","trail","parent","length","parentNode","result","size","serialize","newRootCid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst applyDefaultOptions = require('./utils/apply-default-options')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst log = require('debug')('ipfs:mfs:touch')\nconst errCode = require('err-code')\nconst UnixFS = require('ipfs-unixfs')\nconst toTrail = require('./utils/to-trail')\nconst addLink = require('./utils/add-link')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst { DAGNode } = require('ipld-dag-pb')\nconst mc = require('multicodec')\nconst mh = require('multihashing-async').multihash\nconst { withTimeoutOption } = require('../../utils')\n\nconst defaultOptions = {\n  mtime: undefined,\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  return withTimeoutOption(async function mfsTouch (path, options) {\n    options = options || {}\n    options = applyDefaultOptions(options, defaultOptions)\n    options.mtime = options.mtime || new Date()\n\n    log(`Touching ${path} mtime: ${options.mtime}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, options)\n\n    let node\n    let updatedCid\n\n    let cidVersion = options.cidVersion\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        mtime: options.mtime\n      })\n      node = new DAGNode(metadata.marshal())\n      updatedCid = await context.ipld.put(node, mc.DAG_PB, {\n        cidVersion: options.cidVersion,\n        hashAlg: mh.names['sha2-256'],\n        onlyHash: !options.flush\n      })\n    } else {\n      if (cid.codec !== 'dag-pb') {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n      }\n\n      cidVersion = cid.version\n\n      node = await context.ipld.get(cid)\n\n      const metadata = UnixFS.unmarshal(node.Data)\n      metadata.mtime = options.mtime\n\n      node = new DAGNode(metadata.marshal(), node.Links)\n\n      updatedCid = await context.ipld.put(node, mc.DAG_PB, {\n        cidVersion: cid.version,\n        hashAlg: mh.names['sha2-256'],\n        onlyHash: !options.flush\n      })\n    }\n\n    const trail = await toTrail(context, mfsDirectory, options)\n    const parent = trail[trail.length - 1]\n    const parentNode = await context.ipld.get(parent.cid)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: node.serialize().length,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: 'sha2-256',\n      cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, options)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, options)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}