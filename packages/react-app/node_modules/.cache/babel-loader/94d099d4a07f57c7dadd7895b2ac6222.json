{"ast":null,"code":"/* global document */\n\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n'use strict';\n\nconst EventEmitter = require('events');\n\nconst debug = require('debug')('latency-monitor:VisibilityChangeEmitter');\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n *\n * @class VisibilityChangeEmitter\n */\n\n\nmodule.exports = class VisibilityChangeEmitter extends EventEmitter {\n  /**\n     * Creates a VisibilityChangeEmitter\n     */\n  constructor() {\n    super();\n\n    if (typeof document === 'undefined') {\n      debug('This is not a browser, no \"document\" found. Stopping.');\n      return;\n    }\n\n    this._initializeVisibilityVarNames();\n\n    this._addVisibilityChangeListener();\n  }\n  /**\n     * document.hidden and document.visibilityChange are the two variables we need to check for;\n     * Since these variables are named differently in different browsers, this function sets\n     * the appropriate name based on the browser being used. Once executed, tha actual names of\n     * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n     * respectively\n     * @private\n     */\n\n\n  _initializeVisibilityVarNames() {\n    let hidden;\n    let visibilityChange;\n\n    if (typeof document.hidden !== 'undefined') {\n      // Opera 12.10 and Firefox 18 and later support\n      hidden = 'hidden';\n      visibilityChange = 'visibilitychange';\n    } else if (typeof document.mozHidden !== 'undefined') {\n      hidden = 'mozHidden';\n      visibilityChange = 'mozvisibilitychange';\n    } else if (typeof document.msHidden !== 'undefined') {\n      hidden = 'msHidden';\n      visibilityChange = 'msvisibilitychange';\n    } else if (typeof document.webkitHidden !== 'undefined') {\n      hidden = 'webkitHidden';\n      visibilityChange = 'webkitvisibilitychange';\n    }\n\n    this._hidden = hidden;\n    this._visibilityChange = visibilityChange;\n  }\n  /**\n     * Adds an event listener on the document that listens to changes in document.visibilityChange\n     * (or whatever name by which the visibilityChange variable is known in the browser)\n     * @private\n     */\n\n\n  _addVisibilityChangeListener() {\n    if (typeof document.addEventListener === 'undefined' || typeof document[this._hidden] === 'undefined') {\n      debug('Checking page visibility requires a browser that supports the Page Visibility API.');\n    } else {\n      // Handle page visibility change\n      document.addEventListener(this._visibilityChange, this._handleVisibilityChange.bind(this), false);\n    }\n  }\n  /**\n     * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n     * ```undefined``` if the page visibility API is not supported by the browser.\n     * @returns {Boolean|void} whether the page is now visible or not (undefined is unknown)\n     */\n\n\n  isVisible() {\n    if (this._hidden === undefined || document[this._hidden] === undefined) {\n      return undefined;\n    }\n\n    return !document[this._hidden];\n  }\n  /**\n     * The function that is called when document.visibilityChange has changed\n     * It emits an event called visibilityChange and sends the value of document.hidden as a\n     * parameter\n     *\n     * @private\n     */\n\n\n  _handleVisibilityChange() {\n    const visible = !document[this._hidden];\n    debug(visible ? 'Page Visible' : 'Page Hidden'); // Emit the event\n\n    this.emit('visibilityChange', visible);\n  }\n\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/connection-manager/visibility-change-emitter.js"],"names":["EventEmitter","require","debug","module","exports","VisibilityChangeEmitter","constructor","document","_initializeVisibilityVarNames","_addVisibilityChangeListener","hidden","visibilityChange","mozHidden","msHidden","webkitHidden","_hidden","_visibilityChange","addEventListener","_handleVisibilityChange","bind","isVisible","undefined","visible","emit"],"mappings":"AAAA;;AAEA;;;AAGA;;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA5B;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,yCAAjB,CAAd;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,uBAAN,SAAsCL,YAAtC,CAAmD;AAClE;;;AAGAM,EAAAA,WAAW,GAAI;AACb;;AACA,QAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnCL,MAAAA,KAAK,CAAC,uDAAD,CAAL;AACA;AACD;;AACD,SAAKM,6BAAL;;AACA,SAAKC,4BAAL;AACD;AAED;;;;;;;;;;AAQAD,EAAAA,6BAA6B,GAAI;AAC/B,QAAIE,MAAJ;AACA,QAAIC,gBAAJ;;AACA,QAAI,OAAOJ,QAAQ,CAACG,MAAhB,KAA2B,WAA/B,EAA4C;AAAE;AAC5CA,MAAAA,MAAM,GAAG,QAAT;AACAC,MAAAA,gBAAgB,GAAG,kBAAnB;AACD,KAHD,MAGO,IAAI,OAAOJ,QAAQ,CAACK,SAAhB,KAA8B,WAAlC,EAA+C;AACpDF,MAAAA,MAAM,GAAG,WAAT;AACAC,MAAAA,gBAAgB,GAAG,qBAAnB;AACD,KAHM,MAGA,IAAI,OAAOJ,QAAQ,CAACM,QAAhB,KAA6B,WAAjC,EAA8C;AACnDH,MAAAA,MAAM,GAAG,UAAT;AACAC,MAAAA,gBAAgB,GAAG,oBAAnB;AACD,KAHM,MAGA,IAAI,OAAOJ,QAAQ,CAACO,YAAhB,KAAiC,WAArC,EAAkD;AACvDJ,MAAAA,MAAM,GAAG,cAAT;AACAC,MAAAA,gBAAgB,GAAG,wBAAnB;AACD;;AACD,SAAKI,OAAL,GAAeL,MAAf;AACA,SAAKM,iBAAL,GAAyBL,gBAAzB;AACD;AAED;;;;;;;AAKAF,EAAAA,4BAA4B,GAAI;AAC9B,QAAI,OAAOF,QAAQ,CAACU,gBAAhB,KAAqC,WAArC,IACI,OAAOV,QAAQ,CAAC,KAAKQ,OAAN,CAAf,KAAkC,WAD1C,EACuD;AACrDb,MAAAA,KAAK,CAAC,oFAAD,CAAL;AACD,KAHD,MAGO;AACL;AACAK,MAAAA,QAAQ,CAACU,gBAAT,CAA0B,KAAKD,iBAA/B,EAAkD,KAAKE,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAAlD,EAA2F,KAA3F;AACD;AACF;AAED;;;;;;;AAKAC,EAAAA,SAAS,GAAI;AACX,QAAI,KAAKL,OAAL,KAAiBM,SAAjB,IAA8Bd,QAAQ,CAAC,KAAKQ,OAAN,CAAR,KAA2BM,SAA7D,EAAwE;AACtE,aAAOA,SAAP;AACD;;AAED,WAAO,CAACd,QAAQ,CAAC,KAAKQ,OAAN,CAAhB;AACD;AAED;;;;;;;;;AAOAG,EAAAA,uBAAuB,GAAI;AACzB,UAAMI,OAAO,GAAG,CAACf,QAAQ,CAAC,KAAKQ,OAAN,CAAzB;AACAb,IAAAA,KAAK,CAACoB,OAAO,GAAG,cAAH,GAAoB,aAA5B,CAAL,CAFyB,CAGzB;;AACA,SAAKC,IAAL,CAAU,kBAAV,EAA8BD,OAA9B;AACD;;AAlFiE,CAApE","sourcesContent":["/* global document */\n\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n'use strict'\nconst EventEmitter = require('events')\n\nconst debug = require('debug')('latency-monitor:VisibilityChangeEmitter')\n\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n *\n * @class VisibilityChangeEmitter\n */\nmodule.exports = class VisibilityChangeEmitter extends EventEmitter {\n  /**\n     * Creates a VisibilityChangeEmitter\n     */\n  constructor () {\n    super()\n    if (typeof document === 'undefined') {\n      debug('This is not a browser, no \"document\" found. Stopping.')\n      return\n    }\n    this._initializeVisibilityVarNames()\n    this._addVisibilityChangeListener()\n  }\n\n  /**\n     * document.hidden and document.visibilityChange are the two variables we need to check for;\n     * Since these variables are named differently in different browsers, this function sets\n     * the appropriate name based on the browser being used. Once executed, tha actual names of\n     * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n     * respectively\n     * @private\n     */\n  _initializeVisibilityVarNames () {\n    let hidden\n    let visibilityChange\n    if (typeof document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support\n      hidden = 'hidden'\n      visibilityChange = 'visibilitychange'\n    } else if (typeof document.mozHidden !== 'undefined') {\n      hidden = 'mozHidden'\n      visibilityChange = 'mozvisibilitychange'\n    } else if (typeof document.msHidden !== 'undefined') {\n      hidden = 'msHidden'\n      visibilityChange = 'msvisibilitychange'\n    } else if (typeof document.webkitHidden !== 'undefined') {\n      hidden = 'webkitHidden'\n      visibilityChange = 'webkitvisibilitychange'\n    }\n    this._hidden = hidden\n    this._visibilityChange = visibilityChange\n  }\n\n  /**\n     * Adds an event listener on the document that listens to changes in document.visibilityChange\n     * (or whatever name by which the visibilityChange variable is known in the browser)\n     * @private\n     */\n  _addVisibilityChangeListener () {\n    if (typeof document.addEventListener === 'undefined' ||\n            typeof document[this._hidden] === 'undefined') {\n      debug('Checking page visibility requires a browser that supports the Page Visibility API.')\n    } else {\n      // Handle page visibility change\n      document.addEventListener(this._visibilityChange, this._handleVisibilityChange.bind(this), false)\n    }\n  }\n\n  /**\n     * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n     * ```undefined``` if the page visibility API is not supported by the browser.\n     * @returns {Boolean|void} whether the page is now visible or not (undefined is unknown)\n     */\n  isVisible () {\n    if (this._hidden === undefined || document[this._hidden] === undefined) {\n      return undefined\n    }\n\n    return !document[this._hidden]\n  }\n\n  /**\n     * The function that is called when document.visibilityChange has changed\n     * It emits an event called visibilityChange and sends the value of document.hidden as a\n     * parameter\n     *\n     * @private\n     */\n  _handleVisibilityChange () {\n    const visible = !document[this._hidden]\n    debug(visible ? 'Page Visible' : 'Page Hidden')\n    // Emit the event\n    this.emit('visibilityChange', visible)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}