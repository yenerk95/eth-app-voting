{"ast":null,"code":"'use strict';\n\nconst pReflect = require('p-reflect');\n\nconst pLimit = require('p-limit');\n\nmodule.exports = async (array, options = {}) => {\n  const {\n    concurrency = Infinity\n  } = options;\n  const limit = pLimit(concurrency);\n  return Promise.all(array.map(element => {\n    if (element && typeof element.then === 'function') {\n      // eslint-disable-line promise/prefer-await-to-then\n      return pReflect(element);\n    }\n\n    if (typeof element === 'function') {\n      return pReflect(limit(() => element()));\n    }\n\n    return pReflect(Promise.resolve(element));\n  }));\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/p-settle/index.js"],"names":["pReflect","require","pLimit","module","exports","array","options","concurrency","Infinity","limit","Promise","all","map","element","then","resolve"],"mappings":"AAAA;;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,OAAOC,KAAP,EAAcC,OAAO,GAAG,EAAxB,KAA+B;AAC/C,QAAM;AAACC,IAAAA,WAAW,GAAGC;AAAf,MAA2BF,OAAjC;AACA,QAAMG,KAAK,GAAGP,MAAM,CAACK,WAAD,CAApB;AAEA,SAAOG,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,GAAN,CAAUC,OAAO,IAAI;AACvC,QAAIA,OAAO,IAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,UAAvC,EAAmD;AAAE;AACpD,aAAOd,QAAQ,CAACa,OAAD,CAAf;AACA;;AAED,QAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AAClC,aAAOb,QAAQ,CAACS,KAAK,CAAC,MAAMI,OAAO,EAAd,CAAN,CAAf;AACA;;AAED,WAAOb,QAAQ,CAACU,OAAO,CAACK,OAAR,CAAgBF,OAAhB,CAAD,CAAf;AACA,GAVkB,CAAZ,CAAP;AAWA,CAfD","sourcesContent":["'use strict';\nconst pReflect = require('p-reflect');\nconst pLimit = require('p-limit');\n\nmodule.exports = async (array, options = {}) => {\n\tconst {concurrency = Infinity} = options;\n\tconst limit = pLimit(concurrency);\n\n\treturn Promise.all(array.map(element => {\n\t\tif (element && typeof element.then === 'function') { // eslint-disable-line promise/prefer-await-to-then\n\t\t\treturn pReflect(element);\n\t\t}\n\n\t\tif (typeof element === 'function') {\n\t\t\treturn pReflect(limit(() => element()));\n\t\t}\n\n\t\treturn pReflect(Promise.resolve(element));\n\t}));\n};\n"]},"metadata":{},"sourceType":"script"}