{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:peer-store:proto-book');\nlog.error = debug('libp2p:peer-store:proto-book:error');\n\nconst PeerId = require('peer-id');\n\nconst Book = require('./book');\n\nconst {\n  codes: {\n    ERR_INVALID_PARAMETERS\n  }\n} = require('../errors');\n/**\n * The ProtoBook is responsible for keeping the known supported\n * protocols of a peer.\n * @fires ProtoBook#change:protocols\n */\n\n\nclass ProtoBook extends Book {\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  constructor(peerStore) {\n    /**\n     * PeerStore Event emitter, used by the ProtoBook to emit:\n     * \"change:protocols\" - emitted when the known protocols of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:protocols',\n      eventProperty: 'protocols',\n      eventTransformer: data => Array.from(data)\n    });\n    /**\n     * Map known peers to their known protocols.\n     * @type {Map<string, Set<string>>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   * @override\n   * @param {PeerId} peerId\n   * @param {Array<string>} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  set(peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data');\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recSet = this.data.get(id);\n    const newSet = new Set(protocols);\n\n    const isSetEqual = (a, b) => a.size === b.size && [...a].every(value => b.has(value)); // Already knows the peer and the recorded protocols are the same?\n    // If yes, no changes needed!\n\n\n    if (recSet && isSetEqual(recSet, newSet)) {\n      log(`the protocols provided to store are equal to the already stored for ${id}`);\n      return this;\n    }\n\n    this._setData(peerId, newSet);\n\n    log(`stored provided protocols for ${id}`);\n    return this;\n  }\n  /**\n   * Adds known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   * @param {PeerId} peerId\n   * @param {Array<string>} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  add(peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data');\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recSet = this.data.get(id) || new Set();\n    const newSet = new Set([...recSet, ...protocols]); // Set Union\n    // Any new protocol added?\n\n    if (recSet.size === newSet.size) {\n      log(`the protocols provided to store are already stored for ${id}`);\n      return this;\n    }\n\n    protocols = [...newSet];\n\n    this._setData(peerId, newSet);\n\n    log(`added provided protocols for ${id}`);\n    return this;\n  }\n\n}\n\nmodule.exports = ProtoBook;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/peer-store/proto-book.js"],"names":["errcode","require","debug","log","error","PeerId","Book","codes","ERR_INVALID_PARAMETERS","ProtoBook","constructor","peerStore","eventName","eventProperty","eventTransformer","data","Array","from","Map","set","peerId","protocols","isPeerId","Error","id","toB58String","recSet","get","newSet","Set","isSetEqual","a","b","size","every","value","has","_setData","add","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('libp2p:peer-store:proto-book')\nlog.error = debug('libp2p:peer-store:proto-book:error')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * The ProtoBook is responsible for keeping the known supported\n * protocols of a peer.\n * @fires ProtoBook#change:protocols\n */\nclass ProtoBook extends Book {\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  constructor (peerStore) {\n    /**\n     * PeerStore Event emitter, used by the ProtoBook to emit:\n     * \"change:protocols\" - emitted when the known protocols of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:protocols',\n      eventProperty: 'protocols',\n      eventTransformer: (data) => Array.from(data)\n    })\n\n    /**\n     * Map known peers to their known protocols.\n     * @type {Map<string, Set<string>>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   * @override\n   * @param {PeerId} peerId\n   * @param {Array<string>} protocols\n   * @returns {ProtoBook}\n   */\n  set (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id)\n    const newSet = new Set(protocols)\n\n    const isSetEqual = (a, b) => a.size === b.size && [...a].every(value => b.has(value))\n\n    // Already knows the peer and the recorded protocols are the same?\n    // If yes, no changes needed!\n    if (recSet && isSetEqual(recSet, newSet)) {\n      log(`the protocols provided to store are equal to the already stored for ${id}`)\n      return this\n    }\n\n    this._setData(peerId, newSet)\n    log(`stored provided protocols for ${id}`)\n\n    return this\n  }\n\n  /**\n   * Adds known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   * @param {PeerId} peerId\n   * @param {Array<string>} protocols\n   * @returns {ProtoBook}\n   */\n  add (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id) || new Set()\n    const newSet = new Set([...recSet, ...protocols]) // Set Union\n\n    // Any new protocol added?\n    if (recSet.size === newSet.size) {\n      log(`the protocols provided to store are already stored for ${id}`)\n      return this\n    }\n\n    protocols = [...newSet]\n\n    this._setData(peerId, newSet)\n    log(`added provided protocols for ${id}`)\n\n    return this\n  }\n}\n\nmodule.exports = ProtoBook\n"]},"metadata":{},"sourceType":"script"}