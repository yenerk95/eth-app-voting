{"ast":null,"code":"'use strict';\n/**\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {String}   chunker Chunker algorithm supported formats:\n *                    \"size-{size}\"\n *                    \"rabin\"\n *                    \"rabin-{avg}\"\n *                    \"rabin-{min}-{avg}-{max}\"\n *\n * @return {Object}   Chunker options for DAGBuilder\n */\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar parseChunkerString = function parseChunkerString(chunker) {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    };\n  } else if (chunker.startsWith('size-')) {\n    var sizeStr = chunker.split('-')[1];\n    var size = parseInt(sizeStr);\n\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer');\n    }\n\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    };\n  } else if (chunker.startsWith('rabin')) {\n    return _objectSpread({\n      chunker: 'rabin'\n    }, parseRabinString(chunker));\n  } else {\n    throw new Error(\"Unrecognized chunker option: \".concat(chunker));\n  }\n};\n/**\n * Parses rabin chunker string\n *\n * @param  {String}   chunker Chunker algorithm supported formats:\n *                            \"rabin\"\n *                            \"rabin-{avg}\"\n *                            \"rabin-{min}-{avg}-{max}\"\n *\n * @return {Object}   rabin chunker options\n */\n\n\nvar parseRabinString = function parseRabinString(chunker) {\n  var options = {};\n  var parts = chunker.split('-');\n\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144;\n      break;\n\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg');\n      break;\n\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min');\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg');\n      options.maxChunkSize = parseChunkSize(parts[3], 'max');\n      break;\n\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"');\n  }\n\n  return options;\n};\n\nvar parseChunkSize = function parseChunkSize(str, name) {\n  var size = parseInt(str);\n\n  if (isNaN(size)) {\n    throw new Error(\"Chunker parameter \".concat(name, \" must be an integer\"));\n  }\n\n  return size;\n};\n\nmodule.exports = {\n  parseChunkSize: parseChunkSize,\n  parseRabinString: parseRabinString,\n  parseChunkerString: parseChunkerString\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/add/utils.js"],"names":["parseChunkerString","chunker","startsWith","sizeStr","split","size","parseInt","isNaN","Error","maxChunkSize","parseRabinString","options","parts","length","avgChunkSize","parseChunkSize","minChunkSize","str","name","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;AAYA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAa;AACtC,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO;AACLA,MAAAA,OAAO,EAAE;AADJ,KAAP;AAGD,GAJD,MAIO,IAAIA,OAAO,CAACC,UAAR,CAAmB,OAAnB,CAAJ,EAAiC;AACtC,QAAMC,OAAO,GAAGF,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAhB;AACA,QAAMC,IAAI,GAAGC,QAAQ,CAACH,OAAD,CAArB;;AACA,QAAII,KAAK,CAACF,IAAD,CAAT,EAAiB;AACf,YAAM,IAAIG,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,WAAO;AACLP,MAAAA,OAAO,EAAE,OADJ;AAELQ,MAAAA,YAAY,EAAEJ;AAFT,KAAP;AAID,GAVM,MAUA,IAAIJ,OAAO,CAACC,UAAR,CAAmB,OAAnB,CAAJ,EAAiC;AACtC;AACED,MAAAA,OAAO,EAAE;AADX,OAEKS,gBAAgB,CAACT,OAAD,CAFrB;AAID,GALM,MAKA;AACL,UAAM,IAAIO,KAAJ,wCAA0CP,OAA1C,EAAN;AACD;AACF,CAvBD;AAyBA;;;;;;;;;;;;AAUA,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,OAAD,EAAa;AACpC,MAAMU,OAAO,GAAG,EAAhB;AACA,MAAMC,KAAK,GAAGX,OAAO,CAACG,KAAR,CAAc,GAAd,CAAd;;AACA,UAAQQ,KAAK,CAACC,MAAd;AACE,SAAK,CAAL;AACEF,MAAAA,OAAO,CAACG,YAAR,GAAuB,MAAvB;AACA;;AACF,SAAK,CAAL;AACEH,MAAAA,OAAO,CAACG,YAAR,GAAuBC,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,KAAX,CAArC;AACA;;AACF,SAAK,CAAL;AACED,MAAAA,OAAO,CAACK,YAAR,GAAuBD,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,KAAX,CAArC;AACAD,MAAAA,OAAO,CAACG,YAAR,GAAuBC,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,KAAX,CAArC;AACAD,MAAAA,OAAO,CAACF,YAAR,GAAuBM,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,KAAX,CAArC;AACA;;AACF;AACE,YAAM,IAAIJ,KAAJ,CAAU,uFAAV,CAAN;AAbJ;;AAgBA,SAAOG,OAAP;AACD,CApBD;;AAsBA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACE,GAAD,EAAMC,IAAN,EAAe;AACpC,MAAMb,IAAI,GAAGC,QAAQ,CAACW,GAAD,CAArB;;AACA,MAAIV,KAAK,CAACF,IAAD,CAAT,EAAiB;AACf,UAAM,IAAIG,KAAJ,6BAA+BU,IAA/B,yBAAN;AACD;;AAED,SAAOb,IAAP;AACD,CAPD;;AASAc,MAAM,CAACC,OAAP,GAAiB;AACfL,EAAAA,cAAc,EAAdA,cADe;AAEfL,EAAAA,gBAAgB,EAAhBA,gBAFe;AAGfV,EAAAA,kBAAkB,EAAlBA;AAHe,CAAjB","sourcesContent":["'use strict'\n\n/**\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {String}   chunker Chunker algorithm supported formats:\n *                    \"size-{size}\"\n *                    \"rabin\"\n *                    \"rabin-{avg}\"\n *                    \"rabin-{min}-{avg}-{max}\"\n *\n * @return {Object}   Chunker options for DAGBuilder\n */\nconst parseChunkerString = (chunker) => {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    }\n  } else if (chunker.startsWith('size-')) {\n    const sizeStr = chunker.split('-')[1]\n    const size = parseInt(sizeStr)\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer')\n    }\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    }\n  } else if (chunker.startsWith('rabin')) {\n    return {\n      chunker: 'rabin',\n      ...parseRabinString(chunker)\n    }\n  } else {\n    throw new Error(`Unrecognized chunker option: ${chunker}`)\n  }\n}\n\n/**\n * Parses rabin chunker string\n *\n * @param  {String}   chunker Chunker algorithm supported formats:\n *                            \"rabin\"\n *                            \"rabin-{avg}\"\n *                            \"rabin-{min}-{avg}-{max}\"\n *\n * @return {Object}   rabin chunker options\n */\nconst parseRabinString = (chunker) => {\n  const options = {}\n  const parts = chunker.split('-')\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144\n      break\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg')\n      break\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min')\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg')\n      options.maxChunkSize = parseChunkSize(parts[3], 'max')\n      break\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"')\n  }\n\n  return options\n}\n\nconst parseChunkSize = (str, name) => {\n  const size = parseInt(str)\n  if (isNaN(size)) {\n    throw new Error(`Chunker parameter ${name} must be an integer`)\n  }\n\n  return size\n}\n\nmodule.exports = {\n  parseChunkSize,\n  parseRabinString,\n  parseChunkerString\n}\n"]},"metadata":{},"sourceType":"script"}