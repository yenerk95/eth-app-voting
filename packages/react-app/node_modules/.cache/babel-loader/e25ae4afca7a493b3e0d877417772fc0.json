{"ast":null,"code":"'use strict';\n\nconst DirSharded = require('./dir-sharded');\n\nmodule.exports = async function flatToShard(child, dir, threshold, options) {\n  let newDir = dir;\n\n  if (dir.flat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options);\n  }\n\n  const parent = newDir.parent;\n\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir;\n      }\n\n      await parent.put(newDir.parentKey, newDir);\n    }\n\n    return flatToShard(newDir, parent, threshold, options);\n  }\n\n  return newDir;\n};\n\nasync function convertToShard(oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options);\n\n  for await (const {\n    key,\n    child\n  } of oldDir.eachChildSeries()) {\n    await newDir.put(key, child);\n  }\n\n  return newDir;\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/flat-to-shard.js"],"names":["DirSharded","require","module","exports","flatToShard","child","dir","threshold","options","newDir","flat","directChildrenCount","convertToShard","parent","put","parentKey","oldDir","root","path","dirty","mtime","mode","key","eachChildSeries"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,eAAeC,WAAf,CAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,SAAxC,EAAmDC,OAAnD,EAA4D;AAC3E,MAAIC,MAAM,GAAGH,GAAb;;AAEA,MAAIA,GAAG,CAACI,IAAJ,IAAYJ,GAAG,CAACK,mBAAJ,MAA6BJ,SAA7C,EAAwD;AACtDE,IAAAA,MAAM,GAAG,MAAMG,cAAc,CAACN,GAAD,EAAME,OAAN,CAA7B;AACD;;AAED,QAAMK,MAAM,GAAGJ,MAAM,CAACI,MAAtB;;AAEA,MAAIA,MAAJ,EAAY;AACV,QAAIJ,MAAM,KAAKH,GAAf,EAAoB;AAClB,UAAID,KAAJ,EAAW;AACTA,QAAAA,KAAK,CAACQ,MAAN,GAAeJ,MAAf;AACD;;AAED,YAAMI,MAAM,CAACC,GAAP,CAAWL,MAAM,CAACM,SAAlB,EAA6BN,MAA7B,CAAN;AACD;;AAED,WAAOL,WAAW,CAACK,MAAD,EAASI,MAAT,EAAiBN,SAAjB,EAA4BC,OAA5B,CAAlB;AACD;;AAED,SAAOC,MAAP;AACD,CAtBD;;AAwBA,eAAeG,cAAf,CAA+BI,MAA/B,EAAuCR,OAAvC,EAAgD;AAC9C,QAAMC,MAAM,GAAG,IAAIT,UAAJ,CAAe;AAC5BiB,IAAAA,IAAI,EAAED,MAAM,CAACC,IADe;AAE5BX,IAAAA,GAAG,EAAE,IAFuB;AAG5BO,IAAAA,MAAM,EAAEG,MAAM,CAACH,MAHa;AAI5BE,IAAAA,SAAS,EAAEC,MAAM,CAACD,SAJU;AAK5BG,IAAAA,IAAI,EAAEF,MAAM,CAACE,IALe;AAM5BC,IAAAA,KAAK,EAAEH,MAAM,CAACG,KANc;AAO5BT,IAAAA,IAAI,EAAE,KAPsB;AAQ5BU,IAAAA,KAAK,EAAEJ,MAAM,CAACI,KARc;AAS5BC,IAAAA,IAAI,EAAEL,MAAM,CAACK;AATe,GAAf,EAUZb,OAVY,CAAf;;AAYA,aAAW,MAAM;AAAEc,IAAAA,GAAF;AAAOjB,IAAAA;AAAP,GAAjB,IAAmCW,MAAM,CAACO,eAAP,EAAnC,EAA6D;AAC3D,UAAMd,MAAM,CAACK,GAAP,CAAWQ,GAAX,EAAgBjB,KAAhB,CAAN;AACD;;AAED,SAAOI,MAAP;AACD","sourcesContent":["'use strict'\n\nconst DirSharded = require('./dir-sharded')\n\nmodule.exports = async function flatToShard (child, dir, threshold, options) {\n  let newDir = dir\n\n  if (dir.flat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options)\n  }\n\n  const parent = newDir.parent\n\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir\n      }\n\n      await parent.put(newDir.parentKey, newDir)\n    }\n\n    return flatToShard(newDir, parent, threshold, options)\n  }\n\n  return newDir\n}\n\nasync function convertToShard (oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options)\n\n  for await (const { key, child } of oldDir.eachChildSeries()) {\n    await newDir.put(key, child)\n  }\n\n  return newDir\n}\n"]},"metadata":{},"sourceType":"script"}