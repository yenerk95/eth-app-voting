{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar errCode = require('err-code');\n\nvar resolve = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, name, path, toResolve, _resolve, depth, ipld, options) {\n    var node, subObject, subPath, prop;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return ipld.get(cid, options);\n\n          case 2:\n            node = _context.sent;\n            subObject = node;\n            subPath = path;\n\n          case 5:\n            if (!toResolve.length) {\n              _context.next = 18;\n              break;\n            }\n\n            prop = toResolve[0];\n\n            if (!(prop in subObject)) {\n              _context.next = 15;\n              break;\n            }\n\n            // remove the bit of the path we have resolved\n            toResolve.shift();\n            subPath = \"\".concat(subPath, \"/\").concat(prop);\n\n            if (!CID.isCID(subObject[prop])) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              entry: {\n                name: name,\n                path: path,\n                cid: cid,\n                node: node,\n                depth: depth\n              },\n              next: {\n                cid: subObject[prop],\n                name: prop,\n                path: subPath,\n                toResolve: toResolve\n              }\n            });\n\n          case 12:\n            subObject = subObject[prop];\n            _context.next = 16;\n            break;\n\n          case 15:\n            throw errCode(new Error(\"No property named \".concat(prop, \" found in cbor node \").concat(cid.toBaseEncodedString())), 'ERR_NO_PROP');\n\n          case 16:\n            _context.next = 5;\n            break;\n\n          case 18:\n            return _context.abrupt(\"return\", {\n              entry: {\n                name: name,\n                path: path,\n                cid: cid,\n                node: node,\n                depth: depth\n              }\n            });\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function resolve(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = resolve;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-exporter/src/resolvers/dag-cbor.js"],"names":["CID","require","errCode","resolve","cid","name","path","toResolve","depth","ipld","options","get","node","subObject","subPath","length","prop","shift","isCID","entry","next","Error","toBaseEncodedString","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAME,OAAO;AAAA,sEAAG,iBAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCJ,QAAnC,EAA4CK,KAA5C,EAAmDC,IAAnD,EAAyDC,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACKD,IAAI,CAACE,GAAL,CAASP,GAAT,EAAcM,OAAd,CADL;;AAAA;AACRE,YAAAA,IADQ;AAEVC,YAAAA,SAFU,GAEED,IAFF;AAGVE,YAAAA,OAHU,GAGAR,IAHA;;AAAA;AAAA,iBAKPC,SAAS,CAACQ,MALH;AAAA;AAAA;AAAA;;AAMNC,YAAAA,IANM,GAMCT,SAAS,CAAC,CAAD,CANV;;AAAA,kBAQRS,IAAI,IAAIH,SARA;AAAA;AAAA;AAAA;;AASV;AACAN,YAAAA,SAAS,CAACU,KAAV;AACAH,YAAAA,OAAO,aAAMA,OAAN,cAAiBE,IAAjB,CAAP;;AAXU,iBAaNhB,GAAG,CAACkB,KAAJ,CAAUL,SAAS,CAACG,IAAD,CAAnB,CAbM;AAAA;AAAA;AAAA;;AAAA,6CAcD;AACLG,cAAAA,KAAK,EAAE;AACLd,gBAAAA,IAAI,EAAJA,IADK;AAELC,gBAAAA,IAAI,EAAJA,IAFK;AAGLF,gBAAAA,GAAG,EAAHA,GAHK;AAILQ,gBAAAA,IAAI,EAAJA,IAJK;AAKLJ,gBAAAA,KAAK,EAALA;AALK,eADF;AAQLY,cAAAA,IAAI,EAAE;AACJhB,gBAAAA,GAAG,EAAES,SAAS,CAACG,IAAD,CADV;AAEJX,gBAAAA,IAAI,EAAEW,IAFF;AAGJV,gBAAAA,IAAI,EAAEQ,OAHF;AAIJP,gBAAAA,SAAS,EAATA;AAJI;AARD,aAdC;;AAAA;AA+BVM,YAAAA,SAAS,GAAGA,SAAS,CAACG,IAAD,CAArB;AA/BU;AAAA;;AAAA;AAAA,kBAkCJd,OAAO,CAAC,IAAImB,KAAJ,6BAA+BL,IAA/B,iCAA0DZ,GAAG,CAACkB,mBAAJ,EAA1D,EAAD,EAAyF,aAAzF,CAlCH;;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAsCP;AACLH,cAAAA,KAAK,EAAE;AACLd,gBAAAA,IAAI,EAAJA,IADK;AAELC,gBAAAA,IAAI,EAAJA,IAFK;AAGLF,gBAAAA,GAAG,EAAHA,GAHK;AAILQ,gBAAAA,IAAI,EAAJA,IAJK;AAKLJ,gBAAAA,KAAK,EAALA;AALK;AADF,aAtCO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA;AAAA;AAAA;AAAA,GAAb;;AAiDAe,MAAM,CAACC,OAAP,GAAiBrB,OAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst errCode = require('err-code')\n\nconst resolve = async (cid, name, path, toResolve, resolve, depth, ipld, options) => {\n  const node = await ipld.get(cid, options)\n  let subObject = node\n  let subPath = path\n\n  while (toResolve.length) {\n    const prop = toResolve[0]\n\n    if (prop in subObject) {\n      // remove the bit of the path we have resolved\n      toResolve.shift()\n      subPath = `${subPath}/${prop}`\n\n      if (CID.isCID(subObject[prop])) {\n        return {\n          entry: {\n            name,\n            path,\n            cid,\n            node,\n            depth\n          },\n          next: {\n            cid: subObject[prop],\n            name: prop,\n            path: subPath,\n            toResolve\n          }\n        }\n      }\n\n      subObject = subObject[prop]\n    } else {\n      // cannot resolve further\n      throw errCode(new Error(`No property named ${prop} found in cbor node ${cid.toBaseEncodedString()}`), 'ERR_NO_PROP')\n    }\n  }\n\n  return {\n    entry: {\n      name,\n      path,\n      cid,\n      node,\n      depth\n    }\n  }\n}\n\nmodule.exports = resolve\n"]},"metadata":{},"sourceType":"script"}