{"ast":null,"code":"'use strict';\n\nvar CID = require('cids');\n\nvar errCode = require('err-code');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nexports.parseArgs = function (cid, path, options) {\n  options = options || {}; // Allow options in path position\n\n  if (path !== undefined && typeof path !== 'string') {\n    options = path;\n    path = undefined;\n  }\n\n  if (typeof cid === 'string') {\n    if (cid.startsWith('/ipfs/')) {\n      cid = cid.substring(6);\n    }\n\n    var split = cid.split('/');\n\n    try {\n      cid = new CID(split[0]);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n\n    split.shift();\n\n    if (split.length > 0) {\n      path = split.join('/');\n    } else {\n      path = path || '/';\n    }\n  } else if (Buffer.isBuffer(cid)) {\n    try {\n      cid = new CID(cid);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n  }\n\n  return [cid, path, options];\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/dag/utils.js"],"names":["CID","require","errCode","Buffer","exports","parseArgs","cid","path","options","undefined","startsWith","substring","split","err","shift","length","join","isBuffer"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;eACmBA,OAAO,CAAC,QAAD,C;IAAlBE,M,YAAAA,M;;AAERC,OAAO,CAACC,SAAR,GAAoB,UAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAwB;AAC1CA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAD0C,CAG1C;;AACA,MAAID,IAAI,KAAKE,SAAT,IAAsB,OAAOF,IAAP,KAAgB,QAA1C,EAAoD;AAClDC,IAAAA,OAAO,GAAGD,IAAV;AACAA,IAAAA,IAAI,GAAGE,SAAP;AACD;;AAED,MAAI,OAAOH,GAAP,KAAe,QAAnB,EAA6B;AAC3B,QAAIA,GAAG,CAACI,UAAJ,CAAe,QAAf,CAAJ,EAA8B;AAC5BJ,MAAAA,GAAG,GAAGA,GAAG,CAACK,SAAJ,CAAc,CAAd,CAAN;AACD;;AAED,QAAMC,KAAK,GAAGN,GAAG,CAACM,KAAJ,CAAU,GAAV,CAAd;;AAEA,QAAI;AACFN,MAAAA,GAAG,GAAG,IAAIN,GAAJ,CAAQY,KAAK,CAAC,CAAD,CAAb,CAAN;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,YAAMX,OAAO,CAACW,GAAD,EAAM,iBAAN,CAAb;AACD;;AAEDD,IAAAA,KAAK,CAACE,KAAN;;AAEA,QAAIF,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACpBR,MAAAA,IAAI,GAAGK,KAAK,CAACI,IAAN,CAAW,GAAX,CAAP;AACD,KAFD,MAEO;AACLT,MAAAA,IAAI,GAAGA,IAAI,IAAI,GAAf;AACD;AACF,GApBD,MAoBO,IAAIJ,MAAM,CAACc,QAAP,CAAgBX,GAAhB,CAAJ,EAA0B;AAC/B,QAAI;AACFA,MAAAA,GAAG,GAAG,IAAIN,GAAJ,CAAQM,GAAR,CAAN;AACD,KAFD,CAEE,OAAOO,GAAP,EAAY;AACZ,YAAMX,OAAO,CAACW,GAAD,EAAM,iBAAN,CAAb;AACD;AACF;;AAED,SAAO,CACLP,GADK,EAELC,IAFK,EAGLC,OAHK,CAAP;AAKD,CA1CD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst errCode = require('err-code')\nconst { Buffer } = require('buffer')\n\nexports.parseArgs = (cid, path, options) => {\n  options = options || {}\n\n  // Allow options in path position\n  if (path !== undefined && typeof path !== 'string') {\n    options = path\n    path = undefined\n  }\n\n  if (typeof cid === 'string') {\n    if (cid.startsWith('/ipfs/')) {\n      cid = cid.substring(6)\n    }\n\n    const split = cid.split('/')\n\n    try {\n      cid = new CID(split[0])\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n\n    split.shift()\n\n    if (split.length > 0) {\n      path = split.join('/')\n    } else {\n      path = path || '/'\n    }\n  } else if (Buffer.isBuffer(cid)) {\n    try {\n      cid = new CID(cid)\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n  }\n\n  return [\n    cid,\n    path,\n    options\n  ]\n}\n"]},"metadata":{},"sourceType":"script"}