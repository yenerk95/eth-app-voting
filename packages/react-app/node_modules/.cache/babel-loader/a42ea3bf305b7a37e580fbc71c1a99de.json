{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('nanoid'),\n    nanoid = _require2.nanoid;\n\nvar withIs = require('class-is');\n\nvar pathSepS = '/';\nvar pathSepB = Buffer.from(pathSepS);\nvar pathSep = pathSepB[0];\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\n\nvar Key = /*#__PURE__*/function () {\n  function Key(s, clean) {\n    _classCallCheck(this, Key);\n\n    if (typeof s === 'string') {\n      this._buf = Buffer.from(s);\n    } else if (Buffer.isBuffer(s)) {\n      this._buf = s;\n    }\n\n    if (clean == null) {\n      clean = true;\n    }\n\n    if (clean) {\n      this.clean();\n    }\n\n    if (this._buf.length === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n  /**\n   * Convert to the string representation\n   *\n   * @param {string} [encoding='utf8']\n   * @returns {string}\n   */\n\n\n  _createClass(Key, [{\n    key: \"toString\",\n    value: function toString(encoding) {\n      return this._buf.toString(encoding || 'utf8');\n    }\n    /**\n     * Return the buffer representation of the key\n     *\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      return this._buf;\n    }\n    /**\n     * @returns {String}\n     */\n\n  }, {\n    key: \"clean\",\n\n    /**\n     * Cleanup the current key\n     *\n     * @returns {void}\n     */\n    value: function clean() {\n      if (!this._buf || this._buf.length === 0) {\n        this._buf = Buffer.from(pathSepS);\n      }\n\n      if (this._buf[0] !== pathSep) {\n        this._buf = Buffer.concat([pathSepB, this._buf]);\n      } // normalize does not remove trailing slashes\n\n\n      while (this._buf.length > 1 && this._buf[this._buf.length - 1] === pathSep) {\n        this._buf = this._buf.slice(0, -1);\n      }\n    }\n    /**\n     * Check if the given key is sorted lower than ourself.\n     *\n     * @param {Key} key\n     * @returns {bool}\n     */\n\n  }, {\n    key: \"less\",\n    value: function less(key) {\n      var list1 = this.list();\n      var list2 = key.list();\n\n      for (var i = 0; i < list1.length; i++) {\n        if (list2.length < i + 1) {\n          return false;\n        }\n\n        var c1 = list1[i];\n        var c2 = list2[i];\n\n        if (c1 < c2) {\n          return true;\n        } else if (c1 > c2) {\n          return false;\n        }\n      }\n\n      return list1.length < list2.length;\n    }\n    /**\n     * Returns the key with all parts in reversed order.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n     * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n     */\n\n  }, {\n    key: \"reverse\",\n    value: function reverse() {\n      return Key.withNamespaces(this.list().slice().reverse());\n    }\n    /**\n     * Returns the `namespaces` making up this Key.\n     *\n     * @returns {Array<string>}\n     */\n\n  }, {\n    key: \"namespaces\",\n    value: function namespaces() {\n      return this.list();\n    }\n    /** Returns the \"base\" namespace of this key.\n     *\n     * @returns {string}\n     *\n     * @example\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n     * // => 'Actor:JohnCleese'\n     *\n     */\n\n  }, {\n    key: \"baseNamespace\",\n    value: function baseNamespace() {\n      var ns = this.namespaces();\n      return ns[ns.length - 1];\n    }\n    /**\n     * Returns the `list` representation of this key.\n     *\n     * @returns {Array<string>}\n     *\n     * @example\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n     * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n     *\n     */\n\n  }, {\n    key: \"list\",\n    value: function list() {\n      return this.toString().split(pathSepS).slice(1);\n    }\n    /**\n     * Returns the \"type\" of this key (value of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n     * // => 'Actor'\n     *\n     */\n\n  }, {\n    key: \"type\",\n    value: function type() {\n      return namespaceType(this.baseNamespace());\n    }\n    /**\n     * Returns the \"name\" of this key (field of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n     * // => 'JohnCleese'\n     */\n\n  }, {\n    key: \"name\",\n    value: function name() {\n      return namespaceValue(this.baseNamespace());\n    }\n    /**\n     * Returns an \"instance\" of this type key (appends value to namespace).\n     *\n     * @param {string} s\n     * @returns {Key}\n     *\n     * @example\n     * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     */\n\n  }, {\n    key: \"instance\",\n    value: function instance(s) {\n      return new _Key(this.toString() + ':' + s);\n    }\n    /**\n     * Returns the \"path\" of this key (parent + type).\n     *\n     * @returns {Key}\n     *\n     * @example\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n     * // => Key('/Comedy/MontyPython/Actor')\n     *\n     */\n\n  }, {\n    key: \"path\",\n    value: function path() {\n      var p = this.parent().toString();\n\n      if (!p.endsWith(pathSepS)) {\n        p += pathSepS;\n      }\n\n      p += this.type();\n      return new _Key(p);\n    }\n    /**\n     * Returns the `parent` Key of this Key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n     * // => Key(\"/Comedy/MontyPython\")\n     *\n     */\n\n  }, {\n    key: \"parent\",\n    value: function parent() {\n      var list = this.list();\n\n      if (list.length === 1) {\n        return new _Key(pathSepS);\n      }\n\n      return new _Key(list.slice(0, -1).join(pathSepS));\n    }\n    /**\n     * Returns the `child` Key of this Key.\n     *\n     * @param {Key} key\n     * @returns {Key}\n     *\n     * @example\n     * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     *\n     */\n\n  }, {\n    key: \"child\",\n    value: function child(key) {\n      if (this.toString() === pathSepS) {\n        return key;\n      } else if (key.toString() === pathSepS) {\n        return this;\n      }\n\n      return new _Key(this.toString() + key.toString(), false);\n    }\n    /**\n     * Returns whether this key is a prefix of `other`\n     *\n     * @param {Key} other\n     * @returns {bool}\n     *\n     * @example\n     * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n     * // => true\n     *\n     */\n\n  }, {\n    key: \"isAncestorOf\",\n    value: function isAncestorOf(other) {\n      if (other.toString() === this.toString()) {\n        return false;\n      }\n\n      return other.toString().startsWith(this.toString());\n    }\n    /**\n     * Returns whether this key is a contains another as prefix.\n     *\n     * @param {Key} other\n     * @returns {bool}\n     *\n     * @example\n     * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n     * // => true\n     *\n     */\n\n  }, {\n    key: \"isDecendantOf\",\n    value: function isDecendantOf(other) {\n      if (other.toString() === this.toString()) {\n        return false;\n      }\n\n      return this.toString().startsWith(other.toString());\n    }\n    /**\n     * Returns wether this key has only one namespace.\n     *\n     * @returns {bool}\n     *\n     */\n\n  }, {\n    key: \"isTopLevel\",\n    value: function isTopLevel() {\n      return this.list().length === 1;\n    }\n    /**\n     * Concats one or more Keys into one new Key.\n     *\n     * @param {Array<Key>} keys\n     * @returns {Key}\n     */\n\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n        keys[_key] = arguments[_key];\n      }\n\n      return Key.withNamespaces([].concat(_toConsumableArray(this.namespaces()), _toConsumableArray(flatten(keys.map(function (key) {\n        return key.namespaces();\n      })))));\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return \"Key(\".concat(this.toString(), \")\");\n    }\n    /**\n     * Constructs a key out of a namespace array.\n     *\n     * @param {Array<string>} list\n     * @returns {Key}\n     *\n     * @example\n     * Key.withNamespaces(['one', 'two'])\n     * // => Key('/one/two')\n     *\n     */\n\n  }], [{\n    key: \"withNamespaces\",\n    value: function withNamespaces(list) {\n      return new _Key(list.join(pathSepS));\n    }\n    /**\n     * Returns a randomly (uuid) generated key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * Key.random()\n     * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n     *\n     */\n\n  }, {\n    key: \"random\",\n    value: function random() {\n      return new _Key(nanoid().replace(/-/g, ''));\n    }\n  }]);\n\n  return Key;\n}();\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\n\n\nfunction namespaceType(ns) {\n  var parts = ns.split(':');\n\n  if (parts.length < 2) {\n    return '';\n  }\n\n  return parts.slice(0, -1).join(':');\n}\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\n\n\nfunction namespaceValue(ns) {\n  var parts = ns.split(':');\n  return parts[parts.length - 1];\n}\n/**\n * Flatten array of arrays (only one level)\n * @param {Array<Array>} arr\n * @return {*}\n */\n\n\nfunction flatten(arr) {\n  var _ref;\n\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(arr));\n}\n\nvar _Key = withIs(Key, {\n  className: 'Key',\n  symbolName: '@ipfs/interface-datastore/key'\n});\n\nmodule.exports = _Key;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/interface-datastore/src/key.js"],"names":["require","Buffer","nanoid","withIs","pathSepS","pathSepB","from","pathSep","Key","s","clean","_buf","isBuffer","length","Error","encoding","toString","concat","slice","key","list1","list","list2","i","c1","c2","withNamespaces","reverse","ns","namespaces","split","namespaceType","baseNamespace","namespaceValue","_Key","p","parent","endsWith","type","join","other","startsWith","keys","flatten","map","Symbol","toStringTag","replace","parts","arr","className","symbolName","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst { nanoid } = require('nanoid')\nconst withIs = require('class-is')\n\nconst pathSepS = '/'\nconst pathSepB = Buffer.from(pathSepS)\nconst pathSep = pathSepB[0]\n\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\nclass Key {\n  constructor (s, clean) {\n    if (typeof s === 'string') {\n      this._buf = Buffer.from(s)\n    } else if (Buffer.isBuffer(s)) {\n      this._buf = s\n    }\n\n    if (clean == null) {\n      clean = true\n    }\n\n    if (clean) {\n      this.clean()\n    }\n\n    if (this._buf.length === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key')\n    }\n  }\n\n  /**\n   * Convert to the string representation\n   *\n   * @param {string} [encoding='utf8']\n   * @returns {string}\n   */\n  toString (encoding) {\n    return this._buf.toString(encoding || 'utf8')\n  }\n\n  /**\n   * Return the buffer representation of the key\n   *\n   * @returns {Buffer}\n   */\n  toBuffer () {\n    return this._buf\n  }\n\n  /**\n   * @returns {String}\n   */\n  get [Symbol.toStringTag] () {\n    return `Key(${this.toString()})`\n  }\n\n  /**\n   * Constructs a key out of a namespace array.\n   *\n   * @param {Array<string>} list\n   * @returns {Key}\n   *\n   * @example\n   * Key.withNamespaces(['one', 'two'])\n   * // => Key('/one/two')\n   *\n   */\n  static withNamespaces (list) {\n    return new _Key(list.join(pathSepS))\n  }\n\n  /**\n   * Returns a randomly (uuid) generated key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * Key.random()\n   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n   *\n   */\n  static random () {\n    return new _Key(nanoid().replace(/-/g, ''))\n  }\n\n  /**\n   * Cleanup the current key\n   *\n   * @returns {void}\n   */\n  clean () {\n    if (!this._buf || this._buf.length === 0) {\n      this._buf = Buffer.from(pathSepS)\n    }\n\n    if (this._buf[0] !== pathSep) {\n      this._buf = Buffer.concat([pathSepB, this._buf])\n    }\n\n    // normalize does not remove trailing slashes\n    while (this._buf.length > 1 && this._buf[this._buf.length - 1] === pathSep) {\n      this._buf = this._buf.slice(0, -1)\n    }\n  }\n\n  /**\n   * Check if the given key is sorted lower than ourself.\n   *\n   * @param {Key} key\n   * @returns {bool}\n   */\n  less (key) {\n    const list1 = this.list()\n    const list2 = key.list()\n\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false\n      }\n\n      const c1 = list1[i]\n      const c2 = list2[i]\n\n      if (c1 < c2) {\n        return true\n      } else if (c1 > c2) {\n        return false\n      }\n    }\n\n    return list1.length < list2.length\n  }\n\n  /**\n   * Returns the key with all parts in reversed order.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n   */\n  reverse () {\n    return Key.withNamespaces(this.list().slice().reverse())\n  }\n\n  /**\n   * Returns the `namespaces` making up this Key.\n   *\n   * @returns {Array<string>}\n   */\n  namespaces () {\n    return this.list()\n  }\n\n  /** Returns the \"base\" namespace of this key.\n   *\n   * @returns {string}\n   *\n   * @example\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n   * // => 'Actor:JohnCleese'\n   *\n   */\n  baseNamespace () {\n    const ns = this.namespaces()\n    return ns[ns.length - 1]\n  }\n\n  /**\n   * Returns the `list` representation of this key.\n   *\n   * @returns {Array<string>}\n   *\n   * @example\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n   *\n   */\n  list () {\n    return this.toString().split(pathSepS).slice(1)\n  }\n\n  /**\n   * Returns the \"type\" of this key (value of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n   * // => 'Actor'\n   *\n   */\n  type () {\n    return namespaceType(this.baseNamespace())\n  }\n\n  /**\n   * Returns the \"name\" of this key (field of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n   * // => 'JohnCleese'\n   */\n  name () {\n    return namespaceValue(this.baseNamespace())\n  }\n\n  /**\n   * Returns an \"instance\" of this type key (appends value to namespace).\n   *\n   * @param {string} s\n   * @returns {Key}\n   *\n   * @example\n   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   */\n  instance (s) {\n    return new _Key(this.toString() + ':' + s)\n  }\n\n  /**\n   * Returns the \"path\" of this key (parent + type).\n   *\n   * @returns {Key}\n   *\n   * @example\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n   * // => Key('/Comedy/MontyPython/Actor')\n   *\n   */\n  path () {\n    let p = this.parent().toString()\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS\n    }\n    p += this.type()\n    return new _Key(p)\n  }\n\n  /**\n   * Returns the `parent` Key of this Key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n   * // => Key(\"/Comedy/MontyPython\")\n   *\n   */\n  parent () {\n    const list = this.list()\n    if (list.length === 1) {\n      return new _Key(pathSepS)\n    }\n\n    return new _Key(list.slice(0, -1).join(pathSepS))\n  }\n\n  /**\n   * Returns the `child` Key of this Key.\n   *\n   * @param {Key} key\n   * @returns {Key}\n   *\n   * @example\n   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   *\n   */\n  child (key) {\n    if (this.toString() === pathSepS) {\n      return key\n    } else if (key.toString() === pathSepS) {\n      return this\n    }\n\n    return new _Key(this.toString() + key.toString(), false)\n  }\n\n  /**\n   * Returns whether this key is a prefix of `other`\n   *\n   * @param {Key} other\n   * @returns {bool}\n   *\n   * @example\n   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n   * // => true\n   *\n   */\n  isAncestorOf (other) {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return other.toString().startsWith(this.toString())\n  }\n\n  /**\n   * Returns whether this key is a contains another as prefix.\n   *\n   * @param {Key} other\n   * @returns {bool}\n   *\n   * @example\n   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n   * // => true\n   *\n   */\n  isDecendantOf (other) {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return this.toString().startsWith(other.toString())\n  }\n\n  /**\n   * Returns wether this key has only one namespace.\n   *\n   * @returns {bool}\n   *\n   */\n  isTopLevel () {\n    return this.list().length === 1\n  }\n\n  /**\n   * Concats one or more Keys into one new Key.\n   *\n   * @param {Array<Key>} keys\n   * @returns {Key}\n   */\n  concat (...keys) {\n    return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))])\n  }\n}\n\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceType (ns) {\n  const parts = ns.split(':')\n  if (parts.length < 2) {\n    return ''\n  }\n  return parts.slice(0, -1).join(':')\n}\n\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceValue (ns) {\n  const parts = ns.split(':')\n  return parts[parts.length - 1]\n}\n\n/**\n * Flatten array of arrays (only one level)\n * @param {Array<Array>} arr\n * @return {*}\n */\nfunction flatten (arr) {\n  return [].concat(...arr)\n}\n\nconst _Key = withIs(Key, { className: 'Key', symbolName: '@ipfs/interface-datastore/key' })\n\nmodule.exports = _Key\n"]},"metadata":{},"sourceType":"script"}