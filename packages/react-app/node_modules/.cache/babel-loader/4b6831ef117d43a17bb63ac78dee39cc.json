{"ast":null,"code":"'use strict';\n\nconst Message = require('../types/message');\n\nconst Wantlist = require('../types/wantlist');\n\nconst CONSTANTS = require('../constants');\n\nconst MsgQueue = require('./msg-queue');\n\nconst logger = require('../utils').logger;\n\nmodule.exports = class WantManager {\n  constructor(peerId, network, stats) {\n    this.peers = new Map();\n    this.wantlist = new Wantlist(stats);\n    this.network = network;\n    this._stats = stats;\n    this._peerId = peerId;\n    this._log = logger(peerId, 'want');\n  }\n\n  _addEntries(cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel);\n    });\n    entries.forEach(e => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid);\n        } else {\n          this.wantlist.remove(e.cid);\n        }\n      } else {\n        this._log('adding to wl');\n\n        this.wantlist.add(e.cid, e.priority);\n      }\n    }); // broadcast changes\n\n    for (const p of this.peers.values()) {\n      p.addEntries(entries);\n    }\n  }\n\n  _startPeerHandler(peerId) {\n    let mq = this.peers.get(peerId.toB58String());\n\n    if (mq) {\n      mq.refcnt++;\n      return;\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network); // new peer, give them the full wantlist\n\n    const fullwantlist = new Message(true);\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n    }\n\n    mq.addMessage(fullwantlist);\n    this.peers.set(peerId.toB58String(), mq);\n    return mq;\n  }\n\n  _stopPeerHandler(peerId) {\n    const mq = this.peers.get(peerId.toB58String());\n\n    if (!mq) {\n      return;\n    }\n\n    mq.refcnt--;\n\n    if (mq.refcnt > 0) {\n      return;\n    }\n\n    this.peers.delete(peerId.toB58String());\n  } // add all the cids to the wantlist\n\n\n  wantBlocks(cids, options = {}) {\n    this._addEntries(cids, false);\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids);\n      });\n    }\n  } // remove blocks of all the given keys without respecting refcounts\n\n\n  unwantBlocks(cids) {\n    this._log('unwant blocks: %s', cids.length);\n\n    this._addEntries(cids, true, true);\n  } // cancel wanting all of the given keys\n\n\n  cancelWants(cids) {\n    this._log('cancel wants: %s', cids.length);\n\n    this._addEntries(cids, true);\n  } // Returns a list of all currently connected peers\n\n\n  connectedPeers() {\n    return Array.from(this.peers.keys());\n  }\n\n  connected(peerId) {\n    this._startPeerHandler(peerId);\n  }\n\n  disconnected(peerId) {\n    this._stopPeerHandler(peerId);\n  }\n\n  start() {}\n\n  stop() {\n    this.peers.forEach(mq => this.disconnected(mq.peerId));\n    clearInterval(this.timer);\n  }\n\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/want-manager/index.js"],"names":["Message","require","Wantlist","CONSTANTS","MsgQueue","logger","module","exports","WantManager","constructor","peerId","network","stats","peers","Map","wantlist","_stats","_peerId","_log","_addEntries","cids","cancel","force","entries","map","cid","i","Entry","kMaxPriority","WantType","Block","forEach","e","removeForce","remove","add","priority","p","values","addEntries","_startPeerHandler","mq","get","toB58String","refcnt","fullwantlist","entry","addEntry","addMessage","set","_stopPeerHandler","delete","wantBlocks","options","signal","addEventListener","cancelWants","unwantBlocks","length","connectedPeers","Array","from","keys","connected","disconnected","start","stop","clearInterval","timer"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAAP,CAAoBI,MAAnC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,WAAN,CAAkB;AACjCC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,OAAV,EAAmBC,KAAnB,EAA0B;AACnC,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,QAAL,GAAgB,IAAIb,QAAJ,CAAaU,KAAb,CAAhB;AAEA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKK,MAAL,GAAcJ,KAAd;AAEA,SAAKK,OAAL,GAAeP,MAAf;AACA,SAAKQ,IAAL,GAAYb,MAAM,CAACK,MAAD,EAAS,MAAT,CAAlB;AACD;;AAEDS,EAAAA,WAAW,CAAEC,IAAF,EAAQC,MAAR,EAAgBC,KAAhB,EAAuB;AAChC,UAAMC,OAAO,GAAGH,IAAI,CAACI,GAAL,CAAS,CAACC,GAAD,EAAMC,CAAN,KAAY;AACnC,aAAO,IAAI1B,OAAO,CAAC2B,KAAZ,CAAkBF,GAAlB,EAAuBtB,SAAS,CAACyB,YAAV,GAAyBF,CAAhD,EAAmD1B,OAAO,CAAC6B,QAAR,CAAiBC,KAApE,EAA2ET,MAA3E,CAAP;AACD,KAFe,CAAhB;AAIAE,IAAAA,OAAO,CAACQ,OAAR,CAAiBC,CAAD,IAAO;AACrB;AACA,UAAIA,CAAC,CAACX,MAAN,EAAc;AACZ,YAAIC,KAAJ,EAAW;AACT,eAAKP,QAAL,CAAckB,WAAd,CAA0BD,CAAC,CAACP,GAA5B;AACD,SAFD,MAEO;AACL,eAAKV,QAAL,CAAcmB,MAAd,CAAqBF,CAAC,CAACP,GAAvB;AACD;AACF,OAND,MAMO;AACL,aAAKP,IAAL,CAAU,cAAV;;AACA,aAAKH,QAAL,CAAcoB,GAAd,CAAkBH,CAAC,CAACP,GAApB,EAAyBO,CAAC,CAACI,QAA3B;AACD;AACF,KAZD,EALgC,CAmBhC;;AACA,SAAK,MAAMC,CAAX,IAAgB,KAAKxB,KAAL,CAAWyB,MAAX,EAAhB,EAAqC;AACnCD,MAAAA,CAAC,CAACE,UAAF,CAAahB,OAAb;AACD;AACF;;AAEDiB,EAAAA,iBAAiB,CAAE9B,MAAF,EAAU;AACzB,QAAI+B,EAAE,GAAG,KAAK5B,KAAL,CAAW6B,GAAX,CAAehC,MAAM,CAACiC,WAAP,EAAf,CAAT;;AAEA,QAAIF,EAAJ,EAAQ;AACNA,MAAAA,EAAE,CAACG,MAAH;AACA;AACD;;AAEDH,IAAAA,EAAE,GAAG,IAAIrC,QAAJ,CAAa,KAAKa,OAAlB,EAA2BP,MAA3B,EAAmC,KAAKC,OAAxC,CAAL,CARyB,CAUzB;;AACA,UAAMkC,YAAY,GAAG,IAAI7C,OAAJ,CAAY,IAAZ,CAArB;;AAEA,SAAK,MAAM8C,KAAX,IAAoB,KAAK/B,QAAL,CAAcQ,OAAd,EAApB,EAA6C;AAC3CsB,MAAAA,YAAY,CAACE,QAAb,CAAsBD,KAAK,CAAC,CAAD,CAAL,CAASrB,GAA/B,EAAoCqB,KAAK,CAAC,CAAD,CAAL,CAASV,QAA7C;AACD;;AAEDK,IAAAA,EAAE,CAACO,UAAH,CAAcH,YAAd;AAEA,SAAKhC,KAAL,CAAWoC,GAAX,CAAevC,MAAM,CAACiC,WAAP,EAAf,EAAqCF,EAArC;AACA,WAAOA,EAAP;AACD;;AAEDS,EAAAA,gBAAgB,CAAExC,MAAF,EAAU;AACxB,UAAM+B,EAAE,GAAG,KAAK5B,KAAL,CAAW6B,GAAX,CAAehC,MAAM,CAACiC,WAAP,EAAf,CAAX;;AAEA,QAAI,CAACF,EAAL,EAAS;AACP;AACD;;AAEDA,IAAAA,EAAE,CAACG,MAAH;;AACA,QAAIH,EAAE,CAACG,MAAH,GAAY,CAAhB,EAAmB;AACjB;AACD;;AAED,SAAK/B,KAAL,CAAWsC,MAAX,CAAkBzC,MAAM,CAACiC,WAAP,EAAlB;AACD,GAzEgC,CA2EjC;;;AACAS,EAAAA,UAAU,CAAEhC,IAAF,EAAQiC,OAAO,GAAG,EAAlB,EAAsB;AAC9B,SAAKlC,WAAL,CAAiBC,IAAjB,EAAuB,KAAvB;;AAEA,QAAIiC,OAAO,IAAIA,OAAO,CAACC,MAAvB,EAA+B;AAC7BD,MAAAA,OAAO,CAACC,MAAR,CAAeC,gBAAf,CAAgC,OAAhC,EAAyC,MAAM;AAC7C,aAAKC,WAAL,CAAiBpC,IAAjB;AACD,OAFD;AAGD;AACF,GApFgC,CAsFjC;;;AACAqC,EAAAA,YAAY,CAAErC,IAAF,EAAQ;AAClB,SAAKF,IAAL,CAAU,mBAAV,EAA+BE,IAAI,CAACsC,MAApC;;AACA,SAAKvC,WAAL,CAAiBC,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B;AACD,GA1FgC,CA4FjC;;;AACAoC,EAAAA,WAAW,CAAEpC,IAAF,EAAQ;AACjB,SAAKF,IAAL,CAAU,kBAAV,EAA8BE,IAAI,CAACsC,MAAnC;;AACA,SAAKvC,WAAL,CAAiBC,IAAjB,EAAuB,IAAvB;AACD,GAhGgC,CAkGjC;;;AACAuC,EAAAA,cAAc,GAAI;AAChB,WAAOC,KAAK,CAACC,IAAN,CAAW,KAAKhD,KAAL,CAAWiD,IAAX,EAAX,CAAP;AACD;;AAEDC,EAAAA,SAAS,CAAErD,MAAF,EAAU;AACjB,SAAK8B,iBAAL,CAAuB9B,MAAvB;AACD;;AAEDsD,EAAAA,YAAY,CAAEtD,MAAF,EAAU;AACpB,SAAKwC,gBAAL,CAAsBxC,MAAtB;AACD;;AAEDuD,EAAAA,KAAK,GAAI,CACR;;AAEDC,EAAAA,IAAI,GAAI;AACN,SAAKrD,KAAL,CAAWkB,OAAX,CAAoBU,EAAD,IAAQ,KAAKuB,YAAL,CAAkBvB,EAAE,CAAC/B,MAArB,CAA3B;AAEAyD,IAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACD;;AAtHgC,CAAnC","sourcesContent":["'use strict'\n\nconst Message = require('../types/message')\nconst Wantlist = require('../types/wantlist')\nconst CONSTANTS = require('../constants')\nconst MsgQueue = require('./msg-queue')\nconst logger = require('../utils').logger\n\nmodule.exports = class WantManager {\n  constructor (peerId, network, stats) {\n    this.peers = new Map()\n    this.wantlist = new Wantlist(stats)\n\n    this.network = network\n    this._stats = stats\n\n    this._peerId = peerId\n    this._log = logger(peerId, 'want')\n  }\n\n  _addEntries (cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel)\n    })\n\n    entries.forEach((e) => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid)\n        } else {\n          this.wantlist.remove(e.cid)\n        }\n      } else {\n        this._log('adding to wl')\n        this.wantlist.add(e.cid, e.priority)\n      }\n    })\n\n    // broadcast changes\n    for (const p of this.peers.values()) {\n      p.addEntries(entries)\n    }\n  }\n\n  _startPeerHandler (peerId) {\n    let mq = this.peers.get(peerId.toB58String())\n\n    if (mq) {\n      mq.refcnt++\n      return\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network)\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true)\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority)\n    }\n\n    mq.addMessage(fullwantlist)\n\n    this.peers.set(peerId.toB58String(), mq)\n    return mq\n  }\n\n  _stopPeerHandler (peerId) {\n    const mq = this.peers.get(peerId.toB58String())\n\n    if (!mq) {\n      return\n    }\n\n    mq.refcnt--\n    if (mq.refcnt > 0) {\n      return\n    }\n\n    this.peers.delete(peerId.toB58String())\n  }\n\n  // add all the cids to the wantlist\n  wantBlocks (cids, options = {}) {\n    this._addEntries(cids, false)\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids)\n      })\n    }\n  }\n\n  // remove blocks of all the given keys without respecting refcounts\n  unwantBlocks (cids) {\n    this._log('unwant blocks: %s', cids.length)\n    this._addEntries(cids, true, true)\n  }\n\n  // cancel wanting all of the given keys\n  cancelWants (cids) {\n    this._log('cancel wants: %s', cids.length)\n    this._addEntries(cids, true)\n  }\n\n  // Returns a list of all currently connected peers\n  connectedPeers () {\n    return Array.from(this.peers.keys())\n  }\n\n  connected (peerId) {\n    this._startPeerHandler(peerId)\n  }\n\n  disconnected (peerId) {\n    this._stopPeerHandler(peerId)\n  }\n\n  start () {\n  }\n\n  stop () {\n    this.peers.forEach((mq) => this.disconnected(mq.peerId))\n\n    clearInterval(this.timer)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}