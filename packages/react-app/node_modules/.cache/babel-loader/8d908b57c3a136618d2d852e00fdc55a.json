{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst {\n  cidToString\n} = require('../utils/cid');\n\nconst log = debug('ipfs:mfs-preload');\nlog.error = debug('ipfs:mfs-preload:error');\n\nmodule.exports = ({\n  preload,\n  files,\n  options\n}) => {\n  options = options || {};\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    const noop = async () => {};\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  let rootCid, timeoutId;\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/');\n      const nextRootCid = cidToString(stats.cid, {\n        base: 'base32'\n      });\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`);\n        await preload(stats.cid);\n        rootCid = nextRootCid;\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err);\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    }\n  };\n\n  return {\n    async start() {\n      const stats = await files.stat('/');\n      rootCid = cidToString(stats.cid, {\n        base: 'base32'\n      });\n      log(`monitoring MFS root ${stats.cid}`);\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    },\n\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/mfs-preload.js"],"names":["debug","require","cidToString","log","error","module","exports","preload","files","options","interval","enabled","noop","start","stop","rootCid","timeoutId","preloadMfs","stats","stat","nextRootCid","cid","base","err","setTimeout","clearTimeout"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,cAAD,CAA/B;;AACA,MAAME,GAAG,GAAGH,KAAK,CAAC,kBAAD,CAAjB;AACAG,GAAG,CAACC,KAAJ,GAAYJ,KAAK,CAAC,wBAAD,CAAjB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAD,KAAiC;AAChDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,IAAoB,KAAK,IAA5C;;AAEA,MAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;AACpBR,IAAAA,GAAG,CAAC,sBAAD,CAAH;;AACA,UAAMS,IAAI,GAAG,YAAY,CAAE,CAA3B;;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAED,IAAT;AAAeE,MAAAA,IAAI,EAAEF;AAArB,KAAP;AACD;;AAED,MAAIG,OAAJ,EAAaC,SAAb;;AAEA,QAAMC,UAAU,GAAG,YAAY;AAC7B,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACA,YAAMC,WAAW,GAAGlB,WAAW,CAACgB,KAAK,CAACG,GAAP,EAAY;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAZ,CAA/B;;AAEA,UAAIP,OAAO,KAAKK,WAAhB,EAA6B;AAC3BjB,QAAAA,GAAG,CAAE,+BAA8BY,OAAQ,OAAMG,KAAK,CAACG,GAAI,EAAxD,CAAH;AACA,cAAMd,OAAO,CAACW,KAAK,CAACG,GAAP,CAAb;AACAN,QAAAA,OAAO,GAAGK,WAAV;AACD;AACF,KATD,CASE,OAAOG,GAAP,EAAY;AACZpB,MAAAA,GAAG,CAACC,KAAJ,CAAU,4BAAV,EAAwCmB,GAAxC;AACD,KAXD,SAWU;AACRP,MAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AACD;AACF,GAfD;;AAiBA,SAAO;AACL,UAAMG,KAAN,GAAe;AACb,YAAMK,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACAJ,MAAAA,OAAO,GAAGb,WAAW,CAACgB,KAAK,CAACG,GAAP,EAAY;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAZ,CAArB;AACAnB,MAAAA,GAAG,CAAE,uBAAsBe,KAAK,CAACG,GAAI,EAAlC,CAAH;AACAL,MAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AACD,KANI;;AAOLI,IAAAA,IAAI,GAAI;AACNW,MAAAA,YAAY,CAACT,SAAD,CAAZ;AACD;;AATI,GAAP;AAWD,CAxCD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst { cidToString } = require('../utils/cid')\nconst log = debug('ipfs:mfs-preload')\nlog.error = debug('ipfs:mfs-preload:error')\n\nmodule.exports = ({ preload, files, options }) => {\n  options = options || {}\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid, timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = cidToString(stats.cid, { base: 'base32' })\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = cidToString(stats.cid, { base: 'base32' })\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}