{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst webcrypto = require('../webcrypto');\n\nconst lengths = require('./lengths');\n\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n};\n\nconst sign = async (key, data) => {\n  return Buffer.from(await webcrypto.get().subtle.sign({\n    name: 'HMAC'\n  }, key, data));\n};\n\nexports.create = async function (hashType, secret) {\n  const hash = hashTypes[hashType];\n  const key = await webcrypto.get().subtle.importKey('raw', secret, {\n    name: 'HMAC',\n    hash: {\n      name: hash\n    }\n  }, false, ['sign']);\n  return {\n    async digest(data) {\n      // eslint-disable-line require-await\n      return sign(key, data);\n    },\n\n    length: lengths[hashType]\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/hmac/index-browser.js"],"names":["Buffer","require","webcrypto","lengths","hashTypes","SHA1","SHA256","SHA512","sign","key","data","from","get","subtle","name","exports","create","hashType","secret","hash","importKey","digest","length"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AAEA,MAAMG,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,OADU;AAEhBC,EAAAA,MAAM,EAAE,SAFQ;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;;AAMA,MAAMC,IAAI,GAAG,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AAChC,SAAOV,MAAM,CAACW,IAAP,CAAY,MAAMT,SAAS,CAACU,GAAV,GAAgBC,MAAhB,CAAuBL,IAAvB,CAA4B;AAAEM,IAAAA,IAAI,EAAE;AAAR,GAA5B,EAA8CL,GAA9C,EAAmDC,IAAnD,CAAlB,CAAP;AACD,CAFD;;AAIAK,OAAO,CAACC,MAAR,GAAiB,gBAAgBC,QAAhB,EAA0BC,MAA1B,EAAkC;AACjD,QAAMC,IAAI,GAAGf,SAAS,CAACa,QAAD,CAAtB;AAEA,QAAMR,GAAG,GAAG,MAAMP,SAAS,CAACU,GAAV,GAAgBC,MAAhB,CAAuBO,SAAvB,CAChB,KADgB,EAEhBF,MAFgB,EAGhB;AACEJ,IAAAA,IAAI,EAAE,MADR;AAEEK,IAAAA,IAAI,EAAE;AAAEL,MAAAA,IAAI,EAAEK;AAAR;AAFR,GAHgB,EAOhB,KAPgB,EAQhB,CAAC,MAAD,CARgB,CAAlB;AAWA,SAAO;AACL,UAAME,MAAN,CAAcX,IAAd,EAAoB;AAAE;AACpB,aAAOF,IAAI,CAACC,GAAD,EAAMC,IAAN,CAAX;AACD,KAHI;;AAILY,IAAAA,MAAM,EAAEnB,OAAO,CAACc,QAAD;AAJV,GAAP;AAMD,CApBD","sourcesContent":["'use strict'\nconst { Buffer } = require('buffer')\nconst webcrypto = require('../webcrypto')\nconst lengths = require('./lengths')\n\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n}\n\nconst sign = async (key, data) => {\n  return Buffer.from(await webcrypto.get().subtle.sign({ name: 'HMAC' }, key, data))\n}\n\nexports.create = async function (hashType, secret) {\n  const hash = hashTypes[hashType]\n\n  const key = await webcrypto.get().subtle.importKey(\n    'raw',\n    secret,\n    {\n      name: 'HMAC',\n      hash: { name: hash }\n    },\n    false,\n    ['sign']\n  )\n\n  return {\n    async digest (data) { // eslint-disable-line require-await\n      return sign(key, data)\n    },\n    length: lengths[hashType]\n  }\n}\n"]},"metadata":{},"sourceType":"script"}