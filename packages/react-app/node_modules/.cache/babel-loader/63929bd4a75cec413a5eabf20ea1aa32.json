{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar abortable = require('abortable-iterator');\n\nvar AbortController = require('abort-controller');\n\nvar log = require('debug')('libp2p:mplex:stream');\n\nvar pushable = require('it-pushable');\n\nvar BufferList = require('bl/BufferList');\n\nvar _require = require('./restrict-size'),\n    MAX_MSG_SIZE = _require.MAX_MSG_SIZE;\n\nvar _require2 = require('./message-types'),\n    InitiatorMessageTypes = _require2.InitiatorMessageTypes,\n    ReceiverMessageTypes = _require2.ReceiverMessageTypes;\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send Called to send data through the stream\n * @param {function(Error)} [options.onEnd] Called whenever the stream ends\n * @param {string} [options.type] One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\n\n\nmodule.exports = function (_ref) {\n  var id = _ref.id,\n      name = _ref.name,\n      send = _ref.send,\n      _ref$onEnd = _ref.onEnd,\n      onEnd = _ref$onEnd === void 0 ? function () {} : _ref$onEnd,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'initiator' : _ref$type,\n      _ref$maxMsgSize = _ref.maxMsgSize,\n      maxMsgSize = _ref$maxMsgSize === void 0 ? MAX_MSG_SIZE : _ref$maxMsgSize;\n  var abortController = new AbortController();\n  var resetController = new AbortController();\n  var Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes;\n  var externalId = type === 'initiator' ? \"i\".concat(id) : \"r\".concat(id);\n  name = String(name == null ? id : name);\n  var sourceEnded = false;\n  var sinkEnded = false;\n  var endErr;\n\n  var onSourceEnd = function onSourceEnd(err) {\n    sourceEnded = true;\n    log('%s stream %s source end', type, name, err);\n    if (err && !endErr) endErr = err;\n\n    if (sinkEnded) {\n      stream.timeline.close = Date.now();\n      onEnd(endErr);\n    }\n  };\n\n  var onSinkEnd = function onSinkEnd(err) {\n    sinkEnded = true;\n    log('%s stream %s sink end', type, name, err);\n    if (err && !endErr) endErr = err;\n\n    if (sourceEnded) {\n      stream.timeline.close = Date.now();\n      onEnd(endErr);\n    }\n  };\n\n  var stream = {\n    // Close for reading\n    close: function close() {\n      return stream.source.end();\n    },\n    // Close for reading and writing (local error)\n    abort: function abort(err) {\n      log('%s stream %s abort', type, name, err); // End the source with the passed error\n\n      stream.source.end(err);\n      abortController.abort();\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: function reset() {\n      return resetController.abort();\n    },\n    sink: function () {\n      var _sink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                source = abortable(source, [{\n                  signal: abortController.signal,\n                  options: {\n                    abortMessage: 'stream aborted',\n                    abortCode: 'ERR_MPLEX_STREAM_ABORT'\n                  }\n                }, {\n                  signal: resetController.signal,\n                  options: {\n                    abortMessage: 'stream reset',\n                    abortCode: 'ERR_MPLEX_STREAM_RESET'\n                  }\n                }]);\n\n                if (type === 'initiator') {\n                  // If initiator, open a new stream\n                  send({\n                    id: id,\n                    type: Types.NEW_STREAM,\n                    data: name\n                  });\n                }\n\n                _context.prev = 2;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 5;\n                _iterator = _asyncIterator(source);\n\n              case 7:\n                _context.next = 9;\n                return _iterator.next();\n\n              case 9:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 13;\n                return _step.value;\n\n              case 13:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 28;\n                  break;\n                }\n\n                data = _value;\n\n              case 16:\n                if (!data.length) {\n                  _context.next = 25;\n                  break;\n                }\n\n                if (!(data.length <= maxMsgSize)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                send({\n                  id: id,\n                  type: Types.MESSAGE,\n                  data: data\n                });\n                return _context.abrupt(\"break\", 25);\n\n              case 20:\n                data = BufferList.isBufferList(data) ? data : new BufferList(data);\n                send({\n                  id: id,\n                  type: Types.MESSAGE,\n                  data: data.shallowSlice(0, maxMsgSize)\n                });\n                data.consume(maxMsgSize);\n                _context.next = 16;\n                break;\n\n              case 25:\n                _iteratorNormalCompletion = true;\n                _context.next = 7;\n                break;\n\n              case 28:\n                _context.next = 34;\n                break;\n\n              case 30:\n                _context.prev = 30;\n                _context.t0 = _context[\"catch\"](5);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 34:\n                _context.prev = 34;\n                _context.prev = 35;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 39;\n                  break;\n                }\n\n                _context.next = 39;\n                return _iterator.return();\n\n              case 39:\n                _context.prev = 39;\n\n                if (!_didIteratorError) {\n                  _context.next = 42;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 42:\n                return _context.finish(39);\n\n              case 43:\n                return _context.finish(34);\n\n              case 44:\n                _context.next = 51;\n                break;\n\n              case 46:\n                _context.prev = 46;\n                _context.t1 = _context[\"catch\"](2);\n\n                // Send no more data if this stream was remotely reset\n                if (_context.t1.code === 'ERR_MPLEX_STREAM_RESET') {\n                  log('%s stream %s reset', type, name);\n                } else {\n                  log('%s stream %s error', type, name, _context.t1);\n                  send({\n                    id: id,\n                    type: Types.RESET\n                  });\n                }\n\n                stream.source.end(_context.t1);\n                return _context.abrupt(\"return\", onSinkEnd(_context.t1));\n\n              case 51:\n                send({\n                  id: id,\n                  type: Types.CLOSE\n                });\n                onSinkEnd();\n\n              case 53:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 46], [5, 30, 34, 44], [35,, 39, 43]]);\n      }));\n\n      function sink(_x) {\n        return _sink.apply(this, arguments);\n      }\n\n      return sink;\n    }(),\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  };\n  return stream;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-mplex/src/stream.js"],"names":["abortable","require","AbortController","log","pushable","BufferList","MAX_MSG_SIZE","InitiatorMessageTypes","ReceiverMessageTypes","module","exports","id","name","send","onEnd","type","maxMsgSize","abortController","resetController","Types","externalId","String","sourceEnded","sinkEnded","endErr","onSourceEnd","err","stream","timeline","close","Date","now","onSinkEnd","source","end","abort","reset","sink","signal","options","abortMessage","abortCode","NEW_STREAM","data","length","MESSAGE","isBufferList","shallowSlice","consume","code","RESET","CLOSE","open"],"mappings":"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","sourcesContent":["'use strict'\n\nconst abortable = require('abortable-iterator')\nconst AbortController = require('abort-controller')\nconst log = require('debug')('libp2p:mplex:stream')\nconst pushable = require('it-pushable')\nconst BufferList = require('bl/BufferList')\nconst { MAX_MSG_SIZE } = require('./restrict-size')\nconst { InitiatorMessageTypes, ReceiverMessageTypes } = require('./message-types')\n\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send Called to send data through the stream\n * @param {function(Error)} [options.onEnd] Called whenever the stream ends\n * @param {string} [options.type] One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\nmodule.exports = ({ id, name, send, onEnd = () => {}, type = 'initiator', maxMsgSize = MAX_MSG_SIZE }) => {\n  const abortController = new AbortController()\n  const resetController = new AbortController()\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes\n  const externalId = type === 'initiator' ? (`i${id}`) : `r${id}`\n\n  name = String(name == null ? id : name)\n\n  let sourceEnded = false\n  let sinkEnded = false\n  let endErr\n\n  const onSourceEnd = err => {\n    sourceEnded = true\n    log('%s stream %s source end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sinkEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const onSinkEnd = err => {\n    sinkEnded = true\n    log('%s stream %s sink end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sourceEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const stream = {\n    // Close for reading\n    close: () => stream.source.end(),\n    // Close for reading and writing (local error)\n    abort: err => {\n      log('%s stream %s abort', type, name, err)\n      // End the source with the passed error\n      stream.source.end(err)\n      abortController.abort()\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => resetController.abort(),\n    sink: async source => {\n      source = abortable(source, [\n        { signal: abortController.signal, options: { abortMessage: 'stream aborted', abortCode: 'ERR_MPLEX_STREAM_ABORT' } },\n        { signal: resetController.signal, options: { abortMessage: 'stream reset', abortCode: 'ERR_MPLEX_STREAM_RESET' } }\n      ])\n\n      if (type === 'initiator') { // If initiator, open a new stream\n        send({ id, type: Types.NEW_STREAM, data: name })\n      }\n\n      try {\n        for await (let data of source) {\n          while (data.length) {\n            if (data.length <= maxMsgSize) {\n              send({ id, type: Types.MESSAGE, data })\n              break\n            }\n            data = BufferList.isBufferList(data) ? data : new BufferList(data)\n            send({ id, type: Types.MESSAGE, data: data.shallowSlice(0, maxMsgSize) })\n            data.consume(maxMsgSize)\n          }\n        }\n      } catch (err) {\n        // Send no more data if this stream was remotely reset\n        if (err.code === 'ERR_MPLEX_STREAM_RESET') {\n          log('%s stream %s reset', type, name)\n        } else {\n          log('%s stream %s error', type, name, err)\n          send({ id, type: Types.RESET })\n        }\n\n        stream.source.end(err)\n        return onSinkEnd(err)\n      }\n\n      send({ id, type: Types.CLOSE })\n      onSinkEnd()\n    },\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  }\n\n  return stream\n}\n"]},"metadata":{},"sourceType":"script"}