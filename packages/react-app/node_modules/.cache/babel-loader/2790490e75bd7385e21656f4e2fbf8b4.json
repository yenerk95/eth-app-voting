{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('./utils'),\n    isValidMultiaddr = _require.isValidMultiaddr;\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _rm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(multiaddr, options) {\n      var res, config;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n\n              if (!(multiaddr && !isValidMultiaddr(multiaddr))) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error(\"\".concat(multiaddr, \" is not a valid Multiaddr\"));\n\n            case 3:\n              res = [];\n              _context.next = 6;\n              return repo.config.getAll();\n\n            case 6:\n              config = _context.sent;\n\n              if (options.all) {\n                res = config.Bootstrap || [];\n                config.Bootstrap = [];\n              } else {\n                config.Bootstrap = (config.Bootstrap || []).filter(function (ma) {\n                  return ma !== multiaddr;\n                });\n              }\n\n              _context.next = 10;\n              return repo.config.set(config);\n\n            case 10:\n              if (!options.all && multiaddr) {\n                res.push(multiaddr);\n              }\n\n              return _context.abrupt(\"return\", {\n                Peers: res\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function rm(_x, _x2) {\n      return _rm.apply(this, arguments);\n    }\n\n    return rm;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/bootstrap/rm.js"],"names":["require","isValidMultiaddr","withTimeoutOption","module","exports","repo","multiaddr","options","Error","res","config","getAll","all","Bootstrap","filter","ma","set","push","Peers","rm"],"mappings":"AAAA;;;;;;eAE6BA,OAAO,CAAC,SAAD,C;IAA5BC,gB,YAAAA,gB;;gBACsBD,OAAO,CAAC,aAAD,C;IAA7BE,iB,aAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC7B,SAAOH,iBAAiB;AAAA,uEAAC,iBAAmBI,SAAnB,EAA8BC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AADuB,oBAGnBD,SAAS,IAAI,CAACL,gBAAgB,CAACK,SAAD,CAHX;AAAA;AAAA;AAAA;;AAAA,oBAIf,IAAIE,KAAJ,WAAaF,SAAb,+BAJe;;AAAA;AAOnBG,cAAAA,GAPmB,GAOb,EAPa;AAAA;AAAA,qBAQFJ,IAAI,CAACK,MAAL,CAAYC,MAAZ,EARE;;AAAA;AAQjBD,cAAAA,MARiB;;AAUvB,kBAAIH,OAAO,CAACK,GAAZ,EAAiB;AACfH,gBAAAA,GAAG,GAAGC,MAAM,CAACG,SAAP,IAAoB,EAA1B;AACAH,gBAAAA,MAAM,CAACG,SAAP,GAAmB,EAAnB;AACD,eAHD,MAGO;AACLH,gBAAAA,MAAM,CAACG,SAAP,GAAmB,CAACH,MAAM,CAACG,SAAP,IAAoB,EAArB,EAAyBC,MAAzB,CAAgC,UAAAC,EAAE;AAAA,yBAAIA,EAAE,KAAKT,SAAX;AAAA,iBAAlC,CAAnB;AACD;;AAfsB;AAAA,qBAiBjBD,IAAI,CAACK,MAAL,CAAYM,GAAZ,CAAgBN,MAAhB,CAjBiB;;AAAA;AAmBvB,kBAAI,CAACH,OAAO,CAACK,GAAT,IAAgBN,SAApB,EAA+B;AAC7BG,gBAAAA,GAAG,CAACQ,IAAJ,CAASX,SAAT;AACD;;AArBsB,+CAuBhB;AAAEY,gBAAAA,KAAK,EAAET;AAAT,eAvBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBU,EAAhB;AAAA;AAAA;;AAAA,WAAgBA,EAAhB;AAAA,MAAxB;AAyBD,CA1BD","sourcesContent":["'use strict'\n\nconst { isValidMultiaddr } = require('./utils')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ repo }) => {\n  return withTimeoutOption(async function rm (multiaddr, options) {\n    options = options || {}\n\n    if (multiaddr && !isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    let res = []\n    const config = await repo.config.getAll()\n\n    if (options.all) {\n      res = config.Bootstrap || []\n      config.Bootstrap = []\n    } else {\n      config.Bootstrap = (config.Bootstrap || []).filter(ma => ma !== multiaddr)\n    }\n\n    await repo.config.set(config)\n\n    if (!options.all && multiaddr) {\n      res.push(multiaddr)\n    }\n\n    return { Peers: res }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}