{"ast":null,"code":"'use strict';\n\nconst varint = require('varint');\n\nconst BufferList = require('bl/BufferList'); // Decode a chunk and yield an _array_ of decoded messages\n\n\nmodule.exports = source => async function* decode() {\n  const decoder = new Decoder();\n\n  for await (const chunk of source) {\n    const msgs = decoder.write(chunk);\n    if (msgs.length) yield msgs;\n  }\n}();\n\nclass Decoder {\n  constructor() {\n    this._buffer = new BufferList(); // optimization to allow varint to take a BufferList (well a proxy to)\n\n    this._bufferProxy = new Proxy({}, {\n      get: (_, prop) => prop[0] === 'l' ? this._buffer[prop] : this._buffer.get(parseInt(prop))\n    });\n    this._headerInfo = null;\n  }\n  /**\n   * @param {Buffer|BufferList} chunk\n   * @returns {object[]} An array of message objects\n   */\n\n\n  write(chunk) {\n    if (!chunk || !chunk.length) return [];\n\n    this._buffer.append(chunk);\n\n    const msgs = [];\n\n    while (true) {\n      if (!this._headerInfo) {\n        try {\n          this._headerInfo = this._decodeHeader(this._bufferProxy);\n        } catch (_) {\n          break; // We haven't received enough data yet\n        }\n      }\n\n      const {\n        id,\n        type,\n        length,\n        offset\n      } = this._headerInfo;\n      const bufferedDataLength = this._buffer.length - offset;\n      if (bufferedDataLength < length) break; // not enough data yet\n\n      msgs.push({\n        id,\n        type,\n        data: this._buffer.shallowSlice(offset, offset + length)\n      });\n\n      this._buffer.consume(offset + length);\n\n      this._headerInfo = null;\n    }\n\n    return msgs;\n  }\n  /**\n   * Attempts to decode the message header from the buffer\n   * @private\n   * @param {Buffer} data\n   * @returns {*} message header (id, type, offset, length)\n   */\n\n\n  _decodeHeader(data) {\n    const h = varint.decode(data);\n    let offset = varint.decode.bytes;\n    const length = varint.decode(data, offset);\n    offset += varint.decode.bytes;\n    return {\n      id: h >> 3,\n      type: h & 7,\n      offset,\n      length\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-mplex/src/coder/decode.js"],"names":["varint","require","BufferList","module","exports","source","decode","decoder","Decoder","chunk","msgs","write","length","constructor","_buffer","_bufferProxy","Proxy","get","_","prop","parseInt","_headerInfo","append","_decodeHeader","id","type","offset","bufferedDataLength","push","data","shallowSlice","consume","h","bytes"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B,C,CAEA;;;AACAE,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAK,gBAAiBC,MAAjB,GAA2B;AACrD,QAAMC,OAAO,GAAG,IAAIC,OAAJ,EAAhB;;AACA,aAAW,MAAMC,KAAjB,IAA0BJ,MAA1B,EAAkC;AAChC,UAAMK,IAAI,GAAGH,OAAO,CAACI,KAAR,CAAcF,KAAd,CAAb;AACA,QAAIC,IAAI,CAACE,MAAT,EAAiB,MAAMF,IAAN;AAClB;AACF,CAN0B,EAA3B;;AAQA,MAAMF,OAAN,CAAc;AACZK,EAAAA,WAAW,GAAI;AACb,SAAKC,OAAL,GAAe,IAAIZ,UAAJ,EAAf,CADa,CAEb;;AACA,SAAKa,YAAL,GAAoB,IAAIC,KAAJ,CAAU,EAAV,EAAc;AAChCC,MAAAA,GAAG,EAAE,CAACC,CAAD,EAAIC,IAAJ,KAAaA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,GAAkB,KAAKL,OAAL,CAAaK,IAAb,CAAlB,GAAuC,KAAKL,OAAL,CAAaG,GAAb,CAAiBG,QAAQ,CAACD,IAAD,CAAzB;AADzB,KAAd,CAApB;AAGA,SAAKE,WAAL,GAAmB,IAAnB;AACD;AAED;;;;;;AAIAV,EAAAA,KAAK,CAAEF,KAAF,EAAS;AACZ,QAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACG,MAArB,EAA6B,OAAO,EAAP;;AAE7B,SAAKE,OAAL,CAAaQ,MAAb,CAAoBb,KAApB;;AACA,UAAMC,IAAI,GAAG,EAAb;;AAEA,WAAO,IAAP,EAAa;AACX,UAAI,CAAC,KAAKW,WAAV,EAAuB;AACrB,YAAI;AACF,eAAKA,WAAL,GAAmB,KAAKE,aAAL,CAAmB,KAAKR,YAAxB,CAAnB;AACD,SAFD,CAEE,OAAOG,CAAP,EAAU;AACV,gBADU,CACJ;AACP;AACF;;AAED,YAAM;AAAEM,QAAAA,EAAF;AAAMC,QAAAA,IAAN;AAAYb,QAAAA,MAAZ;AAAoBc,QAAAA;AAApB,UAA+B,KAAKL,WAA1C;AACA,YAAMM,kBAAkB,GAAG,KAAKb,OAAL,CAAaF,MAAb,GAAsBc,MAAjD;AAEA,UAAIC,kBAAkB,GAAGf,MAAzB,EAAiC,MAZtB,CAY4B;;AAEvCF,MAAAA,IAAI,CAACkB,IAAL,CAAU;AAAEJ,QAAAA,EAAF;AAAMC,QAAAA,IAAN;AAAYI,QAAAA,IAAI,EAAE,KAAKf,OAAL,CAAagB,YAAb,CAA0BJ,MAA1B,EAAkCA,MAAM,GAAGd,MAA3C;AAAlB,OAAV;;AAEA,WAAKE,OAAL,CAAaiB,OAAb,CAAqBL,MAAM,GAAGd,MAA9B;;AACA,WAAKS,WAAL,GAAmB,IAAnB;AACD;;AAED,WAAOX,IAAP;AACD;AAED;;;;;;;;AAMAa,EAAAA,aAAa,CAAEM,IAAF,EAAQ;AACnB,UAAMG,CAAC,GAAGhC,MAAM,CAACM,MAAP,CAAcuB,IAAd,CAAV;AACA,QAAIH,MAAM,GAAG1B,MAAM,CAACM,MAAP,CAAc2B,KAA3B;AACA,UAAMrB,MAAM,GAAGZ,MAAM,CAACM,MAAP,CAAcuB,IAAd,EAAoBH,MAApB,CAAf;AACAA,IAAAA,MAAM,IAAI1B,MAAM,CAACM,MAAP,CAAc2B,KAAxB;AACA,WAAO;AAAET,MAAAA,EAAE,EAAEQ,CAAC,IAAI,CAAX;AAAcP,MAAAA,IAAI,EAAEO,CAAC,GAAG,CAAxB;AAA2BN,MAAAA,MAA3B;AAAmCd,MAAAA;AAAnC,KAAP;AACD;;AAvDW","sourcesContent":["'use strict'\n\nconst varint = require('varint')\nconst BufferList = require('bl/BufferList')\n\n// Decode a chunk and yield an _array_ of decoded messages\nmodule.exports = source => (async function * decode () {\n  const decoder = new Decoder()\n  for await (const chunk of source) {\n    const msgs = decoder.write(chunk)\n    if (msgs.length) yield msgs\n  }\n})()\n\nclass Decoder {\n  constructor () {\n    this._buffer = new BufferList()\n    // optimization to allow varint to take a BufferList (well a proxy to)\n    this._bufferProxy = new Proxy({}, {\n      get: (_, prop) => prop[0] === 'l' ? this._buffer[prop] : this._buffer.get(parseInt(prop))\n    })\n    this._headerInfo = null\n  }\n\n  /**\n   * @param {Buffer|BufferList} chunk\n   * @returns {object[]} An array of message objects\n   */\n  write (chunk) {\n    if (!chunk || !chunk.length) return []\n\n    this._buffer.append(chunk)\n    const msgs = []\n\n    while (true) {\n      if (!this._headerInfo) {\n        try {\n          this._headerInfo = this._decodeHeader(this._bufferProxy)\n        } catch (_) {\n          break // We haven't received enough data yet\n        }\n      }\n\n      const { id, type, length, offset } = this._headerInfo\n      const bufferedDataLength = this._buffer.length - offset\n\n      if (bufferedDataLength < length) break // not enough data yet\n\n      msgs.push({ id, type, data: this._buffer.shallowSlice(offset, offset + length) })\n\n      this._buffer.consume(offset + length)\n      this._headerInfo = null\n    }\n\n    return msgs\n  }\n\n  /**\n   * Attempts to decode the message header from the buffer\n   * @private\n   * @param {Buffer} data\n   * @returns {*} message header (id, type, offset, length)\n   */\n  _decodeHeader (data) {\n    const h = varint.decode(data)\n    let offset = varint.decode.bytes\n    const length = varint.decode(data, offset)\n    offset += varint.decode.bytes\n    return { id: h >> 3, type: h & 7, offset, length }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}