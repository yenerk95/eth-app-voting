{"ast":null,"code":"'use strict';\n\nvar int32BEDecode = function int32BEDecode(data) {\n  if (data.length < 4) throw RangeError('Could not decode int32BE');\n  return data.readInt32BE(0);\n};\n\nint32BEDecode.bytes = 4; // Always because fixed length\n\nmodule.exports = int32BEDecode;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-length-prefixed/src/int32BE-decode.js"],"names":["int32BEDecode","data","length","RangeError","readInt32BE","bytes","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI;AAC5B,MAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB,MAAMC,UAAU,CAAC,0BAAD,CAAhB;AACrB,SAAOF,IAAI,CAACG,WAAL,CAAiB,CAAjB,CAAP;AACD,CAHD;;AAKAJ,aAAa,CAACK,KAAd,GAAsB,CAAtB,C,CAAwB;;AAExBC,MAAM,CAACC,OAAP,GAAiBP,aAAjB","sourcesContent":["'use strict'\n\nconst int32BEDecode = data => {\n  if (data.length < 4) throw RangeError('Could not decode int32BE')\n  return data.readInt32BE(0)\n}\n\nint32BEDecode.bytes = 4 // Always because fixed length\n\nmodule.exports = int32BEDecode\n"]},"metadata":{},"sourceType":"script"}