{"ast":null,"code":"import _classCallCheck from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Buffer } from \"buffer\";\nimport { generateKeypair, isValidPublicKey } from \"../utils\";\nimport { AbstractHandshake } from \"./abstract-handshake\";\nexport var IK = /*#__PURE__*/function (_AbstractHandshake) {\n  _inherits(IK, _AbstractHandshake);\n\n  var _super = _createSuper(IK);\n\n  function IK() {\n    _classCallCheck(this, IK);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(IK, [{\n    key: \"initSession\",\n    value: function initSession(initiator, prologue, s, rs) {\n      var psk = this.createEmptyKey();\n      var hs;\n\n      if (initiator) {\n        hs = this.initializeInitiator(prologue, s, rs, psk);\n      } else {\n        hs = this.initializeResponder(prologue, s, rs, psk);\n      }\n\n      return {\n        hs: hs,\n        i: initiator,\n        mc: 0\n      };\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(session, message) {\n      var messageBuffer;\n\n      if (session.mc === 0) {\n        messageBuffer = this.writeMessageA(session.hs, message);\n      } else if (session.mc === 1) {\n        var _this$writeMessageB = this.writeMessageB(session.hs, message),\n            mb = _this$writeMessageB.messageBuffer,\n            h = _this$writeMessageB.h,\n            cs1 = _this$writeMessageB.cs1,\n            cs2 = _this$writeMessageB.cs2;\n\n        messageBuffer = mb;\n        session.h = h;\n        session.cs1 = cs1;\n        session.cs2 = cs2;\n      } else if (session.mc > 1) {\n        if (session.i) {\n          if (!session.cs1) {\n            throw new Error(\"CS1 (cipher state) is not defined\");\n          }\n\n          messageBuffer = this.writeMessageRegular(session.cs1, message);\n        } else {\n          if (!session.cs2) {\n            throw new Error(\"CS2 (cipher state) is not defined\");\n          }\n\n          messageBuffer = this.writeMessageRegular(session.cs2, message);\n        }\n      } else {\n        throw new Error(\"Session invalid.\");\n      }\n\n      session.mc++;\n      return messageBuffer;\n    }\n  }, {\n    key: \"recvMessage\",\n    value: function recvMessage(session, message) {\n      var plaintext = Buffer.alloc(0),\n          valid = false;\n\n      if (session.mc === 0) {\n        var _this$readMessageA = this.readMessageA(session.hs, message);\n\n        plaintext = _this$readMessageA.plaintext;\n        valid = _this$readMessageA.valid;\n      }\n\n      if (session.mc === 1) {\n        var _this$readMessageB = this.readMessageB(session.hs, message),\n            pt = _this$readMessageB.plaintext,\n            v = _this$readMessageB.valid,\n            h = _this$readMessageB.h,\n            cs1 = _this$readMessageB.cs1,\n            cs2 = _this$readMessageB.cs2;\n\n        plaintext = pt;\n        valid = v;\n        session.h = h;\n        session.cs1 = cs1;\n        session.cs2 = cs2;\n      }\n\n      session.mc++;\n      return {\n        plaintext: plaintext,\n        valid: valid\n      };\n    }\n  }, {\n    key: \"writeMessageA\",\n    value: function writeMessageA(hs, payload) {\n      hs.e = generateKeypair();\n      var ne = hs.e.publicKey;\n      this.mixHash(hs.ss, ne);\n      this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n      var spk = Buffer.from(hs.s.publicKey);\n      var ns = this.encryptAndHash(hs.ss, spk);\n      this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n      var ciphertext = this.encryptAndHash(hs.ss, payload);\n      return {\n        ne: ne,\n        ns: ns,\n        ciphertext: ciphertext\n      };\n    }\n  }, {\n    key: \"writeMessageB\",\n    value: function writeMessageB(hs, payload) {\n      hs.e = generateKeypair();\n      var ne = hs.e.publicKey;\n      this.mixHash(hs.ss, ne);\n      this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n      this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n      var ciphertext = this.encryptAndHash(hs.ss, payload);\n      var ns = this.createEmptyKey();\n      var messageBuffer = {\n        ne: ne,\n        ns: ns,\n        ciphertext: ciphertext\n      };\n\n      var _this$split = this.split(hs.ss),\n          cs1 = _this$split.cs1,\n          cs2 = _this$split.cs2;\n\n      return {\n        messageBuffer: messageBuffer,\n        cs1: cs1,\n        cs2: cs2,\n        h: hs.ss.h\n      };\n    }\n  }, {\n    key: \"readMessageA\",\n    value: function readMessageA(hs, message) {\n      if (isValidPublicKey(message.ne)) {\n        hs.re = message.ne;\n      }\n\n      this.mixHash(hs.ss, hs.re);\n      this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n\n      var _this$decryptAndHash = this.decryptAndHash(hs.ss, message.ns),\n          ns = _this$decryptAndHash.plaintext,\n          valid1 = _this$decryptAndHash.valid;\n\n      if (valid1 && ns.length === 32 && isValidPublicKey(ns)) {\n        hs.rs = ns;\n      }\n\n      this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n\n      var _this$decryptAndHash2 = this.decryptAndHash(hs.ss, message.ciphertext),\n          plaintext = _this$decryptAndHash2.plaintext,\n          valid2 = _this$decryptAndHash2.valid;\n\n      return {\n        plaintext: plaintext,\n        valid: valid1 && valid2\n      };\n    }\n  }, {\n    key: \"readMessageB\",\n    value: function readMessageB(hs, message) {\n      if (isValidPublicKey(message.ne)) {\n        hs.re = message.ne;\n      }\n\n      this.mixHash(hs.ss, hs.re);\n\n      if (!hs.e) {\n        throw new Error(\"Handshake state should contain ephemeral key by now.\");\n      }\n\n      this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n      this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n\n      var _this$decryptAndHash3 = this.decryptAndHash(hs.ss, message.ciphertext),\n          plaintext = _this$decryptAndHash3.plaintext,\n          valid = _this$decryptAndHash3.valid;\n\n      var _this$split2 = this.split(hs.ss),\n          cs1 = _this$split2.cs1,\n          cs2 = _this$split2.cs2;\n\n      return {\n        h: hs.ss.h,\n        valid: valid,\n        plaintext: plaintext,\n        cs1: cs1,\n        cs2: cs2\n      };\n    }\n  }, {\n    key: \"initializeInitiator\",\n    value: function initializeInitiator(prologue, s, rs, psk) {\n      var name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n      var ss = this.initializeSymmetric(name);\n      this.mixHash(ss, prologue);\n      this.mixHash(ss, rs);\n      var re = Buffer.alloc(32);\n      return {\n        ss: ss,\n        s: s,\n        rs: rs,\n        re: re,\n        psk: psk\n      };\n    }\n  }, {\n    key: \"initializeResponder\",\n    value: function initializeResponder(prologue, s, rs, psk) {\n      var name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n      var ss = this.initializeSymmetric(name);\n      this.mixHash(ss, prologue);\n      this.mixHash(ss, s.publicKey);\n      var re = Buffer.alloc(32);\n      return {\n        ss: ss,\n        s: s,\n        rs: rs,\n        re: re,\n        psk: psk\n      };\n    }\n  }]);\n\n  return IK;\n}(AbstractHandshake);","map":{"version":3,"sources":["../../src/handshakes/ik.ts"],"names":["psk","hs","i","mc","session","messageBuffer","cs2","plaintext","Buffer","valid","generateKeypair","ne","spk","ns","ciphertext","cs1","h","isValidPublicKey","message","valid1","valid2","name","ss","re","s","rs"],"mappings":"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","sourcesContent":["import {Buffer} from \"buffer\";\nimport {CipherState, HandshakeState, MessageBuffer, NoiseSession} from \"../@types/handshake\";\nimport {bytes, bytes32} from \"../@types/basic\";\nimport {generateKeypair, isValidPublicKey} from \"../utils\";\nimport {AbstractHandshake} from \"./abstract-handshake\";\nimport {KeyPair} from \"../@types/libp2p\";\n\n\nexport class IK extends AbstractHandshake {\n  public initSession(initiator: boolean, prologue: bytes32, s: KeyPair, rs: bytes32): NoiseSession {\n    const psk = this.createEmptyKey();\n\n    let hs;\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk);\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk);\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0,\n    };\n  }\n\n  public sendMessage(session: NoiseSession, message: bytes): MessageBuffer {\n    let messageBuffer: MessageBuffer;\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message);\n    } else if (session.mc === 1) {\n      const { messageBuffer: mb, h, cs1, cs2 } = this.writeMessageB(session.hs, message);\n      messageBuffer = mb;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    } else if (session.mc > 1) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error(\"CS1 (cipher state) is not defined\")\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message);\n      } else {\n        if (!session.cs2) {\n          throw new Error(\"CS2 (cipher state) is not defined\")\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message);\n      }\n    } else {\n      throw new Error(\"Session invalid.\")\n    }\n\n    session.mc++;\n    return messageBuffer;\n  }\n\n  public recvMessage(session: NoiseSession, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    let plaintext = Buffer.alloc(0), valid = false;\n    if (session.mc === 0) {\n      ({plaintext, valid} = this.readMessageA(session.hs, message));\n    }\n    if (session.mc === 1) {\n      const { plaintext: pt, valid: v, h, cs1, cs2 } = this.readMessageB(session.hs, message);\n      plaintext = pt;\n      valid = v;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    }\n    session.mc++;\n    return {plaintext, valid};\n  }\n\n  private writeMessageA(hs: HandshakeState, payload: bytes): MessageBuffer {\n    hs.e = generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const spk = Buffer.from(hs.s.publicKey);\n    const ns = this.encryptAndHash(hs.ss, spk);\n\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n\n    return { ne, ns, ciphertext };\n  }\n\n  private writeMessageB(hs: HandshakeState, payload: bytes) {\n    hs.e = generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    const ns = this.createEmptyKey();\n    const messageBuffer: MessageBuffer = {ne, ns, ciphertext};\n    const { cs1, cs2 } = this.split(hs.ss);\n\n    return { messageBuffer, cs1, cs2, h: hs.ss.h }\n  }\n\n  private readMessageA(hs: HandshakeState, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {plaintext: ns, valid: valid1} = this.decryptAndHash(hs.ss, message.ns);\n    if (valid1 && ns.length === 32 && isValidPublicKey(ns)) {\n      hs.rs = ns;\n    }\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const {plaintext, valid: valid2} = this.decryptAndHash(hs.ss, message.ciphertext);\n    return {plaintext, valid: (valid1 && valid2)};\n  }\n\n  private readMessageB(hs: HandshakeState, message: MessageBuffer): {h: bytes; plaintext: bytes; valid: boolean; cs1: CipherState; cs2: CipherState} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    if (!hs.e) {\n      throw new Error(\"Handshake state should contain ephemeral key by now.\");\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {plaintext, valid} = this.decryptAndHash(hs.ss, message.ciphertext);\n    const { cs1, cs2 } = this.split(hs.ss);\n\n    return { h: hs.ss.h, valid, plaintext, cs1, cs2 };\n  }\n\n  private initializeInitiator(prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, rs);\n    const re = Buffer.alloc(32);\n\n    return { ss, s, rs, re, psk };\n  }\n\n  private initializeResponder(prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, s.publicKey);\n    const re = Buffer.alloc(32);\n\n    return { ss, s, rs, re, psk };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}