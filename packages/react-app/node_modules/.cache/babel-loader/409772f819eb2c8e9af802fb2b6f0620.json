{"ast":null,"code":"'use strict';\n\nconst getIterator = require('get-iterator'); // a pair of streams where one drains from the other\n\n\nmodule.exports = function pair() {\n  let _source, onSource;\n\n  const sink = async source => {\n    if (_source) throw new Error('already piped');\n    _source = getIterator(source);\n    if (onSource) onSource(_source);\n  };\n\n  const source = {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n\n    next() {\n      if (_source) return _source.next();\n      return new Promise(resolve => {\n        onSource = source => {\n          onSource = null;\n          resolve(source.next());\n        };\n      });\n    }\n\n  };\n  return {\n    sink,\n    source\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-pair/index.js"],"names":["getIterator","require","module","exports","pair","_source","onSource","sink","source","Error","Symbol","asyncIterator","next","Promise","resolve"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B,C,CAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,GAAiB;AAChC,MAAIC,OAAJ,EAAaC,QAAb;;AAEA,QAAMC,IAAI,GAAG,MAAMC,MAAN,IAAgB;AAC3B,QAAIH,OAAJ,EAAa,MAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;AACbJ,IAAAA,OAAO,GAAGL,WAAW,CAACQ,MAAD,CAArB;AACA,QAAIF,QAAJ,EAAcA,QAAQ,CAACD,OAAD,CAAR;AACf,GAJD;;AAMA,QAAMG,MAAM,GAAG;AACb,KAACE,MAAM,CAACC,aAAR,IAA0B;AACxB,aAAO,IAAP;AACD,KAHY;;AAIbC,IAAAA,IAAI,GAAI;AACN,UAAIP,OAAJ,EAAa,OAAOA,OAAO,CAACO,IAAR,EAAP;AACb,aAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BR,QAAAA,QAAQ,GAAGE,MAAM,IAAI;AACnBF,UAAAA,QAAQ,GAAG,IAAX;AACAQ,UAAAA,OAAO,CAACN,MAAM,CAACI,IAAP,EAAD,CAAP;AACD,SAHD;AAID,OALM,CAAP;AAMD;;AAZY,GAAf;AAeA,SAAO;AAAEL,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP;AACD,CAzBD","sourcesContent":["'use strict'\n\nconst getIterator = require('get-iterator')\n\n// a pair of streams where one drains from the other\nmodule.exports = function pair () {\n  let _source, onSource\n\n  const sink = async source => {\n    if (_source) throw new Error('already piped')\n    _source = getIterator(source)\n    if (onSource) onSource(_source)\n  }\n\n  const source = {\n    [Symbol.asyncIterator] () {\n      return this\n    },\n    next () {\n      if (_source) return _source.next()\n      return new Promise(resolve => {\n        onSource = source => {\n          onSource = null\n          resolve(source.next())\n        }\n      })\n    }\n  }\n\n  return { sink, source }\n}\n"]},"metadata":{},"sourceType":"script"}