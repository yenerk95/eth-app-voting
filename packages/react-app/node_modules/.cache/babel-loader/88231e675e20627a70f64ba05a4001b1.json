{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGLink = dagPB.DAGLink;\n\nconst CID = require('cids');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nfunction findLinks(node, links = []) {\n  for (const key in node) {\n    const val = node[key];\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push(new DAGLink('', 0, new CID(val)));\n        continue;\n      } catch (_) {// not a CID\n      }\n    }\n\n    if (CID.isCID(val)) {\n      links.push(new DAGLink('', 0, val));\n      continue;\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links);\n    }\n  }\n\n  return links;\n}\n\nmodule.exports = ({\n  dag\n}) => {\n  return withTimeoutOption(async function links(multihash, options) {\n    options = options || {};\n    const cid = new CID(multihash);\n    const result = await dag.get(cid, options);\n\n    if (cid.codec === 'raw') {\n      return [];\n    }\n\n    if (cid.codec === 'dag-pb') {\n      return result.value.Links;\n    }\n\n    if (cid.codec === 'dag-cbor') {\n      return findLinks(result);\n    }\n\n    throw new Error(`Cannot resolve links from codec ${cid.codec}`);\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/object/links.js"],"names":["dagPB","require","DAGLink","CID","withTimeoutOption","findLinks","node","links","key","val","Object","keys","length","push","_","isCID","Array","isArray","module","exports","dag","multihash","options","cid","result","get","codec","value","Links","Error"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACE,OAAtB;;AACA,MAAMC,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAwBH,OAAO,CAAC,aAAD,CAArC;;AAEA,SAASI,SAAT,CAAoBC,IAApB,EAA0BC,KAAK,GAAG,EAAlC,EAAsC;AACpC,OAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;AACtB,UAAMG,GAAG,GAAGH,IAAI,CAACE,GAAD,CAAhB;;AAEA,QAAIA,GAAG,KAAK,GAAR,IAAeE,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,MAAlB,KAA6B,CAAhD,EAAmD;AACjD,UAAI;AACFL,QAAAA,KAAK,CAACM,IAAN,CAAW,IAAIX,OAAJ,CAAY,EAAZ,EAAgB,CAAhB,EAAmB,IAAIC,GAAJ,CAAQM,GAAR,CAAnB,CAAX;AACA;AACD,OAHD,CAGE,OAAOK,CAAP,EAAU,CACV;AACD;AACF;;AAED,QAAIX,GAAG,CAACY,KAAJ,CAAUN,GAAV,CAAJ,EAAoB;AAClBF,MAAAA,KAAK,CAACM,IAAN,CAAW,IAAIX,OAAJ,CAAY,EAAZ,EAAgB,CAAhB,EAAmBO,GAAnB,CAAX;AACA;AACD;;AAED,QAAIO,KAAK,CAACC,OAAN,CAAcR,GAAd,CAAJ,EAAwB;AACtBJ,MAAAA,SAAS,CAACI,GAAD,EAAMF,KAAN,CAAT;AACD;;AAED,QAAIE,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAClCJ,MAAAA,SAAS,CAACI,GAAD,EAAMF,KAAN,CAAT;AACD;AACF;;AAED,SAAOA,KAAP;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAC5B,SAAOhB,iBAAiB,CAAC,eAAeG,KAAf,CAAsBc,SAAtB,EAAiCC,OAAjC,EAA0C;AACjEA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,UAAMC,GAAG,GAAG,IAAIpB,GAAJ,CAAQkB,SAAR,CAAZ;AACA,UAAMG,MAAM,GAAG,MAAMJ,GAAG,CAACK,GAAJ,CAAQF,GAAR,EAAaD,OAAb,CAArB;;AAEA,QAAIC,GAAG,CAACG,KAAJ,KAAc,KAAlB,EAAyB;AACvB,aAAO,EAAP;AACD;;AAED,QAAIH,GAAG,CAACG,KAAJ,KAAc,QAAlB,EAA4B;AAC1B,aAAOF,MAAM,CAACG,KAAP,CAAaC,KAApB;AACD;;AAED,QAAIL,GAAG,CAACG,KAAJ,KAAc,UAAlB,EAA8B;AAC5B,aAAOrB,SAAS,CAACmB,MAAD,CAAhB;AACD;;AAED,UAAM,IAAIK,KAAJ,CAAW,mCAAkCN,GAAG,CAACG,KAAM,EAAvD,CAAN;AACD,GAnBuB,CAAxB;AAoBD,CArBD","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst DAGLink = dagPB.DAGLink\nconst CID = require('cids')\nconst { withTimeoutOption } = require('../../utils')\n\nfunction findLinks (node, links = []) {\n  for (const key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push(new DAGLink('', 0, new CID(val)))\n        continue\n      } catch (_) {\n        // not a CID\n      }\n    }\n\n    if (CID.isCID(val)) {\n      links.push(new DAGLink('', 0, val))\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\nmodule.exports = ({ dag }) => {\n  return withTimeoutOption(async function links (multihash, options) {\n    options = options || {}\n\n    const cid = new CID(multihash)\n    const result = await dag.get(cid, options)\n\n    if (cid.codec === 'raw') {\n      return []\n    }\n\n    if (cid.codec === 'dag-pb') {\n      return result.value.Links\n    }\n\n    if (cid.codec === 'dag-cbor') {\n      return findLinks(result)\n    }\n\n    throw new Error(`Cannot resolve links from codec ${cid.codec}`)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}