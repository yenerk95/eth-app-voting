{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Block = require('ipld-block');\n\nvar CONSTANTS = require('./constants');\n\nvar logger = require('./utils').logger;\n\nvar cidToMultihashString = function cidToMultihashString(cid) {\n  return cid.multihash.toString('base64');\n};\n\nvar unwantEvent = function unwantEvent(cid) {\n  return \"unwant:\".concat(cidToMultihashString(cid));\n};\n\nvar blockEvent = function blockEvent(cid) {\n  return \"block:\".concat(cidToMultihashString(cid));\n};\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\n\n\nvar Notifications = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Notifications, _EventEmitter);\n\n  var _super = _createSuper(Notifications);\n\n  function Notifications(peerId) {\n    var _this;\n\n    _classCallCheck(this, Notifications);\n\n    _this = _super.call(this);\n\n    _this.setMaxListeners(CONSTANTS.maxListeners);\n\n    _this._log = logger(peerId, 'notif');\n    return _this;\n  }\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n\n\n  _createClass(Notifications, [{\n    key: \"hasBlock\",\n    value: function hasBlock(block) {\n      var event = blockEvent(block.cid);\n\n      this._log(event);\n\n      this.emit(event, block);\n    }\n    /**\n     * Signal the system that we are waiting to receive the\n     * block associated with the given `cid`.\n     * Returns a Promise that resolves to the block when it is received,\n     * or undefined when the block is unwanted.\n     *\n     * @param {CID} cid\n     * @param {Object} options\n     * @param {AbortSignal} options.abortSignal\n     * @returns {Promise<Block>}\n     */\n\n  }, {\n    key: \"wantBlock\",\n    value: function wantBlock(cid) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!cid) {\n        throw new Error('Not a valid cid');\n      }\n\n      var blockEvt = blockEvent(cid);\n      var unwantEvt = unwantEvent(cid);\n\n      this._log(\"wantBlock:\".concat(cid));\n\n      return new Promise(function (resolve, reject) {\n        var onUnwant = function onUnwant() {\n          _this2.removeListener(blockEvt, onBlock);\n\n          reject(new Error(\"Block for \".concat(cid, \" unwanted\")));\n        };\n\n        var onBlock = function onBlock(block) {\n          _this2.removeListener(unwantEvt, onUnwant);\n\n          if (!cid.multihash.equals(block.cid.multihash)) {\n            // wrong block\n            return reject(new Error(\"Incorrect block received for \".concat(cid)));\n          } else if (cid.version !== block.cid.version || cid.codec !== block.cid.codec) {\n            // right block but wrong version or codec\n            block = new Block(block.data, cid);\n          }\n\n          resolve(block);\n        };\n\n        _this2.once(unwantEvt, onUnwant);\n\n        _this2.once(blockEvt, onBlock);\n\n        if (options && options.signal) {\n          options.signal.addEventListener('abort', function () {\n            _this2.removeListener(blockEvt, onBlock);\n\n            _this2.removeListener(unwantEvt, onUnwant);\n\n            reject(new Error(\"Want for \".concat(cid, \" aborted\")));\n          });\n        }\n      });\n    }\n    /**\n     * Signal that the block is not wanted anymore.\n     *\n     * @param {CID} cid - the CID of the block that is not wanted anymore.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unwantBlock\",\n    value: function unwantBlock(cid) {\n      var event = unwantEvent(cid);\n\n      this._log(event);\n\n      this.emit(event);\n    }\n  }]);\n\n  return Notifications;\n}(EventEmitter);\n\nmodule.exports = Notifications;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/notifications.js"],"names":["EventEmitter","require","Block","CONSTANTS","logger","cidToMultihashString","cid","multihash","toString","unwantEvent","blockEvent","Notifications","peerId","setMaxListeners","maxListeners","_log","block","event","emit","options","Error","blockEvt","unwantEvt","Promise","resolve","reject","onUnwant","removeListener","onBlock","equals","version","codec","data","once","signal","addEventListener","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\nconst Block = require('ipld-block')\n\nconst CONSTANTS = require('./constants')\nconst logger = require('./utils').logger\n\nconst cidToMultihashString = (cid) => cid.multihash.toString('base64')\nconst unwantEvent = (cid) => `unwant:${cidToMultihashString(cid)}`\nconst blockEvent = (cid) => `block:${cidToMultihashString(cid)}`\n\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\nclass Notifications extends EventEmitter {\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n  hasBlock (block) {\n    const event = blockEvent(block.cid)\n    this._log(event)\n    this.emit(event, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {Object} options\n   * @param {AbortSignal} options.abortSignal\n   * @returns {Promise<Block>}\n   */\n  wantBlock (cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid')\n    }\n\n    const blockEvt = blockEvent(cid)\n    const unwantEvt = unwantEvent(cid)\n\n    this._log(`wantBlock:${cid}`)\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock)\n        reject(new Error(`Block for ${cid} unwanted`))\n      }\n      const onBlock = (block) => {\n        this.removeListener(unwantEvt, onUnwant)\n\n        if (!cid.multihash.equals(block.cid.multihash)) {\n          // wrong block\n          return reject(new Error(`Incorrect block received for ${cid}`))\n        } else if (cid.version !== block.cid.version || cid.codec !== block.cid.codec) {\n          // right block but wrong version or codec\n          block = new Block(block.data, cid)\n        }\n\n        resolve(block)\n      }\n\n      this.once(unwantEvt, onUnwant)\n      this.once(blockEvt, onBlock)\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock)\n          this.removeListener(unwantEvt, onUnwant)\n\n          reject(new Error(`Want for ${cid} aborted`))\n        })\n      }\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const event = unwantEvent(cid)\n    this._log(event)\n    this.emit(event)\n  }\n}\n\nmodule.exports = Notifications\n"]},"metadata":{},"sourceType":"script"}