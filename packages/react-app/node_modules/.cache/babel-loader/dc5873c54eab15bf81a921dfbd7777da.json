{"ast":null,"code":"/**\n * Timestamp for 64-bit time_t, nanosecond precision and strftime\n *\n * @author Yusuke Kawasaki\n * @license MIT\n * @see https://github.com/kawanet/timestamp-nano\n */\nvar Timestamp = function () {\n  if (\"undefined\" !== typeof module) module.exports = Timestamp;\n  var SEC_DAY = 24 * 3600; // seconds per day\n\n  var YEAR_SLOT = 3200; // years per slot\n\n  var DAY_SLOT = (365 * 400 + 97) * YEAR_SLOT / 400; // days per slot\n\n  var SEC_SLOT = SEC_DAY * DAY_SLOT; // seconds per slot\n\n  var MSEC_SLOT = SEC_SLOT * 1000; // mseconds per slot\n  // 15.9.1.1 Time Values and Time Range\n  // The actual range of times supported by ECMAScript Date objects is\n  // exactly â€“100,000,000 days to 100,000,000 days measured relative to\n  // midnight at the beginning of 01 January, 1970 UTC.\n\n  var MAX_MSEC = 1000 * 10000 * 10000 * SEC_DAY;\n  var BIT24 = 0x1000000;\n  var BIT32 = 0x10000 * 0x10000;\n  var DEC6 = 1000 * 1000;\n  var DEC9 = 1000 * 1000 * 1000;\n  var ZERO9 = \"000000000\";\n  var trunc = Math.trunc || Math_trunc;\n  var P = Timestamp.prototype; // static methods\n\n  Timestamp.fromDate = fromDate;\n  Timestamp.fromInt64BE = buildFromInt64(0, 1, 2, 3, 0, 4);\n  Timestamp.fromInt64LE = buildFromInt64(3, 2, 1, 0, 4, 0);\n  Timestamp.fromString = fromString;\n  Timestamp.fromTimeT = fromTimeT; // private properties\n\n  P.year = 0; // Offset number for year precision\n\n  P.time = 0; // Milliseconds from epoch\n\n  P.nano = 0; // Offset number for nanosecond precision\n  // instance methods\n\n  P.addNano = addNano;\n  P.getNano = getNano;\n  P.getTimeT = getTimeT;\n  P.getYear = getYear;\n  P.toDate = toDate;\n  P.toJSON = toJSON;\n  P.toString = toString;\n  P.writeInt64BE = buildWriteInt64(0, 1, 2, 3, 0, 4);\n  P.writeInt64LE = buildWriteInt64(3, 2, 1, 0, 4, 0);\n  var FMT_JSON = \"%Y-%m-%dT%H:%M:%S.%NZ\";\n  var FMT_MONTH = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  var FMT_DAY = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  var FMT_STRING = {\n    \"%\": \"%\",\n    F: \"%Y-%m-%d\",\n    n: \"\\n\",\n    R: \"%H:%M\",\n    T: \"%H:%M:%S\",\n    t: \"\\t\",\n    X: \"%T\",\n    Z: \"GMT\",\n    z: \"+0000\"\n  };\n  return Timestamp;\n\n  function Timestamp(time, nano, year) {\n    var ts = this;\n    if (!(ts instanceof Timestamp)) return new Timestamp(time, nano, year);\n    ts.time = +time || 0;\n    ts.nano = +nano || 0;\n    ts.year = +year || 0;\n    normalize(ts);\n  }\n\n  function getYear() {\n    var year = this.toDate().getUTCFullYear();\n    return year + this.year;\n  }\n\n  function normalize(ts) {\n    var year = ts.year;\n    var time = ts.time;\n    var nano = ts.nano;\n    var changed;\n    var slot; // normalize nano\n\n    if (nano < 0 || DEC6 <= nano) {\n      var n = Math.floor(nano / DEC6);\n      nano -= n * DEC6;\n      time += n;\n      changed = 1;\n    }\n\n    var y = year % YEAR_SLOT;\n\n    if (time < -MAX_MSEC || MAX_MSEC < time || y) {\n      // shrink time into the minimal slot\n      slot = trunc(time / MSEC_SLOT);\n\n      if (slot) {\n        year += slot * YEAR_SLOT;\n        time -= slot * MSEC_SLOT;\n      } // add year offset smaller than a slot\n\n\n      var dt = newDate(time);\n      dt.setUTCFullYear(y + dt.getUTCFullYear());\n      year -= y;\n      time = +dt; // use full range of 100 million days.\n\n      slot = trunc(year / YEAR_SLOT);\n      var total = time + slot * MSEC_SLOT;\n\n      if (slot && -MAX_MSEC <= total && total <= MAX_MSEC) {\n        year -= slot * YEAR_SLOT;\n        time = total;\n      }\n\n      changed = 1;\n    }\n\n    if (changed) {\n      ts.year = year;\n      ts.time = time;\n      ts.nano = nano;\n    }\n\n    return ts;\n  }\n\n  function toDate() {\n    var ts = normalize(this);\n    return newDate(ts.time);\n  }\n\n  function newDate(time) {\n    var dt = new Date(0);\n    dt.setTime(time);\n    return dt;\n  }\n\n  function addNano(nano) {\n    this.nano += +nano || 0;\n    return this;\n  }\n\n  function getNano() {\n    var ts = normalize(this);\n    return (ts.time % 1000 * DEC6 + +ts.nano + DEC9) % DEC9;\n  }\n\n  function fromString(string) {\n    var time;\n    var ts = new Timestamp();\n    string += \"\";\n    var array = string.replace(/^\\s*[+\\-]?\\d+/, function (match) {\n      var year = +match; // Use only years around 1970 to avoid Date's terrible behavior:\n      // 15.9.4.3 Date.UTC\n      // If y is not NaN and 0 <= y <= 99, then let yr be 1900+y\n\n      var y = 1970 + (year - 1970) % 400;\n      ts.year = year - y;\n      return y;\n    }).replace(/(?:Z|([+\\-]\\d{2}):?(\\d{2}))$/, function (match, hour, min) {\n      // time zone\n      if (hour < 0) min *= -1;\n      time = (+hour * 60 + +min) * 60000;\n      return \"\";\n    }).replace(/\\.\\d+$/, function (match) {\n      // nanoseconds\n      ts.nano = +(match + ZERO9).substr(1, 9);\n      return \"\";\n    }).split(/\\D+/);\n\n    if (array.length > 1) {\n      array[1]--; // month starts from 0\n    } else {\n      array[1] = 0;\n    }\n\n    ts.time = time = Date.UTC.apply(Date, array) - (time || 0);\n\n    if (isNaN(time)) {\n      throw new TypeError(\"Invalid Date\");\n    }\n\n    return normalize(ts);\n  }\n\n  function fromDate(date) {\n    return new Timestamp(+date);\n  }\n\n  function fromTimeT(time) {\n    return fromTime(time, 0);\n  }\n\n  function fromTime(low, high) {\n    high |= 0;\n    high *= BIT32;\n    low = +low || 0; // slot count\n\n    var slot = trunc(high / SEC_SLOT) + trunc(low / SEC_SLOT); // seconds within slot\n\n    var second = high % SEC_SLOT + low % SEC_SLOT; // slot offset\n\n    var offset = trunc(second / SEC_SLOT);\n\n    if (offset) {\n      slot += offset;\n      second -= offset * SEC_SLOT;\n    }\n\n    return new Timestamp(second * 1000, 0, slot * YEAR_SLOT);\n  }\n\n  function getTimeT() {\n    var ts = normalize(this);\n    var time = Math.floor(ts.time / 1000);\n    var year = ts.year;\n    if (year) time += year * DAY_SLOT * SEC_DAY / YEAR_SLOT; // this may loose some bits over than 53 bit precision\n\n    return time;\n  }\n\n  function toJSON() {\n    return this.toString().replace(/0{1,6}Z$/, \"Z\");\n  }\n\n  function toString(format) {\n    var ts = this;\n    var dt = ts.toDate();\n    var map = {\n      H: H,\n      L: L,\n      M: M,\n      N: N,\n      S: S,\n      Y: Y,\n      a: a,\n      b: b,\n      d: d,\n      e: e,\n      m: m\n    };\n    return strftime(format || FMT_JSON);\n\n    function strftime(format) {\n      return format.replace(/%./g, function (match) {\n        var m = match[1];\n        var c = FMT_STRING[m];\n        var f = map[m];\n        return c ? strftime(c) : f ? f() : match;\n      });\n    }\n\n    function Y() {\n      var year = ts.getYear();\n\n      if (year > 999999) {\n        return \"+\" + year;\n      } else if (year > 9999) {\n        return \"+\" + pad(year, 6);\n      } else if (year >= 0) {\n        return pad(year, 4);\n      } else if (year >= -999999) {\n        return \"-\" + pad(-year, 6);\n      } else {\n        return year;\n      }\n    }\n\n    function m() {\n      return pad2(dt.getUTCMonth() + 1);\n    }\n\n    function d() {\n      return pad2(dt.getUTCDate());\n    }\n\n    function e() {\n      return padS(dt.getUTCDate());\n    }\n\n    function H() {\n      return pad2(dt.getUTCHours());\n    }\n\n    function M() {\n      return pad2(dt.getUTCMinutes());\n    }\n\n    function S() {\n      return pad2(dt.getUTCSeconds());\n    }\n\n    function L() {\n      return pad(dt.getUTCMilliseconds(), 3);\n    }\n\n    function N() {\n      return pad(ts.getNano(), 9);\n    }\n\n    function a() {\n      return FMT_DAY[dt.getUTCDay()];\n    }\n\n    function b() {\n      return FMT_MONTH[dt.getUTCMonth()];\n    }\n  }\n\n  function buildWriteInt64(pos0, pos1, pos2, pos3, posH, posL) {\n    return writeInt64;\n\n    function writeInt64(buffer, offset) {\n      var ts = normalize(this);\n      if (!buffer) buffer = new Array(8);\n      checkRange(buffer, offset |= 0);\n      var second = Math.floor(ts.time / 1000);\n      var day = ts.year * (DAY_SLOT * SEC_DAY / YEAR_SLOT);\n      var high = trunc(day / BIT32) + trunc(second / BIT32);\n      var low = day % BIT32 + second % BIT32; // slot offset\n\n      var slot = Math.floor(low / BIT32);\n\n      if (slot) {\n        high += slot;\n        low -= slot * BIT32;\n      }\n\n      writeUint32(buffer, offset + posH, high);\n      writeUint32(buffer, offset + posL, low);\n      return buffer;\n    }\n\n    function writeUint32(buffer, offset, value) {\n      buffer[offset + pos0] = value >> 24 & 255;\n      buffer[offset + pos1] = value >> 16 & 255;\n      buffer[offset + pos2] = value >> 8 & 255;\n      buffer[offset + pos3] = value & 255;\n    }\n  }\n\n  function buildFromInt64(pos0, pos1, pos2, pos3, posH, posL) {\n    return fromInt64;\n\n    function fromInt64(buffer, offset) {\n      checkRange(buffer, offset |= 0);\n      var high = readUint32(buffer, offset + posH);\n      var low = readUint32(buffer, offset + posL);\n      return fromTime(low, high);\n    }\n\n    function readUint32(buffer, offset) {\n      return buffer[offset + pos0] * BIT24 + (buffer[offset + pos1] << 16 | buffer[offset + pos2] << 8 | buffer[offset + pos3]);\n    }\n  }\n\n  function checkRange(buffer, offset) {\n    var last = buffer && buffer.length;\n    if (last == null) throw new TypeError(\"Invalid Buffer\");\n    if (last < offset + 8) throw new RangeError(\"Out of range\");\n  }\n\n  function Math_trunc(x) {\n    var n = x - x % 1;\n    return n === 0 && (x < 0 || x === 0 && 1 / x !== 1 / 0) ? -0 : n;\n  }\n\n  function padS(v) {\n    return (v > 9 ? \"\" : \" \") + (v | 0);\n  }\n\n  function pad2(v) {\n    return (v > 9 ? \"\" : \"0\") + (v | 0);\n  }\n\n  function pad(v, len) {\n    return (ZERO9 + (v | 0)).substr(-len);\n  }\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/timestamp-nano/timestamp.js"],"names":["Timestamp","module","exports","SEC_DAY","YEAR_SLOT","DAY_SLOT","SEC_SLOT","MSEC_SLOT","MAX_MSEC","BIT24","BIT32","DEC6","DEC9","ZERO9","trunc","Math","Math_trunc","P","prototype","fromDate","fromInt64BE","buildFromInt64","fromInt64LE","fromString","fromTimeT","year","time","nano","addNano","getNano","getTimeT","getYear","toDate","toJSON","toString","writeInt64BE","buildWriteInt64","writeInt64LE","FMT_JSON","FMT_MONTH","FMT_DAY","FMT_STRING","F","n","R","T","t","X","Z","z","ts","normalize","getUTCFullYear","changed","slot","floor","y","dt","newDate","setUTCFullYear","total","Date","setTime","string","array","replace","match","hour","min","substr","split","length","UTC","apply","isNaN","TypeError","date","fromTime","low","high","second","offset","format","map","H","L","M","N","S","Y","a","b","d","e","m","strftime","c","f","pad","pad2","getUTCMonth","getUTCDate","padS","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getUTCDay","pos0","pos1","pos2","pos3","posH","posL","writeInt64","buffer","Array","checkRange","day","writeUint32","value","fromInt64","readUint32","last","RangeError","x","v","len"],"mappings":"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","sourcesContent":["/**\n * Timestamp for 64-bit time_t, nanosecond precision and strftime\n *\n * @author Yusuke Kawasaki\n * @license MIT\n * @see https://github.com/kawanet/timestamp-nano\n */\n\nvar Timestamp = (function() {\n  if (\"undefined\" !== typeof module) module.exports = Timestamp;\n\n  var SEC_DAY = 24 * 3600; // seconds per day\n  var YEAR_SLOT = 3200; // years per slot\n  var DAY_SLOT = (365 * 400 + 97) * YEAR_SLOT / 400; // days per slot\n  var SEC_SLOT = SEC_DAY * DAY_SLOT; // seconds per slot\n  var MSEC_SLOT = SEC_SLOT * 1000; // mseconds per slot\n\n  // 15.9.1.1 Time Values and Time Range\n  // The actual range of times supported by ECMAScript Date objects is\n  // exactly â€“100,000,000 days to 100,000,000 days measured relative to\n  // midnight at the beginning of 01 January, 1970 UTC.\n  var MAX_MSEC = 1000 * 10000 * 10000 * SEC_DAY;\n\n  var BIT24 = 0x1000000;\n  var BIT32 = 0x10000 * 0x10000;\n  var DEC6 = 1000 * 1000;\n  var DEC9 = 1000 * 1000 * 1000;\n  var ZERO9 = \"000000000\";\n\n  var trunc = Math.trunc || Math_trunc;\n  var P = Timestamp.prototype;\n\n  // static methods\n  Timestamp.fromDate = fromDate;\n  Timestamp.fromInt64BE = buildFromInt64(0, 1, 2, 3, 0, 4);\n  Timestamp.fromInt64LE = buildFromInt64(3, 2, 1, 0, 4, 0);\n  Timestamp.fromString = fromString;\n  Timestamp.fromTimeT = fromTimeT;\n\n  // private properties\n  P.year = 0; // Offset number for year precision\n  P.time = 0; // Milliseconds from epoch\n  P.nano = 0; // Offset number for nanosecond precision\n\n  // instance methods\n  P.addNano = addNano;\n  P.getNano = getNano;\n  P.getTimeT = getTimeT;\n  P.getYear = getYear;\n  P.toDate = toDate;\n  P.toJSON = toJSON;\n  P.toString = toString;\n  P.writeInt64BE = buildWriteInt64(0, 1, 2, 3, 0, 4);\n  P.writeInt64LE = buildWriteInt64(3, 2, 1, 0, 4, 0);\n\n  var FMT_JSON = \"%Y-%m-%dT%H:%M:%S.%NZ\";\n\n  var FMT_MONTH = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  ];\n\n  var FMT_DAY = [\n    \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"\n  ];\n\n  var FMT_STRING = {\n    \"%\": \"%\",\n    F: \"%Y-%m-%d\",\n    n: \"\\n\",\n    R: \"%H:%M\",\n    T: \"%H:%M:%S\",\n    t: \"\\t\",\n    X: \"%T\",\n    Z: \"GMT\",\n    z: \"+0000\"\n  };\n\n  return Timestamp;\n\n  function Timestamp(time, nano, year) {\n    var ts = this;\n    if (!(ts instanceof Timestamp)) return new Timestamp(time, nano, year);\n    ts.time = +time || 0;\n    ts.nano = +nano || 0;\n    ts.year = +year || 0;\n    normalize(ts);\n  }\n\n  function getYear() {\n    var year = this.toDate().getUTCFullYear();\n    return year + this.year;\n  }\n\n  function normalize(ts) {\n    var year = ts.year;\n    var time = ts.time;\n    var nano = ts.nano;\n    var changed;\n    var slot;\n\n    // normalize nano\n    if (nano < 0 || DEC6 <= nano) {\n      var n = Math.floor(nano / DEC6);\n      nano -= n * DEC6;\n      time += n;\n      changed = 1;\n    }\n\n    var y = year % YEAR_SLOT;\n    if (time < -MAX_MSEC || MAX_MSEC < time || y) {\n      // shrink time into the minimal slot\n      slot = trunc(time / MSEC_SLOT);\n      if (slot) {\n        year += slot * YEAR_SLOT;\n        time -= slot * MSEC_SLOT;\n      }\n\n      // add year offset smaller than a slot\n      var dt = newDate(time);\n      dt.setUTCFullYear(y + dt.getUTCFullYear());\n      year -= y;\n      time = +dt;\n\n      // use full range of 100 million days.\n      slot = trunc(year / YEAR_SLOT);\n      var total = time + slot * MSEC_SLOT;\n      if (slot && -MAX_MSEC <= total && total <= MAX_MSEC) {\n        year -= slot * YEAR_SLOT;\n        time = total;\n      }\n\n      changed = 1;\n    }\n\n    if (changed) {\n      ts.year = year;\n      ts.time = time;\n      ts.nano = nano;\n    }\n\n    return ts;\n  }\n\n  function toDate() {\n    var ts = normalize(this);\n    return newDate(ts.time);\n  }\n\n  function newDate(time) {\n    var dt = new Date(0);\n    dt.setTime(time);\n    return dt;\n  }\n\n  function addNano(nano) {\n    this.nano += +nano || 0;\n    return this;\n  }\n\n  function getNano() {\n    var ts = normalize(this);\n    return ((ts.time % 1000) * DEC6 + (+ts.nano) + DEC9) % DEC9;\n  }\n\n  function fromString(string) {\n    var time;\n    var ts = new Timestamp();\n    string += \"\";\n\n    var array = string.replace(/^\\s*[+\\-]?\\d+/, function(match) {\n      var year = +match;\n      // Use only years around 1970 to avoid Date's terrible behavior:\n      // 15.9.4.3 Date.UTC\n      // If y is not NaN and 0 <= y <= 99, then let yr be 1900+y\n      var y = 1970 + ((year - 1970) % 400);\n      ts.year = year - y;\n      return y;\n    }).replace(/(?:Z|([+\\-]\\d{2}):?(\\d{2}))$/, function(match, hour, min) {\n      // time zone\n      if (hour < 0) min *= -1;\n      time = ((+hour) * 60 + (+min)) * 60000;\n      return \"\";\n    }).replace(/\\.\\d+$/, function(match) {\n      // nanoseconds\n      ts.nano = +((match + ZERO9).substr(1, 9));\n      return \"\";\n    }).split(/\\D+/);\n\n    if (array.length > 1) {\n      array[1]--; // month starts from 0\n    } else {\n      array[1] = 0;\n    }\n\n    ts.time = time = Date.UTC.apply(Date, array) - (time || 0);\n\n    if (isNaN(time)) {\n      throw new TypeError(\"Invalid Date\");\n    }\n\n    return normalize(ts);\n  }\n\n  function fromDate(date) {\n    return new Timestamp(+date);\n  }\n\n  function fromTimeT(time) {\n    return fromTime(time, 0);\n  }\n\n  function fromTime(low, high) {\n    high |= 0;\n    high *= BIT32;\n    low = +low || 0;\n\n    // slot count\n    var slot = trunc(high / SEC_SLOT) + trunc(low / SEC_SLOT);\n\n    // seconds within slot\n    var second = (high % SEC_SLOT) + (low % SEC_SLOT);\n\n    // slot offset\n    var offset = trunc(second / SEC_SLOT);\n    if (offset) {\n      slot += offset;\n      second -= offset * SEC_SLOT;\n    }\n\n    return new Timestamp(second * 1000, 0, slot * YEAR_SLOT);\n  }\n\n  function getTimeT() {\n    var ts = normalize(this);\n    var time = Math.floor(ts.time / 1000);\n\n    var year = ts.year;\n    if (year) time += year * DAY_SLOT * SEC_DAY / YEAR_SLOT;\n\n    // this may loose some bits over than 53 bit precision\n    return time;\n  }\n\n  function toJSON() {\n    return this.toString().replace(/0{1,6}Z$/, \"Z\");\n  }\n\n  function toString(format) {\n    var ts = this;\n    var dt = ts.toDate();\n    var map = {\n      H: H,\n      L: L,\n      M: M,\n      N: N,\n      S: S,\n      Y: Y,\n      a: a,\n      b: b,\n      d: d,\n      e: e,\n      m: m\n    };\n\n    return strftime(format || FMT_JSON);\n\n    function strftime(format) {\n      return format.replace(/%./g, function(match) {\n        var m = match[1];\n        var c = FMT_STRING[m];\n        var f = map[m];\n        return c ? strftime(c) : f ? f() : match;\n      });\n    }\n\n    function Y() {\n      var year = ts.getYear();\n      if (year > 999999) {\n        return \"+\" + year;\n      } else if (year > 9999) {\n        return \"+\" + pad(year, 6);\n      } else if (year >= 0) {\n        return pad(year, 4);\n      } else if (year >= -999999) {\n        return \"-\" + pad(-year, 6);\n      } else {\n        return year;\n      }\n    }\n\n    function m() {\n      return pad2(dt.getUTCMonth() + 1);\n    }\n\n    function d() {\n      return pad2(dt.getUTCDate());\n    }\n\n    function e() {\n      return padS(dt.getUTCDate());\n    }\n\n    function H() {\n      return pad2(dt.getUTCHours());\n    }\n\n    function M() {\n      return pad2(dt.getUTCMinutes());\n    }\n\n    function S() {\n      return pad2(dt.getUTCSeconds());\n    }\n\n    function L() {\n      return pad(dt.getUTCMilliseconds(), 3);\n    }\n\n    function N() {\n      return pad(ts.getNano(), 9);\n    }\n\n    function a() {\n      return FMT_DAY[dt.getUTCDay()];\n    }\n\n    function b() {\n      return FMT_MONTH[dt.getUTCMonth()];\n    }\n  }\n\n  function buildWriteInt64(pos0, pos1, pos2, pos3, posH, posL) {\n    return writeInt64;\n\n    function writeInt64(buffer, offset) {\n      var ts = normalize(this);\n      if (!buffer) buffer = new Array(8);\n      checkRange(buffer, offset |= 0);\n\n      var second = Math.floor(ts.time / 1000);\n      var day = ts.year * (DAY_SLOT * SEC_DAY / YEAR_SLOT);\n      var high = trunc(day / BIT32) + trunc(second / BIT32);\n      var low = (day % BIT32) + (second % BIT32);\n\n      // slot offset\n      var slot = Math.floor(low / BIT32);\n      if (slot) {\n        high += slot;\n        low -= slot * BIT32;\n      }\n\n      writeUint32(buffer, offset + posH, high);\n      writeUint32(buffer, offset + posL, low);\n      return buffer;\n    }\n\n    function writeUint32(buffer, offset, value) {\n      buffer[offset + pos0] = (value >> 24) & 255;\n      buffer[offset + pos1] = (value >> 16) & 255;\n      buffer[offset + pos2] = (value >> 8) & 255;\n      buffer[offset + pos3] = value & 255;\n    }\n  }\n\n  function buildFromInt64(pos0, pos1, pos2, pos3, posH, posL) {\n    return fromInt64;\n\n    function fromInt64(buffer, offset) {\n      checkRange(buffer, offset |= 0);\n      var high = readUint32(buffer, offset + posH);\n      var low = readUint32(buffer, offset + posL);\n      return fromTime(low, high);\n    }\n\n    function readUint32(buffer, offset) {\n      return (buffer[offset + pos0] * BIT24) +\n        ((buffer[offset + pos1] << 16) |\n          (buffer[offset + pos2] << 8) |\n          buffer[offset + pos3]);\n    }\n  }\n\n  function checkRange(buffer, offset) {\n    var last = buffer && buffer.length;\n    if (last == null) throw new TypeError(\"Invalid Buffer\");\n    if (last < offset + 8) throw new RangeError(\"Out of range\");\n  }\n\n  function Math_trunc(x) {\n    var n = x - x % 1;\n    return n === 0 && (x < 0 || (x === 0 && (1 / x !== 1 / 0))) ? -0 : n;\n  }\n\n  function padS(v) {\n    return (v > 9 ? \"\" : \" \") + (v | 0);\n  }\n\n  function pad2(v) {\n    return (v > 9 ? \"\" : \"0\") + (v | 0);\n  }\n\n  function pad(v, len) {\n    return (ZERO9 + (v | 0)).substr(-len);\n  }\n})();\n"]},"metadata":{},"sourceType":"script"}