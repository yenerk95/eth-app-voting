{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar DAGLink = dagPB.DAGLink;\n\nvar CID = require('cids');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nfunction findLinks(node) {\n  var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  for (var key in node) {\n    var val = node[key];\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push(new DAGLink('', 0, new CID(val)));\n        continue;\n      } catch (_) {// not a CID\n      }\n    }\n\n    if (CID.isCID(val)) {\n      links.push(new DAGLink('', 0, val));\n      continue;\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links);\n    }\n  }\n\n  return links;\n}\n\nmodule.exports = function (_ref) {\n  var dag = _ref.dag;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _links = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(multihash, options) {\n      var cid, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              cid = new CID(multihash);\n              _context.next = 4;\n              return dag.get(cid, options);\n\n            case 4:\n              result = _context.sent;\n\n              if (!(cid.codec === 'raw')) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", []);\n\n            case 7:\n              if (!(cid.codec === 'dag-pb')) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\", result.value.Links);\n\n            case 9:\n              if (!(cid.codec === 'dag-cbor')) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt(\"return\", findLinks(result));\n\n            case 11:\n              throw new Error(\"Cannot resolve links from codec \".concat(cid.codec));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function links(_x, _x2) {\n      return _links.apply(this, arguments);\n    }\n\n    return links;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/object/links.js"],"names":["dagPB","require","DAGLink","CID","withTimeoutOption","findLinks","node","links","key","val","Object","keys","length","push","_","isCID","Array","isArray","module","exports","dag","multihash","options","cid","get","result","codec","value","Links","Error"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMC,OAAO,GAAGF,KAAK,CAACE,OAAtB;;AACA,IAAMC,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;eAC8BA,OAAO,CAAC,aAAD,C;IAA7BG,iB,YAAAA,iB;;AAER,SAASC,SAAT,CAAoBC,IAApB,EAAsC;AAAA,MAAZC,KAAY,uEAAJ,EAAI;;AACpC,OAAK,IAAMC,GAAX,IAAkBF,IAAlB,EAAwB;AACtB,QAAMG,GAAG,GAAGH,IAAI,CAACE,GAAD,CAAhB;;AAEA,QAAIA,GAAG,KAAK,GAAR,IAAeE,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,MAAlB,KAA6B,CAAhD,EAAmD;AACjD,UAAI;AACFL,QAAAA,KAAK,CAACM,IAAN,CAAW,IAAIX,OAAJ,CAAY,EAAZ,EAAgB,CAAhB,EAAmB,IAAIC,GAAJ,CAAQM,GAAR,CAAnB,CAAX;AACA;AACD,OAHD,CAGE,OAAOK,CAAP,EAAU,CACV;AACD;AACF;;AAED,QAAIX,GAAG,CAACY,KAAJ,CAAUN,GAAV,CAAJ,EAAoB;AAClBF,MAAAA,KAAK,CAACM,IAAN,CAAW,IAAIX,OAAJ,CAAY,EAAZ,EAAgB,CAAhB,EAAmBO,GAAnB,CAAX;AACA;AACD;;AAED,QAAIO,KAAK,CAACC,OAAN,CAAcR,GAAd,CAAJ,EAAwB;AACtBJ,MAAAA,SAAS,CAACI,GAAD,EAAMF,KAAN,CAAT;AACD;;AAED,QAAIE,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAClCJ,MAAAA,SAAS,CAACI,GAAD,EAAMF,KAAN,CAAT;AACD;AACF;;AAED,SAAOA,KAAP;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiB,gBAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAC5B,SAAOhB,iBAAiB;AAAA,0EAAC,iBAAsBiB,SAAtB,EAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEMC,cAAAA,GAHiB,GAGX,IAAIpB,GAAJ,CAAQkB,SAAR,CAHW;AAAA;AAAA,qBAIFD,GAAG,CAACI,GAAJ,CAAQD,GAAR,EAAaD,OAAb,CAJE;;AAAA;AAIjBG,cAAAA,MAJiB;;AAAA,oBAMnBF,GAAG,CAACG,KAAJ,KAAc,KANK;AAAA;AAAA;AAAA;;AAAA,+CAOd,EAPc;;AAAA;AAAA,oBAUnBH,GAAG,CAACG,KAAJ,KAAc,QAVK;AAAA;AAAA;AAAA;;AAAA,+CAWdD,MAAM,CAACE,KAAP,CAAaC,KAXC;;AAAA;AAAA,oBAcnBL,GAAG,CAACG,KAAJ,KAAc,UAdK;AAAA;AAAA;AAAA;;AAAA,+CAedrB,SAAS,CAACoB,MAAD,CAfK;;AAAA;AAAA,oBAkBjB,IAAII,KAAJ,2CAA6CN,GAAG,CAACG,KAAjD,EAlBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBnB,KAAhB;AAAA;AAAA;;AAAA,WAAgBA,KAAhB;AAAA,MAAxB;AAoBD,CArBD","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst DAGLink = dagPB.DAGLink\nconst CID = require('cids')\nconst { withTimeoutOption } = require('../../utils')\n\nfunction findLinks (node, links = []) {\n  for (const key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push(new DAGLink('', 0, new CID(val)))\n        continue\n      } catch (_) {\n        // not a CID\n      }\n    }\n\n    if (CID.isCID(val)) {\n      links.push(new DAGLink('', 0, val))\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\nmodule.exports = ({ dag }) => {\n  return withTimeoutOption(async function links (multihash, options) {\n    options = options || {}\n\n    const cid = new CID(multihash)\n    const result = await dag.get(cid, options)\n\n    if (cid.codec === 'raw') {\n      return []\n    }\n\n    if (cid.codec === 'dag-pb') {\n      return result.value.Links\n    }\n\n    if (cid.codec === 'dag-cbor') {\n      return findLinks(result)\n    }\n\n    throw new Error(`Cannot resolve links from codec ${cid.codec}`)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}