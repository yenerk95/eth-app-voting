{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar debug = require('debug');\n\nvar log = debug('repo-migrations:repo_mem_lock');\nvar lockFile = 'repo.lock';\nvar LOCKS = {};\n/**\n * Lock the repo in the given dir and for given repo version.\n * @param {int} version\n * @param {string} dir\n * @returns {Promise<Object>}\n */\n\nexports.lock = /*#__PURE__*/function () {\n  var _lock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(version, dir) {\n    var file;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // eslint-disable-line require-await\n            file = dir + '/' + lockFile;\n            log('locking %s', file);\n\n            if (!(LOCKS[file] === true)) {\n              _context.next = 4;\n              break;\n            }\n\n            throw Error(\"There is already present lock for: \".concat(file));\n\n          case 4:\n            LOCKS[file] = true;\n            return _context.abrupt(\"return\", {\n              close: function close() {\n                if (LOCKS[file]) {\n                  log('releasing lock %s', file);\n                  delete LOCKS[file];\n                }\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function lock(_x, _x2) {\n    return _lock.apply(this, arguments);\n  }\n\n  return lock;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo-migrations/src/repo/lock-memory.js"],"names":["debug","require","log","lockFile","LOCKS","exports","lock","version","dir","file","Error","close"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,GAAG,GAAGF,KAAK,CAAC,+BAAD,CAAjB;AAEA,IAAMG,QAAQ,GAAG,WAAjB;AAEA,IAAMC,KAAK,GAAG,EAAd;AAEA;;;;;;;AAMAC,OAAO,CAACC,IAAR;AAAA,uEAAe,iBAAqBC,OAArB,EAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AAC5CC,YAAAA,IADO,GACAD,GAAG,GAAG,GAAN,GAAYL,QADZ;AAEbD,YAAAA,GAAG,CAAC,YAAD,EAAeO,IAAf,CAAH;;AAFa,kBAITL,KAAK,CAACK,IAAD,CAAL,KAAgB,IAJP;AAAA;AAAA;AAAA;;AAAA,kBAKLC,KAAK,8CAAuCD,IAAvC,EALA;;AAAA;AAQbL,YAAAA,KAAK,CAACK,IAAD,CAAL,GAAc,IAAd;AARa,6CASN;AACLE,cAAAA,KADK,mBACI;AACP,oBAAIP,KAAK,CAACK,IAAD,CAAT,EAAiB;AACfP,kBAAAA,GAAG,CAAC,mBAAD,EAAsBO,IAAtB,CAAH;AACA,yBAAOL,KAAK,CAACK,IAAD,CAAZ;AACD;AACF;AANI,aATM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA,WAA8BH,IAA9B;AAAA;AAAA;;AAAA,SAA8BA,IAA9B;AAAA","sourcesContent":["'use strict'\n\nconst debug = require('debug')\n\nconst log = debug('repo-migrations:repo_mem_lock')\n\nconst lockFile = 'repo.lock'\n\nconst LOCKS = {}\n\n/**\n * Lock the repo in the given dir and for given repo version.\n * @param {int} version\n * @param {string} dir\n * @returns {Promise<Object>}\n */\nexports.lock = async function lock (version, dir) { // eslint-disable-line require-await\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n\n  if (LOCKS[file] === true) {\n    throw Error(`There is already present lock for: ${file}`)\n  }\n\n  LOCKS[file] = true\n  return {\n    close () {\n      if (LOCKS[file]) {\n        log('releasing lock %s', file)\n        delete LOCKS[file]\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}