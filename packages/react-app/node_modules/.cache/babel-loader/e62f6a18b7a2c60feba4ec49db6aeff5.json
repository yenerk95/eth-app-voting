{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst pAny = require('p-any');\n\nmodule.exports = node => {\n  const routers = node._modules.peerRouting || []; // If we have the dht, make it first\n\n  if (node._dht) {\n    routers.unshift(node._dht);\n  }\n\n  return {\n    /**\n     * Iterates over all peer routers in series to find the given peer.\n     *\n     * @param {String} id The id of the peer to find\n     * @param {object} [options]\n     * @param {number} [options.timeout] How long the query should run\n     * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n    findPeer: async (id, options) => {\n      // eslint-disable-line require-await\n      if (!routers.length) {\n        throw errCode(new Error('No peer routers available'), 'NO_ROUTERS_AVAILABLE');\n      }\n\n      return pAny(routers.map(async router => {\n        const result = await router.findPeer(id, options); // If we don't have a result, we need to provide an error to keep trying\n\n        if (!result || Object.keys(result).length === 0) {\n          throw errCode(new Error('not found'), 'NOT_FOUND');\n        }\n\n        return result;\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/peer-routing.js"],"names":["errCode","require","pAny","module","exports","node","routers","_modules","peerRouting","_dht","unshift","findPeer","id","options","length","Error","map","router","result","Object","keys"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,OAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,QAAMC,OAAO,GAAGD,IAAI,CAACE,QAAL,CAAcC,WAAd,IAA6B,EAA7C,CADyB,CAGzB;;AACA,MAAIH,IAAI,CAACI,IAAT,EAAe;AACbH,IAAAA,OAAO,CAACI,OAAR,CAAgBL,IAAI,CAACI,IAArB;AACD;;AAED,SAAO;AACL;;;;;;;;AAQAE,IAAAA,QAAQ,EAAE,OAAOC,EAAP,EAAWC,OAAX,KAAuB;AAAE;AACjC,UAAI,CAACP,OAAO,CAACQ,MAAb,EAAqB;AACnB,cAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAU,2BAAV,CAAD,EAAyC,sBAAzC,CAAb;AACD;;AAED,aAAOb,IAAI,CAACI,OAAO,CAACU,GAAR,CAAY,MAAOC,MAAP,IAAkB;AACxC,cAAMC,MAAM,GAAG,MAAMD,MAAM,CAACN,QAAP,CAAgBC,EAAhB,EAAoBC,OAApB,CAArB,CADwC,CAGxC;;AACA,YAAI,CAACK,MAAD,IAAWC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBJ,MAApB,KAA+B,CAA9C,EAAiD;AAC/C,gBAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAU,WAAV,CAAD,EAAyB,WAAzB,CAAb;AACD;;AAED,eAAOG,MAAP;AACD,OATW,CAAD,CAAX;AAUD;AAxBI,GAAP;AA0BD,CAlCD","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst pAny = require('p-any')\n\nmodule.exports = (node) => {\n  const routers = node._modules.peerRouting || []\n\n  // If we have the dht, make it first\n  if (node._dht) {\n    routers.unshift(node._dht)\n  }\n\n  return {\n    /**\n     * Iterates over all peer routers in series to find the given peer.\n     *\n     * @param {String} id The id of the peer to find\n     * @param {object} [options]\n     * @param {number} [options.timeout] How long the query should run\n     * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n    findPeer: async (id, options) => { // eslint-disable-line require-await\n      if (!routers.length) {\n        throw errCode(new Error('No peer routers available'), 'NO_ROUTERS_AVAILABLE')\n      }\n\n      return pAny(routers.map(async (router) => {\n        const result = await router.findPeer(id, options)\n\n        // If we don't have a result, we need to provide an error to keep trying\n        if (!result || Object.keys(result).length === 0) {\n          throw errCode(new Error('not found'), 'NOT_FOUND')\n        }\n\n        return result\n      }))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}