{"ast":null,"code":"/*!\n * hmac.js - hmac for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/HMAC\n *   https://tools.ietf.org/html/rfc2104\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/hmac.js\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n/**\n * HMAC\n */\n\n\nclass HMAC {\n  /**\n   * Create an HMAC.\n   * @param {Function} Hash\n   * @param {Number} size\n   * @param {Array} [x=[]]\n   * @param {Array} [y=[]]\n   */\n  constructor(Hash, size, x = [], y = []) {\n    assert(typeof Hash === 'function');\n    assert(size >>> 0 === size);\n    assert(Array.isArray(x));\n    assert(Array.isArray(y));\n    this.hash = Hash;\n    this.size = size;\n    this.x = x;\n    this.y = y;\n    this.inner = new Hash();\n    this.outer = new Hash();\n  }\n  /**\n   * Initialize HMAC context.\n   * @param {Buffer} data\n   */\n\n\n  init(key) {\n    assert(Buffer.isBuffer(key)); // Shorten key\n\n    if (key.length > this.size) {\n      const Hash = this.hash;\n      const h = new Hash();\n      h.init(...this.x);\n      h.update(key);\n      key = h.final(...this.y);\n      assert(key.length <= this.size);\n    } // Pad key\n\n\n    const pad = Buffer.allocUnsafe(this.size);\n\n    for (let i = 0; i < key.length; i++) pad[i] = key[i] ^ 0x36;\n\n    for (let i = key.length; i < pad.length; i++) pad[i] = 0x36;\n\n    this.inner.init(...this.x);\n    this.inner.update(pad);\n\n    for (let i = 0; i < key.length; i++) pad[i] = key[i] ^ 0x5c;\n\n    for (let i = key.length; i < pad.length; i++) pad[i] = 0x5c;\n\n    this.outer.init(...this.x);\n    this.outer.update(pad);\n    return this;\n  }\n  /**\n   * Update HMAC context.\n   * @param {Buffer} data\n   */\n\n\n  update(data) {\n    this.inner.update(data);\n    return this;\n  }\n  /**\n   * Finalize HMAC context.\n   * @returns {Buffer}\n   */\n\n\n  final() {\n    this.outer.update(this.inner.final(...this.y));\n    return this.outer.final(...this.y);\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = HMAC;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/bcrypto/lib/internal/hmac.js"],"names":["assert","require","HMAC","constructor","Hash","size","x","y","Array","isArray","hash","inner","outer","init","key","Buffer","isBuffer","length","h","update","final","pad","allocUnsafe","i","data","module","exports"],"mappings":"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","sourcesContent":["/*!\n * hmac.js - hmac for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/HMAC\n *   https://tools.ietf.org/html/rfc2104\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/hmac.js\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\n\n/**\n * HMAC\n */\n\nclass HMAC {\n  /**\n   * Create an HMAC.\n   * @param {Function} Hash\n   * @param {Number} size\n   * @param {Array} [x=[]]\n   * @param {Array} [y=[]]\n   */\n\n  constructor(Hash, size, x = [], y = []) {\n    assert(typeof Hash === 'function');\n    assert((size >>> 0) === size);\n    assert(Array.isArray(x));\n    assert(Array.isArray(y));\n\n    this.hash = Hash;\n    this.size = size;\n    this.x = x;\n    this.y = y;\n\n    this.inner = new Hash();\n    this.outer = new Hash();\n  }\n\n  /**\n   * Initialize HMAC context.\n   * @param {Buffer} data\n   */\n\n  init(key) {\n    assert(Buffer.isBuffer(key));\n\n    // Shorten key\n    if (key.length > this.size) {\n      const Hash = this.hash;\n      const h = new Hash();\n\n      h.init(...this.x);\n      h.update(key);\n\n      key = h.final(...this.y);\n\n      assert(key.length <= this.size);\n    }\n\n    // Pad key\n    const pad = Buffer.allocUnsafe(this.size);\n\n    for (let i = 0; i < key.length; i++)\n      pad[i] = key[i] ^ 0x36;\n\n    for (let i = key.length; i < pad.length; i++)\n      pad[i] = 0x36;\n\n    this.inner.init(...this.x);\n    this.inner.update(pad);\n\n    for (let i = 0; i < key.length; i++)\n      pad[i] = key[i] ^ 0x5c;\n\n    for (let i = key.length; i < pad.length; i++)\n      pad[i] = 0x5c;\n\n    this.outer.init(...this.x);\n    this.outer.update(pad);\n\n    return this;\n  }\n\n  /**\n   * Update HMAC context.\n   * @param {Buffer} data\n   */\n\n  update(data) {\n    this.inner.update(data);\n    return this;\n  }\n\n  /**\n   * Finalize HMAC context.\n   * @returns {Buffer}\n   */\n\n  final() {\n    this.outer.update(this.inner.final(...this.y));\n    return this.outer.final(...this.y);\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = HMAC;\n"]},"metadata":{},"sourceType":"script"}