{"ast":null,"code":"const EventEmitter = require('events').EventEmitter;\n\nconst shortid = require('shortid');\n\nconst {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK\n} = require('./constants');\n\nconst observer = require('observable-webworkers');\n\nconst globalThis = require('globalthis')();\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n  return (worker, event) => {\n    if (!event || !event.data || event.data.type !== requestType) {\n      return;\n    }\n\n    const requestEvent = {\n      type: event.data.type,\n      name: event.data.name,\n      identifier: event.data.identifier\n    };\n    emitter.emit(masterEvent, requestEvent.name, () => {\n      // grant lock to worker\n      worker.postMessage({\n        type: grantType,\n        name: requestEvent.name,\n        identifier: requestEvent.identifier\n      }); // wait for worker to finish\n\n      return new Promise(resolve => {\n        const releaseEventListener = event => {\n          if (!event || !event.data) {\n            return;\n          }\n\n          const releaseEvent = {\n            type: event.data.type,\n            name: event.data.name,\n            identifier: event.data.identifier\n          };\n\n          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n            worker.removeEventListener('message', releaseEventListener);\n            resolve();\n          }\n        };\n\n        worker.addEventListener('message', releaseEventListener);\n      });\n    });\n  };\n};\n\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n  return () => {\n    const id = shortid.generate();\n    globalThis.postMessage({\n      type: requestType,\n      identifier: id,\n      name\n    });\n    return new Promise(resolve => {\n      const listener = event => {\n        if (!event || !event.data) {\n          return;\n        }\n\n        const responseEvent = {\n          type: event.data.type,\n          identifier: event.data.identifier\n        };\n\n        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {\n          globalThis.removeEventListener('message', listener); // grant lock\n\n          resolve(() => {\n            // release lock\n            globalThis.postMessage({\n              type: releaseType,\n              identifier: id,\n              name\n            });\n          });\n        }\n      };\n\n      globalThis.addEventListener('message', listener);\n    });\n  };\n};\n\nconst defaultOptions = {\n  singleProcess: false\n};\n\nmodule.exports = options => {\n  options = Object.assign({}, defaultOptions, options);\n  const isMaster = !!globalThis.document || options.singleProcess;\n\n  if (isMaster) {\n    const emitter = new EventEmitter();\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));\n    return emitter;\n  }\n\n  return {\n    isWorker: true,\n    readLock: name => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n    writeLock: name => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/mortice/lib/browser.js"],"names":["EventEmitter","require","shortid","WORKER_REQUEST_READ_LOCK","WORKER_RELEASE_READ_LOCK","MASTER_GRANT_READ_LOCK","WORKER_REQUEST_WRITE_LOCK","WORKER_RELEASE_WRITE_LOCK","MASTER_GRANT_WRITE_LOCK","observer","globalThis","handleWorkerLockRequest","emitter","masterEvent","requestType","releaseType","grantType","worker","event","data","type","requestEvent","name","identifier","emit","postMessage","Promise","resolve","releaseEventListener","releaseEvent","removeEventListener","addEventListener","makeWorkerLockRequest","id","generate","listener","responseEvent","defaultOptions","singleProcess","module","exports","options","Object","assign","isMaster","document","isWorker","readLock","writeLock"],"mappings":"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","sourcesContent":["const EventEmitter = require('events').EventEmitter\nconst shortid = require('shortid')\nconst {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK\n} = require('./constants')\nconst observer = require('observable-webworkers')\nconst globalThis = require('globalthis')()\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n  return (worker, event) => {\n    if (!event || !event.data || event.data.type !== requestType) {\n      return\n    }\n\n    const requestEvent = {\n      type: event.data.type,\n      name: event.data.name,\n      identifier: event.data.identifier\n    }\n\n    emitter.emit(masterEvent, requestEvent.name, () => {\n      // grant lock to worker\n      worker.postMessage({\n        type: grantType,\n        name: requestEvent.name,\n        identifier: requestEvent.identifier\n      })\n\n      // wait for worker to finish\n      return new Promise((resolve) => {\n        const releaseEventListener = (event) => {\n          if (!event || !event.data) {\n            return\n          }\n\n          const releaseEvent = {\n            type: event.data.type,\n            name: event.data.name,\n            identifier: event.data.identifier\n          }\n\n          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n            worker.removeEventListener('message', releaseEventListener)\n            resolve()\n          }\n        }\n\n        worker.addEventListener('message', releaseEventListener)\n      })\n    })\n  }\n}\n\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n  return () => {\n    const id = shortid.generate()\n\n    globalThis.postMessage({\n      type: requestType,\n      identifier: id,\n      name\n    })\n\n    return new Promise((resolve) => {\n      const listener = (event) => {\n        if (!event || !event.data) {\n          return\n        }\n\n        const responseEvent = {\n          type: event.data.type,\n          identifier: event.data.identifier\n        }\n\n        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {\n          globalThis.removeEventListener('message', listener)\n\n          // grant lock\n          resolve(() => {\n            // release lock\n            globalThis.postMessage({\n              type: releaseType,\n              identifier: id,\n              name\n            })\n          })\n        }\n      }\n\n      globalThis.addEventListener('message', listener)\n    })\n  }\n}\n\nconst defaultOptions = {\n  singleProcess: false\n}\n\nmodule.exports = (options) => {\n  options = Object.assign({}, defaultOptions, options)\n  const isMaster = !!globalThis.document || options.singleProcess\n\n  if (isMaster) {\n    const emitter = new EventEmitter()\n\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK))\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK))\n\n    return emitter\n  }\n\n  return {\n    isWorker: true,\n    readLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n    writeLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}