{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require('interface-datastore'),\n    Adapter = _require.Adapter,\n    utils = _require.utils;\n\nvar map = utils.map;\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\n\nvar KeyTransformDatastore = /*#__PURE__*/function (_Adapter) {\n  _inherits(KeyTransformDatastore, _Adapter);\n\n  var _super = _createSuper(KeyTransformDatastore);\n\n  function KeyTransformDatastore(child, transform) {\n    var _this;\n\n    _classCallCheck(this, KeyTransformDatastore);\n\n    _this = _super.call(this);\n    _this.child = child;\n    _this.transform = transform;\n    return _this;\n  }\n\n  _createClass(KeyTransformDatastore, [{\n    key: \"open\",\n    value: function open() {\n      return this.child.open();\n    }\n  }, {\n    key: \"put\",\n    value: function put(key, val, options) {\n      return this.child.put(this.transform.convert(key), val, options);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, options) {\n      return this.child.get(this.transform.convert(key), options);\n    }\n  }, {\n    key: \"has\",\n    value: function has(key, options) {\n      return this.child.has(this.transform.convert(key), options);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key, options) {\n      return this.child.delete(this.transform.convert(key), options);\n    }\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      var _this2 = this;\n\n      var b = this.child.batch();\n      return {\n        put: function put(key, value) {\n          b.put(_this2.transform.convert(key), value);\n        },\n        delete: function _delete(key) {\n          b.delete(_this2.transform.convert(key));\n        },\n        commit: function commit(options) {\n          return b.commit(options);\n        }\n      };\n    }\n  }, {\n    key: \"query\",\n    value: function query(q, options) {\n      var _this3 = this;\n\n      return map(this.child.query(q, options), function (e) {\n        e.key = _this3.transform.invert(e.key);\n        return e;\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.child.close();\n    }\n  }]);\n\n  return KeyTransformDatastore;\n}(Adapter);\n\nmodule.exports = KeyTransformDatastore;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/datastore-core/src/keytransform.js"],"names":["require","Adapter","utils","map","KeyTransformDatastore","child","transform","open","key","val","options","put","convert","get","has","delete","b","batch","value","commit","q","query","e","invert","close","module","exports"],"mappings":"AAAA;;;;;;;;;;eAE2BA,OAAO,CAAC,qBAAD,C;IAA1BC,O,YAAAA,O;IAASC,K,YAAAA,K;;AACjB,IAAMC,GAAG,GAAGD,KAAK,CAACC,GAAlB;AAEA;;;;;;IAKMC,qB;;;;;AACJ,iCAAaC,KAAb,EAAoBC,SAApB,EAA+B;AAAA;;AAAA;;AAC7B;AAEA,UAAKD,KAAL,GAAaA,KAAb;AACA,UAAKC,SAAL,GAAiBA,SAAjB;AAJ6B;AAK9B;;;;2BAEO;AACN,aAAO,KAAKD,KAAL,CAAWE,IAAX,EAAP;AACD;;;wBAEIC,G,EAAKC,G,EAAKC,O,EAAS;AACtB,aAAO,KAAKL,KAAL,CAAWM,GAAX,CAAe,KAAKL,SAAL,CAAeM,OAAf,CAAuBJ,GAAvB,CAAf,EAA4CC,GAA5C,EAAiDC,OAAjD,CAAP;AACD;;;wBAEIF,G,EAAKE,O,EAAS;AACjB,aAAO,KAAKL,KAAL,CAAWQ,GAAX,CAAe,KAAKP,SAAL,CAAeM,OAAf,CAAuBJ,GAAvB,CAAf,EAA4CE,OAA5C,CAAP;AACD;;;wBAEIF,G,EAAKE,O,EAAS;AACjB,aAAO,KAAKL,KAAL,CAAWS,GAAX,CAAe,KAAKR,SAAL,CAAeM,OAAf,CAAuBJ,GAAvB,CAAf,EAA4CE,OAA5C,CAAP;AACD;;;4BAEOF,G,EAAKE,O,EAAS;AACpB,aAAO,KAAKL,KAAL,CAAWU,MAAX,CAAkB,KAAKT,SAAL,CAAeM,OAAf,CAAuBJ,GAAvB,CAAlB,EAA+CE,OAA/C,CAAP;AACD;;;4BAEQ;AAAA;;AACP,UAAMM,CAAC,GAAG,KAAKX,KAAL,CAAWY,KAAX,EAAV;AACA,aAAO;AACLN,QAAAA,GAAG,EAAE,aAACH,GAAD,EAAMU,KAAN,EAAgB;AACnBF,UAAAA,CAAC,CAACL,GAAF,CAAM,MAAI,CAACL,SAAL,CAAeM,OAAf,CAAuBJ,GAAvB,CAAN,EAAmCU,KAAnC;AACD,SAHI;AAILH,QAAAA,MAAM,EAAE,iBAACP,GAAD,EAAS;AACfQ,UAAAA,CAAC,CAACD,MAAF,CAAS,MAAI,CAACT,SAAL,CAAeM,OAAf,CAAuBJ,GAAvB,CAAT;AACD,SANI;AAOLW,QAAAA,MAAM,EAAE,gBAACT,OAAD,EAAa;AACnB,iBAAOM,CAAC,CAACG,MAAF,CAAST,OAAT,CAAP;AACD;AATI,OAAP;AAWD;;;0BAEMU,C,EAAGV,O,EAAS;AAAA;;AACjB,aAAOP,GAAG,CAAC,KAAKE,KAAL,CAAWgB,KAAX,CAAiBD,CAAjB,EAAoBV,OAApB,CAAD,EAA+B,UAAAY,CAAC,EAAI;AAC5CA,QAAAA,CAAC,CAACd,GAAF,GAAQ,MAAI,CAACF,SAAL,CAAeiB,MAAf,CAAsBD,CAAC,CAACd,GAAxB,CAAR;AACA,eAAOc,CAAP;AACD,OAHS,CAAV;AAID;;;4BAEQ;AACP,aAAO,KAAKjB,KAAL,CAAWmB,KAAX,EAAP;AACD;;;;EApDiCvB,O;;AAuDpCwB,MAAM,CAACC,OAAP,GAAiBtB,qBAAjB","sourcesContent":["'use strict'\n\nconst { Adapter, utils } = require('interface-datastore')\nconst map = utils.map\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\nclass KeyTransformDatastore extends Adapter {\n  constructor (child, transform) {\n    super()\n\n    this.child = child\n    this.transform = transform\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  put (key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options)\n  }\n\n  get (key, options) {\n    return this.child.get(this.transform.convert(key), options)\n  }\n\n  has (key, options) {\n    return this.child.has(this.transform.convert(key), options)\n  }\n\n  delete (key, options) {\n    return this.child.delete(this.transform.convert(key), options)\n  }\n\n  batch () {\n    const b = this.child.batch()\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value)\n      },\n      delete: (key) => {\n        b.delete(this.transform.convert(key))\n      },\n      commit: (options) => {\n        return b.commit(options)\n      }\n    }\n  }\n\n  query (q, options) {\n    return map(this.child.query(q, options), e => {\n      e.key = this.transform.invert(e.key)\n      return e\n    })\n  }\n\n  close () {\n    return this.child.close()\n  }\n}\n\nmodule.exports = KeyTransformDatastore\n"]},"metadata":{},"sourceType":"script"}