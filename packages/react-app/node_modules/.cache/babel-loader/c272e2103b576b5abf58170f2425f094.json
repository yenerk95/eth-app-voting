{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar errcode = require('err-code');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:peer-store:key-book');\nlog.error = debug('libp2p:peer-store:key-book:error');\n\nvar PeerId = require('peer-id');\n\nvar Book = require('./book');\n\nvar _require = require('../errors'),\n    ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n/**\n * The KeyBook is responsible for keeping the known public keys of a peer.\n */\n\n\nvar KeyBook = /*#__PURE__*/function (_Book) {\n  _inherits(KeyBook, _Book);\n\n  var _super = _createSuper(KeyBook);\n\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  function KeyBook(peerStore) {\n    var _this;\n\n    _classCallCheck(this, KeyBook);\n\n    _this = _super.call(this, {\n      peerStore: peerStore,\n      eventName: 'change:pubkey',\n      eventProperty: 'pubkey',\n      eventTransformer: function eventTransformer(data) {\n        return data.pubKey;\n      }\n    });\n    /**\n     * Map known peers to their known Public Key.\n     * @type {Map<string, PeerId>}\n     */\n\n    _this.data = new Map();\n    return _this;\n  }\n  /**\n   * Set the Peer public key.\n   * @override\n   * @param {PeerId} peerId\n   * @param {RsaPublicKey|Ed25519PublicKey|Secp256k1PublicKey} publicKey\n   * @return {KeyBook}\n  */\n\n\n  _createClass(KeyBook, [{\n    key: \"set\",\n    value: function set(peerId, publicKey) {\n      if (!PeerId.isPeerId(peerId)) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var id = peerId.toB58String();\n      var recPeerId = this.data.get(id); // If no record available, and this is valid\n\n      if (!recPeerId && publicKey) {\n        // This might be unecessary, but we want to store the PeerId\n        // to avoid an async operation when reconstructing the PeerId\n        peerId.pubKey = publicKey;\n\n        this._setData(peerId, peerId);\n\n        log(\"stored provided public key for \".concat(id));\n      }\n\n      return this;\n    }\n    /**\n     * Get Public key of the given PeerId, if stored.\n     * @override\n     * @param {PeerId} peerId\n     * @return {RsaPublicKey|Ed25519PublicKey|Secp256k1PublicKey}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var rec = this.data.get(peerId.toB58String());\n      return rec ? rec.pubKey : undefined;\n    }\n  }]);\n\n  return KeyBook;\n}(Book);\n\nmodule.exports = KeyBook;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/peer-store/key-book.js"],"names":["errcode","require","debug","log","error","PeerId","Book","ERR_INVALID_PARAMETERS","codes","KeyBook","peerStore","eventName","eventProperty","eventTransformer","data","pubKey","Map","peerId","publicKey","isPeerId","Error","id","toB58String","recPeerId","get","_setData","rec","undefined","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,GAAG,GAAGD,KAAK,CAAC,4BAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,kCAAD,CAAjB;;AAEA,IAAMG,MAAM,GAAGJ,OAAO,CAAC,SAAD,CAAtB;;AAEA,IAAMK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAApB;;eAIIA,OAAO,CAAC,WAAD,C;IADAM,sB,YAATC,K,CAASD,sB;AAGX;;;;;IAGME,O;;;;;AACJ;;;;AAIA,mBAAaC,SAAb,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AACJA,MAAAA,SAAS,EAATA,SADI;AAEJC,MAAAA,SAAS,EAAE,eAFP;AAGJC,MAAAA,aAAa,EAAE,QAHX;AAIJC,MAAAA,gBAAgB,EAAE,0BAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,MAAf;AAAA;AAJd,KAAN;AAOA;;;;;AAIA,UAAKD,IAAL,GAAY,IAAIE,GAAJ,EAAZ;AAZsB;AAavB;AAED;;;;;;;;;;;wBAOKC,M,EAAQC,S,EAAW;AACtB,UAAI,CAACb,MAAM,CAACc,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;AAC5Bd,QAAAA,GAAG,CAACC,KAAJ,CAAU,qDAAV;AACA,cAAMJ,OAAO,CAAC,IAAIoB,KAAJ,CAAU,uCAAV,CAAD,EAAqDb,sBAArD,CAAb;AACD;;AAED,UAAMc,EAAE,GAAGJ,MAAM,CAACK,WAAP,EAAX;AACA,UAAMC,SAAS,GAAG,KAAKT,IAAL,CAAUU,GAAV,CAAcH,EAAd,CAAlB,CAPsB,CAStB;;AACA,UAAI,CAACE,SAAD,IAAcL,SAAlB,EAA6B;AAC3B;AACA;AACAD,QAAAA,MAAM,CAACF,MAAP,GAAgBG,SAAhB;;AAEA,aAAKO,QAAL,CAAcR,MAAd,EAAsBA,MAAtB;;AACAd,QAAAA,GAAG,0CAAmCkB,EAAnC,EAAH;AACD;;AAED,aAAO,IAAP;AACD;AAED;;;;;;;;;wBAMKJ,M,EAAQ;AACX,UAAI,CAACZ,MAAM,CAACc,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;AAC5B,cAAMjB,OAAO,CAAC,IAAIoB,KAAJ,CAAU,uCAAV,CAAD,EAAqDb,sBAArD,CAAb;AACD;;AAED,UAAMmB,GAAG,GAAG,KAAKZ,IAAL,CAAUU,GAAV,CAAcP,MAAM,CAACK,WAAP,EAAd,CAAZ;AAEA,aAAOI,GAAG,GAAGA,GAAG,CAACX,MAAP,GAAgBY,SAA1B;AACD;;;;EA/DmBrB,I;;AAkEtBsB,MAAM,CAACC,OAAP,GAAiBpB,OAAjB","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('libp2p:peer-store:key-book')\nlog.error = debug('libp2p:peer-store:key-book:error')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * The KeyBook is responsible for keeping the known public keys of a peer.\n */\nclass KeyBook extends Book {\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  constructor (peerStore) {\n    super({\n      peerStore,\n      eventName: 'change:pubkey',\n      eventProperty: 'pubkey',\n      eventTransformer: (data) => data.pubKey\n    })\n\n    /**\n     * Map known peers to their known Public Key.\n     * @type {Map<string, PeerId>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set the Peer public key.\n   * @override\n   * @param {PeerId} peerId\n   * @param {RsaPublicKey|Ed25519PublicKey|Secp256k1PublicKey} publicKey\n   * @return {KeyBook}\n  */\n  set (peerId, publicKey) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recPeerId = this.data.get(id)\n\n    // If no record available, and this is valid\n    if (!recPeerId && publicKey) {\n      // This might be unecessary, but we want to store the PeerId\n      // to avoid an async operation when reconstructing the PeerId\n      peerId.pubKey = publicKey\n\n      this._setData(peerId, peerId)\n      log(`stored provided public key for ${id}`)\n    }\n\n    return this\n  }\n\n  /**\n   * Get Public key of the given PeerId, if stored.\n   * @override\n   * @param {PeerId} peerId\n   * @return {RsaPublicKey|Ed25519PublicKey|Secp256k1PublicKey}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    return rec ? rec.pubKey : undefined\n  }\n}\n\nmodule.exports = KeyBook\n"]},"metadata":{},"sourceType":"script"}