{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar mh = require('multihashing-async');\n\nvar CID = require('cids');\n\nvar persist = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buffer, block, options) {\n    var multihash, cid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!options.codec) {\n              options.codec = 'dag-pb';\n            }\n\n            if (!options.cidVersion) {\n              options.cidVersion = 0;\n            }\n\n            if (!options.hashAlg) {\n              options.hashAlg = 'sha2-256';\n            }\n\n            if (options.hashAlg !== 'sha2-256') {\n              options.cidVersion = 1;\n            }\n\n            _context.next = 6;\n            return mh(buffer, options.hashAlg);\n\n          case 6:\n            multihash = _context.sent;\n            cid = new CID(options.cidVersion, options.codec, multihash);\n\n            if (options.onlyHash) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 11;\n            return block.put(buffer, _objectSpread(_objectSpread({}, options), {}, {\n              cid: cid\n            }));\n\n          case 11:\n            return _context.abrupt(\"return\", cid);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function persist(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = persist;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/utils/persist.js"],"names":["mh","require","CID","persist","buffer","block","options","codec","cidVersion","hashAlg","multihash","cid","onlyHash","put","module","exports"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,oBAAD,CAAlB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAME,OAAO;AAAA,sEAAG,iBAAOC,MAAP,EAAeC,KAAf,EAAsBC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,gBAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;AAClBD,cAAAA,OAAO,CAACC,KAAR,GAAgB,QAAhB;AACD;;AAED,gBAAI,CAACD,OAAO,CAACE,UAAb,EAAyB;AACvBF,cAAAA,OAAO,CAACE,UAAR,GAAqB,CAArB;AACD;;AAED,gBAAI,CAACF,OAAO,CAACG,OAAb,EAAsB;AACpBH,cAAAA,OAAO,CAACG,OAAR,GAAkB,UAAlB;AACD;;AAED,gBAAIH,OAAO,CAACG,OAAR,KAAoB,UAAxB,EAAoC;AAClCH,cAAAA,OAAO,CAACE,UAAR,GAAqB,CAArB;AACD;;AAfa;AAAA,mBAiBUR,EAAE,CAACI,MAAD,EAASE,OAAO,CAACG,OAAjB,CAjBZ;;AAAA;AAiBRC,YAAAA,SAjBQ;AAkBRC,YAAAA,GAlBQ,GAkBF,IAAIT,GAAJ,CAAQI,OAAO,CAACE,UAAhB,EAA4BF,OAAO,CAACC,KAApC,EAA2CG,SAA3C,CAlBE;;AAAA,gBAoBTJ,OAAO,CAACM,QApBC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqBNP,KAAK,CAACQ,GAAN,CAAUT,MAAV,kCACDE,OADC;AAEJK,cAAAA,GAAG,EAAHA;AAFI,eArBM;;AAAA;AAAA,6CA2BPA,GA3BO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPR,OAAO;AAAA;AAAA;AAAA,GAAb;;AA8BAW,MAAM,CAACC,OAAP,GAAiBZ,OAAjB","sourcesContent":["'use strict'\n\nconst mh = require('multihashing-async')\nconst CID = require('cids')\n\nconst persist = async (buffer, block, options) => {\n  if (!options.codec) {\n    options.codec = 'dag-pb'\n  }\n\n  if (!options.cidVersion) {\n    options.cidVersion = 0\n  }\n\n  if (!options.hashAlg) {\n    options.hashAlg = 'sha2-256'\n  }\n\n  if (options.hashAlg !== 'sha2-256') {\n    options.cidVersion = 1\n  }\n\n  const multihash = await mh(buffer, options.hashAlg)\n  const cid = new CID(options.cidVersion, options.codec, multihash)\n\n  if (!options.onlyHash) {\n    await block.put(buffer, {\n      ...options,\n      cid\n    })\n  }\n\n  return cid\n}\n\nmodule.exports = persist\n"]},"metadata":{},"sourceType":"script"}