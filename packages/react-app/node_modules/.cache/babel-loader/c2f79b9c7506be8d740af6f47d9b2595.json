{"ast":null,"code":"'use strict';\n\nconst Reader = require('it-reader');\n\nconst log = require('debug')('it-multistream-select:ls');\n\nconst multistream = require('./multistream');\n\nconst handshake = require('it-handshake');\n\nconst lp = require('it-length-prefixed');\n\nconst pipe = require('it-pipe');\n\nmodule.exports = async stream => {\n  const {\n    reader,\n    writer,\n    rest,\n    stream: shakeStream\n  } = handshake(stream);\n  log('write \"ls\"');\n  multistream.write(writer, 'ls');\n  rest(); // Next message from remote will be (e.g. for 2 protocols):\n  // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n\n  const res = await multistream.read(reader); // After reading response we have:\n  // <varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n\n  const protocolsReader = Reader([res]);\n  const protocols = []; // Decode each of the protocols from the reader\n\n  await pipe(protocolsReader, lp.decode(), async source => {\n    for await (const protocol of source) {\n      // Remove the newline\n      protocols.push(protocol.shallowSlice(0, -1).toString());\n    }\n  });\n  return {\n    stream: shakeStream,\n    protocols\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/multistream-select/src/ls.js"],"names":["Reader","require","log","multistream","handshake","lp","pipe","module","exports","stream","reader","writer","rest","shakeStream","write","res","read","protocolsReader","protocols","decode","source","protocol","push","shallowSlice","toString"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAZ;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,oBAAD,CAAlB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,SAAD,CAApB;;AAEAM,MAAM,CAACC,OAAP,GAAiB,MAAMC,MAAN,IAAgB;AAC/B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA,IAAlB;AAAwBH,IAAAA,MAAM,EAAEI;AAAhC,MAAgDT,SAAS,CAACK,MAAD,CAA/D;AAEAP,EAAAA,GAAG,CAAC,YAAD,CAAH;AACAC,EAAAA,WAAW,CAACW,KAAZ,CAAkBH,MAAlB,EAA0B,IAA1B;AACAC,EAAAA,IAAI,GAL2B,CAO/B;AACA;;AACA,QAAMG,GAAG,GAAG,MAAMZ,WAAW,CAACa,IAAZ,CAAiBN,MAAjB,CAAlB,CAT+B,CAW/B;AACA;;AACA,QAAMO,eAAe,GAAGjB,MAAM,CAAC,CAACe,GAAD,CAAD,CAA9B;AACA,QAAMG,SAAS,GAAG,EAAlB,CAd+B,CAgB/B;;AACA,QAAMZ,IAAI,CACRW,eADQ,EAERZ,EAAE,CAACc,MAAH,EAFQ,EAGR,MAAMC,MAAN,IAAgB;AACd,eAAW,MAAMC,QAAjB,IAA6BD,MAA7B,EAAqC;AACnC;AACAF,MAAAA,SAAS,CAACI,IAAV,CAAeD,QAAQ,CAACE,YAAT,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,EAA6BC,QAA7B,EAAf;AACD;AACF,GARO,CAAV;AAWA,SAAO;AAAEf,IAAAA,MAAM,EAAEI,WAAV;AAAuBK,IAAAA;AAAvB,GAAP;AACD,CA7BD","sourcesContent":["'use strict'\n\nconst Reader = require('it-reader')\nconst log = require('debug')('it-multistream-select:ls')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\nconst lp = require('it-length-prefixed')\nconst pipe = require('it-pipe')\n\nmodule.exports = async stream => {\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  log('write \"ls\"')\n  multistream.write(writer, 'ls')\n  rest()\n\n  // Next message from remote will be (e.g. for 2 protocols):\n  // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const res = await multistream.read(reader)\n\n  // After reading response we have:\n  // <varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const protocolsReader = Reader([res])\n  const protocols = []\n\n  // Decode each of the protocols from the reader\n  await pipe(\n    protocolsReader,\n    lp.decode(),\n    async source => {\n      for await (const protocol of source) {\n        // Remove the newline\n        protocols.push(protocol.shallowSlice(0, -1).toString())\n      }\n    }\n  )\n\n  return { stream: shakeStream, protocols }\n}\n"]},"metadata":{},"sourceType":"script"}