{"ast":null,"code":"'use strict';\n\nconst {\n  sortBy\n} = require('../../utils');\n\nconst Entry = require('./entry');\n\nclass Wantlist {\n  constructor(stats) {\n    this.set = new Map();\n    this._stats = stats;\n  }\n\n  get length() {\n    return this.set.size;\n  }\n\n  add(cid, priority, wantType) {\n    // Have to import here to avoid circular reference\n    const Message = require('../message');\n\n    const cidStr = cid.toString('base58btc');\n    const entry = this.set.get(cidStr);\n\n    if (entry) {\n      entry.inc();\n      entry.priority = priority; // We can only overwrite want-have with want-block\n\n      if (entry.wantType === Message.WantType.Have && wantType === Message.WantType.Block) {\n        entry.wantType = wantType;\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType));\n\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1);\n      }\n    }\n  }\n\n  remove(cid) {\n    const cidStr = cid.toString('base58btc');\n    const entry = this.set.get(cidStr);\n\n    if (!entry) {\n      return;\n    }\n\n    entry.dec(); // only delete when no refs are held\n\n    if (entry.hasRefs()) {\n      return;\n    }\n\n    this.set.delete(cidStr);\n\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1);\n    }\n  }\n\n  removeForce(cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr);\n    }\n  }\n\n  forEach(fn) {\n    return this.set.forEach(fn);\n  }\n\n  entries() {\n    return this.set.entries();\n  }\n\n  sortedEntries() {\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())));\n  }\n\n  contains(cid) {\n    const cidStr = cid.toString('base58btc');\n    return this.set.get(cidStr);\n  }\n\n}\n\nWantlist.Entry = Entry;\nmodule.exports = Wantlist;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/types/wantlist/index.js"],"names":["sortBy","require","Entry","Wantlist","constructor","stats","set","Map","_stats","length","size","add","cid","priority","wantType","Message","cidStr","toString","entry","get","inc","WantType","Have","Block","push","remove","dec","hasRefs","delete","removeForce","has","forEach","fn","entries","sortedEntries","o","key","Array","from","contains","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { sortBy } = require('../../utils')\nconst Entry = require('./entry')\n\nclass Wantlist {\n  constructor (stats) {\n    this.set = new Map()\n    this._stats = stats\n  }\n\n  get length () {\n    return this.set.size\n  }\n\n  add (cid, priority, wantType) {\n    // Have to import here to avoid circular reference\n    const Message = require('../message')\n\n    const cidStr = cid.toString('base58btc')\n    const entry = this.set.get(cidStr)\n\n    if (entry) {\n      entry.inc()\n      entry.priority = priority\n\n      // We can only overwrite want-have with want-block\n      if (entry.wantType === Message.WantType.Have && wantType === Message.WantType.Block) {\n        entry.wantType = wantType\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType))\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1)\n      }\n    }\n  }\n\n  remove (cid) {\n    const cidStr = cid.toString('base58btc')\n    const entry = this.set.get(cidStr)\n\n    if (!entry) {\n      return\n    }\n\n    entry.dec()\n\n    // only delete when no refs are held\n    if (entry.hasRefs()) {\n      return\n    }\n\n    this.set.delete(cidStr)\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1)\n    }\n  }\n\n  removeForce (cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr)\n    }\n  }\n\n  forEach (fn) {\n    return this.set.forEach(fn)\n  }\n\n  entries () {\n    return this.set.entries()\n  }\n\n  sortedEntries () {\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())))\n  }\n\n  contains (cid) {\n    const cidStr = cid.toString('base58btc')\n    return this.set.get(cidStr)\n  }\n}\n\nWantlist.Entry = Entry\nmodule.exports = Wantlist\n"]},"metadata":{},"sourceType":"script"}