{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Message = require('../types/message');\n\nvar Wantlist = require('../types/wantlist');\n\nvar CONSTANTS = require('../constants');\n\nvar MsgQueue = require('./msg-queue');\n\nvar logger = require('../utils').logger;\n\nmodule.exports = /*#__PURE__*/function () {\n  function WantManager(peerId, network, stats) {\n    _classCallCheck(this, WantManager);\n\n    this.peers = new Map();\n    this.wantlist = new Wantlist(stats);\n    this.network = network;\n    this._stats = stats;\n    this._peerId = peerId;\n    this._log = logger(peerId, 'want');\n  }\n\n  _createClass(WantManager, [{\n    key: \"_addEntries\",\n    value: function _addEntries(cids, cancel, force) {\n      var _this = this;\n\n      var entries = cids.map(function (cid, i) {\n        return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel);\n      });\n      entries.forEach(function (e) {\n        // add changes to our wantlist\n        if (e.cancel) {\n          if (force) {\n            _this.wantlist.removeForce(e.cid);\n          } else {\n            _this.wantlist.remove(e.cid);\n          }\n        } else {\n          _this._log('adding to wl');\n\n          _this.wantlist.add(e.cid, e.priority);\n        }\n      }); // broadcast changes\n\n      var _iterator = _createForOfIteratorHelper(this.peers.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          p.addEntries(entries);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_startPeerHandler\",\n    value: function _startPeerHandler(peerId) {\n      var mq = this.peers.get(peerId.toB58String());\n\n      if (mq) {\n        mq.refcnt++;\n        return;\n      }\n\n      mq = new MsgQueue(this._peerId, peerId, this.network); // new peer, give them the full wantlist\n\n      var fullwantlist = new Message(true);\n\n      var _iterator2 = _createForOfIteratorHelper(this.wantlist.entries()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var entry = _step2.value;\n          fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      mq.addMessage(fullwantlist);\n      this.peers.set(peerId.toB58String(), mq);\n      return mq;\n    }\n  }, {\n    key: \"_stopPeerHandler\",\n    value: function _stopPeerHandler(peerId) {\n      var mq = this.peers.get(peerId.toB58String());\n\n      if (!mq) {\n        return;\n      }\n\n      mq.refcnt--;\n\n      if (mq.refcnt > 0) {\n        return;\n      }\n\n      this.peers.delete(peerId.toB58String());\n    } // add all the cids to the wantlist\n\n  }, {\n    key: \"wantBlocks\",\n    value: function wantBlocks(cids) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._addEntries(cids, false);\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', function () {\n          _this2.cancelWants(cids);\n        });\n      }\n    } // remove blocks of all the given keys without respecting refcounts\n\n  }, {\n    key: \"unwantBlocks\",\n    value: function unwantBlocks(cids) {\n      this._log('unwant blocks: %s', cids.length);\n\n      this._addEntries(cids, true, true);\n    } // cancel wanting all of the given keys\n\n  }, {\n    key: \"cancelWants\",\n    value: function cancelWants(cids) {\n      this._log('cancel wants: %s', cids.length);\n\n      this._addEntries(cids, true);\n    } // Returns a list of all currently connected peers\n\n  }, {\n    key: \"connectedPeers\",\n    value: function connectedPeers() {\n      return Array.from(this.peers.keys());\n    }\n  }, {\n    key: \"connected\",\n    value: function connected(peerId) {\n      this._startPeerHandler(peerId);\n    }\n  }, {\n    key: \"disconnected\",\n    value: function disconnected(peerId) {\n      this._stopPeerHandler(peerId);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {}\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this3 = this;\n\n      this.peers.forEach(function (mq) {\n        return _this3.disconnected(mq.peerId);\n      });\n      clearInterval(this.timer);\n    }\n  }]);\n\n  return WantManager;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/want-manager/index.js"],"names":["Message","require","Wantlist","CONSTANTS","MsgQueue","logger","module","exports","peerId","network","stats","peers","Map","wantlist","_stats","_peerId","_log","cids","cancel","force","entries","map","cid","i","Entry","kMaxPriority","WantType","Block","forEach","e","removeForce","remove","add","priority","values","p","addEntries","mq","get","toB58String","refcnt","fullwantlist","entry","addEntry","addMessage","set","delete","options","_addEntries","signal","addEventListener","cancelWants","length","Array","from","keys","_startPeerHandler","_stopPeerHandler","disconnected","clearInterval","timer"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAAP,CAAoBI,MAAnC;;AAEAC,MAAM,CAACC,OAAP;AACE,uBAAaC,MAAb,EAAqBC,OAArB,EAA8BC,KAA9B,EAAqC;AAAA;;AACnC,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,QAAL,GAAgB,IAAIX,QAAJ,CAAaQ,KAAb,CAAhB;AAEA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKK,MAAL,GAAcJ,KAAd;AAEA,SAAKK,OAAL,GAAeP,MAAf;AACA,SAAKQ,IAAL,GAAYX,MAAM,CAACG,MAAD,EAAS,MAAT,CAAlB;AACD;;AAVH;AAAA;AAAA,gCAYeS,IAZf,EAYqBC,MAZrB,EAY6BC,KAZ7B,EAYoC;AAAA;;AAChC,UAAMC,OAAO,GAAGH,IAAI,CAACI,GAAL,CAAS,UAACC,GAAD,EAAMC,CAAN,EAAY;AACnC,eAAO,IAAIvB,OAAO,CAACwB,KAAZ,CAAkBF,GAAlB,EAAuBnB,SAAS,CAACsB,YAAV,GAAyBF,CAAhD,EAAmDvB,OAAO,CAAC0B,QAAR,CAAiBC,KAApE,EAA2ET,MAA3E,CAAP;AACD,OAFe,CAAhB;AAIAE,MAAAA,OAAO,CAACQ,OAAR,CAAgB,UAACC,CAAD,EAAO;AACrB;AACA,YAAIA,CAAC,CAACX,MAAN,EAAc;AACZ,cAAIC,KAAJ,EAAW;AACT,YAAA,KAAI,CAACN,QAAL,CAAciB,WAAd,CAA0BD,CAAC,CAACP,GAA5B;AACD,WAFD,MAEO;AACL,YAAA,KAAI,CAACT,QAAL,CAAckB,MAAd,CAAqBF,CAAC,CAACP,GAAvB;AACD;AACF,SAND,MAMO;AACL,UAAA,KAAI,CAACN,IAAL,CAAU,cAAV;;AACA,UAAA,KAAI,CAACH,QAAL,CAAcmB,GAAd,CAAkBH,CAAC,CAACP,GAApB,EAAyBO,CAAC,CAACI,QAA3B;AACD;AACF,OAZD,EALgC,CAmBhC;;AAnBgC,iDAoBhB,KAAKtB,KAAL,CAAWuB,MAAX,EApBgB;AAAA;;AAAA;AAoBhC,4DAAqC;AAAA,cAA1BC,CAA0B;AACnCA,UAAAA,CAAC,CAACC,UAAF,CAAahB,OAAb;AACD;AAtB+B;AAAA;AAAA;AAAA;AAAA;AAuBjC;AAnCH;AAAA;AAAA,sCAqCqBZ,MArCrB,EAqC6B;AACzB,UAAI6B,EAAE,GAAG,KAAK1B,KAAL,CAAW2B,GAAX,CAAe9B,MAAM,CAAC+B,WAAP,EAAf,CAAT;;AAEA,UAAIF,EAAJ,EAAQ;AACNA,QAAAA,EAAE,CAACG,MAAH;AACA;AACD;;AAEDH,MAAAA,EAAE,GAAG,IAAIjC,QAAJ,CAAa,KAAKW,OAAlB,EAA2BP,MAA3B,EAAmC,KAAKC,OAAxC,CAAL,CARyB,CAUzB;;AACA,UAAMgC,YAAY,GAAG,IAAIzC,OAAJ,CAAY,IAAZ,CAArB;;AAXyB,kDAaL,KAAKa,QAAL,CAAcO,OAAd,EAbK;AAAA;;AAAA;AAazB,+DAA6C;AAAA,cAAlCsB,KAAkC;AAC3CD,UAAAA,YAAY,CAACE,QAAb,CAAsBD,KAAK,CAAC,CAAD,CAAL,CAASpB,GAA/B,EAAoCoB,KAAK,CAAC,CAAD,CAAL,CAAST,QAA7C;AACD;AAfwB;AAAA;AAAA;AAAA;AAAA;;AAiBzBI,MAAAA,EAAE,CAACO,UAAH,CAAcH,YAAd;AAEA,WAAK9B,KAAL,CAAWkC,GAAX,CAAerC,MAAM,CAAC+B,WAAP,EAAf,EAAqCF,EAArC;AACA,aAAOA,EAAP;AACD;AA1DH;AAAA;AAAA,qCA4DoB7B,MA5DpB,EA4D4B;AACxB,UAAM6B,EAAE,GAAG,KAAK1B,KAAL,CAAW2B,GAAX,CAAe9B,MAAM,CAAC+B,WAAP,EAAf,CAAX;;AAEA,UAAI,CAACF,EAAL,EAAS;AACP;AACD;;AAEDA,MAAAA,EAAE,CAACG,MAAH;;AACA,UAAIH,EAAE,CAACG,MAAH,GAAY,CAAhB,EAAmB;AACjB;AACD;;AAED,WAAK7B,KAAL,CAAWmC,MAAX,CAAkBtC,MAAM,CAAC+B,WAAP,EAAlB;AACD,KAzEH,CA2EE;;AA3EF;AAAA;AAAA,+BA4EctB,IA5Ed,EA4EkC;AAAA;;AAAA,UAAd8B,OAAc,uEAAJ,EAAI;;AAC9B,WAAKC,WAAL,CAAiB/B,IAAjB,EAAuB,KAAvB;;AAEA,UAAI8B,OAAO,IAAIA,OAAO,CAACE,MAAvB,EAA+B;AAC7BF,QAAAA,OAAO,CAACE,MAAR,CAAeC,gBAAf,CAAgC,OAAhC,EAAyC,YAAM;AAC7C,UAAA,MAAI,CAACC,WAAL,CAAiBlC,IAAjB;AACD,SAFD;AAGD;AACF,KApFH,CAsFE;;AAtFF;AAAA;AAAA,iCAuFgBA,IAvFhB,EAuFsB;AAClB,WAAKD,IAAL,CAAU,mBAAV,EAA+BC,IAAI,CAACmC,MAApC;;AACA,WAAKJ,WAAL,CAAiB/B,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B;AACD,KA1FH,CA4FE;;AA5FF;AAAA;AAAA,gCA6FeA,IA7Ff,EA6FqB;AACjB,WAAKD,IAAL,CAAU,kBAAV,EAA8BC,IAAI,CAACmC,MAAnC;;AACA,WAAKJ,WAAL,CAAiB/B,IAAjB,EAAuB,IAAvB;AACD,KAhGH,CAkGE;;AAlGF;AAAA;AAAA,qCAmGoB;AAChB,aAAOoC,KAAK,CAACC,IAAN,CAAW,KAAK3C,KAAL,CAAW4C,IAAX,EAAX,CAAP;AACD;AArGH;AAAA;AAAA,8BAuGa/C,MAvGb,EAuGqB;AACjB,WAAKgD,iBAAL,CAAuBhD,MAAvB;AACD;AAzGH;AAAA;AAAA,iCA2GgBA,MA3GhB,EA2GwB;AACpB,WAAKiD,gBAAL,CAAsBjD,MAAtB;AACD;AA7GH;AAAA;AAAA,4BA+GW,CACR;AAhHH;AAAA;AAAA,2BAkHU;AAAA;;AACN,WAAKG,KAAL,CAAWiB,OAAX,CAAmB,UAACS,EAAD;AAAA,eAAQ,MAAI,CAACqB,YAAL,CAAkBrB,EAAE,CAAC7B,MAArB,CAAR;AAAA,OAAnB;AAEAmD,MAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACD;AAtHH;;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst Message = require('../types/message')\nconst Wantlist = require('../types/wantlist')\nconst CONSTANTS = require('../constants')\nconst MsgQueue = require('./msg-queue')\nconst logger = require('../utils').logger\n\nmodule.exports = class WantManager {\n  constructor (peerId, network, stats) {\n    this.peers = new Map()\n    this.wantlist = new Wantlist(stats)\n\n    this.network = network\n    this._stats = stats\n\n    this._peerId = peerId\n    this._log = logger(peerId, 'want')\n  }\n\n  _addEntries (cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel)\n    })\n\n    entries.forEach((e) => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid)\n        } else {\n          this.wantlist.remove(e.cid)\n        }\n      } else {\n        this._log('adding to wl')\n        this.wantlist.add(e.cid, e.priority)\n      }\n    })\n\n    // broadcast changes\n    for (const p of this.peers.values()) {\n      p.addEntries(entries)\n    }\n  }\n\n  _startPeerHandler (peerId) {\n    let mq = this.peers.get(peerId.toB58String())\n\n    if (mq) {\n      mq.refcnt++\n      return\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network)\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true)\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority)\n    }\n\n    mq.addMessage(fullwantlist)\n\n    this.peers.set(peerId.toB58String(), mq)\n    return mq\n  }\n\n  _stopPeerHandler (peerId) {\n    const mq = this.peers.get(peerId.toB58String())\n\n    if (!mq) {\n      return\n    }\n\n    mq.refcnt--\n    if (mq.refcnt > 0) {\n      return\n    }\n\n    this.peers.delete(peerId.toB58String())\n  }\n\n  // add all the cids to the wantlist\n  wantBlocks (cids, options = {}) {\n    this._addEntries(cids, false)\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids)\n      })\n    }\n  }\n\n  // remove blocks of all the given keys without respecting refcounts\n  unwantBlocks (cids) {\n    this._log('unwant blocks: %s', cids.length)\n    this._addEntries(cids, true, true)\n  }\n\n  // cancel wanting all of the given keys\n  cancelWants (cids) {\n    this._log('cancel wants: %s', cids.length)\n    this._addEntries(cids, true)\n  }\n\n  // Returns a list of all currently connected peers\n  connectedPeers () {\n    return Array.from(this.peers.keys())\n  }\n\n  connected (peerId) {\n    this._startPeerHandler(peerId)\n  }\n\n  disconnected (peerId) {\n    this._stopPeerHandler(peerId)\n  }\n\n  start () {\n  }\n\n  stop () {\n    this.peers.forEach((mq) => this.disconnected(mq.peerId))\n\n    clearInterval(this.timer)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}