{"ast":null,"code":"var events = {};\n\nvar observable = function observable(worker) {\n  worker.addEventListener('message', function (event) {\n    observable.dispatchEvent('message', worker, event);\n  });\n\n  if (worker.port) {\n    worker.port.addEventListener('message', function (event) {\n      observable.dispatchEvent('message', worker, event);\n    });\n  }\n};\n\nobservable.addEventListener = function (type, fn) {\n  if (!events[type]) {\n    events[type] = [];\n  }\n\n  events[type].push(fn);\n};\n\nobservable.removeEventListener = function (type, fn) {\n  if (!events[type]) {\n    return;\n  }\n\n  events[type] = events[type].filter(function (listener) {\n    return listener === fn;\n  });\n};\n\nobservable.dispatchEvent = function () {\n  var args = Array.prototype.slice.call(arguments);\n  var type = args.shift();\n\n  if (!events[type]) {\n    return;\n  }\n\n  events[type].forEach(function (fn) {\n    return fn.apply(null, args);\n  });\n};\n\nmodule.exports = observable;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/observable-webworkers/lib/index.js"],"names":["events","observable","worker","addEventListener","event","dispatchEvent","port","type","fn","push","removeEventListener","filter","listener","args","Array","prototype","slice","call","arguments","shift","forEach","apply","module","exports"],"mappings":"AAAA,IAAMA,MAAM,GAAG,EAAf;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAY;AAC7BA,EAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,UAACC,KAAD,EAAW;AAC5CH,IAAAA,UAAU,CAACI,aAAX,CAAyB,SAAzB,EAAoCH,MAApC,EAA4CE,KAA5C;AACD,GAFD;;AAIA,MAAIF,MAAM,CAACI,IAAX,EAAiB;AACfJ,IAAAA,MAAM,CAACI,IAAP,CAAYH,gBAAZ,CAA6B,SAA7B,EAAwC,UAACC,KAAD,EAAW;AACjDH,MAAAA,UAAU,CAACI,aAAX,CAAyB,SAAzB,EAAoCH,MAApC,EAA4CE,KAA5C;AACD,KAFD;AAGD;AACF,CAVD;;AAYAH,UAAU,CAACE,gBAAX,GAA8B,UAACI,IAAD,EAAOC,EAAP,EAAc;AAC1C,MAAI,CAACR,MAAM,CAACO,IAAD,CAAX,EAAmB;AACjBP,IAAAA,MAAM,CAACO,IAAD,CAAN,GAAe,EAAf;AACD;;AAEDP,EAAAA,MAAM,CAACO,IAAD,CAAN,CAAaE,IAAb,CAAkBD,EAAlB;AACD,CAND;;AAQAP,UAAU,CAACS,mBAAX,GAAiC,UAACH,IAAD,EAAOC,EAAP,EAAc;AAC7C,MAAI,CAACR,MAAM,CAACO,IAAD,CAAX,EAAmB;AACjB;AACD;;AAEDP,EAAAA,MAAM,CAACO,IAAD,CAAN,GAAeP,MAAM,CAACO,IAAD,CAAN,CACZI,MADY,CACL,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,KAAKJ,EAAjB;AAAA,GADH,CAAf;AAED,CAPD;;AASAP,UAAU,CAACI,aAAX,GAA2B,YAAY;AACrC,MAAMQ,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAb;AACA,MAAMX,IAAI,GAAGM,IAAI,CAACM,KAAL,EAAb;;AAEA,MAAI,CAACnB,MAAM,CAACO,IAAD,CAAX,EAAmB;AACjB;AACD;;AAEDP,EAAAA,MAAM,CAACO,IAAD,CAAN,CAAaa,OAAb,CAAqB,UAAAZ,EAAE;AAAA,WAAIA,EAAE,CAACa,KAAH,CAAS,IAAT,EAAeR,IAAf,CAAJ;AAAA,GAAvB;AACD,CATD;;AAWAS,MAAM,CAACC,OAAP,GAAiBtB,UAAjB","sourcesContent":["const events = {}\n\nconst observable = (worker) => {\n  worker.addEventListener('message', (event) => {\n    observable.dispatchEvent('message', worker, event)\n  })\n\n  if (worker.port) {\n    worker.port.addEventListener('message', (event) => {\n      observable.dispatchEvent('message', worker, event)\n    })\n  }\n}\n\nobservable.addEventListener = (type, fn) => {\n  if (!events[type]) {\n    events[type] = []\n  }\n\n  events[type].push(fn)\n}\n\nobservable.removeEventListener = (type, fn) => {\n  if (!events[type]) {\n    return\n  }\n\n  events[type] = events[type]\n    .filter(listener => listener === fn)\n}\n\nobservable.dispatchEvent = function () {\n  const args = Array.prototype.slice.call(arguments)\n  const type = args.shift()\n\n  if (!events[type]) {\n    return\n  }\n\n  events[type].forEach(fn => fn.apply(null, args))\n}\n\nmodule.exports = observable\n"]},"metadata":{},"sourceType":"script"}