{"ast":null,"code":"'use strict';\n/**\n * Keeps track of all running queries.\n */\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar QueryManager = /*#__PURE__*/function () {\n  /**\n   * Creates a new QueryManager.\n   */\n  function QueryManager() {\n    _classCallCheck(this, QueryManager);\n\n    this.queries = new Set();\n    this.running = false;\n  }\n  /**\n   * Called when a query is started.\n   *\n   * @param {Query} query\n   */\n\n\n  _createClass(QueryManager, [{\n    key: \"queryStarted\",\n    value: function queryStarted(query) {\n      this.queries.add(query);\n    }\n    /**\n     * Called when a query completes.\n     *\n     * @param {Query} query\n     */\n\n  }, {\n    key: \"queryCompleted\",\n    value: function queryCompleted(query) {\n      this.queries.delete(query);\n    }\n    /**\n     * Starts the query manager.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.running = true;\n    }\n    /**\n     * Stops all queries.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n\n      var _iterator = _createForOfIteratorHelper(this.queries),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var query = _step.value;\n          query.stop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.queries.clear();\n    }\n  }]);\n\n  return QueryManager;\n}();\n\nmodule.exports = QueryManager;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/query-manager.js"],"names":["QueryManager","queries","Set","running","query","add","delete","stop","clear","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;IAGMA,Y;AACJ;;;AAGA,0BAAe;AAAA;;AACb,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA,SAAKC,OAAL,GAAe,KAAf;AACD;AAED;;;;;;;;;iCAKcC,K,EAAO;AACnB,WAAKH,OAAL,CAAaI,GAAb,CAAiBD,KAAjB;AACD;AAED;;;;;;;;mCAKgBA,K,EAAO;AACrB,WAAKH,OAAL,CAAaK,MAAb,CAAoBF,KAApB;AACD;AAED;;;;;;4BAGS;AACP,WAAKD,OAAL,GAAe,IAAf;AACD;AAED;;;;;;2BAGQ;AACN,WAAKA,OAAL,GAAe,KAAf;;AADM,iDAEc,KAAKF,OAFnB;AAAA;;AAAA;AAEN,4DAAkC;AAAA,cAAvBG,KAAuB;AAChCA,UAAAA,KAAK,CAACG,IAAN;AACD;AAJK;AAAA;AAAA;AAAA;AAAA;;AAKN,WAAKN,OAAL,CAAaO,KAAb;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBV,YAAjB","sourcesContent":["'use strict'\n\n/**\n * Keeps track of all running queries.\n */\nclass QueryManager {\n  /**\n   * Creates a new QueryManager.\n   */\n  constructor () {\n    this.queries = new Set()\n    this.running = false\n  }\n\n  /**\n   * Called when a query is started.\n   *\n   * @param {Query} query\n   */\n  queryStarted (query) {\n    this.queries.add(query)\n  }\n\n  /**\n   * Called when a query completes.\n   *\n   * @param {Query} query\n   */\n  queryCompleted (query) {\n    this.queries.delete(query)\n  }\n\n  /**\n   * Starts the query manager.\n   */\n  start () {\n    this.running = true\n  }\n\n  /**\n   * Stops all queries.\n   */\n  stop () {\n    this.running = false\n    for (const query of this.queries) {\n      query.stop()\n    }\n    this.queries.clear()\n  }\n}\n\nmodule.exports = QueryManager\n"]},"metadata":{},"sourceType":"script"}