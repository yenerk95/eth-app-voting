{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst withIs = require('class-is');\n\nconst {\n  Buffer\n} = require('buffer'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nclass DAGLink {\n  constructor(name, size, cid) {\n    if (!cid) {\n      throw new Error('A link requires a cid to point to');\n    } // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n\n    this._name = name || '';\n    this._nameBuf = null;\n    this._size = size;\n    this._cid = new CID(cid);\n  }\n\n  toString() {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`;\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  get Name() {\n    return this._name;\n  } // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n\n\n  get nameAsBuffer() {\n    if (this._nameBuf !== null) {\n      return this._nameBuf;\n    }\n\n    this._nameBuf = Buffer.from(this._name);\n    return this._nameBuf;\n  }\n\n  set Name(name) {\n    throw new Error(\"Can't set property: 'name' is immutable\");\n  }\n\n  get Tsize() {\n    return this._size;\n  }\n\n  set Tsize(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n  get Hash() {\n    return this._cid;\n  }\n\n  set Hash(cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipld-dag-pb/src/dag-link/dagLink.js"],"names":["CID","require","withIs","Buffer","DAGLink","constructor","name","size","cid","Error","_name","_nameBuf","_size","_cid","toString","toBaseEncodedString","Name","Tsize","toJSON","_json","Object","freeze","Hash","assign","nameAsBuffer","from","exports","module","className","symbolName"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,QAAD,CAA1B,C,CAEA;;;AACA,MAAMG,OAAN,CAAc;AACZC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,GAAd,EAAmB;AAC5B,QAAI,CAACA,GAAL,EAAU;AACR,YAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD,KAH2B,CAK5B;AACA;AACA;;;AAEA,SAAKC,KAAL,GAAaJ,IAAI,IAAI,EAArB;AACA,SAAKK,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL,GAAaL,IAAb;AACA,SAAKM,IAAL,GAAY,IAAIb,GAAJ,CAAQQ,GAAR,CAAZ;AACD;;AAEDM,EAAAA,QAAQ,GAAI;AACV,WAAQ,YAAW,KAAKD,IAAL,CAAUE,mBAAV,EAAgC,aAAY,KAAKC,IAAK,YAAW,KAAKC,KAAM,GAA/F;AACD;;AAEDC,EAAAA,MAAM,GAAI;AACR,QAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc;AACzBf,QAAAA,IAAI,EAAE,KAAKU,IADc;AAEzBT,QAAAA,IAAI,EAAE,KAAKU,KAFc;AAGzBT,QAAAA,GAAG,EAAE,KAAKc,IAAL,CAAUP,mBAAV;AAHoB,OAAd,CAAb;AAKD;;AAED,WAAOK,MAAM,CAACG,MAAP,CAAc,EAAd,EAAkB,KAAKJ,KAAvB,CAAP;AACD;;AAED,MAAIH,IAAJ,GAAY;AACV,WAAO,KAAKN,KAAZ;AACD,GAlCW,CAoCZ;AACA;AACA;;;AACA,MAAIc,YAAJ,GAAoB;AAClB,QAAI,KAAKb,QAAL,KAAkB,IAAtB,EAA4B;AAC1B,aAAO,KAAKA,QAAZ;AACD;;AAED,SAAKA,QAAL,GAAgBR,MAAM,CAACsB,IAAP,CAAY,KAAKf,KAAjB,CAAhB;AACA,WAAO,KAAKC,QAAZ;AACD;;AAED,MAAIK,IAAJ,CAAUV,IAAV,EAAgB;AACd,UAAM,IAAIG,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAIQ,KAAJ,GAAa;AACX,WAAO,KAAKL,KAAZ;AACD;;AAED,MAAIK,KAAJ,CAAWV,IAAX,EAAiB;AACf,UAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAIa,IAAJ,GAAY;AACV,WAAO,KAAKT,IAAZ;AACD;;AAED,MAAIS,IAAJ,CAAUd,GAAV,EAAe;AACb,UAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAlEW;;AAqEdiB,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBxB,MAAM,CAACE,OAAD,EAAU;AAAEwB,EAAAA,SAAS,EAAE,SAAb;AAAwBC,EAAAA,UAAU,EAAE;AAApC,CAAV,CAAjC","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst withIs = require('class-is')\nconst { Buffer } = require('buffer')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, cid) {\n    if (!cid) {\n      throw new Error('A link requires a cid to point to')\n    }\n\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || ''\n    this._nameBuf = null\n    this._size = size\n    this._cid = new CID(cid)\n  }\n\n  toString () {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  get Name () {\n    return this._name\n  }\n\n  // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n  get nameAsBuffer () {\n    if (this._nameBuf !== null) {\n      return this._nameBuf\n    }\n\n    this._nameBuf = Buffer.from(this._name)\n    return this._nameBuf\n  }\n\n  set Name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get Tsize () {\n    return this._size\n  }\n\n  set Tsize (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get Hash () {\n    return this._cid\n  }\n\n  set Hash (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\n"]},"metadata":{},"sourceType":"script"}