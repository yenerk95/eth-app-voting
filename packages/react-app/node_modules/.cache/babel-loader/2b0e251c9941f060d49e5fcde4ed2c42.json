{"ast":null,"code":"'use strict';\n\nvar exp = Math.exp;\n\nexports = module.exports = function MovingAverage(timespan) {\n  if (typeof timespan !== 'number') {\n    throw new Error('must provide a timespan to the moving average constructor');\n  }\n\n  if (timespan <= 0) {\n    throw new Error('must provide a timespan > 0 to the moving average constructor');\n  }\n\n  var ma; // moving average\n\n  var v = 0; // variance\n\n  var d = 0; // deviation\n\n  var f = 0; // forecast\n\n  var previousTime;\n  var ret = {};\n\n  function alpha(t, pt) {\n    return 1 - exp(-(t - pt) / timespan);\n  }\n\n  ret.push = function push(time, value) {\n    if (previousTime) {\n      // calculate moving average\n      var a = alpha(time, previousTime);\n      var diff = value - ma;\n      var incr = a * diff;\n      ma = a * value + (1 - a) * ma; // calculate variance & deviation\n\n      v = (1 - a) * (v + diff * incr);\n      d = Math.sqrt(v); // calculate forecast\n\n      f = ma + a * diff;\n    } else {\n      ma = value;\n    }\n\n    previousTime = time;\n  }; // Exponential Moving Average\n\n\n  ret.movingAverage = function movingAverage() {\n    return ma;\n  }; // Variance\n\n\n  ret.variance = function variance() {\n    return v;\n  };\n\n  ret.deviation = function deviation() {\n    return d;\n  };\n\n  ret.forecast = function forecast() {\n    return f;\n  };\n\n  return ret;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/moving-average/index.js"],"names":["exp","Math","exports","module","MovingAverage","timespan","Error","ma","v","d","f","previousTime","ret","alpha","t","pt","push","time","value","a","diff","incr","sqrt","movingAverage","variance","deviation","forecast"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,IAAI,CAACD,GAAjB;;AAEAE,OAAO,GACPC,MAAM,CAACD,OAAP,GACA,SAASE,aAAT,CAAwBC,QAAxB,EAAkC;AAChC,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAAE,UAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AAA8E;;AAElH,MAAID,QAAQ,IAAI,CAAhB,EAAmB;AAAE,UAAM,IAAIC,KAAJ,CAAU,+DAAV,CAAN;AAAkF;;AAEvG,MAAIC,EAAJ,CALgC,CAKrB;;AACX,MAAIC,CAAC,GAAG,CAAR,CANgC,CAMrB;;AACX,MAAIC,CAAC,GAAG,CAAR,CAPgC,CAOrB;;AACX,MAAIC,CAAC,GAAG,CAAR,CARgC,CAQrB;;AAEX,MAAIC,YAAJ;AAEA,MAAIC,GAAG,GAAG,EAAV;;AAEA,WAASC,KAAT,CAAgBC,CAAhB,EAAmBC,EAAnB,EAAuB;AACrB,WAAO,IAAKf,GAAG,CAAC,EAAEc,CAAC,GAAGC,EAAN,IAAYV,QAAb,CAAf;AACD;;AAEDO,EAAAA,GAAG,CAACI,IAAJ,GACA,SAASA,IAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAC1B,QAAIP,YAAJ,EAAkB;AAChB;AACA,UAAMQ,CAAC,GAAGN,KAAK,CAACI,IAAD,EAAON,YAAP,CAAf;AACA,UAAMS,IAAI,GAAGF,KAAK,GAAGX,EAArB;AACA,UAAMc,IAAI,GAAGF,CAAC,GAAGC,IAAjB;AACAb,MAAAA,EAAE,GAAGY,CAAC,GAAGD,KAAJ,GAAY,CAAC,IAAIC,CAAL,IAAUZ,EAA3B,CALgB,CAMhB;;AACAC,MAAAA,CAAC,GAAG,CAAC,IAAIW,CAAL,KAAWX,CAAC,GAAGY,IAAI,GAAGC,IAAtB,CAAJ;AACAZ,MAAAA,CAAC,GAAGR,IAAI,CAACqB,IAAL,CAAUd,CAAV,CAAJ,CARgB,CAShB;;AACAE,MAAAA,CAAC,GAAGH,EAAE,GAAGY,CAAC,GAAGC,IAAb;AACD,KAXD,MAWO;AACLb,MAAAA,EAAE,GAAGW,KAAL;AACD;;AACDP,IAAAA,YAAY,GAAGM,IAAf;AACD,GAjBD,CAlBgC,CAqChC;;;AAEAL,EAAAA,GAAG,CAACW,aAAJ,GACA,SAASA,aAAT,GAA0B;AACxB,WAAOhB,EAAP;AACD,GAHD,CAvCgC,CA4ChC;;;AACAK,EAAAA,GAAG,CAACY,QAAJ,GACA,SAASA,QAAT,GAAqB;AACnB,WAAOhB,CAAP;AACD,GAHD;;AAKAI,EAAAA,GAAG,CAACa,SAAJ,GACA,SAASA,SAAT,GAAsB;AACpB,WAAOhB,CAAP;AACD,GAHD;;AAKAG,EAAAA,GAAG,CAACc,QAAJ,GACA,SAASA,QAAT,GAAqB;AACnB,WAAOhB,CAAP;AACD,GAHD;;AAKA,SAAOE,GAAP;AACD,CA/DD","sourcesContent":["'use strict'\n\nconst exp = Math.exp\n\nexports =\nmodule.exports =\nfunction MovingAverage (timespan) {\n  if (typeof timespan !== 'number') { throw new Error('must provide a timespan to the moving average constructor') }\n\n  if (timespan <= 0) { throw new Error('must provide a timespan > 0 to the moving average constructor') }\n\n  let ma     // moving average\n  let v = 0  // variance\n  let d = 0  // deviation\n  let f = 0  // forecast\n\n  let previousTime\n\n  let ret = {}\n\n  function alpha (t, pt) {\n    return 1 - (exp(-(t - pt) / timespan))\n  }\n\n  ret.push =\n  function push (time, value) {\n    if (previousTime) {\n      // calculate moving average\n      const a = alpha(time, previousTime)\n      const diff = value - ma\n      const incr = a * diff\n      ma = a * value + (1 - a) * ma\n      // calculate variance & deviation\n      v = (1 - a) * (v + diff * incr)\n      d = Math.sqrt(v)\n      // calculate forecast\n      f = ma + a * diff\n    } else {\n      ma = value\n    }\n    previousTime = time\n  }\n\n  // Exponential Moving Average\n\n  ret.movingAverage =\n  function movingAverage () {\n    return ma\n  }\n\n  // Variance\n  ret.variance =\n  function variance () {\n    return v\n  }\n\n  ret.deviation =\n  function deviation () {\n    return d\n  }\n\n  ret.forecast =\n  function forecast () {\n    return f\n  }\n\n  return ret\n}\n"]},"metadata":{},"sourceType":"script"}