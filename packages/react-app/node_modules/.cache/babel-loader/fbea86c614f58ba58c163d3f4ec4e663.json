{"ast":null,"code":"// Copyright (c) 2015-2017 David M. Lee, II\n'use strict';\n/**\n * Local reference to TimeoutError\n * @private\n */\n\nvar TimeoutError;\n/**\n * Rejects a promise with a {@link TimeoutError} if it does not settle within\n * the specified timeout.\n *\n * @param {Promise} promise The promise.\n * @param {number} timeoutMillis Number of milliseconds to wait on settling.\n * @returns {Promise} Either resolves/rejects with `promise`, or rejects with\n *                   `TimeoutError`, whichever settles first.\n */\n\nvar timeout = module.exports.timeout = function (promise, timeoutMillis) {\n  var error = new TimeoutError(),\n      timeout;\n  return Promise.race([promise, new Promise(function (resolve, reject) {\n    timeout = setTimeout(function () {\n      reject(error);\n    }, timeoutMillis);\n  })]).then(function (v) {\n    clearTimeout(timeout);\n    return v;\n  }, function (err) {\n    clearTimeout(timeout);\n    throw err;\n  });\n};\n/**\n * Exception indicating that the timeout expired.\n */\n\n\nTimeoutError = module.exports.TimeoutError = function () {\n  Error.call(this);\n  this.stack = Error().stack;\n  this.message = 'Timeout';\n};\n\nTimeoutError.prototype = Object.create(Error.prototype);\nTimeoutError.prototype.name = \"TimeoutError\";","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/promise-timeout/index.js"],"names":["TimeoutError","timeout","module","exports","promise","timeoutMillis","error","Promise","race","resolve","reject","setTimeout","then","v","clearTimeout","err","Error","call","stack","message","prototype","Object","create","name"],"mappings":"AAAA;AACA;AAEA;;;;;AAIA,IAAIA,YAAJ;AAEA;;;;;;;;;;AASA,IAAIC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAeF,OAAf,GAAyB,UAASG,OAAT,EAAkBC,aAAlB,EAAiC;AACtE,MAAIC,KAAK,GAAG,IAAIN,YAAJ,EAAZ;AAAA,MACIC,OADJ;AAGA,SAAOM,OAAO,CAACC,IAAR,CAAa,CAClBJ,OADkB,EAElB,IAAIG,OAAJ,CAAY,UAASE,OAAT,EAAkBC,MAAlB,EAA0B;AACpCT,IAAAA,OAAO,GAAGU,UAAU,CAAC,YAAW;AAC9BD,MAAAA,MAAM,CAACJ,KAAD,CAAN;AACD,KAFmB,EAEjBD,aAFiB,CAApB;AAGD,GAJD,CAFkB,CAAb,EAOJO,IAPI,CAOC,UAASC,CAAT,EAAY;AAClBC,IAAAA,YAAY,CAACb,OAAD,CAAZ;AACA,WAAOY,CAAP;AACD,GAVM,EAUJ,UAASE,GAAT,EAAc;AACfD,IAAAA,YAAY,CAACb,OAAD,CAAZ;AACA,UAAMc,GAAN;AACD,GAbM,CAAP;AAcD,CAlBD;AAoBA;;;;;AAGAf,YAAY,GAAGE,MAAM,CAACC,OAAP,CAAeH,YAAf,GAA8B,YAAW;AACtDgB,EAAAA,KAAK,CAACC,IAAN,CAAW,IAAX;AACA,OAAKC,KAAL,GAAaF,KAAK,GAAGE,KAArB;AACA,OAAKC,OAAL,GAAe,SAAf;AACD,CAJD;;AAMAnB,YAAY,CAACoB,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAcN,KAAK,CAACI,SAApB,CAAzB;AACApB,YAAY,CAACoB,SAAb,CAAuBG,IAAvB,GAA8B,cAA9B","sourcesContent":["// Copyright (c) 2015-2017 David M. Lee, II\n'use strict';\n\n/**\n * Local reference to TimeoutError\n * @private\n */\nvar TimeoutError;\n\n/**\n * Rejects a promise with a {@link TimeoutError} if it does not settle within\n * the specified timeout.\n *\n * @param {Promise} promise The promise.\n * @param {number} timeoutMillis Number of milliseconds to wait on settling.\n * @returns {Promise} Either resolves/rejects with `promise`, or rejects with\n *                   `TimeoutError`, whichever settles first.\n */\nvar timeout = module.exports.timeout = function(promise, timeoutMillis) {\n  var error = new TimeoutError(),\n      timeout;\n\n  return Promise.race([\n    promise,\n    new Promise(function(resolve, reject) {\n      timeout = setTimeout(function() {\n        reject(error);\n      }, timeoutMillis);\n    }),\n  ]).then(function(v) {\n    clearTimeout(timeout);\n    return v;\n  }, function(err) {\n    clearTimeout(timeout);\n    throw err;\n  });\n};\n\n/**\n * Exception indicating that the timeout expired.\n */\nTimeoutError = module.exports.TimeoutError = function() {\n  Error.call(this)\n  this.stack = Error().stack\n  this.message = 'Timeout';\n};\n\nTimeoutError.prototype = Object.create(Error.prototype);\nTimeoutError.prototype.name = \"TimeoutError\";\n"]},"metadata":{},"sourceType":"script"}