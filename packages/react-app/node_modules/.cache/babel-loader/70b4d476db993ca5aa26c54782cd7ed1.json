{"ast":null,"code":"'use strict';\n\nconst toMfsPath = require('./to-mfs-path');\n\nconst applyDefaultOptions = require('./apply-default-options');\n\nasync function toSources(context, args, defaultOptions) {\n  const sources = [];\n  let options; // takes string arguments and a final optional non-string argument\n\n  for (let i = 0; i < args.length; i++) {\n    if (typeof args[i] === 'string' || args[i] instanceof String) {\n      sources.push(args[i].trim());\n    } else if (i === args.length - 1) {\n      options = args[i];\n    }\n  }\n\n  options = applyDefaultOptions(options, defaultOptions);\n  return {\n    sources: await toMfsPath(context, sources, options),\n    options\n  };\n}\n\nmodule.exports = toSources;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/utils/to-sources.js"],"names":["toMfsPath","require","applyDefaultOptions","toSources","context","args","defaultOptions","sources","options","i","length","String","push","trim","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,yBAAD,CAAnC;;AAEA,eAAeE,SAAf,CAA0BC,OAA1B,EAAmCC,IAAnC,EAAyCC,cAAzC,EAAyD;AACvD,QAAMC,OAAO,GAAG,EAAhB;AACA,MAAIC,OAAJ,CAFuD,CAIvD;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAI,OAAOJ,IAAI,CAACI,CAAD,CAAX,KAAmB,QAAnB,IAA+BJ,IAAI,CAACI,CAAD,CAAJ,YAAmBE,MAAtD,EAA8D;AAC5DJ,MAAAA,OAAO,CAACK,IAAR,CAAaP,IAAI,CAACI,CAAD,CAAJ,CAAQI,IAAR,EAAb;AACD,KAFD,MAEO,IAAIJ,CAAC,KAAKJ,IAAI,CAACK,MAAL,GAAc,CAAxB,EAA2B;AAChCF,MAAAA,OAAO,GAAGH,IAAI,CAACI,CAAD,CAAd;AACD;AACF;;AAEDD,EAAAA,OAAO,GAAGN,mBAAmB,CAACM,OAAD,EAAUF,cAAV,CAA7B;AAEA,SAAO;AACLC,IAAAA,OAAO,EAAE,MAAMP,SAAS,CAACI,OAAD,EAAUG,OAAV,EAAmBC,OAAnB,CADnB;AAELA,IAAAA;AAFK,GAAP;AAID;;AAEDM,MAAM,CAACC,OAAP,GAAiBZ,SAAjB","sourcesContent":["'use strict'\n\nconst toMfsPath = require('./to-mfs-path')\nconst applyDefaultOptions = require('./apply-default-options')\n\nasync function toSources (context, args, defaultOptions) {\n  const sources = []\n  let options\n\n  // takes string arguments and a final optional non-string argument\n  for (let i = 0; i < args.length; i++) {\n    if (typeof args[i] === 'string' || args[i] instanceof String) {\n      sources.push(args[i].trim())\n    } else if (i === args.length - 1) {\n      options = args[i]\n    }\n  }\n\n  options = applyDefaultOptions(options, defaultOptions)\n\n  return {\n    sources: await toMfsPath(context, sources, options),\n    options\n  }\n}\n\nmodule.exports = toSources\n"]},"metadata":{},"sourceType":"script"}