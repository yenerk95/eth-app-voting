{"ast":null,"code":"'use strict';\n/**\n * SortedMap is a Map whose iterator order can be defined by the user\n */\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar SortedMap = /*#__PURE__*/function (_Map) {\n  _inherits(SortedMap, _Map);\n\n  var _super = _createSuper(SortedMap);\n\n  /**\n   * @param {Array<k, v>} [entries]\n   * @param {function(a, b)} [cmp] compares [k1, v1] to [k2, v2]\n   */\n  function SortedMap(entries, cmp) {\n    var _this;\n\n    _classCallCheck(this, SortedMap);\n\n    _this = _super.call(this);\n    _this._cmp = cmp || _this._defaultSort;\n    _this._keys = [];\n\n    var _iterator = _createForOfIteratorHelper(entries || []),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            k = _step$value[0],\n            v = _step$value[1];\n\n        _this.set(k, v);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return _this;\n  }\n  /**\n   * Call update to update the position of the key when it should change.\n   * For example if the compare function sorts by the priority field, and the\n   * priority changes, call update.\n   * Call indexOf() to get the index _before_ the change happens.\n   *\n   * @param {Object} i - the index of entry whose position should be updated.\n   */\n\n\n  _createClass(SortedMap, [{\n    key: \"update\",\n    value: function update(i) {\n      if (i < 0 || i >= this._keys.length) {\n        return;\n      }\n\n      var k = this._keys[i];\n\n      this._keys.splice(i, 1);\n\n      var newIdx = this._find(k);\n\n      this._keys.splice(newIdx, 0, k);\n    }\n  }, {\n    key: \"set\",\n    value: function set(k, v) {\n      // If the key is already in the map, remove it from the ordering and\n      // re-insert it below\n      if (this.has(k)) {\n        var _i = this.indexOf(k);\n\n        this._keys.splice(_i, 1);\n      } // Update / insert the k/v into the map\n\n\n      _get(_getPrototypeOf(SortedMap.prototype), \"set\", this).call(this, k, v); // Find the correct position of the newly inserted k/v in the order\n\n\n      var i = this._find(k);\n\n      this._keys.splice(i, 0, k);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _get(_getPrototypeOf(SortedMap.prototype), \"clear\", this).call(this);\n\n      this._keys = [];\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(k) {\n      if (!this.has(k)) {\n        return;\n      }\n\n      var i = this.indexOf(k);\n\n      this._keys.splice(i, 1);\n\n      _get(_getPrototypeOf(SortedMap.prototype), \"delete\", this).call(this, k);\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(k) {\n      if (!this.has(k)) {\n        return -1;\n      }\n\n      var i = this._find(k);\n\n      if (this._keys[i] === k) {\n        return i;\n      } // There may be more than one key with the same ordering\n      // eg { k1: <priority 5>, k2: <priority 5> }\n      // so scan outwards until the key matches\n\n\n      for (var j = 1; j < this._keys.length; j++) {\n        if (this._keys[i + j] === k) return i + j;\n        if (this._keys[i - j] === k) return i - j;\n      }\n\n      return -1; // should never happen for existing key\n    }\n  }, {\n    key: \"_find\",\n    value: function _find(k) {\n      var lower = 0;\n      var upper = this._keys.length;\n\n      while (lower < upper) {\n        var pivot = lower + upper >>> 1; // lower + (upper - lower) / 2\n\n        var cmp = this._kCmp(this._keys[pivot], k); // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)\n\n\n        if (cmp < 0) {\n          // pivot < k\n          lower = pivot + 1;\n        } else if (cmp > 0) {\n          // pivot > k\n          upper = pivot;\n        } else {\n          // pivot == k\n          return pivot;\n        }\n      }\n\n      return lower;\n    }\n  }, {\n    key: \"keys\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function keys() {\n      var _iterator2, _step2, k;\n\n      return _regeneratorRuntime.wrap(function keys$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(this._keys);\n              _context.prev = 1;\n\n              _iterator2.s();\n\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 9;\n                break;\n              }\n\n              k = _step2.value;\n              _context.next = 7;\n              return k;\n\n            case 7:\n              _context.next = 3;\n              break;\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator2.e(_context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              _iterator2.f();\n\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, keys, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"values\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function values() {\n      var _iterator3, _step3, k;\n\n      return _regeneratorRuntime.wrap(function values$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iterator3 = _createForOfIteratorHelper(this._keys);\n              _context2.prev = 1;\n\n              _iterator3.s();\n\n            case 3:\n              if ((_step3 = _iterator3.n()).done) {\n                _context2.next = 9;\n                break;\n              }\n\n              k = _step3.value;\n              _context2.next = 7;\n              return this.get(k);\n\n            case 7:\n              _context2.next = 3;\n              break;\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              _iterator3.e(_context2.t0);\n\n            case 14:\n              _context2.prev = 14;\n\n              _iterator3.f();\n\n              return _context2.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, values, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"entries\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entries() {\n      var _iterator4, _step4, k;\n\n      return _regeneratorRuntime.wrap(function entries$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _iterator4 = _createForOfIteratorHelper(this._keys);\n              _context3.prev = 1;\n\n              _iterator4.s();\n\n            case 3:\n              if ((_step4 = _iterator4.n()).done) {\n                _context3.next = 9;\n                break;\n              }\n\n              k = _step4.value;\n              _context3.next = 7;\n              return [k, this.get(k)];\n\n            case 7:\n              _context3.next = 3;\n              break;\n\n            case 9:\n              _context3.next = 14;\n              break;\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](1);\n\n              _iterator4.e(_context3.t0);\n\n            case 14:\n              _context3.prev = 14;\n\n              _iterator4.f();\n\n              return _context3.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, entries, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      return _regeneratorRuntime.wrap(function value$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.delegateYield(this.entries(), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"forEach\",\n    value: function forEach(cb, thisArg) {\n      if (!cb) {\n        return;\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(this._keys),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var k = _step5.value;\n          cb.apply(thisArg, [[k, this.get(k)]]);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_defaultSort\",\n    value: function _defaultSort(a, b) {\n      if (a[0] < b[0]) return -1;\n      if (b[0] < a[0]) return 1;\n      return 0;\n    }\n  }, {\n    key: \"_kCmp\",\n    value: function _kCmp(a, b) {\n      return this._cmp([a, this.get(a)], [b, this.get(b)]);\n    }\n  }]);\n\n  return SortedMap;\n}( /*#__PURE__*/_wrapNativeSuper(Map));\n\nmodule.exports = SortedMap;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/utils/sorted-map.js"],"names":["SortedMap","entries","cmp","_cmp","_defaultSort","_keys","k","v","set","i","length","splice","newIdx","_find","has","indexOf","j","lower","upper","pivot","_kCmp","get","Symbol","iterator","cb","thisArg","apply","a","b","Map","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * SortedMap is a Map whose iterator order can be defined by the user\n */\nclass SortedMap extends Map {\n  /**\n   * @param {Array<k, v>} [entries]\n   * @param {function(a, b)} [cmp] compares [k1, v1] to [k2, v2]\n   */\n  constructor (entries, cmp) {\n    super()\n    this._cmp = cmp || this._defaultSort\n    this._keys = []\n    for (const [k, v] of entries || []) {\n      this.set(k, v)\n    }\n  }\n\n  /**\n   * Call update to update the position of the key when it should change.\n   * For example if the compare function sorts by the priority field, and the\n   * priority changes, call update.\n   * Call indexOf() to get the index _before_ the change happens.\n   *\n   * @param {Object} i - the index of entry whose position should be updated.\n   */\n  update (i) {\n    if (i < 0 || i >= this._keys.length) {\n      return\n    }\n\n    const k = this._keys[i]\n    this._keys.splice(i, 1)\n    const newIdx = this._find(k)\n    this._keys.splice(newIdx, 0, k)\n  }\n\n  set (k, v) {\n    // If the key is already in the map, remove it from the ordering and\n    // re-insert it below\n    if (this.has(k)) {\n      const i = this.indexOf(k)\n      this._keys.splice(i, 1)\n    }\n\n    // Update / insert the k/v into the map\n    super.set(k, v)\n\n    // Find the correct position of the newly inserted k/v in the order\n    const i = this._find(k)\n    this._keys.splice(i, 0, k)\n  }\n\n  clear () {\n    super.clear()\n    this._keys = []\n  }\n\n  delete (k) {\n    if (!this.has(k)) {\n      return\n    }\n\n    const i = this.indexOf(k)\n    this._keys.splice(i, 1)\n    super.delete(k)\n  }\n\n  indexOf (k) {\n    if (!this.has(k)) {\n      return -1\n    }\n\n    const i = this._find(k)\n    if (this._keys[i] === k) {\n      return i\n    }\n\n    // There may be more than one key with the same ordering\n    // eg { k1: <priority 5>, k2: <priority 5> }\n    // so scan outwards until the key matches\n    for (let j = 1; j < this._keys.length; j++) {\n      if (this._keys[i + j] === k) return i + j\n      if (this._keys[i - j] === k) return i - j\n    }\n\n    return -1 // should never happen for existing key\n  }\n\n  _find (k) {\n    let lower = 0\n    let upper = this._keys.length\n    while (lower < upper) {\n      const pivot = (lower + upper) >>> 1 // lower + (upper - lower) / 2\n      const cmp = this._kCmp(this._keys[pivot], k)\n      // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)\n      if (cmp < 0) { // pivot < k\n        lower = pivot + 1\n      } else if (cmp > 0) { // pivot > k\n        upper = pivot\n      } else { // pivot == k\n        return pivot\n      }\n    }\n    return lower\n  }\n\n  * keys () {\n    for (const k of this._keys) {\n      yield k\n    }\n  }\n\n  * values () {\n    for (const k of this._keys) {\n      yield this.get(k)\n    }\n  }\n\n  * entries () {\n    for (const k of this._keys) {\n      yield [k, this.get(k)]\n    }\n  }\n\n  * [Symbol.iterator] () {\n    yield * this.entries()\n  }\n\n  forEach (cb, thisArg) {\n    if (!cb) {\n      return\n    }\n\n    for (const k of this._keys) {\n      cb.apply(thisArg, [[k, this.get(k)]])\n    }\n  }\n\n  _defaultSort (a, b) {\n    if (a[0] < b[0]) return -1\n    if (b[0] < a[0]) return 1\n    return 0\n  }\n\n  _kCmp (a, b) {\n    return this._cmp(\n      [a, this.get(a)],\n      [b, this.get(b)]\n    )\n  }\n}\n\nmodule.exports = SortedMap\n"]},"metadata":{},"sourceType":"script"}