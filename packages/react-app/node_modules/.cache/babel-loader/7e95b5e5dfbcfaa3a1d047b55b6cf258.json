{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar webcrypto = require('../webcrypto');\n\nvar randomBytes = require('../random-bytes');\n\nexports.utils = require('./rsa-utils');\n\nexports.generateKey = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(bits) {\n    var pair, keys;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return webcrypto.get().subtle.generateKey({\n              name: 'RSASSA-PKCS1-v1_5',\n              modulusLength: bits,\n              publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n              hash: {\n                name: 'SHA-256'\n              }\n            }, true, ['sign', 'verify']);\n\n          case 2:\n            pair = _context.sent;\n            _context.next = 5;\n            return exportKey(pair);\n\n          case 5:\n            keys = _context.sent;\n            return _context.abrupt(\"return\", {\n              privateKey: keys[0],\n              publicKey: keys[1]\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // Takes a jwk key\n\n\nexports.unmarshalPrivateKey = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key) {\n    var privateKey, pair, keys;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return webcrypto.get().subtle.importKey('jwk', key, {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: {\n                name: 'SHA-256'\n              }\n            }, true, ['sign']);\n\n          case 2:\n            privateKey = _context2.sent;\n            _context2.t0 = privateKey;\n            _context2.next = 6;\n            return derivePublicFromPrivate(key);\n\n          case 6:\n            _context2.t1 = _context2.sent;\n            pair = [_context2.t0, _context2.t1];\n            _context2.next = 10;\n            return exportKey({\n              privateKey: pair[0],\n              publicKey: pair[1]\n            });\n\n          case 10:\n            keys = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              privateKey: keys[0],\n              publicKey: keys[1]\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.getRandomValues = randomBytes;\n\nexports.hashAndSign = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key, msg) {\n    var privateKey, sig;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return webcrypto.get().subtle.importKey('jwk', key, {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: {\n                name: 'SHA-256'\n              }\n            }, false, ['sign']);\n\n          case 2:\n            privateKey = _context3.sent;\n            _context3.next = 5;\n            return webcrypto.get().subtle.sign({\n              name: 'RSASSA-PKCS1-v1_5'\n            }, privateKey, Uint8Array.from(msg));\n\n          case 5:\n            sig = _context3.sent;\n            return _context3.abrupt(\"return\", Buffer.from(sig));\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.hashAndVerify = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key, sig, msg) {\n    var publicKey;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return webcrypto.get().subtle.importKey('jwk', key, {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: {\n                name: 'SHA-256'\n              }\n            }, false, ['verify']);\n\n          case 2:\n            publicKey = _context4.sent;\n            return _context4.abrupt(\"return\", webcrypto.get().subtle.verify({\n              name: 'RSASSA-PKCS1-v1_5'\n            }, publicKey, sig, msg));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function (_x5, _x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nfunction exportKey(pair) {\n  return Promise.all([webcrypto.get().subtle.exportKey('jwk', pair.privateKey), webcrypto.get().subtle.exportKey('jwk', pair.publicKey)]);\n}\n\nfunction derivePublicFromPrivate(jwKey) {\n  return webcrypto.get().subtle.importKey('jwk', {\n    kty: jwKey.kty,\n    n: jwKey.n,\n    e: jwKey.e\n  }, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['verify']);\n}\n/*\n\nRSA encryption/decryption for the browser with webcrypto workarround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg buffer to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our buffer a binary string\n  - Convert resulting nodeForge buffer to buffer: it returns a binary string, turn that into a uint8array(buffer)\n\n*/\n\n\nvar _require2 = require('./jwk2pem'),\n    jwk2pub = _require2.jwk2pub,\n    jwk2priv = _require2.jwk2priv;\n\nfunction convertKey(key, pub, msg, handle) {\n  var fkey = pub ? jwk2pub(key) : jwk2priv(key);\n  var fmsg = Buffer.from(msg).toString('binary');\n  var fomsg = handle(fmsg, fkey);\n  return Buffer.from(fomsg, 'binary');\n}\n\nexports.encrypt = function (key, msg) {\n  return convertKey(key, true, msg, function (msg, key) {\n    return key.encrypt(msg);\n  });\n};\n\nexports.decrypt = function (key, msg) {\n  return convertKey(key, false, msg, function (msg, key) {\n    return key.decrypt(msg);\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/keys/rsa-browser.js"],"names":["require","Buffer","webcrypto","randomBytes","exports","utils","generateKey","bits","get","subtle","name","modulusLength","publicExponent","Uint8Array","hash","pair","exportKey","keys","privateKey","publicKey","unmarshalPrivateKey","key","importKey","derivePublicFromPrivate","getRandomValues","hashAndSign","msg","sign","from","sig","hashAndVerify","verify","Promise","all","jwKey","kty","n","e","jwk2pub","jwk2priv","convertKey","pub","handle","fkey","fmsg","toString","fomsg","encrypt","decrypt"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst webcrypto = require('../webcrypto')\nconst randomBytes = require('../random-bytes')\n\nexports.utils = require('./rsa-utils')\n\nexports.generateKey = async function (bits) {\n  const pair = await webcrypto.get().subtle.generateKey(\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: bits,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign', 'verify']\n  )\n\n  const keys = await exportKey(pair)\n\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  }\n}\n\n// Takes a jwk key\nexports.unmarshalPrivateKey = async function (key) {\n  const privateKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign']\n  )\n\n  const pair = [\n    privateKey,\n    await derivePublicFromPrivate(key)\n  ]\n\n  const keys = await exportKey({\n    privateKey: pair[0],\n    publicKey: pair[1]\n  })\n\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  }\n}\n\nexports.getRandomValues = randomBytes\n\nexports.hashAndSign = async function (key, msg) {\n  const privateKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['sign']\n  )\n\n  const sig = await webcrypto.get().subtle.sign(\n    { name: 'RSASSA-PKCS1-v1_5' },\n    privateKey,\n    Uint8Array.from(msg)\n  )\n\n  return Buffer.from(sig)\n}\n\nexports.hashAndVerify = async function (key, sig, msg) {\n  const publicKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['verify']\n  )\n\n  return webcrypto.get().subtle.verify(\n    { name: 'RSASSA-PKCS1-v1_5' },\n    publicKey,\n    sig,\n    msg\n  )\n}\n\nfunction exportKey (pair) {\n  return Promise.all([\n    webcrypto.get().subtle.exportKey('jwk', pair.privateKey),\n    webcrypto.get().subtle.exportKey('jwk', pair.publicKey)\n  ])\n}\n\nfunction derivePublicFromPrivate (jwKey) {\n  return webcrypto.get().subtle.importKey(\n    'jwk',\n    {\n      kty: jwKey.kty,\n      n: jwKey.n,\n      e: jwKey.e\n    },\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['verify']\n  )\n}\n\n/*\n\nRSA encryption/decryption for the browser with webcrypto workarround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg buffer to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our buffer a binary string\n  - Convert resulting nodeForge buffer to buffer: it returns a binary string, turn that into a uint8array(buffer)\n\n*/\n\nconst { jwk2pub, jwk2priv } = require('./jwk2pem')\n\nfunction convertKey (key, pub, msg, handle) {\n  const fkey = pub ? jwk2pub(key) : jwk2priv(key)\n  const fmsg = Buffer.from(msg).toString('binary')\n  const fomsg = handle(fmsg, fkey)\n  return Buffer.from(fomsg, 'binary')\n}\n\nexports.encrypt = function (key, msg) {\n  return convertKey(key, true, msg, (msg, key) => key.encrypt(msg))\n}\n\nexports.decrypt = function (key, msg) {\n  return convertKey(key, false, msg, (msg, key) => key.decrypt(msg))\n}\n"]},"metadata":{},"sourceType":"script"}