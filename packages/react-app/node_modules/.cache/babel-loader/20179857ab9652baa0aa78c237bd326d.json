{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('libp2p-record'),\n    Record = _require.Record;\n\nvar errcode = require('err-code');\n\nvar Message = require('../../message');\n\nvar utils = require('../../utils');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerId, 'rpc:get-value');\n  /**\n   * Process `GetValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  return /*#__PURE__*/function () {\n    var _getValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, msg) {\n      var key, response, idFromKey, id, peerData, _yield$Promise$all, _yield$Promise$all2, record, closer;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              key = msg.key;\n              log('key: %b', key);\n\n              if (!(!key || key.length === 0)) {\n                _context.next = 4;\n                break;\n              }\n\n              throw errcode(new Error('Invalid key'), 'ERR_INVALID_KEY');\n\n            case 4:\n              response = new Message(Message.TYPES.GET_VALUE, key, msg.clusterLevel);\n\n              if (!utils.isPublicKeyKey(key)) {\n                _context.next = 13;\n                break;\n              }\n\n              log('is public key');\n              idFromKey = utils.fromPublicKeyKey(key);\n\n              if (dht._isSelf(idFromKey)) {\n                id = dht.peerId;\n              } else {\n                peerData = dht.peerStore.get(idFromKey);\n                id = peerData && peerData.id;\n              }\n\n              if (!(id && id.pubKey)) {\n                _context.next = 13;\n                break;\n              }\n\n              log('returning found public key');\n              response.record = new Record(key, id.pubKey.bytes);\n              return _context.abrupt(\"return\", response);\n\n            case 13:\n              _context.next = 15;\n              return Promise.all([dht._checkLocalDatastore(key), dht._betterPeersToQuery(msg, peerId)]);\n\n            case 15:\n              _yield$Promise$all = _context.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              record = _yield$Promise$all2[0];\n              closer = _yield$Promise$all2[1];\n\n              if (record) {\n                log('got record');\n                response.record = record;\n              }\n\n              if (closer.length > 0) {\n                log('got closer %s', closer.length);\n                response.closerPeers = closer;\n              }\n\n              return _context.abrupt(\"return\", response);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getValue(_x, _x2) {\n      return _getValue.apply(this, arguments);\n    }\n\n    return getValue;\n  }();\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/rpc/handlers/get-value.js"],"names":["require","Record","errcode","Message","utils","module","exports","dht","log","logger","peerId","msg","key","length","Error","response","TYPES","GET_VALUE","clusterLevel","isPublicKeyKey","idFromKey","fromPublicKeyKey","_isSelf","id","peerData","peerStore","get","pubKey","record","bytes","Promise","all","_checkLocalDatastore","_betterPeersToQuery","closer","closerPeers","getValue"],"mappings":"AAAA;;;;;;;;eAEmBA,OAAO,CAAC,eAAD,C;IAAlBC,M,YAAAA,M;;AAER,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAMG,OAAO,GAAGH,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,aAAD,CAArB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAS;AACxB,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,eAAzB,CAAZ;AAEA;;;;;;;;AAOA;AAAA,6EAAO,iBAAyBA,MAAzB,EAAiCC,GAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,GADD,GACOD,GAAG,CAACC,GADX;AAGLJ,cAAAA,GAAG,CAAC,SAAD,EAAYI,GAAZ,CAAH;;AAHK,oBAKD,CAACA,GAAD,IAAQA,GAAG,CAACC,MAAJ,KAAe,CALtB;AAAA;AAAA;AAAA;;AAAA,oBAMGX,OAAO,CAAC,IAAIY,KAAJ,CAAU,aAAV,CAAD,EAA2B,iBAA3B,CANV;;AAAA;AASCC,cAAAA,QATD,GASY,IAAIZ,OAAJ,CAAYA,OAAO,CAACa,KAAR,CAAcC,SAA1B,EAAqCL,GAArC,EAA0CD,GAAG,CAACO,YAA9C,CATZ;;AAAA,mBAWDd,KAAK,CAACe,cAAN,CAAqBP,GAArB,CAXC;AAAA;AAAA;AAAA;;AAYHJ,cAAAA,GAAG,CAAC,eAAD,CAAH;AACMY,cAAAA,SAbH,GAaehB,KAAK,CAACiB,gBAAN,CAAuBT,GAAvB,CAbf;;AAgBH,kBAAIL,GAAG,CAACe,OAAJ,CAAYF,SAAZ,CAAJ,EAA4B;AAC1BG,gBAAAA,EAAE,GAAGhB,GAAG,CAACG,MAAT;AACD,eAFD,MAEO;AACCc,gBAAAA,QADD,GACYjB,GAAG,CAACkB,SAAJ,CAAcC,GAAd,CAAkBN,SAAlB,CADZ;AAELG,gBAAAA,EAAE,GAAGC,QAAQ,IAAIA,QAAQ,CAACD,EAA1B;AACD;;AArBE,oBAuBCA,EAAE,IAAIA,EAAE,CAACI,MAvBV;AAAA;AAAA;AAAA;;AAwBDnB,cAAAA,GAAG,CAAC,4BAAD,CAAH;AACAO,cAAAA,QAAQ,CAACa,MAAT,GAAkB,IAAI3B,MAAJ,CAAWW,GAAX,EAAgBW,EAAE,CAACI,MAAH,CAAUE,KAA1B,CAAlB;AAzBC,+CA0BMd,QA1BN;;AAAA;AAAA;AAAA,qBA8B0Be,OAAO,CAACC,GAAR,CAAY,CACzCxB,GAAG,CAACyB,oBAAJ,CAAyBpB,GAAzB,CADyC,EAEzCL,GAAG,CAAC0B,mBAAJ,CAAwBtB,GAAxB,EAA6BD,MAA7B,CAFyC,CAAZ,CA9B1B;;AAAA;AAAA;AAAA;AA8BEkB,cAAAA,MA9BF;AA8BUM,cAAAA,MA9BV;;AAmCL,kBAAIN,MAAJ,EAAY;AACVpB,gBAAAA,GAAG,CAAC,YAAD,CAAH;AACAO,gBAAAA,QAAQ,CAACa,MAAT,GAAkBA,MAAlB;AACD;;AAED,kBAAIM,MAAM,CAACrB,MAAP,GAAgB,CAApB,EAAuB;AACrBL,gBAAAA,GAAG,CAAC,eAAD,EAAkB0B,MAAM,CAACrB,MAAzB,CAAH;AACAE,gBAAAA,QAAQ,CAACoB,WAAT,GAAuBD,MAAvB;AACD;;AA3CI,+CA6CEnB,QA7CF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAsBqB,QAAtB;AAAA;AAAA;;AAAA,WAAsBA,QAAtB;AAAA;AA+CD,CAzDD","sourcesContent":["'use strict'\n\nconst { Record } = require('libp2p-record')\n\nconst errcode = require('err-code')\n\nconst Message = require('../../message')\nconst utils = require('../../utils')\n\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:get-value')\n\n  /**\n   * Process `GetValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n  return async function getValue (peerId, msg) {\n    const key = msg.key\n\n    log('key: %b', key)\n\n    if (!key || key.length === 0) {\n      throw errcode(new Error('Invalid key'), 'ERR_INVALID_KEY')\n    }\n\n    const response = new Message(Message.TYPES.GET_VALUE, key, msg.clusterLevel)\n\n    if (utils.isPublicKeyKey(key)) {\n      log('is public key')\n      const idFromKey = utils.fromPublicKeyKey(key)\n      let id\n\n      if (dht._isSelf(idFromKey)) {\n        id = dht.peerId\n      } else {\n        const peerData = dht.peerStore.get(idFromKey)\n        id = peerData && peerData.id\n      }\n\n      if (id && id.pubKey) {\n        log('returning found public key')\n        response.record = new Record(key, id.pubKey.bytes)\n        return response\n      }\n    }\n\n    const [record, closer] = await Promise.all([\n      dht._checkLocalDatastore(key),\n      dht._betterPeersToQuery(msg, peerId)\n    ])\n\n    if (record) {\n      log('got record')\n      response.record = record\n    }\n\n    if (closer.length > 0) {\n      log('got closer %s', closer.length)\n      response.closerPeers = closer\n    }\n\n    return response\n  }\n}\n"]},"metadata":{},"sourceType":"script"}