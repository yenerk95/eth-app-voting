{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:mfs:utils:update-tree');\n\nconst addLink = require('./add-link');\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}; // loop backwards through the trail, replacing links of all components to update CIDs\n\nconst updateTree = async (context, trail, options) => {\n  options = Object.assign({}, defaultOptions, options);\n  log('Trail', trail);\n  trail = trail.slice().reverse();\n  let index = 0;\n  let child;\n\n  for await (const node of context.ipld.getMany(trail.map(node => node.cid))) {\n    const cid = trail[index].cid;\n    const name = trail[index].name;\n    index++;\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: node.size\n      };\n      continue;\n    }\n\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    }); // new child for next loop\n\n    child = {\n      cid: result.cid,\n      name,\n      size: result.size\n    };\n  }\n\n  log(`Final CID ${child.cid}`);\n  return child.cid;\n};\n\nmodule.exports = updateTree;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/utils/update-tree.js"],"names":["log","require","addLink","defaultOptions","shardSplitThreshold","updateTree","context","trail","options","Object","assign","slice","reverse","index","child","node","ipld","getMany","map","cid","name","size","result","parent","flush","hashAlg","cidVersion","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,4BAAjB,CAAZ;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AAEA,MAAME,cAAc,GAAG;AACrBC,EAAAA,mBAAmB,EAAE;AADA,CAAvB,C,CAIA;;AACA,MAAMC,UAAU,GAAG,OAAOC,OAAP,EAAgBC,KAAhB,EAAuBC,OAAvB,KAAmC;AACpDA,EAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,cAAlB,EAAkCK,OAAlC,CAAV;AAEAR,EAAAA,GAAG,CAAC,OAAD,EAAUO,KAAV,CAAH;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,GAAcC,OAAd,EAAR;AAEA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAJ;;AAEA,aAAW,MAAMC,IAAjB,IAAyBT,OAAO,CAACU,IAAR,CAAaC,OAAb,CAAqBV,KAAK,CAACW,GAAN,CAAUH,IAAI,IAAIA,IAAI,CAACI,GAAvB,CAArB,CAAzB,EAA4E;AAC1E,UAAMA,GAAG,GAAGZ,KAAK,CAACM,KAAD,CAAL,CAAaM,GAAzB;AACA,UAAMC,IAAI,GAAGb,KAAK,CAACM,KAAD,CAAL,CAAaO,IAA1B;AACAP,IAAAA,KAAK;;AAEL,QAAI,CAACC,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG;AACNK,QAAAA,GADM;AAENC,QAAAA,IAFM;AAGNC,QAAAA,IAAI,EAAEN,IAAI,CAACM;AAHL,OAAR;AAMA;AACD;;AAED,UAAMC,MAAM,GAAG,MAAMpB,OAAO,CAACI,OAAD,EAAU;AACpCiB,MAAAA,MAAM,EAAER,IAD4B;AAEpCK,MAAAA,IAAI,EAAEN,KAAK,CAACM,IAFwB;AAGpCD,MAAAA,GAAG,EAAEL,KAAK,CAACK,GAHyB;AAIpCE,MAAAA,IAAI,EAAEP,KAAK,CAACO,IAJwB;AAKpCG,MAAAA,KAAK,EAAEhB,OAAO,CAACgB,KALqB;AAMpCpB,MAAAA,mBAAmB,EAAEI,OAAO,CAACJ,mBANO;AAOpCqB,MAAAA,OAAO,EAAEjB,OAAO,CAACiB,OAPmB;AAQpCC,MAAAA,UAAU,EAAElB,OAAO,CAACkB;AARgB,KAAV,CAA5B,CAf0E,CA0B1E;;AACAZ,IAAAA,KAAK,GAAG;AACNK,MAAAA,GAAG,EAAEG,MAAM,CAACH,GADN;AAENC,MAAAA,IAFM;AAGNC,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAHP,KAAR;AAKD;;AAEDrB,EAAAA,GAAG,CAAE,aAAYc,KAAK,CAACK,GAAI,EAAxB,CAAH;AAEA,SAAOL,KAAK,CAACK,GAAb;AACD,CA9CD;;AAgDAQ,MAAM,CAACC,OAAP,GAAiBvB,UAAjB","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:mfs:utils:update-tree')\nconst addLink = require('./add-link')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n// loop backwards through the trail, replacing links of all components to update CIDs\nconst updateTree = async (context, trail, options) => {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const node of context.ipld.getMany(trail.map(node => node.cid))) {\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: node.size\n      }\n\n      continue\n    }\n\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      size: result.size\n    }\n  }\n\n  log(`Final CID ${child.cid}`)\n\n  return child.cid\n}\n\nmodule.exports = updateTree\n"]},"metadata":{},"sourceType":"script"}