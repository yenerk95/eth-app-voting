{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { IK } from \"./handshakes/ik\";\nimport { Buffer } from \"buffer\";\nimport { decode0, decode1, encode0, encode1 } from \"./encoder\";\nimport { decodePayload, getPeerIdFromPayload, verifySignedPayload } from \"./utils\";\nimport { FailedIKError } from \"./errors\";\nimport { logger, logLocalStaticKeys, logRemoteStaticKey, logLocalEphemeralKeys, logRemoteEphemeralKey, logCipherState } from \"./logger\";\nexport class IKHandshake {\n  constructor(isInitiator, payload, prologue, staticKeypair, connection, remoteStaticKey, remotePeer, handshake) {\n    _defineProperty(this, \"isInitiator\", void 0);\n\n    _defineProperty(this, \"session\", void 0);\n\n    _defineProperty(this, \"remotePeer\", void 0);\n\n    _defineProperty(this, \"remoteEarlyData\", void 0);\n\n    _defineProperty(this, \"payload\", void 0);\n\n    _defineProperty(this, \"prologue\", void 0);\n\n    _defineProperty(this, \"staticKeypair\", void 0);\n\n    _defineProperty(this, \"connection\", void 0);\n\n    _defineProperty(this, \"ik\", void 0);\n\n    this.isInitiator = isInitiator;\n    this.payload = Buffer.from(payload);\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n\n    if (remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n\n    this.ik = handshake || new IK();\n    this.session = this.ik.initSession(this.isInitiator, this.prologue, this.staticKeypair, remoteStaticKey);\n    this.remoteEarlyData = Buffer.alloc(0);\n  }\n\n  async stage0() {\n    logLocalStaticKeys(this.session.hs.s);\n    logRemoteStaticKey(this.session.hs.rs);\n\n    if (this.isInitiator) {\n      logger(\"IK Stage 0 - Initiator sending message...\");\n      const messageBuffer = this.ik.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode1(messageBuffer));\n      logger(\"IK Stage 0 - Initiator sent message.\");\n      logLocalEphemeralKeys(this.session.hs.e);\n    } else {\n      logger(\"IK Stage 0 - Responder receiving message...\");\n      const receivedMsg = await this.connection.readLP();\n\n      try {\n        const receivedMessageBuffer = decode1(receivedMsg.slice());\n        const {\n          plaintext,\n          valid\n        } = this.ik.recvMessage(this.session, receivedMessageBuffer);\n\n        if (!valid) {\n          throw new Error(\"ik handshake stage 0 decryption validation fail\");\n        }\n\n        logger(\"IK Stage 0 - Responder got message, going to verify payload.\");\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await getPeerIdFromPayload(decodedPayload));\n        await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n        logger(\"IK Stage 0 - Responder successfully verified payload!\");\n        logRemoteEphemeralKey(this.session.hs.re);\n      } catch (e) {\n        logger(\"Responder breaking up with IK handshake in stage 0.\");\n        throw new FailedIKError(receivedMsg, \"Error occurred while verifying initiator's signed payload: \".concat(e.message));\n      }\n    }\n  }\n\n  async stage1() {\n    if (this.isInitiator) {\n      logger(\"IK Stage 1 - Initiator receiving message...\");\n      const receivedMsg = (await this.connection.readLP()).slice();\n      const receivedMessageBuffer = decode0(Buffer.from(receivedMsg));\n      const {\n        plaintext,\n        valid\n      } = this.ik.recvMessage(this.session, receivedMessageBuffer);\n      logger(\"IK Stage 1 - Initiator got message, going to verify payload.\");\n\n      try {\n        if (!valid) {\n          throw new Error(\"ik stage 1 decryption validation fail\");\n        }\n\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await getPeerIdFromPayload(decodedPayload));\n        await verifySignedPayload(receivedMessageBuffer.ns.slice(0, 32), decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n        logger(\"IK Stage 1 - Initiator successfully verified payload!\");\n        logRemoteEphemeralKey(this.session.hs.re);\n      } catch (e) {\n        logger(\"Initiator breaking up with IK handshake in stage 1.\");\n        throw new FailedIKError(receivedMsg, \"Error occurred while verifying responder's signed payload: \".concat(e.message));\n      }\n    } else {\n      logger(\"IK Stage 1 - Responder sending message...\");\n      const messageBuffer = this.ik.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode0(messageBuffer));\n      logger(\"IK Stage 1 - Responder sent message...\");\n      logLocalEphemeralKeys(this.session.hs.e);\n    }\n\n    logCipherState(this.session);\n  }\n\n  decrypt(ciphertext, session) {\n    const cs = this.getCS(session, false);\n    return this.ik.decryptWithAd(cs, Buffer.alloc(0), ciphertext);\n  }\n\n  encrypt(plaintext, session) {\n    const cs = this.getCS(session);\n    return this.ik.encryptWithAd(cs, Buffer.alloc(0), plaintext);\n  }\n\n  getLocalEphemeralKeys() {\n    if (!this.session.hs.e) {\n      throw new Error(\"Ephemeral keys do not exist.\");\n    }\n\n    return this.session.hs.e;\n  }\n\n  getCS(session, encryption = true) {\n    if (!session.cs1 || !session.cs2) {\n      throw new Error(\"Handshake not completed properly, cipher state does not exist.\");\n    }\n\n    if (this.isInitiator) {\n      return encryption ? session.cs1 : session.cs2;\n    } else {\n      return encryption ? session.cs2 : session.cs1;\n    }\n  }\n\n  setRemoteEarlyData(data) {\n    if (data) {\n      this.remoteEarlyData = Buffer.from(data.buffer, data.byteOffset, data.length);\n    }\n  }\n\n}","map":{"version":3,"sources":["../src/handshake-ik.ts"],"names":["constructor","Buffer","handshake","logLocalStaticKeys","logRemoteStaticKey","logger","messageBuffer","encode1","logLocalEphemeralKeys","receivedMsg","receivedMessageBuffer","decode1","valid","decodedPayload","decodePayload","getPeerIdFromPayload","verifySignedPayload","logRemoteEphemeralKey","e","decode0","encode0","logCipherState","decrypt","cs","encrypt","getLocalEphemeralKeys","getCS","encryption","session","setRemoteEarlyData","data"],"mappings":"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","sourcesContent":["import {WrappedConnection} from \"./noise\";\nimport {IK} from \"./handshakes/ik\";\nimport {NoiseSession} from \"./@types/handshake\";\nimport {bytes, bytes32} from \"./@types/basic\";\nimport {KeyPair} from \"./@types/libp2p\";\nimport {IHandshake} from \"./@types/handshake-interface\";\nimport {Buffer} from \"buffer\";\nimport {decode0, decode1, encode0, encode1} from \"./encoder\";\nimport {decodePayload, getPeerIdFromPayload, verifySignedPayload} from \"./utils\";\nimport {FailedIKError} from \"./errors\";\nimport {\n  logger, \n  logLocalStaticKeys,\n  logRemoteStaticKey, \n  logLocalEphemeralKeys, \n  logRemoteEphemeralKey, \n  logCipherState\n} from \"./logger\";\nimport PeerId from \"peer-id\";\n\nexport class IKHandshake implements IHandshake {\n  public isInitiator: boolean;\n  public session: NoiseSession;\n  public remotePeer!: PeerId;\n  public remoteEarlyData: Buffer;\n\n  private payload: bytes;\n  private prologue: bytes32;\n  private staticKeypair: KeyPair;\n  private connection: WrappedConnection;\n  private ik: IK;\n\n  constructor(\n    isInitiator: boolean,\n    payload: bytes,\n    prologue: bytes32,\n    staticKeypair: KeyPair,\n    connection: WrappedConnection,\n    remoteStaticKey: bytes,\n    remotePeer?: PeerId,\n    handshake?: IK,\n  ) {\n    this.isInitiator = isInitiator;\n    this.payload = Buffer.from(payload);\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n    if(remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n    this.ik = handshake || new IK();\n    this.session = this.ik.initSession(this.isInitiator, this.prologue, this.staticKeypair, remoteStaticKey);\n    this.remoteEarlyData = Buffer.alloc(0)\n  }\n\n  public async stage0(): Promise<void> {\n    logLocalStaticKeys(this.session.hs.s)\n    logRemoteStaticKey(this.session.hs.rs)\n    if (this.isInitiator) {\n      logger(\"IK Stage 0 - Initiator sending message...\");\n      const messageBuffer = this.ik.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode1(messageBuffer));\n      logger(\"IK Stage 0 - Initiator sent message.\");\n      logLocalEphemeralKeys(this.session.hs.e)\n    } else {\n      logger(\"IK Stage 0 - Responder receiving message...\");\n      const receivedMsg = await this.connection.readLP();\n      try {\n        const receivedMessageBuffer = decode1(receivedMsg.slice());\n        const {plaintext, valid} = this.ik.recvMessage(this.session, receivedMessageBuffer);\n        if(!valid) {\n          throw new Error(\"ik handshake stage 0 decryption validation fail\");\n        }\n        logger(\"IK Stage 0 - Responder got message, going to verify payload.\");\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);\n        await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n        logger(\"IK Stage 0 - Responder successfully verified payload!\");\n        logRemoteEphemeralKey(this.session.hs.re)\n      } catch (e) {\n        logger(\"Responder breaking up with IK handshake in stage 0.\");\n\n        throw new FailedIKError(receivedMsg, `Error occurred while verifying initiator's signed payload: ${e.message}`);\n      }\n    }\n  }\n\n  public async stage1(): Promise<void> {\n    if (this.isInitiator) {\n      logger(\"IK Stage 1 - Initiator receiving message...\");\n      const receivedMsg = (await this.connection.readLP()).slice();\n      const receivedMessageBuffer = decode0(Buffer.from(receivedMsg));\n      const {plaintext, valid} = this.ik.recvMessage(this.session, receivedMessageBuffer);\n      logger(\"IK Stage 1 - Initiator got message, going to verify payload.\");\n      try {\n        if(!valid) {\n          throw new Error(\"ik stage 1 decryption validation fail\");\n        }\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);\n        await verifySignedPayload(receivedMessageBuffer.ns.slice(0, 32), decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n        logger(\"IK Stage 1 - Initiator successfully verified payload!\");\n        logRemoteEphemeralKey(this.session.hs.re)\n      } catch (e) {\n        logger(\"Initiator breaking up with IK handshake in stage 1.\");\n        throw new FailedIKError(receivedMsg, `Error occurred while verifying responder's signed payload: ${e.message}`);\n      }\n    } else {\n      logger(\"IK Stage 1 - Responder sending message...\");\n      const messageBuffer = this.ik.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode0(messageBuffer));\n      logger(\"IK Stage 1 - Responder sent message...\");\n      logLocalEphemeralKeys(this.session.hs.e)\n    }\n    logCipherState(this.session)\n  }\n\n  public decrypt(ciphertext: bytes, session: NoiseSession): {plaintext: bytes; valid: boolean} {\n    const cs = this.getCS(session, false);\n    return this.ik.decryptWithAd(cs, Buffer.alloc(0), ciphertext);\n  }\n\n  public encrypt(plaintext: Buffer, session: NoiseSession): Buffer {\n    const cs = this.getCS(session);\n    return this.ik.encryptWithAd(cs, Buffer.alloc(0), plaintext);\n  }\n\n  public getLocalEphemeralKeys(): KeyPair {\n    if (!this.session.hs.e) {\n      throw new Error(\"Ephemeral keys do not exist.\");\n    }\n\n    return this.session.hs.e;\n  }\n\n  private getCS(session: NoiseSession, encryption = true) {\n    if (!session.cs1 || !session.cs2) {\n      throw new Error(\"Handshake not completed properly, cipher state does not exist.\");\n    }\n\n    if (this.isInitiator) {\n      return encryption ? session.cs1 : session.cs2;\n    } else {\n      return encryption ? session.cs2 : session.cs1;\n    }\n  }\n\n  private setRemoteEarlyData(data: Uint8Array|null|undefined): void {\n    if(data){\n      this.remoteEarlyData = Buffer.from(data.buffer, data.byteOffset, data.length);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}