{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst abortable = require('abortable-iterator');\n\nconst {\n  CLOSE_TIMEOUT\n} = require('./constants');\n\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nconst pTimeout = require('p-timeout');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:websockets:socket');\nlog.error = debug('libp2p:websockets:socket:error'); // Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\n\nmodule.exports = (stream, options = {}) => {\n  const maConn = {\n    async sink(source) {\n      if (options.signal) {\n        source = abortable(source, options.signal);\n      }\n\n      try {\n        await stream.sink(async function* () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield Buffer.isBuffer(chunk) ? chunk : chunk.slice();\n          }\n        }());\n      } catch (err) {\n        if (err.type !== 'aborted') {\n          log.error(err);\n        }\n      }\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n    conn: stream,\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n    timeline: {\n      open: Date.now()\n    },\n\n    async close() {\n      const start = Date.now();\n\n      try {\n        await pTimeout(stream.close(), CLOSE_TIMEOUT);\n      } catch (err) {\n        const {\n          host,\n          port\n        } = maConn.remoteAddr.toOptions();\n        log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n        stream.destroy();\n      } finally {\n        maConn.timeline.close = Date.now();\n      }\n    }\n\n  };\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-websockets/src/socket-to-conn.js"],"names":["Buffer","require","abortable","CLOSE_TIMEOUT","toMultiaddr","pTimeout","debug","log","error","module","exports","stream","options","maConn","sink","source","signal","chunk","isBuffer","slice","err","type","conn","localAddr","localAddress","localPort","undefined","remoteAddr","remoteAddress","remotePort","timeline","open","Date","now","close","start","host","port","toOptions","destroy","socket","once"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst abortable = require('abortable-iterator')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst pTimeout = require('p-timeout')\n\nconst debug = require('debug')\nconst log = debug('libp2p:websockets:socket')\nlog.error = debug('libp2p:websockets:socket:error')\n\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nmodule.exports = (stream, options = {}) => {\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await stream.sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield Buffer.isBuffer(chunk) ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        if (err.type !== 'aborted') {\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n\n    conn: stream,\n\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort\n      ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),\n\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n\n    timeline: { open: Date.now() },\n\n    async close () {\n      const start = Date.now()\n\n      try {\n        await pTimeout(stream.close(), CLOSE_TIMEOUT)\n      } catch (err) {\n        const { host, port } = maConn.remoteAddr.toOptions()\n        log('timeout closing stream to %s:%s after %dms, destroying it manually',\n          host, port, Date.now() - start)\n\n        stream.destroy()\n      } finally {\n        maConn.timeline.close = Date.now()\n      }\n    }\n  }\n\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"]},"metadata":{},"sourceType":"script"}