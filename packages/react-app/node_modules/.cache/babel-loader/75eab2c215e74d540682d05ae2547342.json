{"ast":null,"code":"'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar errCode = require('err-code');\n\nvar _require2 = require('./errors'),\n    messages = _require2.messages,\n    codes = _require2.codes;\n\nmodule.exports = function (node, Pubsub, config) {\n  var pubsub = new Pubsub(node.peerId, node.registrar, config);\n  return {\n    /**\n     * Subscribe the given handler to a pubsub topic\n     * @param {string} topic\n     * @param {function} handler The handler to subscribe\n     * @returns {void}\n     */\n    subscribe: function subscribe(topic, handler) {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      if (pubsub.listenerCount(topic) === 0) {\n        pubsub.subscribe(topic);\n      }\n\n      pubsub.on(topic, handler);\n    },\n\n    /**\n     * Unsubscribes from a pubsub topic\n     * @param {string} topic\n     * @param {function} [handler] The handler to unsubscribe from\n     */\n    unsubscribe: function unsubscribe(topic, handler) {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      if (!handler) {\n        pubsub.removeAllListeners(topic);\n      } else {\n        pubsub.removeListener(topic, handler);\n      }\n\n      if (pubsub.listenerCount(topic) === 0) {\n        pubsub.unsubscribe(topic);\n      }\n    },\n\n    /**\n     * Publish messages to the given topics.\n     * @param {Array<string>|string} topic\n     * @param {Buffer} data\n     * @returns {Promise<void>}\n     */\n    publish: function publish(topic, data) {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      try {\n        data = Buffer.from(data);\n      } catch (err) {\n        throw errCode(new Error('data must be convertible to a Buffer'), 'ERR_DATA_IS_NOT_VALID');\n      }\n\n      return pubsub.publish(topic, data);\n    },\n\n    /**\n     * Get a list of topics the node is subscribed to.\n     * @returns {Array<String>} topics\n     */\n    getTopics: function getTopics() {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      return pubsub.getTopics();\n    },\n\n    /**\n     * Get a list of the peer-ids that are subscribed to one topic.\n     * @param {string} topic\n     * @returns {Array<string>}\n     */\n    getSubscribers: function getSubscribers(topic) {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      return pubsub.getSubscribers(topic);\n    },\n    setMaxListeners: function setMaxListeners(n) {\n      return pubsub.setMaxListeners(n);\n    },\n    _pubsub: pubsub,\n    start: function start() {\n      return pubsub.start();\n    },\n    stop: function stop() {\n      return pubsub.stop();\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/pubsub.js"],"names":["require","Buffer","errCode","messages","codes","module","exports","node","Pubsub","config","pubsub","peerId","registrar","subscribe","topic","handler","isStarted","started","Error","NOT_STARTED_YET","PUBSUB_NOT_STARTED","listenerCount","on","unsubscribe","removeAllListeners","removeListener","publish","data","from","err","getTopics","getSubscribers","setMaxListeners","n","_pubsub","start","stop"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst errCode = require('err-code')\nconst { messages, codes } = require('./errors')\n\nmodule.exports = (node, Pubsub, config) => {\n  const pubsub = new Pubsub(node.peerId, node.registrar, config)\n\n  return {\n    /**\n     * Subscribe the given handler to a pubsub topic\n     * @param {string} topic\n     * @param {function} handler The handler to subscribe\n     * @returns {void}\n     */\n    subscribe: (topic, handler) => {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED)\n      }\n\n      if (pubsub.listenerCount(topic) === 0) {\n        pubsub.subscribe(topic)\n      }\n\n      pubsub.on(topic, handler)\n    },\n\n    /**\n     * Unsubscribes from a pubsub topic\n     * @param {string} topic\n     * @param {function} [handler] The handler to unsubscribe from\n     */\n    unsubscribe: (topic, handler) => {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED)\n      }\n\n      if (!handler) {\n        pubsub.removeAllListeners(topic)\n      } else {\n        pubsub.removeListener(topic, handler)\n      }\n\n      if (pubsub.listenerCount(topic) === 0) {\n        pubsub.unsubscribe(topic)\n      }\n    },\n\n    /**\n     * Publish messages to the given topics.\n     * @param {Array<string>|string} topic\n     * @param {Buffer} data\n     * @returns {Promise<void>}\n     */\n    publish: (topic, data) => {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED)\n      }\n\n      try {\n        data = Buffer.from(data)\n      } catch (err) {\n        throw errCode(new Error('data must be convertible to a Buffer'), 'ERR_DATA_IS_NOT_VALID')\n      }\n\n      return pubsub.publish(topic, data)\n    },\n\n    /**\n     * Get a list of topics the node is subscribed to.\n     * @returns {Array<String>} topics\n     */\n    getTopics: () => {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED)\n      }\n\n      return pubsub.getTopics()\n    },\n\n    /**\n     * Get a list of the peer-ids that are subscribed to one topic.\n     * @param {string} topic\n     * @returns {Array<string>}\n     */\n    getSubscribers: (topic) => {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED)\n      }\n\n      return pubsub.getSubscribers(topic)\n    },\n\n    setMaxListeners (n) {\n      return pubsub.setMaxListeners(n)\n    },\n\n    _pubsub: pubsub,\n\n    start: () => pubsub.start(),\n\n    stop: () => pubsub.stop()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}