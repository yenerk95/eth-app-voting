{"ast":null,"code":"'use strict';\n\nvar errcode = require('err-code');\n/**\n * Checks a record and ensures it is still valid.\n * It runs the needed validators.\n * If verification fails the returned Promise will reject with the error.\n *\n * @param {Object} validators\n * @param {Record} record\n * @returns {Promise}\n */\n\n\nvar verifyRecord = function verifyRecord(validators, record) {\n  var key = record.key;\n  var parts = key.toString().split('/');\n\n  if (parts.length < 3) {\n    // No validator available\n    return;\n  }\n\n  var validator = validators[parts[1].toString()];\n\n  if (!validator) {\n    var errMsg = 'Invalid record keytype';\n    throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD_KEY_TYPE');\n  }\n\n  return validator.func(key, record.value);\n};\n\nmodule.exports = {\n  verifyRecord: verifyRecord,\n  validators: require('./validators')\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-record/src/validator.js"],"names":["errcode","require","verifyRecord","validators","record","key","parts","toString","split","length","validator","errMsg","Error","func","value","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;AACA;;;;;;;;;;;AASA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAAaC,MAAb,EAAwB;AAC3C,MAAMC,GAAG,GAAGD,MAAM,CAACC,GAAnB;AACA,MAAMC,KAAK,GAAGD,GAAG,CAACE,QAAJ,GAAeC,KAAf,CAAqB,GAArB,CAAd;;AAEA,MAAIF,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACpB;AACA;AACD;;AAED,MAAMC,SAAS,GAAGP,UAAU,CAACG,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,EAAD,CAA5B;;AAEA,MAAI,CAACG,SAAL,EAAgB;AACd,QAAMC,MAAM,GAAG,wBAAf;AAEA,UAAMX,OAAO,CAAC,IAAIY,KAAJ,CAAUD,MAAV,CAAD,EAAoB,6BAApB,CAAb;AACD;;AAED,SAAOD,SAAS,CAACG,IAAV,CAAeR,GAAf,EAAoBD,MAAM,CAACU,KAA3B,CAAP;AACD,CAlBD;;AAoBAC,MAAM,CAACC,OAAP,GAAiB;AACfd,EAAAA,YAAY,EAAEA,YADC;AAEfC,EAAAA,UAAU,EAAEF,OAAO,CAAC,cAAD;AAFJ,CAAjB","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\n/**\n * Checks a record and ensures it is still valid.\n * It runs the needed validators.\n * If verification fails the returned Promise will reject with the error.\n *\n * @param {Object} validators\n * @param {Record} record\n * @returns {Promise}\n */\nconst verifyRecord = (validators, record) => {\n  const key = record.key\n  const parts = key.toString().split('/')\n\n  if (parts.length < 3) {\n    // No validator available\n    return\n  }\n\n  const validator = validators[parts[1].toString()]\n\n  if (!validator) {\n    const errMsg = 'Invalid record keytype'\n\n    throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD_KEY_TYPE')\n  }\n\n  return validator.func(key, record.value)\n}\n\nmodule.exports = {\n  verifyRecord: verifyRecord,\n  validators: require('./validators')\n}\n"]},"metadata":{},"sourceType":"script"}