{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst webcrypto = require('../webcrypto');\n\nconst randomBytes = require('../random-bytes');\n\nexports.utils = require('./rsa-utils');\n\nexports.generateKey = async function (bits) {\n  const pair = await webcrypto.get().subtle.generateKey({\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: bits,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign', 'verify']);\n  const keys = await exportKey(pair);\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  };\n}; // Takes a jwk key\n\n\nexports.unmarshalPrivateKey = async function (key) {\n  const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign']);\n  const pair = [privateKey, await derivePublicFromPrivate(key)];\n  const keys = await exportKey({\n    privateKey: pair[0],\n    publicKey: pair[1]\n  });\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  };\n};\n\nexports.getRandomValues = randomBytes;\n\nexports.hashAndSign = async function (key, msg) {\n  const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['sign']);\n  const sig = await webcrypto.get().subtle.sign({\n    name: 'RSASSA-PKCS1-v1_5'\n  }, privateKey, Uint8Array.from(msg));\n  return Buffer.from(sig);\n};\n\nexports.hashAndVerify = async function (key, sig, msg) {\n  const publicKey = await webcrypto.get().subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['verify']);\n  return webcrypto.get().subtle.verify({\n    name: 'RSASSA-PKCS1-v1_5'\n  }, publicKey, sig, msg);\n};\n\nfunction exportKey(pair) {\n  return Promise.all([webcrypto.get().subtle.exportKey('jwk', pair.privateKey), webcrypto.get().subtle.exportKey('jwk', pair.publicKey)]);\n}\n\nfunction derivePublicFromPrivate(jwKey) {\n  return webcrypto.get().subtle.importKey('jwk', {\n    kty: jwKey.kty,\n    n: jwKey.n,\n    e: jwKey.e\n  }, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['verify']);\n}\n/*\n\nRSA encryption/decryption for the browser with webcrypto workarround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg buffer to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our buffer a binary string\n  - Convert resulting nodeForge buffer to buffer: it returns a binary string, turn that into a uint8array(buffer)\n\n*/\n\n\nconst {\n  jwk2pub,\n  jwk2priv\n} = require('./jwk2pem');\n\nfunction convertKey(key, pub, msg, handle) {\n  const fkey = pub ? jwk2pub(key) : jwk2priv(key);\n  const fmsg = Buffer.from(msg).toString('binary');\n  const fomsg = handle(fmsg, fkey);\n  return Buffer.from(fomsg, 'binary');\n}\n\nexports.encrypt = function (key, msg) {\n  return convertKey(key, true, msg, (msg, key) => key.encrypt(msg));\n};\n\nexports.decrypt = function (key, msg) {\n  return convertKey(key, false, msg, (msg, key) => key.decrypt(msg));\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/keys/rsa-browser.js"],"names":["Buffer","require","webcrypto","randomBytes","exports","utils","generateKey","bits","pair","get","subtle","name","modulusLength","publicExponent","Uint8Array","hash","keys","exportKey","privateKey","publicKey","unmarshalPrivateKey","key","importKey","derivePublicFromPrivate","getRandomValues","hashAndSign","msg","sig","sign","from","hashAndVerify","verify","Promise","all","jwKey","kty","n","e","jwk2pub","jwk2priv","convertKey","pub","handle","fkey","fmsg","toString","fomsg","encrypt","decrypt"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst webcrypto = require('../webcrypto')\nconst randomBytes = require('../random-bytes')\n\nexports.utils = require('./rsa-utils')\n\nexports.generateKey = async function (bits) {\n  const pair = await webcrypto.get().subtle.generateKey(\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: bits,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign', 'verify']\n  )\n\n  const keys = await exportKey(pair)\n\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  }\n}\n\n// Takes a jwk key\nexports.unmarshalPrivateKey = async function (key) {\n  const privateKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign']\n  )\n\n  const pair = [\n    privateKey,\n    await derivePublicFromPrivate(key)\n  ]\n\n  const keys = await exportKey({\n    privateKey: pair[0],\n    publicKey: pair[1]\n  })\n\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  }\n}\n\nexports.getRandomValues = randomBytes\n\nexports.hashAndSign = async function (key, msg) {\n  const privateKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['sign']\n  )\n\n  const sig = await webcrypto.get().subtle.sign(\n    { name: 'RSASSA-PKCS1-v1_5' },\n    privateKey,\n    Uint8Array.from(msg)\n  )\n\n  return Buffer.from(sig)\n}\n\nexports.hashAndVerify = async function (key, sig, msg) {\n  const publicKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['verify']\n  )\n\n  return webcrypto.get().subtle.verify(\n    { name: 'RSASSA-PKCS1-v1_5' },\n    publicKey,\n    sig,\n    msg\n  )\n}\n\nfunction exportKey (pair) {\n  return Promise.all([\n    webcrypto.get().subtle.exportKey('jwk', pair.privateKey),\n    webcrypto.get().subtle.exportKey('jwk', pair.publicKey)\n  ])\n}\n\nfunction derivePublicFromPrivate (jwKey) {\n  return webcrypto.get().subtle.importKey(\n    'jwk',\n    {\n      kty: jwKey.kty,\n      n: jwKey.n,\n      e: jwKey.e\n    },\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['verify']\n  )\n}\n\n/*\n\nRSA encryption/decryption for the browser with webcrypto workarround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg buffer to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our buffer a binary string\n  - Convert resulting nodeForge buffer to buffer: it returns a binary string, turn that into a uint8array(buffer)\n\n*/\n\nconst { jwk2pub, jwk2priv } = require('./jwk2pem')\n\nfunction convertKey (key, pub, msg, handle) {\n  const fkey = pub ? jwk2pub(key) : jwk2priv(key)\n  const fmsg = Buffer.from(msg).toString('binary')\n  const fomsg = handle(fmsg, fkey)\n  return Buffer.from(fomsg, 'binary')\n}\n\nexports.encrypt = function (key, msg) {\n  return convertKey(key, true, msg, (msg, key) => key.encrypt(msg))\n}\n\nexports.decrypt = function (key, msg) {\n  return convertKey(key, false, msg, (msg, key) => key.decrypt(msg))\n}\n"]},"metadata":{},"sourceType":"script"}