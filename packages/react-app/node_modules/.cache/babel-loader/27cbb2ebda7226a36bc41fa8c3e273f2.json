{"ast":null,"code":"import _classCallCheck from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Storage for static keys of previously connected peers.\n */\n\n\nvar Keycache = /*#__PURE__*/function () {\n  function Keycache() {\n    _classCallCheck(this, Keycache);\n\n    _defineProperty(this, \"storage\", new Map());\n  }\n\n  _createClass(Keycache, [{\n    key: \"store\",\n    value: function store(peerId, key) {\n      this.storage.set(peerId.id, key);\n    }\n  }, {\n    key: \"load\",\n    value: function load(peerId) {\n      if (!peerId) {\n        return null;\n      }\n\n      return this.storage.get(peerId.id) || null;\n    }\n  }, {\n    key: \"resetStorage\",\n    value: function resetStorage() {\n      this.storage.clear();\n    }\n  }]);\n\n  return Keycache;\n}();\n\nvar KeyCache = new Keycache();\nexport { KeyCache };","map":{"version":3,"sources":["../src/keycache.ts"],"names":["peerId","KeyCache"],"mappings":";;;;;;;;;;;;;;;;;AAGA;;;;;IAGA,Q;AAAe,sBAAA;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EACK,IADL,GACK,EADL,CAAA;AAAA;;;;0BAGb,M,EAAA,G,EAAiD;AAC/C,WAAA,OAAA,CAAA,GAAA,CAAiBA,MAAM,CAAvB,EAAA,EAAA,GAAA;AACD;;;yBAED,M,EAA6C;AAC3C,UAAG,CAAH,MAAA,EAAY;AACV,eAAA,IAAA;AACD;;AACD,aAAO,KAAA,OAAA,CAAA,GAAA,CAAiBA,MAAM,CAAvB,EAAA,KAAP,IAAA;AACD;;;mCAE2B;AAC1B,WAAA,OAAA,CAAA,KAAA;AACD;;;;;;AAIH,IAAMC,QAAQ,GAAG,IAAjB,QAAiB,EAAjB;AACA,SAAA,QAAA","sourcesContent":["import {bytes, bytes32} from \"./@types/basic\";\nimport PeerId from \"peer-id\";\n\n/**\n * Storage for static keys of previously connected peers.\n */\nclass Keycache {\n  private storage = new Map<bytes, bytes32>();\n\n  public store(peerId: PeerId, key: bytes32): void {\n    this.storage.set(peerId.id, key);\n  }\n\n  public load(peerId?: PeerId): bytes32 | null {\n    if(!peerId) {\n      return null;\n    }\n    return this.storage.get(peerId.id) || null;\n  }\n\n  public resetStorage(): void {\n    this.storage.clear();\n  }\n\n}\n\nconst KeyCache = new Keycache();\nexport {\n  KeyCache,\n}\n"]},"metadata":{},"sourceType":"module"}