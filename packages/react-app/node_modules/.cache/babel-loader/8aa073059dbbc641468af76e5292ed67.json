{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:mfs:write');\n\nconst importer = require('ipfs-unixfs-importer');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst stat = require('./stat');\n\nconst mkdir = require('./mkdir');\n\nconst addLink = require('./utils/add-link');\n\nconst applyDefaultOptions = require('./utils/apply-default-options');\n\nconst createLock = require('./utils/create-lock');\n\nconst toAsyncIterator = require('./utils/to-async-iterator');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst toPathComponents = require('./utils/to-path-components');\n\nconst toTrail = require('./utils/to-trail');\n\nconst updateTree = require('./utils/update-tree');\n\nconst updateMfsRoot = require('./utils/update-mfs-root');\n\nconst errCode = require('err-code');\n\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../utils');\n\nconst last = require('it-last');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nconst defaultOptions = {\n  offset: 0,\n  // the offset in the file to begin writing\n  length: undefined,\n  // how many bytes from the incoming buffer to write\n  create: false,\n  // whether to create the file if it does not exist\n  truncate: false,\n  // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false,\n  // whether to create intermediate directories if they do not exist\n  progress: () => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000,\n  mode: undefined,\n  mtime: undefined,\n  signal: undefined\n};\n\nmodule.exports = context => {\n  return withTimeoutOption(async function mfsWrite(path, content, options) {\n    options = applyDefaultOptions(options, defaultOptions);\n    let source, destination, parent;\n    log('Reading source, destination and parent');\n    await createLock().readLock(async () => {\n      source = await toAsyncIterator(content, options);\n      destination = await toMfsPath(context, path, options);\n      parent = await toMfsPath(context, destination.mfsDirectory, options);\n    })();\n    log('Read source, destination and parent');\n\n    if (!options.parents && !parent.exists) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST');\n    }\n\n    if (!options.create && !destination.exists) {\n      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST');\n    }\n\n    return updateOrImport(context, path, source, destination, options);\n  });\n};\n\nconst updateOrImport = async (context, path, source, destination, options) => {\n  const child = await write(context, source, destination, options); // The slow bit is done, now add or replace the DAGLink in the containing directory\n  // re-reading the path to the containing folder in case it has changed in the interim\n\n  await createLock().writeLock(async () => {\n    const pathComponents = toPathComponents(path);\n    const fileName = pathComponents.pop();\n    let parentExists = false;\n\n    try {\n      await stat(context)(`/${pathComponents.join('/')}`, options);\n      parentExists = true;\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err;\n      }\n    }\n\n    if (!parentExists) {\n      await mkdir(context)(`/${pathComponents.join('/')}`, options);\n    } // get an updated mfs path in case the root changed while we were writing\n\n\n    const updatedPath = await toMfsPath(context, path, options);\n    const trail = await toTrail(context, updatedPath.mfsDirectory, options);\n    const parent = trail[trail.length - 1];\n\n    if (!parent.type.includes('directory')) {\n      throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY');\n    }\n\n    const parentNode = await context.ipld.get(parent.cid);\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: fileName,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    });\n    parent.cid = result.cid; // update the tree with the new child\n\n    const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree\n\n    await updateMfsRoot(context, newRootCid, options);\n  })();\n};\n\nconst write = async (context, source, destination, options) => {\n  if (destination.exists) {\n    log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`);\n  } else {\n    log(`Writing file offset ${options.offset} length ${options.length}`);\n  }\n\n  const sources = []; // pad start of file if necessary\n\n  if (options.offset > 0) {\n    if (destination.unixfs) {\n      log(`Writing first ${options.offset} bytes of original file`);\n      sources.push(() => {\n        return destination.content({\n          offset: 0,\n          length: options.offset\n        });\n      });\n\n      if (destination.unixfs.fileSize() < options.offset) {\n        const extra = options.offset - destination.unixfs.fileSize();\n        log(`Writing zeros for extra ${extra} bytes`);\n        sources.push(asyncZeroes(extra));\n      }\n    } else {\n      log(`Writing zeros for first ${options.offset} bytes`);\n      sources.push(asyncZeroes(options.offset));\n    }\n  }\n\n  sources.push(limitAsyncStreamBytes(source, options.length));\n  const content = countBytesStreamed(catAsyncIterators(sources), bytesWritten => {\n    if (destination.unixfs && !options.truncate) {\n      // if we've done reading from the new source and we are not going\n      // to truncate the file, add the end of the existing file to the output\n      const fileSize = destination.unixfs.fileSize();\n\n      if (fileSize > bytesWritten) {\n        log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`);\n        return destination.content({\n          offset: bytesWritten\n        });\n      } else {\n        log('Not writing last bytes from original file');\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: async function* () {}\n    };\n  });\n  let mode;\n\n  if (options.mode !== undefined && options.mode !== null) {\n    mode = options.mode;\n  } else if (destination && destination.unixfs) {\n    mode = destination.unixfs.mode;\n  }\n\n  let mtime;\n\n  if (options.mtime !== undefined && options.mtine !== null) {\n    mtime = options.mtime;\n  } else if (destination && destination.unixfs) {\n    mtime = destination.unixfs.mtime;\n  }\n\n  const result = await last(importer([{\n    content: content,\n    // persist mode & mtime if set previously\n    mode,\n    mtime\n  }], context.block, {\n    progress: options.progress,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    strategy: options.strategy,\n    rawLeaves: options.rawLeaves,\n    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n    leafType: options.leafType,\n    pin: false\n  }));\n  log(`Wrote ${result.cid}`);\n  return {\n    cid: result.cid,\n    size: result.size\n  };\n};\n\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return async function* _limitAsyncStreamBytes() {\n    let emitted = 0;\n\n    for await (const buf of stream) {\n      emitted += buf.length;\n\n      if (emitted > limit) {\n        yield buf.slice(0, limit - emitted);\n        return;\n      }\n\n      yield buf;\n    }\n  };\n};\n\nconst asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {\n  const buf = Buffer.alloc(chunkSize, 0);\n  const stream = {\n    [Symbol.asyncIterator]: function* _asyncZeroes() {\n      while (true) {\n        yield buf.slice();\n      }\n    }\n  };\n  return limitAsyncStreamBytes(stream, count);\n};\n\nconst catAsyncIterators = async function* (sources) {\n  // eslint-disable-line require-await\n  for (let i = 0; i < sources.length; i++) {\n    yield* sources[i]();\n  }\n};\n\nconst countBytesStreamed = async function* (source, notify) {\n  let wrote = 0;\n\n  for await (const buf of source) {\n    wrote += buf.length;\n    yield buf;\n  }\n\n  for await (const buf of notify(wrote)) {\n    wrote += buf.length;\n    yield buf;\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/write.js"],"names":["log","require","importer","Buffer","stat","mkdir","addLink","applyDefaultOptions","createLock","toAsyncIterator","toMfsPath","toPathComponents","toTrail","updateTree","updateMfsRoot","errCode","MFS_MAX_CHUNK_SIZE","last","withTimeoutOption","defaultOptions","offset","length","undefined","create","truncate","rawLeaves","reduceSingleLeafToSelf","cidVersion","hashAlg","parents","progress","strategy","flush","leafType","shardSplitThreshold","mode","mtime","signal","module","exports","context","mfsWrite","path","content","options","source","destination","parent","readLock","mfsDirectory","exists","Error","updateOrImport","child","write","writeLock","pathComponents","fileName","pop","parentExists","join","err","code","updatedPath","trail","type","includes","name","parentNode","ipld","get","cid","result","size","newRootCid","sources","unixfs","push","fileSize","extra","asyncZeroes","limitAsyncStreamBytes","countBytesStreamed","catAsyncIterators","bytesWritten","Symbol","asyncIterator","mtine","block","pin","stream","limit","_limitAsyncStreamBytes","emitted","buf","slice","count","chunkSize","alloc","_asyncZeroes","i","notify","wrote"],"mappings":"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","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:mfs:write')\nconst importer = require('ipfs-unixfs-importer')\nconst { Buffer } = require('buffer')\nconst stat = require('./stat')\nconst mkdir = require('./mkdir')\nconst addLink = require('./utils/add-link')\nconst applyDefaultOptions = require('./utils/apply-default-options')\nconst createLock = require('./utils/create-lock')\nconst toAsyncIterator = require('./utils/to-async-iterator')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst toPathComponents = require('./utils/to-path-components')\nconst toTrail = require('./utils/to-trail')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst errCode = require('err-code')\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../utils')\nconst last = require('it-last')\nconst { withTimeoutOption } = require('../../utils')\n\nconst defaultOptions = {\n  offset: 0, // the offset in the file to begin writing\n  length: undefined, // how many bytes from the incoming buffer to write\n  create: false, // whether to create the file if it does not exist\n  truncate: false, // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false, // whether to create intermediate directories if they do not exist\n  progress: () => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000,\n  mode: undefined,\n  mtime: undefined,\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  return withTimeoutOption(async function mfsWrite (path, content, options) {\n    options = applyDefaultOptions(options, defaultOptions)\n\n    let source, destination, parent\n    log('Reading source, destination and parent')\n    await createLock().readLock(async () => {\n      source = await toAsyncIterator(content, options)\n      destination = await toMfsPath(context, path, options)\n      parent = await toMfsPath(context, destination.mfsDirectory, options)\n    })()\n    log('Read source, destination and parent')\n    if (!options.parents && !parent.exists) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    if (!options.create && !destination.exists) {\n      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST')\n    }\n\n    return updateOrImport(context, path, source, destination, options)\n  })\n}\n\nconst updateOrImport = async (context, path, source, destination, options) => {\n  const child = await write(context, source, destination, options)\n\n  // The slow bit is done, now add or replace the DAGLink in the containing directory\n  // re-reading the path to the containing folder in case it has changed in the interim\n  await createLock().writeLock(async () => {\n    const pathComponents = toPathComponents(path)\n    const fileName = pathComponents.pop()\n    let parentExists = false\n\n    try {\n      await stat(context)(`/${pathComponents.join('/')}`, options)\n      parentExists = true\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err\n      }\n    }\n\n    if (!parentExists) {\n      await mkdir(context)(`/${pathComponents.join('/')}`, options)\n    }\n\n    // get an updated mfs path in case the root changed while we were writing\n    const updatedPath = await toMfsPath(context, path, options)\n    const trail = await toTrail(context, updatedPath.mfsDirectory, options)\n    const parent = trail[trail.length - 1]\n\n    if (!parent.type.includes('directory')) {\n      throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY')\n    }\n\n    const parentNode = await context.ipld.get(parent.cid)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: fileName,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, options)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, options)\n  })()\n}\n\nconst write = async (context, source, destination, options) => {\n  if (destination.exists) {\n    log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`)\n  } else {\n    log(`Writing file offset ${options.offset} length ${options.length}`)\n  }\n\n  const sources = []\n\n  // pad start of file if necessary\n  if (options.offset > 0) {\n    if (destination.unixfs) {\n      log(`Writing first ${options.offset} bytes of original file`)\n\n      sources.push(\n        () => {\n          return destination.content({\n            offset: 0,\n            length: options.offset\n          })\n        }\n      )\n\n      if (destination.unixfs.fileSize() < options.offset) {\n        const extra = options.offset - destination.unixfs.fileSize()\n\n        log(`Writing zeros for extra ${extra} bytes`)\n        sources.push(\n          asyncZeroes(extra)\n        )\n      }\n    } else {\n      log(`Writing zeros for first ${options.offset} bytes`)\n      sources.push(\n        asyncZeroes(options.offset)\n      )\n    }\n  }\n\n  sources.push(\n    limitAsyncStreamBytes(source, options.length)\n  )\n\n  const content = countBytesStreamed(catAsyncIterators(sources), (bytesWritten) => {\n    if (destination.unixfs && !options.truncate) {\n      // if we've done reading from the new source and we are not going\n      // to truncate the file, add the end of the existing file to the output\n      const fileSize = destination.unixfs.fileSize()\n\n      if (fileSize > bytesWritten) {\n        log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`)\n\n        return destination.content({\n          offset: bytesWritten\n        })\n      } else {\n        log('Not writing last bytes from original file')\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: async function * () {}\n    }\n  })\n\n  let mode\n\n  if (options.mode !== undefined && options.mode !== null) {\n    mode = options.mode\n  } else if (destination && destination.unixfs) {\n    mode = destination.unixfs.mode\n  }\n\n  let mtime\n\n  if (options.mtime !== undefined && options.mtine !== null) {\n    mtime = options.mtime\n  } else if (destination && destination.unixfs) {\n    mtime = destination.unixfs.mtime\n  }\n\n  const result = await last(importer([{\n    content: content,\n\n    // persist mode & mtime if set previously\n    mode,\n    mtime\n  }], context.block, {\n    progress: options.progress,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    strategy: options.strategy,\n    rawLeaves: options.rawLeaves,\n    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n    leafType: options.leafType,\n    pin: false\n  }))\n\n  log(`Wrote ${result.cid}`)\n\n  return {\n    cid: result.cid,\n    size: result.size\n  }\n}\n\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return async function * _limitAsyncStreamBytes () {\n    let emitted = 0\n\n    for await (const buf of stream) {\n      emitted += buf.length\n\n      if (emitted > limit) {\n        yield buf.slice(0, limit - emitted)\n\n        return\n      }\n\n      yield buf\n    }\n  }\n}\n\nconst asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {\n  const buf = Buffer.alloc(chunkSize, 0)\n\n  const stream = {\n    [Symbol.asyncIterator]: function * _asyncZeroes () {\n      while (true) {\n        yield buf.slice()\n      }\n    }\n  }\n\n  return limitAsyncStreamBytes(stream, count)\n}\n\nconst catAsyncIterators = async function * (sources) { // eslint-disable-line require-await\n  for (let i = 0; i < sources.length; i++) {\n    yield * sources[i]()\n  }\n}\n\nconst countBytesStreamed = async function * (source, notify) {\n  let wrote = 0\n\n  for await (const buf of source) {\n    wrote += buf.length\n\n    yield buf\n  }\n\n  for await (const buf of notify(wrote)) {\n    wrote += buf.length\n\n    yield buf\n  }\n}\n"]},"metadata":{},"sourceType":"script"}