{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:addresses');\nlog.error = debug('libp2p:addresses:error');\n\nconst multiaddr = require('multiaddr');\n/**\n * Responsible for managing this peers addresses.\n * Peers can specify their listen, announce and noAnnounce addresses.\n * The listen addresses will be used by the libp2p transports to listen for new connections,\n * while the announce an noAnnounce addresses will be combined with the listen addresses for\n * address adverstising to other peers in the network.\n */\n\n\nclass AddressManager {\n  /**\n   * @constructor\n   * @param {object} [options]\n   * @param {Array<string>} [options.listen = []] list of multiaddrs string representation to listen.\n   * @param {Array<string>} [options.announce = []] list of multiaddrs string representation to announce.\n   * @param {Array<string>} [options.noAnnounce = []] list of multiaddrs string representation to not announce.\n   */\n  constructor({\n    listen = [],\n    announce = [],\n    noAnnounce = []\n  } = {}) {\n    this.listen = new Set(listen);\n    this.announce = new Set(announce);\n    this.noAnnounce = new Set(noAnnounce);\n  }\n  /**\n   * Get peer listen multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n\n\n  getListenAddrs() {\n    return Array.from(this.listen).map(a => multiaddr(a));\n  }\n  /**\n   * Get peer announcing multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n\n\n  getAnnounceAddrs() {\n    return Array.from(this.announce).map(a => multiaddr(a));\n  }\n  /**\n   * Get peer noAnnouncing multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n\n\n  getNoAnnounceAddrs() {\n    return Array.from(this.noAnnounce).map(a => multiaddr(a));\n  }\n\n}\n\nmodule.exports = AddressManager;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/address-manager/index.js"],"names":["debug","require","log","error","multiaddr","AddressManager","constructor","listen","announce","noAnnounce","Set","getListenAddrs","Array","from","map","a","getAnnounceAddrs","getNoAnnounceAddrs","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGF,KAAK,CAAC,kBAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,wBAAD,CAAjB;;AAEA,MAAMI,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;AAEA;;;;;;;;;AAOA,MAAMI,cAAN,CAAqB;AACnB;;;;;;;AAOAC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,MAAM,GAAG,EAAX;AAAeC,IAAAA,QAAQ,GAAG,EAA1B;AAA8BC,IAAAA,UAAU,GAAG;AAA3C,MAAkD,EAApD,EAAwD;AACjE,SAAKF,MAAL,GAAc,IAAIG,GAAJ,CAAQH,MAAR,CAAd;AACA,SAAKC,QAAL,GAAgB,IAAIE,GAAJ,CAAQF,QAAR,CAAhB;AACA,SAAKC,UAAL,GAAkB,IAAIC,GAAJ,CAAQD,UAAR,CAAlB;AACD;AAED;;;;;;AAIAE,EAAAA,cAAc,GAAI;AAChB,WAAOC,KAAK,CAACC,IAAN,CAAW,KAAKN,MAAhB,EAAwBO,GAAxB,CAA6BC,CAAD,IAAOX,SAAS,CAACW,CAAD,CAA5C,CAAP;AACD;AAED;;;;;;AAIAC,EAAAA,gBAAgB,GAAI;AAClB,WAAOJ,KAAK,CAACC,IAAN,CAAW,KAAKL,QAAhB,EAA0BM,GAA1B,CAA+BC,CAAD,IAAOX,SAAS,CAACW,CAAD,CAA9C,CAAP;AACD;AAED;;;;;;AAIAE,EAAAA,kBAAkB,GAAI;AACpB,WAAOL,KAAK,CAACC,IAAN,CAAW,KAAKJ,UAAhB,EAA4BK,GAA5B,CAAiCC,CAAD,IAAOX,SAAS,CAACW,CAAD,CAAhD,CAAP;AACD;;AApCkB;;AAuCrBG,MAAM,CAACC,OAAP,GAAiBd,cAAjB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:addresses')\nlog.error = debug('libp2p:addresses:error')\n\nconst multiaddr = require('multiaddr')\n\n/**\n * Responsible for managing this peers addresses.\n * Peers can specify their listen, announce and noAnnounce addresses.\n * The listen addresses will be used by the libp2p transports to listen for new connections,\n * while the announce an noAnnounce addresses will be combined with the listen addresses for\n * address adverstising to other peers in the network.\n */\nclass AddressManager {\n  /**\n   * @constructor\n   * @param {object} [options]\n   * @param {Array<string>} [options.listen = []] list of multiaddrs string representation to listen.\n   * @param {Array<string>} [options.announce = []] list of multiaddrs string representation to announce.\n   * @param {Array<string>} [options.noAnnounce = []] list of multiaddrs string representation to not announce.\n   */\n  constructor ({ listen = [], announce = [], noAnnounce = [] } = {}) {\n    this.listen = new Set(listen)\n    this.announce = new Set(announce)\n    this.noAnnounce = new Set(noAnnounce)\n  }\n\n  /**\n   * Get peer listen multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n  getListenAddrs () {\n    return Array.from(this.listen).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer announcing multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n  getAnnounceAddrs () {\n    return Array.from(this.announce).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer noAnnouncing multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n  getNoAnnounceAddrs () {\n    return Array.from(this.noAnnounce).map((a) => multiaddr(a))\n  }\n}\n\nmodule.exports = AddressManager\n"]},"metadata":{},"sourceType":"script"}