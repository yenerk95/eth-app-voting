{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar Repo = require('ipfs-repo');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _refsLocal = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          result,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(repo.blocks.query({\n                keysOnly: true,\n                signal: options.signal\n              }));\n\n            case 5:\n              _context.next = 7;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 7:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 11;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 11:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 19;\n                break;\n              }\n\n              result = _value;\n              _context.next = 16;\n              return dsKeyToRef(result.key);\n\n            case 16:\n              _iteratorNormalCompletion = true;\n              _context.next = 5;\n              break;\n\n            case 19:\n              _context.next = 25;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 25:\n              _context.prev = 25;\n              _context.prev = 26;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 30;\n                break;\n              }\n\n              _context.next = 30;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 30:\n              _context.prev = 30;\n\n              if (!_didIteratorError) {\n                _context.next = 33;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 33:\n              return _context.finish(30);\n\n            case 34:\n              return _context.finish(25);\n\n            case 35:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 21, 25, 35], [26,, 30, 34]]);\n    }));\n\n    function refsLocal() {\n      return _refsLocal.apply(this, arguments);\n    }\n\n    return refsLocal;\n  }());\n};\n\nfunction dsKeyToRef(key) {\n  try {\n    return {\n      ref: Repo.utils.blockstore.keyToCid(key).toString()\n    };\n  } catch (err) {\n    return {\n      err: \"Could not convert block with key '\".concat(key, \"' to CID: \").concat(err.message)\n    };\n  }\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/refs/local.js"],"names":["Repo","require","withTimeoutOption","module","exports","repo","options","blocks","query","keysOnly","signal","result","dsKeyToRef","key","refsLocal","ref","utils","blockstore","keyToCid","toString","err","message"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;eAC8BA,OAAO,CAAC,aAAD,C;IAA7BC,iB,YAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAoB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AACnC,SAAOH,iBAAiB;AAAA,gFAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA4BI,cAAAA,OAA5B,2DAAsC,EAAtC;AAAA;AAAA;AAAA;AAAA,yCACID,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB;AAAEC,gBAAAA,QAAQ,EAAE,IAAZ;AAAkBC,gBAAAA,MAAM,EAAEJ,OAAO,CAACI;AAAlC,eAAlB,CADJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACNC,cAAAA,MADM;AAAA;AAErB,qBAAMC,UAAU,CAACD,MAAM,CAACE,GAAR,CAAhB;;AAFqB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAkBC,SAAlB;AAAA;AAAA;;AAAA,WAAkBA,SAAlB;AAAA,MAAxB;AAKD,CAND;;AAQA,SAASF,UAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAI;AACF,WAAO;AAAEE,MAAAA,GAAG,EAAEf,IAAI,CAACgB,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+BL,GAA/B,EAAoCM,QAApC;AAAP,KAAP;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,WAAO;AAAEA,MAAAA,GAAG,8CAAuCP,GAAvC,uBAAuDO,GAAG,CAACC,OAA3D;AAAL,KAAP;AACD;AACF","sourcesContent":["'use strict'\n\nconst Repo = require('ipfs-repo')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = function ({ repo }) {\n  return withTimeoutOption(async function * refsLocal (options = {}) {\n    for await (const result of repo.blocks.query({ keysOnly: true, signal: options.signal })) {\n      yield dsKeyToRef(result.key)\n    }\n  })\n}\n\nfunction dsKeyToRef (key) {\n  try {\n    return { ref: Repo.utils.blockstore.keyToCid(key).toString() }\n  } catch (err) {\n    return { err: `Could not convert block with key '${key}' to CID: ${err.message}` }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}