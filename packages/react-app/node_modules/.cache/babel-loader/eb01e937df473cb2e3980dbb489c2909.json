{"ast":null,"code":"'use strict';\n\nconst abortable = require('abortable-iterator');\n\nconst toIterable = require('stream-to-it');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst {\n  CLOSE_TIMEOUT\n} = require('./constants');\n\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:webrtc-star:socket');\nlog.error = debug('libp2p:webrtc-star:socket:error');\n\nconst toWebrtcMultiaddr = (address, port) => {\n  if (!address || !port) return undefined;\n\n  try {\n    return toMultiaddr(address, port);\n  } catch (err) {\n    log.error(err); // Account for mdns hostnames, just make it a local ip for now\n\n    return toMultiaddr('0.0.0.0', port);\n  }\n}; // Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\n\n\nmodule.exports = (socket, options = {}) => {\n  const {\n    sink,\n    source\n  } = toIterable.duplex(socket); // If the remote address was passed, use it - it may have the peer ID encapsulated\n\n  const remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort);\n  const localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort);\n  const maConn = {\n    async sink(source) {\n      if (options.signal) {\n        source = abortable(source, options.signal);\n      }\n\n      try {\n        await sink(async function* () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield Buffer.isBuffer(chunk) ? chunk : chunk.slice();\n          }\n        }());\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log.error(err);\n        }\n      }\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: socket,\n    localAddr,\n    remoteAddr,\n    timeline: {\n      open: Date.now()\n    },\n\n    close() {\n      if (socket.destroyed) return;\n      return new Promise((resolve, reject) => {\n        const start = Date.now(); // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n\n        const timeout = setTimeout(() => {\n          if (maConn.remoteAddr) {\n            const {\n              host,\n              port\n            } = maConn.remoteAddr.toOptions();\n            log('timeout closing socket to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy();\n          }\n        }, CLOSE_TIMEOUT);\n        socket.once('close', () => {\n          resolve();\n        });\n        socket.end(err => {\n          clearTimeout(timeout);\n          maConn.timeline.close = Date.now();\n          if (err) return reject(err);\n        });\n      });\n    }\n\n  };\n  socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-webrtc-star/src/socket-to-conn.js"],"names":["abortable","require","toIterable","Buffer","CLOSE_TIMEOUT","toMultiaddr","debug","log","error","toWebrtcMultiaddr","address","port","undefined","err","module","exports","socket","options","sink","source","duplex","remoteAddr","remoteAddress","remotePort","localAddr","localAddress","localPort","maConn","signal","chunk","isBuffer","slice","type","conn","timeline","open","Date","now","close","destroyed","Promise","resolve","reject","start","timeout","setTimeout","host","toOptions","destroy","once","end","clearTimeout"],"mappings":"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","sourcesContent":["'use strict'\n\nconst abortable = require('abortable-iterator')\nconst toIterable = require('stream-to-it')\nconst { Buffer } = require('buffer')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst debug = require('debug')\nconst log = debug('libp2p:webrtc-star:socket')\nlog.error = debug('libp2p:webrtc-star:socket:error')\n\nconst toWebrtcMultiaddr = (address, port) => {\n  if (!address || !port) return undefined\n\n  try {\n    return toMultiaddr(address, port)\n  } catch (err) {\n    log.error(err)\n    // Account for mdns hostnames, just make it a local ip for now\n    return toMultiaddr('0.0.0.0', port)\n  }\n}\n\n// Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\nmodule.exports = (socket, options = {}) => {\n  const { sink, source } = toIterable.duplex(socket)\n\n  // If the remote address was passed, use it - it may have the peer ID encapsulated\n  const remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort)\n  const localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort)\n\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield Buffer.isBuffer(chunk) ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n\n    conn: socket,\n\n    localAddr,\n    remoteAddr,\n\n    timeline: { open: Date.now() },\n\n    close () {\n      if (socket.destroyed) return\n\n      return new Promise((resolve, reject) => {\n        const start = Date.now()\n\n        // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n        const timeout = setTimeout(() => {\n          if (maConn.remoteAddr) {\n            const { host, port } = maConn.remoteAddr.toOptions()\n            log('timeout closing socket to %s:%s after %dms, destroying it manually',\n              host, port, Date.now() - start)\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy()\n          }\n        }, CLOSE_TIMEOUT)\n\n        socket.once('close', () => {\n          resolve()\n        })\n\n        socket.end(err => {\n          clearTimeout(timeout)\n\n          maConn.timeline.close = Date.now()\n          if (err) return reject(err)\n        })\n      })\n    }\n  }\n\n  socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"]},"metadata":{},"sourceType":"script"}