{"ast":null,"code":"'use strict';\n\nconst UnixFS = require('ipfs-unixfs');\n\nconst persist = require('../../utils/persist');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nasync function* bufferImporter(file, source, block, options) {\n  for await (let buffer of source) {\n    yield async () => {\n      options.progress(buffer.length);\n      let unixfs;\n      const opts = { ...options\n      };\n\n      if (options.rawLeaves) {\n        opts.codec = 'raw';\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer,\n          mtime: file.mtime,\n          mode: file.mode\n        });\n        buffer = new DAGNode(unixfs.marshal()).serialize();\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\n\nmodule.exports = bufferImporter;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/dag-builder/file/buffer-importer.js"],"names":["UnixFS","require","persist","DAGNode","bufferImporter","file","source","block","options","buffer","progress","length","unixfs","opts","rawLeaves","codec","cidVersion","type","leafType","data","mtime","mode","marshal","serialize","cid","size","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAM;AACJE,EAAAA;AADI,IAEFF,OAAO,CAAC,aAAD,CAFX;;AAIA,gBAAiBG,cAAjB,CAAiCC,IAAjC,EAAuCC,MAAvC,EAA+CC,KAA/C,EAAsDC,OAAtD,EAA+D;AAC7D,aAAW,IAAIC,MAAf,IAAyBH,MAAzB,EAAiC;AAC/B,UAAM,YAAY;AAChBE,MAAAA,OAAO,CAACE,QAAR,CAAiBD,MAAM,CAACE,MAAxB;AACA,UAAIC,MAAJ;AAEA,YAAMC,IAAI,GAAG,EACX,GAAGL;AADQ,OAAb;;AAIA,UAAIA,OAAO,CAACM,SAAZ,EAAuB;AACrBD,QAAAA,IAAI,CAACE,KAAL,GAAa,KAAb;AACAF,QAAAA,IAAI,CAACG,UAAL,GAAkB,CAAlB;AACD,OAHD,MAGO;AACLJ,QAAAA,MAAM,GAAG,IAAIZ,MAAJ,CAAW;AAClBiB,UAAAA,IAAI,EAAET,OAAO,CAACU,QADI;AAElBC,UAAAA,IAAI,EAAEV,MAFY;AAGlBW,UAAAA,KAAK,EAAEf,IAAI,CAACe,KAHM;AAIlBC,UAAAA,IAAI,EAAEhB,IAAI,CAACgB;AAJO,SAAX,CAAT;AAOAZ,QAAAA,MAAM,GAAG,IAAIN,OAAJ,CAAYS,MAAM,CAACU,OAAP,EAAZ,EAA8BC,SAA9B,EAAT;AACD;;AAED,aAAO;AACLC,QAAAA,GAAG,EAAE,MAAMtB,OAAO,CAACO,MAAD,EAASF,KAAT,EAAgBM,IAAhB,CADb;AAELD,QAAAA,MAFK;AAGLa,QAAAA,IAAI,EAAEhB,MAAM,CAACE;AAHR,OAAP;AAKD,KA3BD;AA4BD;AACF;;AAEDe,MAAM,CAACC,OAAP,GAAiBvB,cAAjB","sourcesContent":["'use strict'\n\nconst UnixFS = require('ipfs-unixfs')\nconst persist = require('../../utils/persist')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\n\nasync function * bufferImporter (file, source, block, options) {\n  for await (let buffer of source) {\n    yield async () => {\n      options.progress(buffer.length)\n      let unixfs\n\n      const opts = {\n        ...options\n      }\n\n      if (options.rawLeaves) {\n        opts.codec = 'raw'\n        opts.cidVersion = 1\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer,\n          mtime: file.mtime,\n          mode: file.mode\n        })\n\n        buffer = new DAGNode(unixfs.marshal()).serialize()\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      }\n    }\n  }\n}\n\nmodule.exports = bufferImporter\n"]},"metadata":{},"sourceType":"script"}