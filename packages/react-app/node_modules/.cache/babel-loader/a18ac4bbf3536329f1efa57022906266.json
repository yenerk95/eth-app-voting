{"ast":null,"code":"// Generated by CoffeeScript 1.8.0\n(function () {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function (x, y) {\n    if (x < y) {\n      return -1;\n    }\n\n    if (x > y) {\n      return 1;\n    }\n\n    return 0;\n  };\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n\n  insort = function (a, x, lo, hi, cmp) {\n    var mid;\n\n    if (lo == null) {\n      lo = 0;\n    }\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n\n    if (hi == null) {\n      hi = a.length;\n    }\n\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n\n    return [].splice.apply(a, [lo, lo - lo].concat(x)), x;\n  };\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n\n  heappush = function (array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n\n  heappop = function (array, cmp) {\n    var lastelt, returnitem;\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    lastelt = array.pop();\n\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n\n    return returnitem;\n  };\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n\n  heapreplace = function (array, item, cmp) {\n    var returnitem;\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    returnitem = array[0];\n    array[0] = item;\n\n    _siftup(array, 0, cmp);\n\n    return returnitem;\n  };\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n\n  heappushpop = function (array, item, cmp) {\n    var _ref;\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n\n      _siftup(array, 0, cmp);\n    }\n\n    return item;\n  };\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n\n  heapify = function (array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    _ref1 = function () {\n      _results1 = [];\n\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--) {\n        _results1.push(_j);\n      }\n\n      return _results1;\n    }.apply(this).reverse();\n\n    _results = [];\n\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n\n      _results.push(_siftup(array, i, cmp));\n    }\n\n    return _results;\n  };\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n\n  updateItem = function (array, item, cmp) {\n    var pos;\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    pos = array.indexOf(item);\n\n    if (pos === -1) {\n      return;\n    }\n\n    _siftdown(array, 0, pos, cmp);\n\n    return _siftup(array, pos, cmp);\n  };\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n\n  nlargest = function (array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    result = array.slice(0, n);\n\n    if (!result.length) {\n      return result;\n    }\n\n    heapify(result, cmp);\n    _ref = array.slice(n);\n\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n\n    return result.sort(cmp).reverse();\n  };\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n\n  nsmallest = function (array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n\n      if (!result.length) {\n        return result;\n      }\n\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n\n      return result;\n    }\n\n    heapify(array, cmp);\n    _results = [];\n\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n\n    return _results;\n  };\n\n  _siftdown = function (array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    newitem = array[pos];\n\n    while (pos > startpos) {\n      parentpos = pos - 1 >> 1;\n      parent = array[parentpos];\n\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n\n      break;\n    }\n\n    return array[pos] = newitem;\n  };\n\n  _siftup = function (array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = function () {\n    Heap.push = heappush;\n    Heap.pop = heappop;\n    Heap.replace = heapreplace;\n    Heap.pushpop = heappushpop;\n    Heap.heapify = heapify;\n    Heap.updateItem = updateItem;\n    Heap.nlargest = nlargest;\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function (x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function () {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function () {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function (x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function (x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function (x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function () {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function (x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function () {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function () {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function () {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function () {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function () {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n    Heap.prototype.top = Heap.prototype.peek;\n    Heap.prototype.front = Heap.prototype.peek;\n    Heap.prototype.has = Heap.prototype.contains;\n    Heap.prototype.copy = Heap.prototype.clone;\n    return Heap;\n  }();\n\n  (function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function () {\n    return Heap;\n  });\n}).call(this);","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/heap/lib/heap.js"],"names":["Heap","defaultCmp","floor","heapify","heappop","heappush","heappushpop","heapreplace","insort","min","nlargest","nsmallest","updateItem","_siftdown","_siftup","Math","x","y","a","lo","hi","cmp","mid","Error","length","splice","apply","concat","array","item","push","lastelt","returnitem","pop","_ref","i","_i","_j","_len","_ref1","_results","_results1","reverse","pos","indexOf","n","elem","result","slice","sort","los","startpos","newitem","parent","parentpos","childpos","endpos","rightpos","replace","pushpop","nodes","prototype","peek","contains","clear","empty","size","clone","heap","toArray","insert","top","front","has","copy","root","factory","define","amd","exports","module","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}