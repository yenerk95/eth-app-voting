{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar log = require('debug')('ipfs:components:init');\n\nvar PeerId = require('peer-id');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar mergeOptions = require('merge-options');\n\nvar getDefaultConfig = require('../runtime/config-nodejs.js');\n\nvar createRepo = require('../runtime/repo-nodejs');\n\nvar mortice = require('mortice');\n\nvar _require2 = require('ipld-dag-pb'),\n    DAGNode = _require2.DAGNode;\n\nvar UnixFs = require('ipfs-unixfs');\n\nvar multicodec = require('multicodec');\n\nvar _require3 = require('../errors'),\n    AlreadyInitializingError = _require3.AlreadyInitializingError,\n    AlreadyInitializedError = _require3.AlreadyInitializedError,\n    NotStartedError = _require3.NotStartedError,\n    NotEnabledError = _require3.NotEnabledError;\n\nvar BlockService = require('ipfs-block-service');\n\nvar Ipld = require('ipld');\n\nvar getDefaultIpldOptions = require('../runtime/ipld-nodejs');\n\nvar createPreloader = require('../preload');\n\nvar ERR_REPO_NOT_INITIALIZED = require('ipfs-repo').errors.ERR_REPO_NOT_INITIALIZED;\n\nvar IPNS = require('../ipns');\n\nvar OfflineDatastore = require('../ipns/routing/offline-datastore');\n\nvar initAssets = require('../runtime/init-assets-nodejs');\n\nvar PinManager = require('./pin/pin-manager');\n\nvar Components = require('./');\n\nmodule.exports = function (_ref) {\n  var apiManager = _ref.apiManager,\n      print = _ref.print,\n      constructorOptions = _ref.options;\n  return /*#__PURE__*/function () {\n    var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n      var _apiManager$update, cancel, repo, isInitialized, _ref2, peerId, keychain, blockService, ipld, preload, gcLock, dag, object, pinManager, pin, block, add, emptyDirCid, offlineDatastore, ipns, api;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _apiManager$update = apiManager.update({\n                init: function init() {\n                  throw new AlreadyInitializingError();\n                }\n              }), cancel = _apiManager$update.cancel;\n              _context.prev = 1;\n              options = options || {};\n\n              if (typeof constructorOptions.init === 'object') {\n                options = mergeOptions(constructorOptions.init, options);\n              }\n\n              options.pass = options.pass || constructorOptions.pass;\n\n              if (constructorOptions.config) {\n                options.config = mergeOptions(options.config, constructorOptions.config);\n              }\n\n              options.repo = options.repo || constructorOptions.repo;\n              options.repoAutoMigrate = options.repoAutoMigrate || constructorOptions.repoAutoMigrate;\n              repo = typeof options.repo === 'string' || options.repo == null ? createRepo({\n                path: options.repo,\n                autoMigrate: options.repoAutoMigrate\n              }) : options.repo;\n              isInitialized = true;\n\n              if (!repo.closed) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.prev = 11;\n              _context.next = 14;\n              return repo.open();\n\n            case 14:\n              _context.next = 23;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](11);\n\n              if (!(_context.t0.code === ERR_REPO_NOT_INITIALIZED)) {\n                _context.next = 22;\n                break;\n              }\n\n              isInitialized = false;\n              _context.next = 23;\n              break;\n\n            case 22:\n              throw _context.t0;\n\n            case 23:\n              if (!(!isInitialized && options.allowNew === false)) {\n                _context.next = 25;\n                break;\n              }\n\n              throw new NotEnabledError('new repo initialization is not enabled');\n\n            case 25:\n              if (!isInitialized) {\n                _context.next = 31;\n                break;\n              }\n\n              _context.next = 28;\n              return initExistingRepo(repo, options);\n\n            case 28:\n              _context.t1 = _context.sent;\n              _context.next = 34;\n              break;\n\n            case 31:\n              _context.next = 33;\n              return initNewRepo(repo, _objectSpread(_objectSpread({}, options), {}, {\n                print: print\n              }));\n\n            case 33:\n              _context.t1 = _context.sent;\n\n            case 34:\n              _ref2 = _context.t1;\n              peerId = _ref2.peerId;\n              keychain = _ref2.keychain;\n              log('peer created');\n              blockService = new BlockService(repo);\n              ipld = new Ipld(getDefaultIpldOptions(blockService, constructorOptions.ipld, log));\n              preload = createPreloader(constructorOptions.preload);\n              _context.next = 43;\n              return preload.start();\n\n            case 43:\n              // Make sure GC lock is specific to repo, for tests where there are\n              // multiple instances of IPFS\n              gcLock = mortice(repo.path, {\n                singleProcess: constructorOptions.repoOwner !== false\n              });\n              dag = {\n                get: Components.dag.get({\n                  ipld: ipld,\n                  preload: preload\n                }),\n                resolve: Components.dag.resolve({\n                  ipld: ipld,\n                  preload: preload\n                }),\n                tree: Components.dag.tree({\n                  ipld: ipld,\n                  preload: preload\n                })\n              };\n              object = {\n                data: Components.object.data({\n                  ipld: ipld,\n                  preload: preload\n                }),\n                get: Components.object.get({\n                  ipld: ipld,\n                  preload: preload\n                }),\n                links: Components.object.links({\n                  dag: dag\n                }),\n                new: Components.object.new({\n                  ipld: ipld,\n                  preload: preload\n                }),\n                patch: {\n                  addLink: Components.object.patch.addLink({\n                    ipld: ipld,\n                    gcLock: gcLock,\n                    preload: preload\n                  }),\n                  appendData: Components.object.patch.appendData({\n                    ipld: ipld,\n                    gcLock: gcLock,\n                    preload: preload\n                  }),\n                  rmLink: Components.object.patch.rmLink({\n                    ipld: ipld,\n                    gcLock: gcLock,\n                    preload: preload\n                  }),\n                  setData: Components.object.patch.setData({\n                    ipld: ipld,\n                    gcLock: gcLock,\n                    preload: preload\n                  })\n                },\n                put: Components.object.put({\n                  ipld: ipld,\n                  gcLock: gcLock,\n                  preload: preload\n                }),\n                stat: Components.object.stat({\n                  ipld: ipld,\n                  preload: preload\n                })\n              };\n              pinManager = new PinManager(repo, dag);\n              _context.next = 49;\n              return pinManager.load();\n\n            case 49:\n              pin = {\n                add: Components.pin.add({\n                  pinManager: pinManager,\n                  gcLock: gcLock,\n                  dag: dag\n                }),\n                ls: Components.pin.ls({\n                  pinManager: pinManager,\n                  dag: dag\n                }),\n                rm: Components.pin.rm({\n                  pinManager: pinManager,\n                  gcLock: gcLock,\n                  dag: dag\n                })\n              }; // FIXME: resolve this circular dependency\n\n              dag.put = Components.dag.put({\n                ipld: ipld,\n                pin: pin,\n                gcLock: gcLock,\n                preload: preload\n              });\n              block = {\n                get: Components.block.get({\n                  blockService: blockService,\n                  preload: preload\n                }),\n                put: Components.block.put({\n                  blockService: blockService,\n                  pin: pin,\n                  gcLock: gcLock,\n                  preload: preload\n                }),\n                rm: Components.block.rm({\n                  blockService: blockService,\n                  gcLock: gcLock,\n                  pinManager: pinManager\n                }),\n                stat: Components.block.stat({\n                  blockService: blockService,\n                  preload: preload\n                })\n              };\n              add = Components.add({\n                block: block,\n                preload: preload,\n                pin: pin,\n                gcLock: gcLock,\n                options: constructorOptions\n              });\n\n              if (!(!isInitialized && !options.emptyRepo)) {\n                _context.next = 65;\n                break;\n              }\n\n              _context.next = 56;\n              return addEmptyDir({\n                dag: dag\n              });\n\n            case 56:\n              emptyDirCid = _context.sent;\n              log('adding default assets');\n              _context.next = 60;\n              return initAssets({\n                add: add,\n                print: print\n              });\n\n            case 60:\n              log('initializing IPNS keyspace'); // Setup the offline routing for IPNS.\n              // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n\n              offlineDatastore = new OfflineDatastore(repo);\n              ipns = new IPNS(offlineDatastore, repo.datastore, peerId, keychain, {\n                pass: options.pass\n              });\n              _context.next = 65;\n              return ipns.initializeKeyspace(peerId.privKey, emptyDirCid.toString());\n\n            case 65:\n              api = createApi({\n                add: add,\n                apiManager: apiManager,\n                constructorOptions: constructorOptions,\n                block: block,\n                blockService: blockService,\n                dag: dag,\n                gcLock: gcLock,\n                initOptions: options,\n                ipld: ipld,\n                keychain: keychain,\n                object: object,\n                peerId: peerId,\n                pin: pin,\n                pinManager: pinManager,\n                preload: preload,\n                print: print,\n                repo: repo\n              });\n              apiManager.update(api, function () {\n                throw new NotStartedError();\n              });\n              _context.next = 73;\n              break;\n\n            case 69:\n              _context.prev = 69;\n              _context.t2 = _context[\"catch\"](1);\n              cancel();\n              throw _context.t2;\n\n            case 73:\n              return _context.abrupt(\"return\", apiManager.api);\n\n            case 74:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 69], [11, 16]]);\n    }));\n\n    function init(_x) {\n      return _init.apply(this, arguments);\n    }\n\n    return init;\n  }();\n};\n\nfunction initNewRepo(_x2, _x3) {\n  return _initNewRepo.apply(this, arguments);\n}\n\nfunction _initNewRepo() {\n  _initNewRepo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(repo, _ref3) {\n    var privateKey, emptyRepo, bits, profiles, config, pass, print, exists, peerId, libp2p;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            privateKey = _ref3.privateKey, emptyRepo = _ref3.emptyRepo, bits = _ref3.bits, profiles = _ref3.profiles, config = _ref3.config, pass = _ref3.pass, print = _ref3.print;\n            emptyRepo = emptyRepo || false;\n            bits = bits == null ? 2048 : Number(bits);\n            config = mergeOptions(applyProfiles(profiles, getDefaultConfig()), config); // Verify repo does not exist yet\n\n            _context4.next = 6;\n            return repo.exists();\n\n          case 6:\n            exists = _context4.sent;\n            log('repo exists?', exists);\n\n            if (!(exists === true)) {\n              _context4.next = 10;\n              break;\n            }\n\n            throw new Error('repo already exists');\n\n          case 10:\n            _context4.next = 12;\n            return createPeerId({\n              privateKey: privateKey,\n              bits: bits,\n              print: print\n            });\n\n          case 12:\n            peerId = _context4.sent;\n            log('identity generated');\n            config.Identity = {\n              PeerID: peerId.toB58String(),\n              PrivKey: peerId.privKey.bytes.toString('base64')\n            };\n            privateKey = peerId.privKey;\n            log('peer identity: %s', config.Identity.PeerID);\n            _context4.next = 19;\n            return repo.init(config);\n\n          case 19:\n            _context4.next = 21;\n            return repo.open();\n\n          case 21:\n            log('repo opened'); // Create libp2p for Keychain creation\n\n            libp2p = Components.libp2p({\n              peerId: peerId,\n              repo: repo,\n              config: config,\n              keychainConfig: {\n                pass: pass\n              }\n            });\n\n            if (!(libp2p.keychain && libp2p.keychain.opts)) {\n              _context4.next = 28;\n              break;\n            }\n\n            _context4.next = 26;\n            return libp2p.loadKeychain();\n\n          case 26:\n            _context4.next = 28;\n            return repo.config.set('Keychain', {\n              dek: libp2p.keychain.opts.dek\n            });\n\n          case 28:\n            return _context4.abrupt(\"return\", {\n              peerId: peerId,\n              keychain: libp2p.keychain\n            });\n\n          case 29:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _initNewRepo.apply(this, arguments);\n}\n\nfunction initExistingRepo(_x4, _x5) {\n  return _initExistingRepo.apply(this, arguments);\n}\n\nfunction _initExistingRepo() {\n  _initExistingRepo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(repo, _ref4) {\n    var newConfig, profiles, pass, config, peerId, libp2p;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            newConfig = _ref4.config, profiles = _ref4.profiles, pass = _ref4.pass;\n            _context5.next = 3;\n            return repo.config.getAll();\n\n          case 3:\n            config = _context5.sent;\n\n            if (!(newConfig || profiles)) {\n              _context5.next = 9;\n              break;\n            }\n\n            if (profiles) {\n              config = applyProfiles(profiles, config);\n            }\n\n            if (newConfig) {\n              config = mergeOptions(config, newConfig);\n            }\n\n            _context5.next = 9;\n            return repo.config.set(config);\n\n          case 9:\n            _context5.next = 11;\n            return PeerId.createFromPrivKey(config.Identity.PrivKey);\n\n          case 11:\n            peerId = _context5.sent;\n            libp2p = Components.libp2p({\n              peerId: peerId,\n              repo: repo,\n              config: config,\n              keychainConfig: _objectSpread({\n                pass: pass\n              }, config.Keychain)\n            });\n            _context5.t0 = libp2p.keychain;\n\n            if (!_context5.t0) {\n              _context5.next = 17;\n              break;\n            }\n\n            _context5.next = 17;\n            return libp2p.loadKeychain();\n\n          case 17:\n            return _context5.abrupt(\"return\", {\n              peerId: peerId,\n              keychain: libp2p.keychain\n            });\n\n          case 18:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _initExistingRepo.apply(this, arguments);\n}\n\nfunction createPeerId(_ref5) {\n  var privateKey = _ref5.privateKey,\n      bits = _ref5.bits,\n      print = _ref5.print;\n\n  if (privateKey) {\n    log('using user-supplied private-key');\n    return typeof privateKey === 'object' ? privateKey : PeerId.createFromPrivKey(Buffer.from(privateKey, 'base64'));\n  } else {\n    // Generate peer identity keypair + transform to desired format + add to config.\n    print('generating %s-bit RSA keypair...', bits);\n    return PeerId.create({\n      bits: bits\n    });\n  }\n}\n\nfunction addEmptyDir(_ref6) {\n  var dag = _ref6.dag;\n  var node = new DAGNode(new UnixFs('directory').marshal());\n  return dag.put(node, {\n    version: 0,\n    format: multicodec.DAG_PB,\n    hashAlg: multicodec.SHA2_256,\n    preload: false\n  });\n} // Apply profiles (e.g. ['server', 'lowpower']) to config\n\n\nfunction applyProfiles(profiles, config) {\n  return (profiles || []).reduce(function (config, name) {\n    var profile = require('./config').profiles[name];\n\n    if (!profile) {\n      throw new Error(\"Could not find profile with name '\".concat(name, \"'\"));\n    }\n\n    log('applying profile %s', name);\n    return profile.transform(config);\n  }, config);\n}\n\nfunction createApi(_ref7) {\n  var add = _ref7.add,\n      apiManager = _ref7.apiManager,\n      constructorOptions = _ref7.constructorOptions,\n      block = _ref7.block,\n      blockService = _ref7.blockService,\n      dag = _ref7.dag,\n      gcLock = _ref7.gcLock,\n      initOptions = _ref7.initOptions,\n      ipld = _ref7.ipld,\n      keychain = _ref7.keychain,\n      object = _ref7.object,\n      peerId = _ref7.peerId,\n      pin = _ref7.pin,\n      pinManager = _ref7.pinManager,\n      preload = _ref7.preload,\n      print = _ref7.print,\n      repo = _ref7.repo;\n\n  var notStarted = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              throw new NotStartedError();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function notStarted() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var resolve = Components.resolve({\n    ipld: ipld\n  });\n  var refs = Components.refs({\n    ipld: ipld,\n    resolve: resolve,\n    preload: preload\n  });\n  refs.local = Components.refs.local({\n    repo: repo\n  });\n  var api = {\n    add: add,\n    bitswap: {\n      stat: notStarted,\n      unwant: notStarted,\n      wantlist: notStarted\n    },\n    bootstrap: {\n      add: Components.bootstrap.add({\n        repo: repo\n      }),\n      list: Components.bootstrap.list({\n        repo: repo\n      }),\n      rm: Components.bootstrap.rm({\n        repo: repo\n      })\n    },\n    block: block,\n    cat: Components.cat({\n      ipld: ipld,\n      preload: preload\n    }),\n    config: Components.config({\n      repo: repo\n    }),\n    dag: dag,\n    dns: Components.dns(),\n    files: Components.files({\n      ipld: ipld,\n      block: block,\n      blockService: blockService,\n      repo: repo,\n      preload: preload,\n      options: constructorOptions\n    }),\n    get: Components.get({\n      ipld: ipld,\n      preload: preload\n    }),\n    id: Components.id({\n      peerId: peerId\n    }),\n    init: function () {\n      var _init2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throw new AlreadyInitializedError();\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function init() {\n        return _init2.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    // eslint-disable-line require-await\n    isOnline: Components.isOnline({}),\n    key: {\n      export: Components.key.export({\n        keychain: keychain\n      }),\n      gen: Components.key.gen({\n        keychain: keychain\n      }),\n      import: Components.key.import({\n        keychain: keychain\n      }),\n      info: Components.key.info({\n        keychain: keychain\n      }),\n      list: Components.key.list({\n        keychain: keychain\n      }),\n      rename: Components.key.rename({\n        keychain: keychain\n      }),\n      rm: Components.key.rm({\n        keychain: keychain\n      })\n    },\n    ls: Components.ls({\n      ipld: ipld,\n      preload: preload\n    }),\n    object: object,\n    pin: pin,\n    refs: refs,\n    repo: {\n      gc: Components.repo.gc({\n        gcLock: gcLock,\n        pin: pin,\n        pinManager: pinManager,\n        refs: refs,\n        repo: repo\n      }),\n      stat: Components.repo.stat({\n        repo: repo\n      }),\n      version: Components.repo.version({\n        repo: repo\n      })\n    },\n    resolve: resolve,\n    start: Components.start({\n      apiManager: apiManager,\n      options: constructorOptions,\n      blockService: blockService,\n      gcLock: gcLock,\n      initOptions: initOptions,\n      ipld: ipld,\n      keychain: keychain,\n      peerId: peerId,\n      pinManager: pinManager,\n      preload: preload,\n      print: print,\n      repo: repo\n    }),\n    stats: {\n      bitswap: notStarted,\n      bw: notStarted,\n      repo: Components.repo.stat({\n        repo: repo\n      })\n    },\n    stop: function stop() {},\n    swarm: {\n      addrs: notStarted,\n      connect: notStarted,\n      disconnect: notStarted,\n      localAddrs: Components.swarm.localAddrs({\n        multiaddrs: []\n      }),\n      peers: notStarted\n    },\n    version: Components.version({\n      repo: repo\n    })\n  };\n  return api;\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/init.js"],"names":["log","require","PeerId","Buffer","mergeOptions","getDefaultConfig","createRepo","mortice","DAGNode","UnixFs","multicodec","AlreadyInitializingError","AlreadyInitializedError","NotStartedError","NotEnabledError","BlockService","Ipld","getDefaultIpldOptions","createPreloader","ERR_REPO_NOT_INITIALIZED","errors","IPNS","OfflineDatastore","initAssets","PinManager","Components","module","exports","apiManager","print","constructorOptions","options","update","init","cancel","pass","config","repo","repoAutoMigrate","path","autoMigrate","isInitialized","closed","open","code","allowNew","initExistingRepo","initNewRepo","peerId","keychain","blockService","ipld","preload","start","gcLock","singleProcess","repoOwner","dag","get","resolve","tree","object","data","links","new","patch","addLink","appendData","rmLink","setData","put","stat","pinManager","load","pin","add","ls","rm","block","emptyRepo","addEmptyDir","emptyDirCid","offlineDatastore","ipns","datastore","initializeKeyspace","privKey","toString","api","createApi","initOptions","privateKey","bits","profiles","Number","applyProfiles","exists","Error","createPeerId","Identity","PeerID","toB58String","PrivKey","bytes","libp2p","keychainConfig","opts","loadKeychain","set","dek","newConfig","getAll","createFromPrivKey","Keychain","from","create","node","marshal","version","format","DAG_PB","hashAlg","SHA2_256","reduce","name","profile","transform","notStarted","refs","local","bitswap","unwant","wantlist","bootstrap","list","cat","dns","files","id","isOnline","key","export","gen","import","info","rename","gc","stats","bw","stop","swarm","addrs","connect","disconnect","localAddrs","multiaddrs","peers"],"mappings":"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","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:components:init')\nconst PeerId = require('peer-id')\nconst { Buffer } = require('buffer')\n\nconst mergeOptions = require('merge-options')\nconst getDefaultConfig = require('../runtime/config-nodejs.js')\nconst createRepo = require('../runtime/repo-nodejs')\nconst mortice = require('mortice')\nconst { DAGNode } = require('ipld-dag-pb')\nconst UnixFs = require('ipfs-unixfs')\nconst multicodec = require('multicodec')\nconst {\n  AlreadyInitializingError,\n  AlreadyInitializedError,\n  NotStartedError,\n  NotEnabledError\n} = require('../errors')\nconst BlockService = require('ipfs-block-service')\nconst Ipld = require('ipld')\nconst getDefaultIpldOptions = require('../runtime/ipld-nodejs')\nconst createPreloader = require('../preload')\nconst { ERR_REPO_NOT_INITIALIZED } = require('ipfs-repo').errors\nconst IPNS = require('../ipns')\nconst OfflineDatastore = require('../ipns/routing/offline-datastore')\nconst initAssets = require('../runtime/init-assets-nodejs')\nconst PinManager = require('./pin/pin-manager')\nconst Components = require('./')\n\nmodule.exports = ({\n  apiManager,\n  print,\n  options: constructorOptions\n}) => async function init (options) {\n  const { cancel } = apiManager.update({ init: () => { throw new AlreadyInitializingError() } })\n\n  try {\n    options = options || {}\n\n    if (typeof constructorOptions.init === 'object') {\n      options = mergeOptions(constructorOptions.init, options)\n    }\n\n    options.pass = options.pass || constructorOptions.pass\n\n    if (constructorOptions.config) {\n      options.config = mergeOptions(options.config, constructorOptions.config)\n    }\n\n    options.repo = options.repo || constructorOptions.repo\n    options.repoAutoMigrate = options.repoAutoMigrate || constructorOptions.repoAutoMigrate\n\n    const repo = typeof options.repo === 'string' || options.repo == null\n      ? createRepo({ path: options.repo, autoMigrate: options.repoAutoMigrate })\n      : options.repo\n\n    let isInitialized = true\n\n    if (repo.closed) {\n      try {\n        await repo.open()\n      } catch (err) {\n        if (err.code === ERR_REPO_NOT_INITIALIZED) {\n          isInitialized = false\n        } else {\n          throw err\n        }\n      }\n    }\n\n    if (!isInitialized && options.allowNew === false) {\n      throw new NotEnabledError('new repo initialization is not enabled')\n    }\n\n    const { peerId, keychain } = isInitialized\n      ? await initExistingRepo(repo, options)\n      : await initNewRepo(repo, { ...options, print })\n\n    log('peer created')\n\n    const blockService = new BlockService(repo)\n    const ipld = new Ipld(getDefaultIpldOptions(blockService, constructorOptions.ipld, log))\n\n    const preload = createPreloader(constructorOptions.preload)\n    await preload.start()\n\n    // Make sure GC lock is specific to repo, for tests where there are\n    // multiple instances of IPFS\n    const gcLock = mortice(repo.path, { singleProcess: constructorOptions.repoOwner !== false })\n    const dag = {\n      get: Components.dag.get({ ipld, preload }),\n      resolve: Components.dag.resolve({ ipld, preload }),\n      tree: Components.dag.tree({ ipld, preload })\n    }\n    const object = {\n      data: Components.object.data({ ipld, preload }),\n      get: Components.object.get({ ipld, preload }),\n      links: Components.object.links({ dag }),\n      new: Components.object.new({ ipld, preload }),\n      patch: {\n        addLink: Components.object.patch.addLink({ ipld, gcLock, preload }),\n        appendData: Components.object.patch.appendData({ ipld, gcLock, preload }),\n        rmLink: Components.object.patch.rmLink({ ipld, gcLock, preload }),\n        setData: Components.object.patch.setData({ ipld, gcLock, preload })\n      },\n      put: Components.object.put({ ipld, gcLock, preload }),\n      stat: Components.object.stat({ ipld, preload })\n    }\n\n    const pinManager = new PinManager(repo, dag)\n    await pinManager.load()\n\n    const pin = {\n      add: Components.pin.add({ pinManager, gcLock, dag }),\n      ls: Components.pin.ls({ pinManager, dag }),\n      rm: Components.pin.rm({ pinManager, gcLock, dag })\n    }\n\n    // FIXME: resolve this circular dependency\n    dag.put = Components.dag.put({ ipld, pin, gcLock, preload })\n\n    const block = {\n      get: Components.block.get({ blockService, preload }),\n      put: Components.block.put({ blockService, pin, gcLock, preload }),\n      rm: Components.block.rm({ blockService, gcLock, pinManager }),\n      stat: Components.block.stat({ blockService, preload })\n    }\n\n    const add = Components.add({ block, preload, pin, gcLock, options: constructorOptions })\n\n    if (!isInitialized && !options.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const emptyDirCid = await addEmptyDir({ dag })\n\n      log('adding default assets')\n      await initAssets({ add, print })\n\n      log('initializing IPNS keyspace')\n      // Setup the offline routing for IPNS.\n      // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n      const offlineDatastore = new OfflineDatastore(repo)\n      const ipns = new IPNS(offlineDatastore, repo.datastore, peerId, keychain, { pass: options.pass })\n      await ipns.initializeKeyspace(peerId.privKey, emptyDirCid.toString())\n    }\n\n    const api = createApi({\n      add,\n      apiManager,\n      constructorOptions,\n      block,\n      blockService,\n      dag,\n      gcLock,\n      initOptions: options,\n      ipld,\n      keychain,\n      object,\n      peerId,\n      pin,\n      pinManager,\n      preload,\n      print,\n      repo\n    })\n\n    apiManager.update(api, () => { throw new NotStartedError() })\n  } catch (err) {\n    cancel()\n    throw err\n  }\n\n  return apiManager.api\n}\n\nasync function initNewRepo (repo, { privateKey, emptyRepo, bits, profiles, config, pass, print }) {\n  emptyRepo = emptyRepo || false\n  bits = bits == null ? 2048 : Number(bits)\n\n  config = mergeOptions(applyProfiles(profiles, getDefaultConfig()), config)\n\n  // Verify repo does not exist yet\n  const exists = await repo.exists()\n  log('repo exists?', exists)\n\n  if (exists === true) {\n    throw new Error('repo already exists')\n  }\n\n  const peerId = await createPeerId({ privateKey, bits, print })\n\n  log('identity generated')\n\n  config.Identity = {\n    PeerID: peerId.toB58String(),\n    PrivKey: peerId.privKey.bytes.toString('base64')\n  }\n\n  privateKey = peerId.privKey\n\n  log('peer identity: %s', config.Identity.PeerID)\n\n  await repo.init(config)\n  await repo.open()\n\n  log('repo opened')\n\n  // Create libp2p for Keychain creation\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass\n    }\n  })\n\n  if (libp2p.keychain && libp2p.keychain.opts) {\n    await libp2p.loadKeychain()\n\n    await repo.config.set('Keychain', {\n      dek: libp2p.keychain.opts.dek\n    })\n  }\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\nasync function initExistingRepo (repo, { config: newConfig, profiles, pass }) {\n  let config = await repo.config.getAll()\n\n  if (newConfig || profiles) {\n    if (profiles) {\n      config = applyProfiles(profiles, config)\n    }\n    if (newConfig) {\n      config = mergeOptions(config, newConfig)\n    }\n    await repo.config.set(config)\n  }\n\n  const peerId = await PeerId.createFromPrivKey(config.Identity.PrivKey)\n\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass,\n      ...config.Keychain\n    }\n  })\n\n  libp2p.keychain && await libp2p.loadKeychain()\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\nfunction createPeerId ({ privateKey, bits, print }) {\n  if (privateKey) {\n    log('using user-supplied private-key')\n    return typeof privateKey === 'object'\n      ? privateKey\n      : PeerId.createFromPrivKey(Buffer.from(privateKey, 'base64'))\n  } else {\n    // Generate peer identity keypair + transform to desired format + add to config.\n    print('generating %s-bit RSA keypair...', bits)\n    return PeerId.create({ bits })\n  }\n}\n\nfunction addEmptyDir ({ dag }) {\n  const node = new DAGNode(new UnixFs('directory').marshal())\n  return dag.put(node, {\n    version: 0,\n    format: multicodec.DAG_PB,\n    hashAlg: multicodec.SHA2_256,\n    preload: false\n  })\n}\n\n// Apply profiles (e.g. ['server', 'lowpower']) to config\nfunction applyProfiles (profiles, config) {\n  return (profiles || []).reduce((config, name) => {\n    const profile = require('./config').profiles[name]\n    if (!profile) {\n      throw new Error(`Could not find profile with name '${name}'`)\n    }\n    log('applying profile %s', name)\n    return profile.transform(config)\n  }, config)\n}\n\nfunction createApi ({\n  add,\n  apiManager,\n  constructorOptions,\n  block,\n  blockService,\n  dag,\n  gcLock,\n  initOptions,\n  ipld,\n  keychain,\n  object,\n  peerId,\n  pin,\n  pinManager,\n  preload,\n  print,\n  repo\n}) {\n  const notStarted = async () => { // eslint-disable-line require-await\n    throw new NotStartedError()\n  }\n\n  const resolve = Components.resolve({ ipld })\n  const refs = Components.refs({ ipld, resolve, preload })\n  refs.local = Components.refs.local({ repo })\n\n  const api = {\n    add,\n    bitswap: {\n      stat: notStarted,\n      unwant: notStarted,\n      wantlist: notStarted\n    },\n    bootstrap: {\n      add: Components.bootstrap.add({ repo }),\n      list: Components.bootstrap.list({ repo }),\n      rm: Components.bootstrap.rm({ repo })\n    },\n    block,\n    cat: Components.cat({ ipld, preload }),\n    config: Components.config({ repo }),\n    dag,\n    dns: Components.dns(),\n    files: Components.files({ ipld, block, blockService, repo, preload, options: constructorOptions }),\n    get: Components.get({ ipld, preload }),\n    id: Components.id({ peerId }),\n    init: async () => { throw new AlreadyInitializedError() }, // eslint-disable-line require-await\n    isOnline: Components.isOnline({}),\n    key: {\n      export: Components.key.export({ keychain }),\n      gen: Components.key.gen({ keychain }),\n      import: Components.key.import({ keychain }),\n      info: Components.key.info({ keychain }),\n      list: Components.key.list({ keychain }),\n      rename: Components.key.rename({ keychain }),\n      rm: Components.key.rm({ keychain })\n    },\n    ls: Components.ls({ ipld, preload }),\n    object,\n    pin,\n    refs,\n    repo: {\n      gc: Components.repo.gc({ gcLock, pin, pinManager, refs, repo }),\n      stat: Components.repo.stat({ repo }),\n      version: Components.repo.version({ repo })\n    },\n    resolve,\n    start: Components.start({\n      apiManager,\n      options: constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      keychain,\n      peerId,\n      pinManager,\n      preload,\n      print,\n      repo\n    }),\n    stats: {\n      bitswap: notStarted,\n      bw: notStarted,\n      repo: Components.repo.stat({ repo })\n    },\n    stop: () => {},\n    swarm: {\n      addrs: notStarted,\n      connect: notStarted,\n      disconnect: notStarted,\n      localAddrs: Components.swarm.localAddrs({ multiaddrs: [] }),\n      peers: notStarted\n    },\n    version: Components.version({ repo })\n  }\n\n  return api\n}\n"]},"metadata":{},"sourceType":"script"}