{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar node = require('./node');\n\nvar browser = require('./browser');\n\nvar _require = require('p-queue'),\n    Queue = _require.default;\n\nvar _require2 = require('promise-timeout'),\n    timeout = _require2.timeout;\n\nvar observe = require('observable-webworkers');\n\nvar mutexes = {};\nvar implementation;\n\nfunction createReleaseable(queue, options) {\n  var res;\n  var p = new Promise(function (resolve) {\n    res = resolve;\n  });\n  queue.add(function () {\n    return timeout(function () {\n      return new Promise(function (resolve) {\n        res(function () {\n          resolve();\n        });\n      });\n    }(), options.timeout);\n  });\n  return p;\n}\n\nvar createMutex = function createMutex(name, options) {\n  if (implementation.isWorker) {\n    return {\n      readLock: implementation.readLock(name, options),\n      writeLock: implementation.writeLock(name, options)\n    };\n  }\n\n  var masterQueue = new Queue({\n    concurrency: 1\n  });\n  var readQueue = null;\n  return {\n    readLock: function readLock() {\n      // If there's already a read queue, just add the task to it\n      if (readQueue) {\n        return createReleaseable(readQueue, options);\n      } // Create a new read queue\n\n\n      readQueue = new Queue({\n        concurrency: options.concurrency,\n        autoStart: false\n      });\n      var localReadQueue = readQueue; // Add the task to the read queue\n\n      var readPromise = createReleaseable(readQueue, options);\n      masterQueue.add(function () {\n        // Start the task only once the master queue has completed processing\n        // any previous tasks\n        localReadQueue.start(); // Once all the tasks in the read queue have completed, remove it so\n        // that the next read lock will occur after any write locks that were\n        // started in the interim\n\n        return localReadQueue.onIdle().then(function () {\n          if (readQueue === localReadQueue) {\n            readQueue = null;\n          }\n        });\n      });\n      return readPromise;\n    },\n    writeLock: function writeLock() {\n      // Remove the read queue reference, so that any later read locks will be\n      // added to a new queue that starts after this write lock has been\n      // released\n      readQueue = null;\n      return createReleaseable(masterQueue, options);\n    }\n  };\n};\n\nvar defaultOptions = {\n  concurrency: Infinity,\n  timeout: 84600000,\n  global: global,\n  singleProcess: false\n};\n\nmodule.exports = function (name, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof name === 'object') {\n    options = name;\n    name = 'lock';\n  }\n\n  if (!name) {\n    name = 'lock';\n  }\n\n  options = Object.assign({}, defaultOptions, options);\n\n  if (!implementation) {\n    implementation = node(options) || browser(options);\n\n    if (!implementation.isWorker) {\n      // we are master, set up worker requests\n      implementation.on('requestReadLock', function (name, fn) {\n        if (!mutexes[name]) {\n          return;\n        }\n\n        mutexes[name].readLock().then(function (release) {\n          return fn().finally(function () {\n            return release();\n          });\n        });\n      });\n      implementation.on('requestWriteLock', /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, fn) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (mutexes[name]) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 2:\n                  mutexes[name].writeLock().then(function (release) {\n                    return fn().finally(function () {\n                      return release();\n                    });\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }\n\n  if (!mutexes[name]) {\n    mutexes[name] = createMutex(name, options);\n  }\n\n  return mutexes[name];\n};\n\nmodule.exports.Worker = function (script, Impl) {\n  Impl = Impl || global.Worker;\n  var worker;\n\n  try {\n    worker = new Impl(script);\n  } catch (error) {\n    if (error.message.includes('not a constructor')) {\n      worker = Impl(script);\n    }\n  }\n\n  if (!worker) {\n    throw new Error('Could not create Worker from', Impl);\n  }\n\n  observe(worker);\n  return worker;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/mortice/lib/index.js"],"names":["node","require","browser","Queue","default","timeout","observe","mutexes","implementation","createReleaseable","queue","options","res","p","Promise","resolve","add","createMutex","name","isWorker","readLock","writeLock","masterQueue","concurrency","readQueue","autoStart","localReadQueue","readPromise","start","onIdle","then","defaultOptions","Infinity","global","singleProcess","module","exports","Object","assign","on","fn","release","finally","Worker","script","Impl","worker","error","message","includes","Error"],"mappings":"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","sourcesContent":["const node = require('./node')\nconst browser = require('./browser')\nconst { default: Queue } = require('p-queue')\nconst { timeout } = require('promise-timeout')\nconst observe = require('observable-webworkers')\n\nconst mutexes = {}\nlet implementation\n\nfunction createReleaseable (queue, options) {\n  let res\n\n  const p = new Promise((resolve) => {\n    res = resolve\n  })\n\n  queue.add(() => timeout((() => {\n    return new Promise((resolve) => {\n      res(() => {\n        resolve()\n      })\n    })\n  })(), options.timeout))\n\n  return p\n}\n\nconst createMutex = (name, options) => {\n  if (implementation.isWorker) {\n    return {\n      readLock: implementation.readLock(name, options),\n      writeLock: implementation.writeLock(name, options)\n    }\n  }\n\n  const masterQueue = new Queue({ concurrency: 1 })\n  let readQueue = null\n\n  return {\n    readLock: () => {\n      // If there's already a read queue, just add the task to it\n      if (readQueue) {\n        return createReleaseable(readQueue, options)\n      }\n\n      // Create a new read queue\n      readQueue = new Queue({\n        concurrency: options.concurrency,\n        autoStart: false\n      })\n      const localReadQueue = readQueue\n\n      // Add the task to the read queue\n      const readPromise = createReleaseable(readQueue, options)\n\n      masterQueue.add(() => {\n        // Start the task only once the master queue has completed processing\n        // any previous tasks\n        localReadQueue.start()\n\n        // Once all the tasks in the read queue have completed, remove it so\n        // that the next read lock will occur after any write locks that were\n        // started in the interim\n        return localReadQueue.onIdle()\n          .then(() => {\n            if (readQueue === localReadQueue) {\n              readQueue = null\n            }\n          })\n      })\n\n      return readPromise\n    },\n    writeLock: () => {\n      // Remove the read queue reference, so that any later read locks will be\n      // added to a new queue that starts after this write lock has been\n      // released\n      readQueue = null\n\n      return createReleaseable(masterQueue, options)\n    }\n  }\n}\n\nconst defaultOptions = {\n  concurrency: Infinity,\n  timeout: 84600000,\n  global: global,\n  singleProcess: false\n}\n\nmodule.exports = (name, options) => {\n  if (!options) {\n    options = {}\n  }\n\n  if (typeof name === 'object') {\n    options = name\n    name = 'lock'\n  }\n\n  if (!name) {\n    name = 'lock'\n  }\n\n  options = Object.assign({}, defaultOptions, options)\n\n  if (!implementation) {\n    implementation = node(options) || browser(options)\n\n    if (!implementation.isWorker) {\n      // we are master, set up worker requests\n      implementation.on('requestReadLock', (name, fn) => {\n        if (!mutexes[name]) {\n          return\n        }\n\n        mutexes[name].readLock()\n          .then(release => fn().finally(() => release()))\n      })\n\n      implementation.on('requestWriteLock', async (name, fn) => {\n        if (!mutexes[name]) {\n          return\n        }\n\n        mutexes[name].writeLock()\n          .then(release => fn().finally(() => release()))\n      })\n    }\n  }\n\n  if (!mutexes[name]) {\n    mutexes[name] = createMutex(name, options)\n  }\n\n  return mutexes[name]\n}\n\nmodule.exports.Worker = function (script, Impl) {\n  Impl = Impl || global.Worker\n  let worker\n\n  try {\n    worker = new Impl(script)\n  } catch (error) {\n    if (error.message.includes('not a constructor')) {\n      worker = Impl(script)\n    }\n  }\n\n  if (!worker) {\n    throw new Error('Could not create Worker from', Impl)\n  }\n\n  observe(worker)\n\n  return worker\n}\n"]},"metadata":{},"sourceType":"script"}