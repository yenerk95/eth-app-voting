{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar batch = require('it-batch');\n\nfunction balanced(_x, _x2, _x3) {\n  return _balanced.apply(this, arguments);\n}\n\nfunction _balanced() {\n  _balanced = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, reduce, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return reduceToParents(source, reduce, options);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _balanced.apply(this, arguments);\n}\n\nfunction reduceToParents(_x4, _x5, _x6) {\n  return _reduceToParents.apply(this, arguments);\n}\n\nfunction _reduceToParents() {\n  _reduceToParents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(source, reduce, options) {\n    var roots, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunked;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            roots = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(batch(source, options.maxChildrenPerNode));\n\n          case 5:\n            _context2.next = 7;\n            return _iterator.next();\n\n          case 7:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 11;\n            return _step.value;\n\n          case 11:\n            _value = _context2.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context2.next = 22;\n              break;\n            }\n\n            chunked = _value;\n            _context2.t0 = roots;\n            _context2.next = 17;\n            return reduce(chunked);\n\n          case 17:\n            _context2.t1 = _context2.sent;\n\n            _context2.t0.push.call(_context2.t0, _context2.t1);\n\n          case 19:\n            _iteratorNormalCompletion = true;\n            _context2.next = 5;\n            break;\n\n          case 22:\n            _context2.next = 28;\n            break;\n\n          case 24:\n            _context2.prev = 24;\n            _context2.t2 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t2;\n\n          case 28:\n            _context2.prev = 28;\n            _context2.prev = 29;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context2.next = 33;\n              break;\n            }\n\n            _context2.next = 33;\n            return _iterator.return();\n\n          case 33:\n            _context2.prev = 33;\n\n            if (!_didIteratorError) {\n              _context2.next = 36;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 36:\n            return _context2.finish(33);\n\n          case 37:\n            return _context2.finish(28);\n\n          case 38:\n            if (!(roots.length > 1)) {\n              _context2.next = 40;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", reduceToParents(roots, reduce, options));\n\n          case 40:\n            return _context2.abrupt(\"return\", roots[0]);\n\n          case 41:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 24, 28, 38], [29,, 33, 37]]);\n  }));\n  return _reduceToParents.apply(this, arguments);\n}\n\nmodule.exports = balanced;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/dag-builder/file/balanced.js"],"names":["batch","require","balanced","source","reduce","options","reduceToParents","roots","maxChildrenPerNode","chunked","push","length","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;;SAEiBC,Q;;;;;yEAAjB,iBAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,mBAAYC,eAAe,CAACH,MAAD,EAASC,MAAT,EAAiBC,OAAjB,CAA3B;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAIeC,e;;;;;8EAAf,kBAAgCH,MAAhC,EAAwCC,MAAxC,EAAgDC,OAAhD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQE,YAAAA,KADR,GACgB,EADhB;AAAA;AAAA;AAAA;AAAA,uCAG8BP,KAAK,CAACG,MAAD,EAASE,OAAO,CAACG,kBAAjB,CAHnC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGmBC,YAAAA,OAHnB;AAAA,2BAIIF,KAJJ;AAAA;AAAA,mBAIqBH,MAAM,CAACK,OAAD,CAJ3B;;AAAA;AAAA;;AAAA,yBAIUC,IAJV;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,kBAOMH,KAAK,CAACI,MAAN,GAAe,CAPrB;AAAA;AAAA;AAAA;;AAAA,8CAQWL,eAAe,CAACC,KAAD,EAAQH,MAAR,EAAgBC,OAAhB,CAR1B;;AAAA;AAAA,8CAWSE,KAAK,CAAC,CAAD,CAXd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcAK,MAAM,CAACC,OAAP,GAAiBX,QAAjB","sourcesContent":["'use strict'\n\nconst batch = require('it-batch')\n\nasync function * balanced (source, reduce, options) {\n  yield await reduceToParents(source, reduce, options)\n}\n\nasync function reduceToParents (source, reduce, options) {\n  const roots = []\n\n  for await (const chunked of batch(source, options.maxChildrenPerNode)) {\n    roots.push(await reduce(chunked))\n  }\n\n  if (roots.length > 1) {\n    return reduceToParents(roots, reduce, options)\n  }\n\n  return roots[0]\n}\n\nmodule.exports = balanced\n"]},"metadata":{},"sourceType":"script"}