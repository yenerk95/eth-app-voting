{"ast":null,"code":"'use strict';\n\nconst AggregateError = require('aggregate-error');\n\nconst PCancelable = require('p-cancelable');\n\nclass FilterError extends Error {}\n\nconst pSome = (iterable, options) => new PCancelable((resolve, reject, onCancel) => {\n  const {\n    count,\n    filter = () => true\n  } = options;\n\n  if (!Number.isFinite(count)) {\n    reject(new TypeError(`Expected a finite number, got ${typeof options.count}`));\n    return;\n  }\n\n  const values = [];\n  const errors = [];\n  let elementCount = 0;\n  let isSettled = false;\n  const completed = new Set();\n\n  const maybeSettle = () => {\n    if (values.length === count) {\n      resolve(values);\n      isSettled = true;\n    }\n\n    if (elementCount - errors.length < count) {\n      reject(new AggregateError(errors));\n      isSettled = true;\n    }\n\n    return isSettled;\n  };\n\n  const cancelPending = () => {\n    for (const promise of iterable) {\n      if (!completed.has(promise) && typeof promise.cancel === 'function') {\n        promise.cancel();\n      }\n    }\n  };\n\n  onCancel(cancelPending);\n\n  for (const element of iterable) {\n    elementCount++;\n\n    (async () => {\n      try {\n        const value = await element;\n\n        if (isSettled) {\n          return;\n        }\n\n        if (!filter(value)) {\n          throw new FilterError('Value does not satisfy filter');\n        }\n\n        values.push(value);\n      } catch (error) {\n        errors.push(error);\n      } finally {\n        completed.add(element);\n\n        if (!isSettled && maybeSettle()) {\n          cancelPending();\n        }\n      }\n    })();\n  }\n\n  if (count > elementCount) {\n    reject(new RangeError(`Expected input to contain at least ${options.count} items, but contains ${elementCount} items`));\n    cancelPending();\n  }\n});\n\nmodule.exports = pSome;\nmodule.exports.AggregateError = AggregateError;\nmodule.exports.FilterError = FilterError;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/p-some/index.js"],"names":["AggregateError","require","PCancelable","FilterError","Error","pSome","iterable","options","resolve","reject","onCancel","count","filter","Number","isFinite","TypeError","values","errors","elementCount","isSettled","completed","Set","maybeSettle","length","cancelPending","promise","has","cancel","element","value","push","error","add","RangeError","module","exports"],"mappings":"AAAA;;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAA3B;;AAEA,MAAME,WAAN,SAA0BC,KAA1B,CAAgC;;AAEhC,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,IAAIL,WAAJ,CAAgB,CAACM,OAAD,EAAUC,MAAV,EAAkBC,QAAlB,KAA+B;AACnF,QAAM;AACLC,IAAAA,KADK;AAELC,IAAAA,MAAM,GAAG,MAAM;AAFV,MAGFL,OAHJ;;AAKA,MAAI,CAACM,MAAM,CAACC,QAAP,CAAgBH,KAAhB,CAAL,EAA6B;AAC5BF,IAAAA,MAAM,CAAC,IAAIM,SAAJ,CAAe,iCAAgC,OAAOR,OAAO,CAACI,KAAM,EAApE,CAAD,CAAN;AACA;AACA;;AAED,QAAMK,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,SAAS,GAAG,KAAhB;AAEA,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AACA,QAAMC,WAAW,GAAG,MAAM;AACzB,QAAIN,MAAM,CAACO,MAAP,KAAkBZ,KAAtB,EAA6B;AAC5BH,MAAAA,OAAO,CAACQ,MAAD,CAAP;AACAG,MAAAA,SAAS,GAAG,IAAZ;AACA;;AAED,QAAID,YAAY,GAAGD,MAAM,CAACM,MAAtB,GAA+BZ,KAAnC,EAA0C;AACzCF,MAAAA,MAAM,CAAC,IAAIT,cAAJ,CAAmBiB,MAAnB,CAAD,CAAN;AACAE,MAAAA,SAAS,GAAG,IAAZ;AACA;;AAED,WAAOA,SAAP;AACA,GAZD;;AAcA,QAAMK,aAAa,GAAG,MAAM;AAC3B,SAAK,MAAMC,OAAX,IAAsBnB,QAAtB,EAAgC;AAC/B,UAAI,CAACc,SAAS,CAACM,GAAV,CAAcD,OAAd,CAAD,IAA2B,OAAOA,OAAO,CAACE,MAAf,KAA0B,UAAzD,EAAqE;AACpEF,QAAAA,OAAO,CAACE,MAAR;AACA;AACD;AACD,GAND;;AAQAjB,EAAAA,QAAQ,CAACc,aAAD,CAAR;;AAEA,OAAK,MAAMI,OAAX,IAAsBtB,QAAtB,EAAgC;AAC/BY,IAAAA,YAAY;;AAEZ,KAAC,YAAY;AACZ,UAAI;AACH,cAAMW,KAAK,GAAG,MAAMD,OAApB;;AAEA,YAAIT,SAAJ,EAAe;AACd;AACA;;AAED,YAAI,CAACP,MAAM,CAACiB,KAAD,CAAX,EAAoB;AACnB,gBAAM,IAAI1B,WAAJ,CAAgB,+BAAhB,CAAN;AACA;;AAEDa,QAAAA,MAAM,CAACc,IAAP,CAAYD,KAAZ;AACA,OAZD,CAYE,OAAOE,KAAP,EAAc;AACfd,QAAAA,MAAM,CAACa,IAAP,CAAYC,KAAZ;AACA,OAdD,SAcU;AACTX,QAAAA,SAAS,CAACY,GAAV,CAAcJ,OAAd;;AAEA,YAAI,CAACT,SAAD,IAAcG,WAAW,EAA7B,EAAiC;AAChCE,UAAAA,aAAa;AACb;AACD;AACD,KAtBD;AAuBA;;AAED,MAAIb,KAAK,GAAGO,YAAZ,EAA0B;AACzBT,IAAAA,MAAM,CAAC,IAAIwB,UAAJ,CAAgB,sCAAqC1B,OAAO,CAACI,KAAM,wBAAuBO,YAAa,QAAvG,CAAD,CAAN;AACAM,IAAAA,aAAa;AACb;AACD,CAzEoC,CAArC;;AA2EAU,MAAM,CAACC,OAAP,GAAiB9B,KAAjB;AACA6B,MAAM,CAACC,OAAP,CAAenC,cAAf,GAAgCA,cAAhC;AACAkC,MAAM,CAACC,OAAP,CAAehC,WAAf,GAA6BA,WAA7B","sourcesContent":["'use strict';\nconst AggregateError = require('aggregate-error');\nconst PCancelable = require('p-cancelable');\n\nclass FilterError extends Error { }\n\nconst pSome = (iterable, options) => new PCancelable((resolve, reject, onCancel) => {\n\tconst {\n\t\tcount,\n\t\tfilter = () => true\n\t} = options;\n\n\tif (!Number.isFinite(count)) {\n\t\treject(new TypeError(`Expected a finite number, got ${typeof options.count}`));\n\t\treturn;\n\t}\n\n\tconst values = [];\n\tconst errors = [];\n\tlet elementCount = 0;\n\tlet isSettled = false;\n\n\tconst completed = new Set();\n\tconst maybeSettle = () => {\n\t\tif (values.length === count) {\n\t\t\tresolve(values);\n\t\t\tisSettled = true;\n\t\t}\n\n\t\tif (elementCount - errors.length < count) {\n\t\t\treject(new AggregateError(errors));\n\t\t\tisSettled = true;\n\t\t}\n\n\t\treturn isSettled;\n\t};\n\n\tconst cancelPending = () => {\n\t\tfor (const promise of iterable) {\n\t\t\tif (!completed.has(promise) && typeof promise.cancel === 'function') {\n\t\t\t\tpromise.cancel();\n\t\t\t}\n\t\t}\n\t};\n\n\tonCancel(cancelPending);\n\n\tfor (const element of iterable) {\n\t\telementCount++;\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst value = await element;\n\n\t\t\t\tif (isSettled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!filter(value)) {\n\t\t\t\t\tthrow new FilterError('Value does not satisfy filter');\n\t\t\t\t}\n\n\t\t\t\tvalues.push(value);\n\t\t\t} catch (error) {\n\t\t\t\terrors.push(error);\n\t\t\t} finally {\n\t\t\t\tcompleted.add(element);\n\n\t\t\t\tif (!isSettled && maybeSettle()) {\n\t\t\t\t\tcancelPending();\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t}\n\n\tif (count > elementCount) {\n\t\treject(new RangeError(`Expected input to contain at least ${options.count} items, but contains ${elementCount} items`));\n\t\tcancelPending();\n\t}\n});\n\nmodule.exports = pSome;\nmodule.exports.AggregateError = AggregateError;\nmodule.exports.FilterError = FilterError;\n"]},"metadata":{},"sourceType":"script"}