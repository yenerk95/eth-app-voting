{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar _require = require('../utils'),\n    normalizeCidPath = _require.normalizeCidPath,\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _cat = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipfsPath, options) {\n      var pathComponents, file;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              ipfsPath = normalizeCidPath(ipfsPath);\n\n              if (options.preload !== false) {\n                pathComponents = ipfsPath.split('/');\n                preload(pathComponents[0]);\n              }\n\n              _context.next = 5;\n              return _awaitAsyncGenerator(exporter(ipfsPath, ipld, options));\n\n            case 5:\n              file = _context.sent;\n\n              if (!(file.unixfs && file.unixfs.type.includes('dir'))) {\n                _context.next = 8;\n                break;\n              }\n\n              throw new Error('this dag node is a directory');\n\n            case 8:\n              if (file.content) {\n                _context.next = 10;\n                break;\n              }\n\n              throw new Error('this dag node has no content');\n\n            case 10:\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(file.content(options)), _awaitAsyncGenerator), \"t0\", 11);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function cat(_x, _x2) {\n      return _cat.apply(this, arguments);\n    }\n\n    return cat;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/cat.js"],"names":["exporter","require","normalizeCidPath","withTimeoutOption","module","exports","ipld","preload","ipfsPath","options","pathComponents","split","file","unixfs","type","includes","Error","content","cat"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;eACgDA,OAAO,CAAC,UAAD,C;IAA/CC,gB,YAAAA,gB;IAAkBC,iB,YAAAA,iB;;AAE1BC,MAAM,CAACC,OAAP,GAAiB,gBAA6B;AAAA,MAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,MAAXC,OAAW,QAAXA,OAAW;AAC5C,SAAOJ,iBAAiB;AAAA,0EAAC,iBAAsBK,QAAtB,EAAgCC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEAD,cAAAA,QAAQ,GAAGN,gBAAgB,CAACM,QAAD,CAA3B;;AAEA,kBAAIC,OAAO,CAACF,OAAR,KAAoB,KAAxB,EAA+B;AACvBG,gBAAAA,cADuB,GACNF,QAAQ,CAACG,KAAT,CAAe,GAAf,CADM;AAE7BJ,gBAAAA,OAAO,CAACG,cAAc,CAAC,CAAD,CAAf,CAAP;AACD;;AARsB;AAAA,0CAUJV,QAAQ,CAACQ,QAAD,EAAWF,IAAX,EAAiBG,OAAjB,CAVJ;;AAAA;AAUjBG,cAAAA,IAViB;;AAAA,oBAanBA,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACC,MAAL,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0B,KAA1B,CAbI;AAAA;AAAA;AAAA;;AAAA,oBAcf,IAAIC,KAAJ,CAAU,8BAAV,CAde;;AAAA;AAAA,kBAiBlBJ,IAAI,CAACK,OAjBa;AAAA;AAAA;AAAA;;AAAA,oBAkBf,IAAID,KAAJ,CAAU,8BAAV,CAlBe;;AAAA;AAqBvB,mFAAQJ,IAAI,CAACK,OAAL,CAAaR,OAAb,CAAR;;AArBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAkBS,GAAlB;AAAA;AAAA;;AAAA,WAAkBA,GAAlB;AAAA,MAAxB;AAuBD,CAxBD","sourcesContent":["'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst { normalizeCidPath, withTimeoutOption } = require('../utils')\n\nmodule.exports = function ({ ipld, preload }) {\n  return withTimeoutOption(async function * cat (ipfsPath, options) {\n    options = options || {}\n\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(pathComponents[0])\n    }\n\n    const file = await exporter(ipfsPath, ipld, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.unixfs && file.unixfs.type.includes('dir')) {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}