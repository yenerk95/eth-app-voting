{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:components:start');\n\nconst Bitswap = require('ipfs-bitswap');\n\nconst multiaddr = require('multiaddr');\n\nconst get = require('dlv');\n\nconst defer = require('p-defer');\n\nconst errCode = require('err-code');\n\nconst IPNS = require('../ipns');\n\nconst routingConfig = require('../ipns/routing/config');\n\nconst {\n  AlreadyInitializedError,\n  NotEnabledError\n} = require('../errors');\n\nconst Components = require('./');\n\nconst createMfsPreload = require('../mfs-preload');\n\nconst {\n  withTimeoutOption\n} = require('../utils');\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479;\n\nmodule.exports = ({\n  apiManager,\n  options: constructorOptions,\n  blockService,\n  gcLock,\n  initOptions,\n  ipld,\n  keychain,\n  peerId,\n  pinManager,\n  preload,\n  print,\n  repo\n}) => withTimeoutOption(async function start() {\n  const startPromise = defer();\n  startPromise.promise.catch(err => log(err));\n  const {\n    cancel\n  } = apiManager.update({\n    start: () => startPromise.promise\n  });\n\n  try {\n    // The repo may be closed if previously stopped\n    if (repo.closed) {\n      await repo.open();\n    }\n\n    const config = await repo.config.getAll();\n    const addrs = [];\n\n    if (config.Addresses && config.Addresses.Swarm) {\n      config.Addresses.Swarm.forEach(addr => {\n        let ma = multiaddr(addr); // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n        // websocket-star support was removed from ipfs and libp2p\n\n        if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n          throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED');\n        } // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n        // webrtc-star) can have the intermediary's peer ID in the address, so append our\n        // peer ID to the end of it\n\n\n        const maId = ma.getPeerId();\n\n        if (maId && maId !== peerId.toB58String()) {\n          ma = ma.encapsulate(`/p2p/${peerId.toB58String()}`);\n        }\n\n        addrs.push(ma);\n      });\n    }\n\n    const libp2p = Components.libp2p({\n      options: constructorOptions,\n      repo,\n      peerId: peerId,\n      multiaddrs: addrs,\n      config\n    });\n    libp2p.keychain && (await libp2p.loadKeychain());\n    await libp2p.start();\n    libp2p.transportManager.getAddrs().forEach(ma => print(`Swarm listening on ${ma}/p2p/${peerId.toB58String()}`));\n    const ipnsRouting = routingConfig({\n      libp2p,\n      repo,\n      peerId,\n      options: constructorOptions\n    });\n    const ipns = new IPNS(ipnsRouting, repo.datastore, peerId, keychain, {\n      pass: initOptions.pass\n    });\n    const bitswap = new Bitswap(libp2p, repo.blocks, {\n      statsEnabled: true\n    });\n    await bitswap.start();\n    blockService.setExchange(bitswap);\n    const dag = {\n      get: Components.dag.get({\n        ipld,\n        preload\n      }),\n      resolve: Components.dag.resolve({\n        ipld,\n        preload\n      }),\n      tree: Components.dag.tree({\n        ipld,\n        preload\n      })\n    };\n    const pin = {\n      add: Components.pin.add({\n        pinManager,\n        gcLock,\n        dag\n      }),\n      ls: Components.pin.ls({\n        pinManager,\n        dag\n      }),\n      rm: Components.pin.rm({\n        pinManager,\n        gcLock,\n        dag\n      })\n    }; // FIXME: resolve this circular dependency\n\n    dag.put = Components.dag.put({\n      ipld,\n      pin,\n      gcLock,\n      preload\n    });\n    const block = {\n      get: Components.block.get({\n        blockService,\n        preload\n      }),\n      put: Components.block.put({\n        blockService,\n        pin,\n        gcLock,\n        preload\n      }),\n      rm: Components.block.rm({\n        blockService,\n        gcLock,\n        pinManager\n      }),\n      stat: Components.block.stat({\n        blockService,\n        preload\n      })\n    };\n    const files = Components.files({\n      ipld,\n      block,\n      blockService,\n      repo,\n      preload,\n      options: constructorOptions\n    });\n    const mfsPreload = createMfsPreload({\n      files,\n      preload,\n      options: constructorOptions.preload\n    });\n    await Promise.all([ipns.republisher.start(), preload.start(), mfsPreload.start()]);\n    const api = createApi({\n      apiManager,\n      bitswap,\n      block,\n      blockService,\n      config,\n      constructorOptions,\n      dag,\n      files,\n      gcLock,\n      initOptions,\n      ipld,\n      ipns,\n      keychain,\n      libp2p,\n      mfsPreload,\n      peerId,\n      pin,\n      pinManager,\n      preload,\n      print,\n      repo\n    });\n    apiManager.update(api, () => undefined);\n  } catch (err) {\n    cancel();\n    startPromise.reject(err);\n    throw err;\n  }\n\n  startPromise.resolve(apiManager.api);\n  return apiManager.api;\n});\n\nfunction createApi({\n  apiManager,\n  bitswap,\n  block,\n  blockService,\n  config,\n  constructorOptions,\n  dag,\n  files,\n  gcLock,\n  initOptions,\n  ipld,\n  ipns,\n  keychain,\n  libp2p,\n  mfsPreload,\n  peerId,\n  pin,\n  pinManager,\n  preload,\n  print,\n  repo\n}) {\n  const object = {\n    data: Components.object.data({\n      ipld,\n      preload\n    }),\n    get: Components.object.get({\n      ipld,\n      preload\n    }),\n    links: Components.object.links({\n      dag\n    }),\n    new: Components.object.new({\n      ipld,\n      preload\n    }),\n    patch: {\n      addLink: Components.object.patch.addLink({\n        ipld,\n        gcLock,\n        preload\n      }),\n      appendData: Components.object.patch.appendData({\n        ipld,\n        gcLock,\n        preload\n      }),\n      rmLink: Components.object.patch.rmLink({\n        ipld,\n        gcLock,\n        preload\n      }),\n      setData: Components.object.patch.setData({\n        ipld,\n        gcLock,\n        preload\n      })\n    },\n    put: Components.object.put({\n      ipld,\n      gcLock,\n      preload\n    }),\n    stat: Components.object.stat({\n      ipld,\n      preload\n    })\n  };\n  const add = Components.add({\n    block,\n    preload,\n    pin,\n    gcLock,\n    options: constructorOptions\n  });\n  const isOnline = Components.isOnline({\n    libp2p\n  });\n\n  const dhtNotEnabled = async () => {\n    // eslint-disable-line require-await\n    throw new NotEnabledError('dht not enabled');\n  };\n\n  const dht = get(libp2p, '_config.dht.enabled', false) ? Components.dht({\n    libp2p,\n    repo\n  }) : {\n    get: dhtNotEnabled,\n    put: dhtNotEnabled,\n    findProvs: dhtNotEnabled,\n    findPeer: dhtNotEnabled,\n    provide: dhtNotEnabled,\n    query: dhtNotEnabled\n  };\n  const dns = Components.dns();\n  const name = {\n    pubsub: {\n      cancel: Components.name.pubsub.cancel({\n        ipns,\n        options: constructorOptions\n      }),\n      state: Components.name.pubsub.state({\n        ipns,\n        options: constructorOptions\n      }),\n      subs: Components.name.pubsub.subs({\n        ipns,\n        options: constructorOptions\n      })\n    },\n    publish: Components.name.publish({\n      ipns,\n      dag,\n      peerId,\n      isOnline,\n      keychain,\n      options: constructorOptions\n    }),\n    resolve: Components.name.resolve({\n      dns,\n      ipns,\n      peerId,\n      isOnline,\n      options: constructorOptions\n    })\n  };\n  const resolve = Components.resolve({\n    name,\n    ipld\n  });\n  const refs = Components.refs({\n    ipld,\n    resolve,\n    preload\n  });\n  refs.local = Components.refs.local({\n    repo\n  });\n\n  const pubsubNotEnabled = async () => {\n    // eslint-disable-line require-await\n    throw new NotEnabledError('pubsub not enabled');\n  };\n\n  const pubsub = get(constructorOptions, 'config.Pubsub.Enabled', get(config, 'Pubsub.Enabled', true)) ? Components.pubsub({\n    libp2p\n  }) : {\n    subscribe: pubsubNotEnabled,\n    unsubscribe: pubsubNotEnabled,\n    publish: pubsubNotEnabled,\n    ls: pubsubNotEnabled,\n    peers: pubsubNotEnabled\n  };\n  const api = {\n    add,\n    bitswap: {\n      stat: Components.bitswap.stat({\n        bitswap\n      }),\n      unwant: Components.bitswap.unwant({\n        bitswap\n      }),\n      wantlist: Components.bitswap.wantlist({\n        bitswap\n      })\n    },\n    block,\n    bootstrap: {\n      add: Components.bootstrap.add({\n        repo\n      }),\n      list: Components.bootstrap.list({\n        repo\n      }),\n      rm: Components.bootstrap.rm({\n        repo\n      })\n    },\n    cat: Components.cat({\n      ipld,\n      preload\n    }),\n    config: Components.config({\n      repo\n    }),\n    dag,\n    dht,\n    dns,\n    files,\n    get: Components.get({\n      ipld,\n      preload\n    }),\n    id: Components.id({\n      peerId,\n      libp2p\n    }),\n    init: async () => {\n      throw new AlreadyInitializedError();\n    },\n    // eslint-disable-line require-await\n    isOnline,\n    key: {\n      export: Components.key.export({\n        keychain\n      }),\n      gen: Components.key.gen({\n        keychain\n      }),\n      import: Components.key.import({\n        keychain\n      }),\n      info: Components.key.info({\n        keychain\n      }),\n      list: Components.key.list({\n        keychain\n      }),\n      rename: Components.key.rename({\n        keychain\n      }),\n      rm: Components.key.rm({\n        keychain\n      })\n    },\n    libp2p,\n    ls: Components.ls({\n      ipld,\n      preload\n    }),\n    name,\n    object,\n    pin,\n    ping: Components.ping({\n      libp2p\n    }),\n    pubsub,\n    refs,\n    repo: {\n      gc: Components.repo.gc({\n        gcLock,\n        pin,\n        pinManager,\n        refs,\n        repo\n      }),\n      stat: Components.repo.stat({\n        repo\n      }),\n      version: Components.repo.version({\n        repo\n      })\n    },\n    resolve,\n    start: () => apiManager.api,\n    stats: {\n      bitswap: Components.bitswap.stat({\n        bitswap\n      }),\n      bw: libp2p.metrics ? Components.stats.bw({\n        libp2p\n      }) : async () => {\n        // eslint-disable-line require-await\n        throw new NotEnabledError('libp2p metrics not enabled');\n      },\n      repo: Components.repo.stat({\n        repo\n      })\n    },\n    stop: Components.stop({\n      apiManager,\n      bitswap,\n      options: constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      ipns,\n      keychain,\n      libp2p,\n      mfsPreload,\n      peerId,\n      preload,\n      print,\n      repo\n    }),\n    swarm: {\n      addrs: Components.swarm.addrs({\n        libp2p\n      }),\n      connect: Components.swarm.connect({\n        libp2p\n      }),\n      disconnect: Components.swarm.disconnect({\n        libp2p\n      }),\n      localAddrs: Components.swarm.localAddrs({\n        multiaddrs: libp2p.multiaddrs\n      }),\n      peers: Components.swarm.peers({\n        libp2p\n      })\n    },\n    version: Components.version({\n      repo\n    })\n  };\n  return api;\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/start.js"],"names":["log","require","Bitswap","multiaddr","get","defer","errCode","IPNS","routingConfig","AlreadyInitializedError","NotEnabledError","Components","createMfsPreload","withTimeoutOption","WEBSOCKET_STAR_PROTO_CODE","module","exports","apiManager","options","constructorOptions","blockService","gcLock","initOptions","ipld","keychain","peerId","pinManager","preload","print","repo","start","startPromise","promise","catch","err","cancel","update","closed","open","config","getAll","addrs","Addresses","Swarm","forEach","addr","ma","protoCodes","includes","Error","maId","getPeerId","toB58String","encapsulate","push","libp2p","multiaddrs","loadKeychain","transportManager","getAddrs","ipnsRouting","ipns","datastore","pass","bitswap","blocks","statsEnabled","setExchange","dag","resolve","tree","pin","add","ls","rm","put","block","stat","files","mfsPreload","Promise","all","republisher","api","createApi","undefined","reject","object","data","links","new","patch","addLink","appendData","rmLink","setData","isOnline","dhtNotEnabled","dht","findProvs","findPeer","provide","query","dns","name","pubsub","state","subs","publish","refs","local","pubsubNotEnabled","subscribe","unsubscribe","peers","unwant","wantlist","bootstrap","list","cat","id","init","key","export","gen","import","info","rename","ping","gc","version","stats","bw","metrics","stop","swarm","connect","disconnect","localAddrs"],"mappings":"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","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:components:start')\nconst Bitswap = require('ipfs-bitswap')\nconst multiaddr = require('multiaddr')\nconst get = require('dlv')\nconst defer = require('p-defer')\nconst errCode = require('err-code')\nconst IPNS = require('../ipns')\nconst routingConfig = require('../ipns/routing/config')\nconst { AlreadyInitializedError, NotEnabledError } = require('../errors')\nconst Components = require('./')\nconst createMfsPreload = require('../mfs-preload')\nconst { withTimeoutOption } = require('../utils')\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479\n\nmodule.exports = ({\n  apiManager,\n  options: constructorOptions,\n  blockService,\n  gcLock,\n  initOptions,\n  ipld,\n  keychain,\n  peerId,\n  pinManager,\n  preload,\n  print,\n  repo\n}) => withTimeoutOption(async function start () {\n  const startPromise = defer()\n  startPromise.promise.catch((err) => log(err))\n\n  const { cancel } = apiManager.update({ start: () => startPromise.promise })\n\n  try {\n    // The repo may be closed if previously stopped\n    if (repo.closed) {\n      await repo.open()\n    }\n\n    const config = await repo.config.getAll()\n    const addrs = []\n\n    if (config.Addresses && config.Addresses.Swarm) {\n      config.Addresses.Swarm.forEach(addr => {\n        let ma = multiaddr(addr)\n\n        // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n        // websocket-star support was removed from ipfs and libp2p\n        if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n          throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED')\n        }\n\n        // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n        // webrtc-star) can have the intermediary's peer ID in the address, so append our\n        // peer ID to the end of it\n        const maId = ma.getPeerId()\n        if (maId && maId !== peerId.toB58String()) {\n          ma = ma.encapsulate(`/p2p/${peerId.toB58String()}`)\n        }\n\n        addrs.push(ma)\n      })\n    }\n\n    const libp2p = Components.libp2p({\n      options: constructorOptions,\n      repo,\n      peerId: peerId,\n      multiaddrs: addrs,\n      config\n    })\n\n    libp2p.keychain && await libp2p.loadKeychain()\n\n    await libp2p.start()\n\n    libp2p.transportManager.getAddrs().forEach(ma => print(`Swarm listening on ${ma}/p2p/${peerId.toB58String()}`))\n\n    const ipnsRouting = routingConfig({ libp2p, repo, peerId, options: constructorOptions })\n    const ipns = new IPNS(ipnsRouting, repo.datastore, peerId, keychain, { pass: initOptions.pass })\n    const bitswap = new Bitswap(libp2p, repo.blocks, { statsEnabled: true })\n\n    await bitswap.start()\n\n    blockService.setExchange(bitswap)\n\n    const dag = {\n      get: Components.dag.get({ ipld, preload }),\n      resolve: Components.dag.resolve({ ipld, preload }),\n      tree: Components.dag.tree({ ipld, preload })\n    }\n\n    const pin = {\n      add: Components.pin.add({ pinManager, gcLock, dag }),\n      ls: Components.pin.ls({ pinManager, dag }),\n      rm: Components.pin.rm({ pinManager, gcLock, dag })\n    }\n\n    // FIXME: resolve this circular dependency\n    dag.put = Components.dag.put({ ipld, pin, gcLock, preload })\n\n    const block = {\n      get: Components.block.get({ blockService, preload }),\n      put: Components.block.put({ blockService, pin, gcLock, preload }),\n      rm: Components.block.rm({ blockService, gcLock, pinManager }),\n      stat: Components.block.stat({ blockService, preload })\n    }\n\n    const files = Components.files({ ipld, block, blockService, repo, preload, options: constructorOptions })\n    const mfsPreload = createMfsPreload({ files, preload, options: constructorOptions.preload })\n\n    await Promise.all([\n      ipns.republisher.start(),\n      preload.start(),\n      mfsPreload.start()\n    ])\n\n    const api = createApi({\n      apiManager,\n      bitswap,\n      block,\n      blockService,\n      config,\n      constructorOptions,\n      dag,\n      files,\n      gcLock,\n      initOptions,\n      ipld,\n      ipns,\n      keychain,\n      libp2p,\n      mfsPreload,\n      peerId,\n      pin,\n      pinManager,\n      preload,\n      print,\n      repo\n    })\n\n    apiManager.update(api, () => undefined)\n  } catch (err) {\n    cancel()\n    startPromise.reject(err)\n    throw err\n  }\n\n  startPromise.resolve(apiManager.api)\n  return apiManager.api\n})\n\nfunction createApi ({\n  apiManager,\n  bitswap,\n  block,\n  blockService,\n  config,\n  constructorOptions,\n  dag,\n  files,\n  gcLock,\n  initOptions,\n  ipld,\n  ipns,\n  keychain,\n  libp2p,\n  mfsPreload,\n  peerId,\n  pin,\n  pinManager,\n  preload,\n  print,\n  repo\n}) {\n  const object = {\n    data: Components.object.data({ ipld, preload }),\n    get: Components.object.get({ ipld, preload }),\n    links: Components.object.links({ dag }),\n    new: Components.object.new({ ipld, preload }),\n    patch: {\n      addLink: Components.object.patch.addLink({ ipld, gcLock, preload }),\n      appendData: Components.object.patch.appendData({ ipld, gcLock, preload }),\n      rmLink: Components.object.patch.rmLink({ ipld, gcLock, preload }),\n      setData: Components.object.patch.setData({ ipld, gcLock, preload })\n    },\n    put: Components.object.put({ ipld, gcLock, preload }),\n    stat: Components.object.stat({ ipld, preload })\n  }\n\n  const add = Components.add({ block, preload, pin, gcLock, options: constructorOptions })\n  const isOnline = Components.isOnline({ libp2p })\n\n  const dhtNotEnabled = async () => { // eslint-disable-line require-await\n    throw new NotEnabledError('dht not enabled')\n  }\n\n  const dht = get(libp2p, '_config.dht.enabled', false) ? Components.dht({ libp2p, repo }) : {\n    get: dhtNotEnabled,\n    put: dhtNotEnabled,\n    findProvs: dhtNotEnabled,\n    findPeer: dhtNotEnabled,\n    provide: dhtNotEnabled,\n    query: dhtNotEnabled\n  }\n\n  const dns = Components.dns()\n  const name = {\n    pubsub: {\n      cancel: Components.name.pubsub.cancel({ ipns, options: constructorOptions }),\n      state: Components.name.pubsub.state({ ipns, options: constructorOptions }),\n      subs: Components.name.pubsub.subs({ ipns, options: constructorOptions })\n    },\n    publish: Components.name.publish({ ipns, dag, peerId, isOnline, keychain, options: constructorOptions }),\n    resolve: Components.name.resolve({ dns, ipns, peerId, isOnline, options: constructorOptions })\n  }\n  const resolve = Components.resolve({ name, ipld })\n  const refs = Components.refs({ ipld, resolve, preload })\n  refs.local = Components.refs.local({ repo })\n\n  const pubsubNotEnabled = async () => { // eslint-disable-line require-await\n    throw new NotEnabledError('pubsub not enabled')\n  }\n\n  const pubsub = get(constructorOptions, 'config.Pubsub.Enabled', get(config, 'Pubsub.Enabled', true))\n    ? Components.pubsub({ libp2p })\n    : {\n      subscribe: pubsubNotEnabled,\n      unsubscribe: pubsubNotEnabled,\n      publish: pubsubNotEnabled,\n      ls: pubsubNotEnabled,\n      peers: pubsubNotEnabled\n    }\n\n  const api = {\n    add,\n    bitswap: {\n      stat: Components.bitswap.stat({ bitswap }),\n      unwant: Components.bitswap.unwant({ bitswap }),\n      wantlist: Components.bitswap.wantlist({ bitswap })\n    },\n    block,\n    bootstrap: {\n      add: Components.bootstrap.add({ repo }),\n      list: Components.bootstrap.list({ repo }),\n      rm: Components.bootstrap.rm({ repo })\n    },\n    cat: Components.cat({ ipld, preload }),\n    config: Components.config({ repo }),\n    dag,\n    dht,\n    dns,\n    files,\n    get: Components.get({ ipld, preload }),\n    id: Components.id({ peerId, libp2p }),\n    init: async () => { throw new AlreadyInitializedError() }, // eslint-disable-line require-await\n    isOnline,\n    key: {\n      export: Components.key.export({ keychain }),\n      gen: Components.key.gen({ keychain }),\n      import: Components.key.import({ keychain }),\n      info: Components.key.info({ keychain }),\n      list: Components.key.list({ keychain }),\n      rename: Components.key.rename({ keychain }),\n      rm: Components.key.rm({ keychain })\n    },\n    libp2p,\n    ls: Components.ls({ ipld, preload }),\n    name,\n    object,\n    pin,\n    ping: Components.ping({ libp2p }),\n    pubsub,\n    refs,\n    repo: {\n      gc: Components.repo.gc({ gcLock, pin, pinManager, refs, repo }),\n      stat: Components.repo.stat({ repo }),\n      version: Components.repo.version({ repo })\n    },\n    resolve,\n    start: () => apiManager.api,\n    stats: {\n      bitswap: Components.bitswap.stat({ bitswap }),\n      bw: libp2p.metrics\n        ? Components.stats.bw({ libp2p })\n        : async () => { // eslint-disable-line require-await\n          throw new NotEnabledError('libp2p metrics not enabled')\n        },\n      repo: Components.repo.stat({ repo })\n    },\n    stop: Components.stop({\n      apiManager,\n      bitswap,\n      options: constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      ipns,\n      keychain,\n      libp2p,\n      mfsPreload,\n      peerId,\n      preload,\n      print,\n      repo\n    }),\n    swarm: {\n      addrs: Components.swarm.addrs({ libp2p }),\n      connect: Components.swarm.connect({ libp2p }),\n      disconnect: Components.swarm.disconnect({ libp2p }),\n      localAddrs: Components.swarm.localAddrs({ multiaddrs: libp2p.multiaddrs }),\n      peers: Components.swarm.peers({ libp2p })\n    },\n    version: Components.version({ repo })\n  }\n\n  return api\n}\n"]},"metadata":{},"sourceType":"script"}