{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst errCode = require('err-code');\n\nconst {\n  normalizeCidPath,\n  mapFile,\n  withTimeoutOption\n} = require('../utils');\n\nmodule.exports = function ({\n  ipld,\n  preload\n}) {\n  return withTimeoutOption(async function* ls(ipfsPath, options) {\n    options = options || {};\n    const path = normalizeCidPath(ipfsPath);\n    const recursive = options.recursive;\n    const pathComponents = path.split('/');\n\n    if (options.preload !== false) {\n      preload(pathComponents[0]);\n    }\n\n    const file = await exporter(ipfsPath, ipld, options);\n\n    if (!file.unixfs) {\n      throw errCode(new Error('dag node was not a UnixFS node'), 'ERR_NOT_UNIXFS');\n    }\n\n    if (file.unixfs.type === 'file') {\n      return mapFile(file, options);\n    }\n\n    if (file.unixfs.type.includes('dir')) {\n      if (recursive) {\n        for await (const child of exporter.recursive(file.cid, ipld, options)) {\n          if (file.cid.toBaseEncodedString() === child.cid.toBaseEncodedString()) {\n            continue;\n          }\n\n          yield mapFile(child, options);\n        }\n\n        return;\n      }\n\n      for await (let child of file.content()) {\n        child = mapFile(child, options);\n        child.depth--;\n        yield child;\n      }\n\n      return;\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.unixfs.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE');\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/ls.js"],"names":["exporter","require","errCode","normalizeCidPath","mapFile","withTimeoutOption","module","exports","ipld","preload","ls","ipfsPath","options","path","recursive","pathComponents","split","file","unixfs","Error","type","includes","child","cid","toBaseEncodedString","content","depth"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,gBAAF;AAAoBC,EAAAA,OAApB;AAA6BC,EAAAA;AAA7B,IAAmDJ,OAAO,CAAC,UAAD,CAAhE;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAV,EAA6B;AAC5C,SAAOJ,iBAAiB,CAAC,gBAAiBK,EAAjB,CAAqBC,QAArB,EAA+BC,OAA/B,EAAwC;AAC/DA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,UAAMC,IAAI,GAAGV,gBAAgB,CAACQ,QAAD,CAA7B;AACA,UAAMG,SAAS,GAAGF,OAAO,CAACE,SAA1B;AACA,UAAMC,cAAc,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAvB;;AAEA,QAAIJ,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACM,cAAc,CAAC,CAAD,CAAf,CAAP;AACD;;AAED,UAAME,IAAI,GAAG,MAAMjB,QAAQ,CAACW,QAAD,EAAWH,IAAX,EAAiBI,OAAjB,CAA3B;;AAEA,QAAI,CAACK,IAAI,CAACC,MAAV,EAAkB;AAChB,YAAMhB,OAAO,CAAC,IAAIiB,KAAJ,CAAU,gCAAV,CAAD,EAA8C,gBAA9C,CAAb;AACD;;AAED,QAAIF,IAAI,CAACC,MAAL,CAAYE,IAAZ,KAAqB,MAAzB,EAAiC;AAC/B,aAAOhB,OAAO,CAACa,IAAD,EAAOL,OAAP,CAAd;AACD;;AAED,QAAIK,IAAI,CAACC,MAAL,CAAYE,IAAZ,CAAiBC,QAAjB,CAA0B,KAA1B,CAAJ,EAAsC;AACpC,UAAIP,SAAJ,EAAe;AACb,mBAAW,MAAMQ,KAAjB,IAA0BtB,QAAQ,CAACc,SAAT,CAAmBG,IAAI,CAACM,GAAxB,EAA6Bf,IAA7B,EAAmCI,OAAnC,CAA1B,EAAuE;AACrE,cAAIK,IAAI,CAACM,GAAL,CAASC,mBAAT,OAAmCF,KAAK,CAACC,GAAN,CAAUC,mBAAV,EAAvC,EAAwE;AACtE;AACD;;AAED,gBAAMpB,OAAO,CAACkB,KAAD,EAAQV,OAAR,CAAb;AACD;;AAED;AACD;;AAED,iBAAW,IAAIU,KAAf,IAAwBL,IAAI,CAACQ,OAAL,EAAxB,EAAwC;AACtCH,QAAAA,KAAK,GAAGlB,OAAO,CAACkB,KAAD,EAAQV,OAAR,CAAf;AACAU,QAAAA,KAAK,CAACI,KAAN;AAEA,cAAMJ,KAAN;AACD;;AAED;AACD;;AAED,UAAMpB,OAAO,CAAC,IAAIiB,KAAJ,CAAW,uBAAsBF,IAAI,CAACC,MAAL,CAAYE,IAAK,EAAlD,CAAD,EAAuD,yBAAvD,CAAb;AACD,GA7CuB,CAAxB;AA8CD,CA/CD","sourcesContent":["'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { normalizeCidPath, mapFile, withTimeoutOption } = require('../utils')\n\nmodule.exports = function ({ ipld, preload }) {\n  return withTimeoutOption(async function * ls (ipfsPath, options) {\n    options = options || {}\n\n    const path = normalizeCidPath(ipfsPath)\n    const recursive = options.recursive\n    const pathComponents = path.split('/')\n\n    if (options.preload !== false) {\n      preload(pathComponents[0])\n    }\n\n    const file = await exporter(ipfsPath, ipld, options)\n\n    if (!file.unixfs) {\n      throw errCode(new Error('dag node was not a UnixFS node'), 'ERR_NOT_UNIXFS')\n    }\n\n    if (file.unixfs.type === 'file') {\n      return mapFile(file, options)\n    }\n\n    if (file.unixfs.type.includes('dir')) {\n      if (recursive) {\n        for await (const child of exporter.recursive(file.cid, ipld, options)) {\n          if (file.cid.toBaseEncodedString() === child.cid.toBaseEncodedString()) {\n            continue\n          }\n\n          yield mapFile(child, options)\n        }\n\n        return\n      }\n\n      for await (let child of file.content()) {\n        child = mapFile(child, options)\n        child.depth--\n\n        yield child\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.unixfs.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  })\n}\n"]},"metadata":{},"sourceType":"script"}