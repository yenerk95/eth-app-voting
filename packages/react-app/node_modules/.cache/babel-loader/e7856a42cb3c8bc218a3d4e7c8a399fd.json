{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport HKDF from 'bcrypto/lib/hkdf';\nimport x25519 from 'bcrypto/lib/js/x25519';\nimport SHA256 from 'bcrypto/lib/js/sha256';\nimport { Buffer } from \"buffer\";\nimport PeerId from \"peer-id\";\nimport { keys } from 'libp2p-crypto';\nimport { pb } from \"./proto/payload\";\nvar NoiseHandshakePayloadProto = pb.NoiseHandshakePayload;\nexport function generateKeypair() {\n  var privateKey = x25519.privateKeyGenerate();\n  var publicKey = x25519.publicKeyCreate(privateKey);\n  return {\n    publicKey: publicKey,\n    privateKey: privateKey\n  };\n}\nexport function getPayload(_x, _x2, _x3) {\n  return _getPayload.apply(this, arguments);\n}\n\nfunction _getPayload() {\n  _getPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(localPeer, staticPublicKey, earlyData) {\n    var signedPayload, earlyDataPayload;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return signPayload(localPeer, getHandshakePayload(staticPublicKey));\n\n          case 2:\n            signedPayload = _context.sent;\n            earlyDataPayload = earlyData || Buffer.alloc(0);\n            _context.next = 6;\n            return createHandshakePayload(localPeer.marshalPubKey(), signedPayload, earlyDataPayload);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPayload.apply(this, arguments);\n}\n\nexport function createHandshakePayload(_x4, _x5, _x6) {\n  return _createHandshakePayload.apply(this, arguments);\n}\n\nfunction _createHandshakePayload() {\n  _createHandshakePayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(libp2pPublicKey, signedPayload, earlyData) {\n    var payloadInit;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            payloadInit = NoiseHandshakePayloadProto.create({\n              identityKey: libp2pPublicKey,\n              identitySig: signedPayload,\n              data: earlyData || null\n            });\n            return _context2.abrupt(\"return\", Buffer.from(NoiseHandshakePayloadProto.encode(payloadInit).finish()));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createHandshakePayload.apply(this, arguments);\n}\n\nexport function signPayload(_x7, _x8) {\n  return _signPayload.apply(this, arguments);\n}\n\nfunction _signPayload() {\n  _signPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(peerId, payload) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", peerId.privKey.sign(payload));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _signPayload.apply(this, arguments);\n}\n\nexport function getPeerIdFromPayload(_x9) {\n  return _getPeerIdFromPayload.apply(this, arguments);\n}\n\nfunction _getPeerIdFromPayload() {\n  _getPeerIdFromPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return PeerId.createFromPubKey(Buffer.from(payload.identityKey));\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getPeerIdFromPayload.apply(this, arguments);\n}\n\nexport function decodePayload(_x10) {\n  return _decodePayload.apply(this, arguments);\n}\n\nfunction _decodePayload() {\n  _decodePayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", NoiseHandshakePayloadProto.toObject(NoiseHandshakePayloadProto.decode(Buffer.from(payload))));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _decodePayload.apply(this, arguments);\n}\n\nexport function getHandshakePayload(publicKey) {\n  return Buffer.concat([Buffer.from(\"noise-libp2p-static-key:\"), publicKey]);\n}\n\nfunction isValidPeerId(_x11, _x12) {\n  return _isValidPeerId.apply(this, arguments);\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\n\n\nfunction _isValidPeerId() {\n  _isValidPeerId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(peerId, publicKeyProtobuf) {\n    var generatedPeerId;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return PeerId.createFromPubKey(publicKeyProtobuf);\n\n          case 2:\n            generatedPeerId = _context6.sent;\n            return _context6.abrupt(\"return\", generatedPeerId.id.equals(peerId));\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _isValidPeerId.apply(this, arguments);\n}\n\nexport function verifySignedPayload(_x13, _x14, _x15) {\n  return _verifySignedPayload.apply(this, arguments);\n}\n\nfunction _verifySignedPayload() {\n  _verifySignedPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(noiseStaticKey, payload, remotePeer) {\n    var identityKey, generatedPayload, publicKey;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            identityKey = Buffer.from(payload.identityKey);\n            _context7.next = 3;\n            return isValidPeerId(remotePeer.id, identityKey);\n\n          case 3:\n            if (_context7.sent) {\n              _context7.next = 5;\n              break;\n            }\n\n            throw new Error(\"Peer ID doesn't match libp2p public key.\");\n\n          case 5:\n            generatedPayload = getHandshakePayload(noiseStaticKey); // Unmarshaling from PublicKey protobuf\n\n            publicKey = keys.unmarshalPublicKey(identityKey);\n\n            if (!(!payload.identitySig || !publicKey.verify(generatedPayload, Buffer.from(payload.identitySig)))) {\n              _context7.next = 9;\n              break;\n            }\n\n            throw new Error(\"Static key doesn't match to peer that signed payload!\");\n\n          case 9:\n            return _context7.abrupt(\"return\", PeerId.createFromPubKey(identityKey));\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _verifySignedPayload.apply(this, arguments);\n}\n\nexport function getHkdf(ck, ikm) {\n  var info = Buffer.alloc(0);\n  var prk = HKDF.extract(SHA256, ikm, ck);\n  var okm = HKDF.expand(SHA256, prk, info, 96);\n  var k1 = okm.slice(0, 32);\n  var k2 = okm.slice(32, 64);\n  var k3 = okm.slice(64, 96);\n  return [k1, k2, k3];\n}\nexport function isValidPublicKey(pk) {\n  return x25519.publicKeyVerify(pk.slice(0, 32));\n}","map":{"version":3,"sources":["../src/utils.ts"],"names":["NoiseHandshakePayloadProto","pb","privateKey","x25519","publicKey","signedPayload","signPayload","getHandshakePayload","earlyDataPayload","earlyData","Buffer","createHandshakePayload","localPeer","payloadInit","identityKey","identitySig","data","peerId","PeerId","payload","generatedPeerId","isValidPeerId","remotePeer","generatedPayload","keys","info","prk","HKDF","okm","k1","k2","k3","pk"],"mappings":"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","sourcesContent":["import HKDF from 'bcrypto/lib/hkdf';\nimport x25519 from 'bcrypto/lib/js/x25519';\nimport SHA256 from 'bcrypto/lib/js/sha256';\nimport {Buffer} from \"buffer\";\nimport PeerId from \"peer-id\";\nimport {keys} from 'libp2p-crypto';\nimport {KeyPair} from \"./@types/libp2p\";\nimport {bytes, bytes32} from \"./@types/basic\";\nimport {Hkdf, INoisePayload} from \"./@types/handshake\";\nimport {pb} from \"./proto/payload\";\n\nconst NoiseHandshakePayloadProto = pb.NoiseHandshakePayload;\n\nexport function generateKeypair(): KeyPair {\n  const privateKey = x25519.privateKeyGenerate();\n  const publicKey = x25519.publicKeyCreate(privateKey);\n\n  return {\n    publicKey,\n    privateKey,\n  }\n}\n\nexport async function getPayload(\n  localPeer: PeerId,\n  staticPublicKey: bytes,\n  earlyData?: bytes,\n): Promise<bytes> {\n  const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n  const earlyDataPayload = earlyData || Buffer.alloc(0);\n\n  return await createHandshakePayload(\n    localPeer.marshalPubKey(),\n    signedPayload,\n    earlyDataPayload\n  );\n}\n\nexport async function createHandshakePayload(\n  libp2pPublicKey: bytes,\n  signedPayload: bytes,\n  earlyData?: bytes,\n): Promise<bytes> {\n\n  const payloadInit = NoiseHandshakePayloadProto.create({\n    identityKey: libp2pPublicKey,\n    identitySig: signedPayload,\n    data: earlyData || null,\n  });\n\n  return Buffer.from(NoiseHandshakePayloadProto.encode(payloadInit).finish());\n}\n\n\nexport async function signPayload(peerId: PeerId, payload: bytes): Promise<bytes> {\n  return peerId.privKey.sign(payload);\n}\n\nexport async function getPeerIdFromPayload(payload: pb.INoiseHandshakePayload): Promise<PeerId> {\n  return await PeerId.createFromPubKey(Buffer.from(payload.identityKey as Uint8Array));\n}\n\nexport async function decodePayload(payload: bytes|Uint8Array): Promise<pb.INoiseHandshakePayload> {\n  return NoiseHandshakePayloadProto.toObject(\n    NoiseHandshakePayloadProto.decode(Buffer.from(payload))\n  ) as INoisePayload;\n}\n\nexport function getHandshakePayload(publicKey: bytes): bytes {\n  return Buffer.concat([Buffer.from(\"noise-libp2p-static-key:\"), publicKey]);\n}\n\nasync function isValidPeerId(peerId: bytes, publicKeyProtobuf: bytes) {\n  const generatedPeerId = await PeerId.createFromPubKey(publicKeyProtobuf);\n  return generatedPeerId.id.equals(peerId);\n}\n\n/**\n * Verifies signed payload, throws on any irregularities.\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\nexport async function verifySignedPayload(\n  noiseStaticKey: bytes,\n  payload: pb.INoiseHandshakePayload,\n  remotePeer: PeerId\n): Promise<PeerId> {\n  const identityKey = Buffer.from(payload.identityKey as Uint8Array);\n  if (!(await isValidPeerId(remotePeer.id, identityKey))) {\n    throw new Error(\"Peer ID doesn't match libp2p public key.\");\n  }\n  const generatedPayload = getHandshakePayload(noiseStaticKey);\n  // Unmarshaling from PublicKey protobuf\n  const publicKey = keys.unmarshalPublicKey(identityKey);\n  if (!payload.identitySig || !publicKey.verify(generatedPayload, Buffer.from(payload.identitySig))) {\n    throw new Error(\"Static key doesn't match to peer that signed payload!\");\n  }\n  return PeerId.createFromPubKey(identityKey);\n}\n\nexport function getHkdf(ck: bytes32, ikm: bytes): Hkdf {\n  const info = Buffer.alloc(0);\n  const prk = HKDF.extract(SHA256, ikm, ck);\n  const okm = HKDF.expand(SHA256, prk, info, 96);\n\n  const k1 = okm.slice(0, 32);\n  const k2 = okm.slice(32, 64);\n  const k3 = okm.slice(64, 96);\n\n  return [k1, k2, k3];\n}\n\nexport function isValidPublicKey(pk: bytes): boolean {\n  return x25519.publicKeyVerify(pk.slice(0, 32));\n}\n"]},"metadata":{},"sourceType":"module"}