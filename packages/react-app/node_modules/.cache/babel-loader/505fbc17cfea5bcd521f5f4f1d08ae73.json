{"ast":null,"code":"'use strict';\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n\n/* global window */\n\nconst globalThis = require('ipfs-utils/src/globalthis');\n\nconst EventEmitter = require('events');\n\nconst VisibilityChangeEmitter = require('./visibility-change-emitter');\n\nconst debug = require('debug')('latency-monitor:LatencyMonitor');\n/**\n * @typedef {Object} SummaryObject\n * @property {Number} events How many events were called\n * @property {Number} minMS What was the min time for a cb to be called\n * @property {Number} maxMS What was the max time for a cb to be called\n * @property {Number} avgMs What was the average time for a cb to be called\n * @property {Number} lengthMs How long this interval was in ms\n */\n\n/**\n * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling\n * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.\n * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.\n *\n * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop\n * and timing how long it takes to get back.\n *\n * @example\n * const monitor = new LatencyMonitor();\n * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));\n *\n * @example\n * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});\n * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));\n */\n\n\nclass LatencyMonitor extends EventEmitter {\n  /**\n     * @param {Number} [latencyCheckIntervalMs=500] How often to add a latency check event (ms)\n     * @param {Number} [dataEmitIntervalMs=5000] How often to summarize latency check events. null or 0 disables event firing\n     * @param {function} [asyncTestFn] What cb-style async function to use\n     * @param {Number} [latencyRandomPercentage=5] What percent (+/-) of latencyCheckIntervalMs should we randomly use? This helps avoid alignment to other events.\n     */\n  constructor({\n    latencyCheckIntervalMs,\n    dataEmitIntervalMs,\n    asyncTestFn,\n    latencyRandomPercentage\n  } = {}) {\n    super();\n    const that = this; // 0 isn't valid here, so its ok to use ||\n\n    that.latencyCheckIntervalMs = latencyCheckIntervalMs || 500; // 0.5s\n\n    that.latencyRandomPercentage = latencyRandomPercentage || 10;\n    that._latecyCheckMultiply = 2 * (that.latencyRandomPercentage / 100.0) * that.latencyCheckIntervalMs;\n    that._latecyCheckSubtract = that._latecyCheckMultiply / 2;\n    that.dataEmitIntervalMs = dataEmitIntervalMs === null || dataEmitIntervalMs === 0 ? undefined : dataEmitIntervalMs || 5 * 1000; // 5s\n\n    debug('latencyCheckIntervalMs: %s dataEmitIntervalMs: %s', that.latencyCheckIntervalMs, that.dataEmitIntervalMs);\n\n    if (that.dataEmitIntervalMs) {\n      debug('Expecting ~%s events per summary', that.latencyCheckIntervalMs / that.dataEmitIntervalMs);\n    } else {\n      debug('Not emitting summaries');\n    }\n\n    that.asyncTestFn = asyncTestFn; // If there is no asyncFn, we measure latency\n    // If process: use high resolution timer\n\n    if (globalThis.process && globalThis.process.hrtime) {\n      debug('Using process.hrtime for timing');\n      that.now = globalThis.process.hrtime;\n\n      that.getDeltaMS = startTime => {\n        const hrtime = that.now(startTime);\n        return hrtime[0] * 1000 + hrtime[1] / 1000000;\n      }; // Let's try for a timer that only monotonically increases\n\n    } else if (typeof window !== 'undefined' && window.performance && window.performance.now) {\n      debug('Using performance.now for timing');\n      that.now = window.performance.now.bind(window.performance);\n\n      that.getDeltaMS = startTime => Math.round(that.now() - startTime);\n    } else {\n      debug('Using Date.now for timing');\n      that.now = Date.now;\n\n      that.getDeltaMS = startTime => that.now() - startTime;\n    }\n\n    that._latencyData = that._initLatencyData(); // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,\n    // so we fall back to another library\n    // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs\n\n    if (isBrowser()) {\n      that._visibilityChangeEmitter = new VisibilityChangeEmitter();\n\n      that._visibilityChangeEmitter.on('visibilityChange', pageInFocus => {\n        if (pageInFocus) {\n          that._startTimers();\n        } else {\n          that._emitSummary();\n\n          that._stopTimers();\n        }\n      });\n    }\n\n    if (!that._visibilityChangeEmitter || that._visibilityChangeEmitter.isVisible()) {\n      that._startTimers();\n    }\n  }\n  /**\n     * Start internal timers\n     * @private\n     */\n\n\n  _startTimers() {\n    // Timer already started, ignore this\n    if (this._checkLatencyID) {\n      return;\n    }\n\n    this._checkLatency();\n\n    if (this.dataEmitIntervalMs) {\n      this._emitIntervalID = setInterval(() => this._emitSummary(), this.dataEmitIntervalMs);\n\n      if (typeof this._emitIntervalID.unref === 'function') {\n        this._emitIntervalID.unref(); // Doesn't block exit\n\n      }\n    }\n  }\n  /**\n     * Stop internal timers\n     * @private\n     */\n\n\n  _stopTimers() {\n    if (this._checkLatencyID) {\n      clearTimeout(this._checkLatencyID);\n      this._checkLatencyID = undefined;\n    }\n\n    if (this._emitIntervalID) {\n      clearInterval(this._emitIntervalID);\n      this._emitIntervalID = undefined;\n    }\n  }\n  /**\n     * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show\n     * @private\n     */\n\n\n  _emitSummary() {\n    const summary = this.getSummary();\n\n    if (summary.events > 0) {\n      this.emit('data', summary);\n    }\n  }\n  /**\n     * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,\n     * it will not count for this time period\n     * @returns {SummaryObject}\n     */\n\n\n  getSummary() {\n    // We might want to adjust for the number of expected events\n    // Example: first 1 event it comes back, then such a long blocker that the next emit check comes\n    // Then this fires - looks like no latency!!\n    const latency = {\n      events: this._latencyData.events,\n      minMs: this._latencyData.minMs,\n      maxMs: this._latencyData.maxMs,\n      avgMs: this._latencyData.events ? this._latencyData.totalMs / this._latencyData.events : Number.POSITIVE_INFINITY,\n      lengthMs: this.getDeltaMS(this._latencyData.startTime)\n    };\n    this._latencyData = this._initLatencyData(); // Clear\n\n    debug('Summary: %O', latency);\n    return latency;\n  }\n  /**\n     * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,\n     * it will simply report on event loop latency.\n     *\n     * @private\n     */\n\n\n  _checkLatency() {\n    const that = this; // Randomness is needed to avoid alignment by accident to regular things in the event loop\n\n    const randomness = Math.random() * that._latecyCheckMultiply - that._latecyCheckSubtract; // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset\n\n\n    const localData = {\n      deltaOffset: Math.ceil(that.latencyCheckIntervalMs + randomness),\n      startTime: that.now()\n    };\n\n    const cb = () => {\n      // We are already stopped, ignore this datapoint\n      if (!this._checkLatencyID) {\n        return;\n      }\n\n      const deltaMS = that.getDeltaMS(localData.startTime) - localData.deltaOffset;\n\n      that._checkLatency(); // Start again ASAP\n      // Add the data point. If this gets complex, refactor it\n\n\n      that._latencyData.events++;\n      that._latencyData.minMs = Math.min(that._latencyData.minMs, deltaMS);\n      that._latencyData.maxMs = Math.max(that._latencyData.maxMs, deltaMS);\n      that._latencyData.totalMs += deltaMS;\n      debug('MS: %s Data: %O', deltaMS, that._latencyData);\n    };\n\n    debug('localData: %O', localData);\n    this._checkLatencyID = setTimeout(() => {\n      // This gets rid of including event loop\n      if (that.asyncTestFn) {\n        // Clear timing related things\n        localData.deltaOffset = 0;\n        localData.startTime = that.now();\n        that.asyncTestFn(cb);\n      } else {\n        // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.\n        // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.\n        localData.deltaOffset -= 1; // If there is no function to test, we mean check latency which is a special case that is really cb => cb()\n        // We avoid that for the few extra function all overheads. Also, we want to keep the timers different\n\n        cb();\n      }\n    }, localData.deltaOffset);\n\n    if (typeof this._checkLatencyID.unref === 'function') {\n      this._checkLatencyID.unref(); // Doesn't block exit\n\n    }\n  }\n\n  _initLatencyData() {\n    return {\n      startTime: this.now(),\n      minMs: Number.POSITIVE_INFINITY,\n      maxMs: Number.NEGATIVE_INFINITY,\n      events: 0,\n      totalMs: 0\n    };\n  }\n\n}\n\nfunction isBrowser() {\n  return typeof window !== 'undefined';\n}\n\nmodule.exports = LatencyMonitor;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/connection-manager/latency-monitor.js"],"names":["globalThis","require","EventEmitter","VisibilityChangeEmitter","debug","LatencyMonitor","constructor","latencyCheckIntervalMs","dataEmitIntervalMs","asyncTestFn","latencyRandomPercentage","that","_latecyCheckMultiply","_latecyCheckSubtract","undefined","process","hrtime","now","getDeltaMS","startTime","window","performance","bind","Math","round","Date","_latencyData","_initLatencyData","isBrowser","_visibilityChangeEmitter","on","pageInFocus","_startTimers","_emitSummary","_stopTimers","isVisible","_checkLatencyID","_checkLatency","_emitIntervalID","setInterval","unref","clearTimeout","clearInterval","summary","getSummary","events","emit","latency","minMs","maxMs","avgMs","totalMs","Number","POSITIVE_INFINITY","lengthMs","randomness","random","localData","deltaOffset","ceil","cb","deltaMS","min","max","setTimeout","NEGATIVE_INFINITY","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n\n/* global window */\nconst globalThis = require('ipfs-utils/src/globalthis')\nconst EventEmitter = require('events')\nconst VisibilityChangeEmitter = require('./visibility-change-emitter')\nconst debug = require('debug')('latency-monitor:LatencyMonitor')\n\n/**\n * @typedef {Object} SummaryObject\n * @property {Number} events How many events were called\n * @property {Number} minMS What was the min time for a cb to be called\n * @property {Number} maxMS What was the max time for a cb to be called\n * @property {Number} avgMs What was the average time for a cb to be called\n * @property {Number} lengthMs How long this interval was in ms\n */\n\n/**\n * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling\n * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.\n * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.\n *\n * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop\n * and timing how long it takes to get back.\n *\n * @example\n * const monitor = new LatencyMonitor();\n * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));\n *\n * @example\n * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});\n * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));\n */\nclass LatencyMonitor extends EventEmitter {\n  /**\n     * @param {Number} [latencyCheckIntervalMs=500] How often to add a latency check event (ms)\n     * @param {Number} [dataEmitIntervalMs=5000] How often to summarize latency check events. null or 0 disables event firing\n     * @param {function} [asyncTestFn] What cb-style async function to use\n     * @param {Number} [latencyRandomPercentage=5] What percent (+/-) of latencyCheckIntervalMs should we randomly use? This helps avoid alignment to other events.\n     */\n  constructor ({ latencyCheckIntervalMs, dataEmitIntervalMs, asyncTestFn, latencyRandomPercentage } = {}) {\n    super()\n    const that = this\n\n    // 0 isn't valid here, so its ok to use ||\n    that.latencyCheckIntervalMs = latencyCheckIntervalMs || 500 // 0.5s\n    that.latencyRandomPercentage = latencyRandomPercentage || 10\n    that._latecyCheckMultiply = 2 * (that.latencyRandomPercentage / 100.0) * that.latencyCheckIntervalMs\n    that._latecyCheckSubtract = that._latecyCheckMultiply / 2\n\n    that.dataEmitIntervalMs = (dataEmitIntervalMs === null || dataEmitIntervalMs === 0) ? undefined\n      : dataEmitIntervalMs || 5 * 1000 // 5s\n    debug('latencyCheckIntervalMs: %s dataEmitIntervalMs: %s',\n      that.latencyCheckIntervalMs, that.dataEmitIntervalMs)\n    if (that.dataEmitIntervalMs) {\n      debug('Expecting ~%s events per summary', that.latencyCheckIntervalMs / that.dataEmitIntervalMs)\n    } else {\n      debug('Not emitting summaries')\n    }\n\n    that.asyncTestFn = asyncTestFn // If there is no asyncFn, we measure latency\n\n    // If process: use high resolution timer\n    if (globalThis.process && globalThis.process.hrtime) {\n      debug('Using process.hrtime for timing')\n      that.now = globalThis.process.hrtime\n      that.getDeltaMS = (startTime) => {\n        const hrtime = that.now(startTime)\n        return (hrtime[0] * 1000) + (hrtime[1] / 1000000)\n      }\n      // Let's try for a timer that only monotonically increases\n    } else if (typeof window !== 'undefined' && window.performance && window.performance.now) {\n      debug('Using performance.now for timing')\n      that.now = window.performance.now.bind(window.performance)\n      that.getDeltaMS = (startTime) => Math.round(that.now() - startTime)\n    } else {\n      debug('Using Date.now for timing')\n      that.now = Date.now\n      that.getDeltaMS = (startTime) => that.now() - startTime\n    }\n\n    that._latencyData = that._initLatencyData()\n\n    // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,\n    // so we fall back to another library\n    // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs\n    if (isBrowser()) {\n      that._visibilityChangeEmitter = new VisibilityChangeEmitter()\n      that._visibilityChangeEmitter.on('visibilityChange', (pageInFocus) => {\n        if (pageInFocus) {\n          that._startTimers()\n        } else {\n          that._emitSummary()\n          that._stopTimers()\n        }\n      })\n    }\n\n    if (!that._visibilityChangeEmitter || that._visibilityChangeEmitter.isVisible()) {\n      that._startTimers()\n    }\n  }\n\n  /**\n     * Start internal timers\n     * @private\n     */\n  _startTimers () {\n    // Timer already started, ignore this\n    if (this._checkLatencyID) {\n      return\n    }\n    this._checkLatency()\n    if (this.dataEmitIntervalMs) {\n      this._emitIntervalID = setInterval(() => this._emitSummary(), this.dataEmitIntervalMs)\n      if (typeof this._emitIntervalID.unref === 'function') {\n        this._emitIntervalID.unref() // Doesn't block exit\n      }\n    }\n  }\n\n  /**\n     * Stop internal timers\n     * @private\n     */\n  _stopTimers () {\n    if (this._checkLatencyID) {\n      clearTimeout(this._checkLatencyID)\n      this._checkLatencyID = undefined\n    }\n    if (this._emitIntervalID) {\n      clearInterval(this._emitIntervalID)\n      this._emitIntervalID = undefined\n    }\n  }\n\n  /**\n     * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show\n     * @private\n     */\n  _emitSummary () {\n    const summary = this.getSummary()\n    if (summary.events > 0) {\n      this.emit('data', summary)\n    }\n  }\n\n  /**\n     * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,\n     * it will not count for this time period\n     * @returns {SummaryObject}\n     */\n  getSummary () {\n    // We might want to adjust for the number of expected events\n    // Example: first 1 event it comes back, then such a long blocker that the next emit check comes\n    // Then this fires - looks like no latency!!\n    const latency = {\n      events: this._latencyData.events,\n      minMs: this._latencyData.minMs,\n      maxMs: this._latencyData.maxMs,\n      avgMs: this._latencyData.events ? this._latencyData.totalMs / this._latencyData.events\n        : Number.POSITIVE_INFINITY,\n      lengthMs: this.getDeltaMS(this._latencyData.startTime)\n    }\n    this._latencyData = this._initLatencyData() // Clear\n\n    debug('Summary: %O', latency)\n    return latency\n  }\n\n  /**\n     * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,\n     * it will simply report on event loop latency.\n     *\n     * @private\n     */\n  _checkLatency () {\n    const that = this\n    // Randomness is needed to avoid alignment by accident to regular things in the event loop\n    const randomness = (Math.random() * that._latecyCheckMultiply) - that._latecyCheckSubtract\n\n    // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset\n    const localData = {\n      deltaOffset: Math.ceil(that.latencyCheckIntervalMs + randomness),\n      startTime: that.now()\n    }\n\n    const cb = () => {\n      // We are already stopped, ignore this datapoint\n      if (!this._checkLatencyID) {\n        return\n      }\n      const deltaMS = that.getDeltaMS(localData.startTime) - localData.deltaOffset\n      that._checkLatency() // Start again ASAP\n\n      // Add the data point. If this gets complex, refactor it\n      that._latencyData.events++\n      that._latencyData.minMs = Math.min(that._latencyData.minMs, deltaMS)\n      that._latencyData.maxMs = Math.max(that._latencyData.maxMs, deltaMS)\n      that._latencyData.totalMs += deltaMS\n      debug('MS: %s Data: %O', deltaMS, that._latencyData)\n    }\n    debug('localData: %O', localData)\n\n    this._checkLatencyID = setTimeout(() => {\n      // This gets rid of including event loop\n      if (that.asyncTestFn) {\n        // Clear timing related things\n        localData.deltaOffset = 0\n        localData.startTime = that.now()\n        that.asyncTestFn(cb)\n      } else {\n        // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.\n        // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.\n        localData.deltaOffset -= 1\n        // If there is no function to test, we mean check latency which is a special case that is really cb => cb()\n        // We avoid that for the few extra function all overheads. Also, we want to keep the timers different\n        cb()\n      }\n    }, localData.deltaOffset)\n\n    if (typeof this._checkLatencyID.unref === 'function') {\n      this._checkLatencyID.unref() // Doesn't block exit\n    }\n  }\n\n  _initLatencyData () {\n    return {\n      startTime: this.now(),\n      minMs: Number.POSITIVE_INFINITY,\n      maxMs: Number.NEGATIVE_INFINITY,\n      events: 0,\n      totalMs: 0\n    }\n  }\n}\n\nfunction isBrowser () {\n  return typeof window !== 'undefined'\n}\n\nmodule.exports = LatencyMonitor\n"]},"metadata":{},"sourceType":"script"}