{"ast":null,"code":"'use strict';\n\nconst select = require('./select');\n\nconst handle = require('./handle');\n\nconst ls = require('./ls');\n\nconst {\n  PROTOCOL_ID\n} = require('./constants');\n\nexports.PROTOCOL_ID = PROTOCOL_ID;\n\nclass MultistreamSelect {\n  constructor(stream) {\n    this._stream = stream;\n    this._shaken = false;\n  } // Perform the multistream-select handshake\n\n\n  async _handshake() {\n    if (this._shaken) return;\n    const {\n      stream\n    } = await select(this._stream, PROTOCOL_ID);\n    this._stream = stream;\n    this._shaken = true;\n  }\n\n}\n\nclass Dialer extends MultistreamSelect {\n  select(protocols) {\n    return select(this._stream, protocols, this._shaken ? null : PROTOCOL_ID);\n  }\n\n  async ls() {\n    await this._handshake();\n    const {\n      stream,\n      protocols\n    } = await ls(this._stream);\n    this._stream = stream;\n    return protocols;\n  }\n\n}\n\nexports.Dialer = Dialer;\n\nclass Listener extends MultistreamSelect {\n  handle(protocols) {\n    return handle(this._stream, protocols);\n  }\n\n}\n\nexports.Listener = Listener;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/multistream-select/src/index.js"],"names":["select","require","handle","ls","PROTOCOL_ID","exports","MultistreamSelect","constructor","stream","_stream","_shaken","_handshake","Dialer","protocols","Listener"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAkBH,OAAO,CAAC,aAAD,CAA/B;;AAEAI,OAAO,CAACD,WAAR,GAAsBA,WAAtB;;AAEA,MAAME,iBAAN,CAAwB;AACtBC,EAAAA,WAAW,CAAEC,MAAF,EAAU;AACnB,SAAKC,OAAL,GAAeD,MAAf;AACA,SAAKE,OAAL,GAAe,KAAf;AACD,GAJqB,CAMtB;;;AACA,QAAMC,UAAN,GAAoB;AAClB,QAAI,KAAKD,OAAT,EAAkB;AAClB,UAAM;AAAEF,MAAAA;AAAF,QAAa,MAAMR,MAAM,CAAC,KAAKS,OAAN,EAAeL,WAAf,CAA/B;AACA,SAAKK,OAAL,GAAeD,MAAf;AACA,SAAKE,OAAL,GAAe,IAAf;AACD;;AAZqB;;AAexB,MAAME,MAAN,SAAqBN,iBAArB,CAAuC;AACrCN,EAAAA,MAAM,CAAEa,SAAF,EAAa;AACjB,WAAOb,MAAM,CAAC,KAAKS,OAAN,EAAeI,SAAf,EAA0B,KAAKH,OAAL,GAAe,IAAf,GAAsBN,WAAhD,CAAb;AACD;;AAED,QAAMD,EAAN,GAAY;AACV,UAAM,KAAKQ,UAAL,EAAN;AACA,UAAM;AAAEH,MAAAA,MAAF;AAAUK,MAAAA;AAAV,QAAwB,MAAMV,EAAE,CAAC,KAAKM,OAAN,CAAtC;AACA,SAAKA,OAAL,GAAeD,MAAf;AACA,WAAOK,SAAP;AACD;;AAVoC;;AAavCR,OAAO,CAACO,MAAR,GAAiBA,MAAjB;;AAEA,MAAME,QAAN,SAAuBR,iBAAvB,CAAyC;AACvCJ,EAAAA,MAAM,CAAEW,SAAF,EAAa;AACjB,WAAOX,MAAM,CAAC,KAAKO,OAAN,EAAeI,SAAf,CAAb;AACD;;AAHsC;;AAMzCR,OAAO,CAACS,QAAR,GAAmBA,QAAnB","sourcesContent":["'use strict'\n\nconst select = require('./select')\nconst handle = require('./handle')\nconst ls = require('./ls')\nconst { PROTOCOL_ID } = require('./constants')\n\nexports.PROTOCOL_ID = PROTOCOL_ID\n\nclass MultistreamSelect {\n  constructor (stream) {\n    this._stream = stream\n    this._shaken = false\n  }\n\n  // Perform the multistream-select handshake\n  async _handshake () {\n    if (this._shaken) return\n    const { stream } = await select(this._stream, PROTOCOL_ID)\n    this._stream = stream\n    this._shaken = true\n  }\n}\n\nclass Dialer extends MultistreamSelect {\n  select (protocols) {\n    return select(this._stream, protocols, this._shaken ? null : PROTOCOL_ID)\n  }\n\n  async ls () {\n    await this._handshake()\n    const { stream, protocols } = await ls(this._stream)\n    this._stream = stream\n    return protocols\n  }\n}\n\nexports.Dialer = Dialer\n\nclass Listener extends MultistreamSelect {\n  handle (protocols) {\n    return handle(this._stream, protocols)\n  }\n}\n\nexports.Listener = Listener\n"]},"metadata":{},"sourceType":"script"}