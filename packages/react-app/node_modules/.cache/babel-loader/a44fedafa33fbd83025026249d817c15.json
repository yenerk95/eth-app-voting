{"ast":null,"code":"'use strict';\n\nconst Repo = require('ipfs-repo');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = function ({\n  repo\n}) {\n  return withTimeoutOption(async function* refsLocal(options = {}) {\n    for await (const result of repo.blocks.query({\n      keysOnly: true,\n      signal: options.signal\n    })) {\n      yield dsKeyToRef(result.key);\n    }\n  });\n};\n\nfunction dsKeyToRef(key) {\n  try {\n    return {\n      ref: Repo.utils.blockstore.keyToCid(key).toString()\n    };\n  } catch (err) {\n    return {\n      err: `Could not convert block with key '${key}' to CID: ${err.message}`\n    };\n  }\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/refs/local.js"],"names":["Repo","require","withTimeoutOption","module","exports","repo","refsLocal","options","result","blocks","query","keysOnly","signal","dsKeyToRef","key","ref","utils","blockstore","keyToCid","toString","err","message"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,OAAO,CAAC,aAAD,CAArC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA;AAAF,CAAV,EAAoB;AACnC,SAAOH,iBAAiB,CAAC,gBAAiBI,SAAjB,CAA4BC,OAAO,GAAG,EAAtC,EAA0C;AACjE,eAAW,MAAMC,MAAjB,IAA2BH,IAAI,CAACI,MAAL,CAAYC,KAAZ,CAAkB;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,MAAM,EAAEL,OAAO,CAACK;AAAlC,KAAlB,CAA3B,EAA0F;AACxF,YAAMC,UAAU,CAACL,MAAM,CAACM,GAAR,CAAhB;AACD;AACF,GAJuB,CAAxB;AAKD,CAND;;AAQA,SAASD,UAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAI;AACF,WAAO;AAAEC,MAAAA,GAAG,EAAEf,IAAI,CAACgB,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+BJ,GAA/B,EAAoCK,QAApC;AAAP,KAAP;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,WAAO;AAAEA,MAAAA,GAAG,EAAG,qCAAoCN,GAAI,aAAYM,GAAG,CAACC,OAAQ;AAAxE,KAAP;AACD;AACF","sourcesContent":["'use strict'\n\nconst Repo = require('ipfs-repo')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = function ({ repo }) {\n  return withTimeoutOption(async function * refsLocal (options = {}) {\n    for await (const result of repo.blocks.query({ keysOnly: true, signal: options.signal })) {\n      yield dsKeyToRef(result.key)\n    }\n  })\n}\n\nfunction dsKeyToRef (key) {\n  try {\n    return { ref: Repo.utils.blockstore.keyToCid(key).toString() }\n  } catch (err) {\n    return { err: `Could not convert block with key '${key}' to CID: ${err.message}` }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}