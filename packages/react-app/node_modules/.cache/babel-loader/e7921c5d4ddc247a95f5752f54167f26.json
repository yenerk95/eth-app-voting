{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar log = require('debug')('mss:handle');\n\nvar BufferList = require('bl/BufferList');\n\nvar multistream = require('./multistream');\n\nvar handshake = require('it-handshake');\n\nvar _require = require('./constants'),\n    PROTOCOL_ID = _require.PROTOCOL_ID;\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stream, protocols) {\n    var _handshake, writer, reader, rest, shakeStream, protocol;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            protocols = Array.isArray(protocols) ? protocols : [protocols];\n            _handshake = handshake(stream), writer = _handshake.writer, reader = _handshake.reader, rest = _handshake.rest, shakeStream = _handshake.stream;\n\n          case 2:\n            if (!true) {\n              _context.next = 24;\n              break;\n            }\n\n            _context.next = 5;\n            return multistream.read(reader);\n\n          case 5:\n            protocol = _context.sent.toString();\n            log('read \"%s\"', protocol);\n\n            if (!(protocol === PROTOCOL_ID)) {\n              _context.next = 11;\n              break;\n            }\n\n            log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol);\n            multistream.write(writer, PROTOCOL_ID);\n            return _context.abrupt(\"continue\", 2);\n\n          case 11:\n            if (!protocols.includes(protocol)) {\n              _context.next = 16;\n              break;\n            }\n\n            multistream.write(writer, protocol);\n            log('respond with \"%s\" for \"%s\"', protocol, protocol);\n            rest();\n            return _context.abrupt(\"return\", {\n              stream: shakeStream,\n              protocol: protocol\n            });\n\n          case 16:\n            if (!(protocol === 'ls')) {\n              _context.next = 20;\n              break;\n            }\n\n            // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n            multistream.write(writer, new BufferList(protocols.map(function (p) {\n              return multistream.encode(p);\n            })));\n            log('respond with \"%s\" for %s', protocols, protocol);\n            return _context.abrupt(\"continue\", 2);\n\n          case 20:\n            multistream.write(writer, 'na');\n            log('respond with \"na\" for \"%s\"', protocol);\n            _context.next = 2;\n            break;\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/multistream-select/src/handle.js"],"names":["log","require","BufferList","multistream","handshake","PROTOCOL_ID","module","exports","stream","protocols","Array","isArray","writer","reader","rest","shakeStream","read","protocol","toString","write","includes","map","p","encode"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAZ;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB;;eACwBA,OAAO,CAAC,aAAD,C;IAAvBI,W,YAAAA,W;;AAERC,MAAM,CAACC,OAAP;AAAA,sEAAiB,iBAAOC,MAAP,EAAeC,SAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfA,YAAAA,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcF,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAAnD;AADe,yBAEuCL,SAAS,CAACI,MAAD,CAFhD,EAEPI,MAFO,cAEPA,MAFO,EAECC,MAFD,cAECA,MAFD,EAESC,IAFT,cAESA,IAFT,EAEuBC,WAFvB,cAEeP,MAFf;;AAAA;AAAA,iBAIR,IAJQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKWL,WAAW,CAACa,IAAZ,CAAiBH,MAAjB,CALX;;AAAA;AAKPI,YAAAA,QALO,iBAKqCC,QALrC;AAMblB,YAAAA,GAAG,CAAC,WAAD,EAAciB,QAAd,CAAH;;AANa,kBAQTA,QAAQ,KAAKZ,WARJ;AAAA;AAAA;AAAA;;AASXL,YAAAA,GAAG,CAAC,4BAAD,EAA+BK,WAA/B,EAA4CY,QAA5C,CAAH;AACAd,YAAAA,WAAW,CAACgB,KAAZ,CAAkBP,MAAlB,EAA0BP,WAA1B;AAVW;;AAAA;AAAA,iBAcTI,SAAS,CAACW,QAAV,CAAmBH,QAAnB,CAdS;AAAA;AAAA;AAAA;;AAeXd,YAAAA,WAAW,CAACgB,KAAZ,CAAkBP,MAAlB,EAA0BK,QAA1B;AACAjB,YAAAA,GAAG,CAAC,4BAAD,EAA+BiB,QAA/B,EAAyCA,QAAzC,CAAH;AACAH,YAAAA,IAAI;AAjBO,6CAkBJ;AAAEN,cAAAA,MAAM,EAAEO,WAAV;AAAuBE,cAAAA,QAAQ,EAARA;AAAvB,aAlBI;;AAAA;AAAA,kBAqBTA,QAAQ,KAAK,IArBJ;AAAA;AAAA;AAAA;;AAsBX;AACAd,YAAAA,WAAW,CAACgB,KAAZ,CAAkBP,MAAlB,EAA0B,IAAIV,UAAJ,CACxBO,SAAS,CAACY,GAAV,CAAc,UAAAC,CAAC;AAAA,qBAAInB,WAAW,CAACoB,MAAZ,CAAmBD,CAAnB,CAAJ;AAAA,aAAf,CADwB,CAA1B;AAGAtB,YAAAA,GAAG,CAAC,0BAAD,EAA6BS,SAA7B,EAAwCQ,QAAxC,CAAH;AA1BW;;AAAA;AA8Bbd,YAAAA,WAAW,CAACgB,KAAZ,CAAkBP,MAAlB,EAA0B,IAA1B;AACAZ,YAAAA,GAAG,CAAC,4BAAD,EAA+BiB,QAA/B,CAAH;AA/Ba;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst log = require('debug')('mss:handle')\nconst BufferList = require('bl/BufferList')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\nconst { PROTOCOL_ID } = require('./constants')\n\nmodule.exports = async (stream, protocols) => {\n  protocols = Array.isArray(protocols) ? protocols : [protocols]\n  const { writer, reader, rest, stream: shakeStream } = handshake(stream)\n\n  while (true) {\n    const protocol = (await multistream.read(reader)).toString()\n    log('read \"%s\"', protocol)\n\n    if (protocol === PROTOCOL_ID) {\n      log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol)\n      multistream.write(writer, PROTOCOL_ID)\n      continue\n    }\n\n    if (protocols.includes(protocol)) {\n      multistream.write(writer, protocol)\n      log('respond with \"%s\" for \"%s\"', protocol, protocol)\n      rest()\n      return { stream: shakeStream, protocol }\n    }\n\n    if (protocol === 'ls') {\n      // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n      multistream.write(writer, new BufferList(\n        protocols.map(p => multistream.encode(p))\n      ))\n      log('respond with \"%s\" for %s', protocols, protocol)\n      continue\n    }\n\n    multistream.write(writer, 'na')\n    log('respond with \"na\" for \"%s\"', protocol)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}