{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar errcode = require('err-code');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:peer-store:proto-book');\nlog.error = debug('libp2p:peer-store:proto-book:error');\n\nvar PeerId = require('peer-id');\n\nvar Book = require('./book');\n\nvar _require = require('../errors'),\n    ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n/**\n * The ProtoBook is responsible for keeping the known supported\n * protocols of a peer.\n * @fires ProtoBook#change:protocols\n */\n\n\nvar ProtoBook = /*#__PURE__*/function (_Book) {\n  _inherits(ProtoBook, _Book);\n\n  var _super = _createSuper(ProtoBook);\n\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  function ProtoBook(peerStore) {\n    var _this;\n\n    _classCallCheck(this, ProtoBook);\n\n    /**\n     * PeerStore Event emitter, used by the ProtoBook to emit:\n     * \"change:protocols\" - emitted when the known protocols of a peer change.\n     */\n    _this = _super.call(this, {\n      peerStore: peerStore,\n      eventName: 'change:protocols',\n      eventProperty: 'protocols',\n      eventTransformer: function eventTransformer(data) {\n        return Array.from(data);\n      }\n    });\n    /**\n     * Map known peers to their known protocols.\n     * @type {Map<string, Set<string>>}\n     */\n\n    _this.data = new Map();\n    return _this;\n  }\n  /**\n   * Set known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   * @override\n   * @param {PeerId} peerId\n   * @param {Array<string>} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  _createClass(ProtoBook, [{\n    key: \"set\",\n    value: function set(peerId, protocols) {\n      if (!PeerId.isPeerId(peerId)) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (!protocols) {\n        log.error('protocols must be provided to store data');\n        throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n      }\n\n      var id = peerId.toB58String();\n      var recSet = this.data.get(id);\n      var newSet = new Set(protocols);\n\n      var isSetEqual = function isSetEqual(a, b) {\n        return a.size === b.size && _toConsumableArray(a).every(function (value) {\n          return b.has(value);\n        });\n      }; // Already knows the peer and the recorded protocols are the same?\n      // If yes, no changes needed!\n\n\n      if (recSet && isSetEqual(recSet, newSet)) {\n        log(\"the protocols provided to store are equal to the already stored for \".concat(id));\n        return this;\n      }\n\n      this._setData(peerId, newSet);\n\n      log(\"stored provided protocols for \".concat(id));\n      return this;\n    }\n    /**\n     * Adds known protocols of a provided peer.\n     * If the peer was not known before, it will be added.\n     * @param {PeerId} peerId\n     * @param {Array<string>} protocols\n     * @returns {ProtoBook}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(peerId, protocols) {\n      if (!PeerId.isPeerId(peerId)) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (!protocols) {\n        log.error('protocols must be provided to store data');\n        throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n      }\n\n      var id = peerId.toB58String();\n      var recSet = this.data.get(id) || new Set();\n      var newSet = new Set([].concat(_toConsumableArray(recSet), _toConsumableArray(protocols))); // Set Union\n      // Any new protocol added?\n\n      if (recSet.size === newSet.size) {\n        log(\"the protocols provided to store are already stored for \".concat(id));\n        return this;\n      }\n\n      protocols = _toConsumableArray(newSet);\n\n      this._setData(peerId, newSet);\n\n      log(\"added provided protocols for \".concat(id));\n      return this;\n    }\n  }]);\n\n  return ProtoBook;\n}(Book);\n\nmodule.exports = ProtoBook;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/peer-store/proto-book.js"],"names":["errcode","require","debug","log","error","PeerId","Book","ERR_INVALID_PARAMETERS","codes","ProtoBook","peerStore","eventName","eventProperty","eventTransformer","data","Array","from","Map","peerId","protocols","isPeerId","Error","id","toB58String","recSet","get","newSet","Set","isSetEqual","a","b","size","every","value","has","_setData","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('libp2p:peer-store:proto-book')\nlog.error = debug('libp2p:peer-store:proto-book:error')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * The ProtoBook is responsible for keeping the known supported\n * protocols of a peer.\n * @fires ProtoBook#change:protocols\n */\nclass ProtoBook extends Book {\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  constructor (peerStore) {\n    /**\n     * PeerStore Event emitter, used by the ProtoBook to emit:\n     * \"change:protocols\" - emitted when the known protocols of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:protocols',\n      eventProperty: 'protocols',\n      eventTransformer: (data) => Array.from(data)\n    })\n\n    /**\n     * Map known peers to their known protocols.\n     * @type {Map<string, Set<string>>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   * @override\n   * @param {PeerId} peerId\n   * @param {Array<string>} protocols\n   * @returns {ProtoBook}\n   */\n  set (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id)\n    const newSet = new Set(protocols)\n\n    const isSetEqual = (a, b) => a.size === b.size && [...a].every(value => b.has(value))\n\n    // Already knows the peer and the recorded protocols are the same?\n    // If yes, no changes needed!\n    if (recSet && isSetEqual(recSet, newSet)) {\n      log(`the protocols provided to store are equal to the already stored for ${id}`)\n      return this\n    }\n\n    this._setData(peerId, newSet)\n    log(`stored provided protocols for ${id}`)\n\n    return this\n  }\n\n  /**\n   * Adds known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   * @param {PeerId} peerId\n   * @param {Array<string>} protocols\n   * @returns {ProtoBook}\n   */\n  add (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id) || new Set()\n    const newSet = new Set([...recSet, ...protocols]) // Set Union\n\n    // Any new protocol added?\n    if (recSet.size === newSet.size) {\n      log(`the protocols provided to store are already stored for ${id}`)\n      return this\n    }\n\n    protocols = [...newSet]\n\n    this._setData(peerId, newSet)\n    log(`added provided protocols for ${id}`)\n\n    return this\n  }\n}\n\nmodule.exports = ProtoBook\n"]},"metadata":{},"sourceType":"script"}