{"ast":null,"code":"'use strict';\n\nconst AbortController = require('abort-controller');\n\nconst anySignal = require('any-signal');\n\nconst debug = require('debug');\n\nconst errCode = require('err-code');\n\nconst log = debug('libp2p:dialer:request');\nlog.error = debug('libp2p:dialer:request:error');\n\nconst FIFO = require('p-fifo');\n\nconst pAny = require('p-any');\n\nclass DialRequest {\n  /**\n   * Manages running the `dialAction` on multiple provided `addrs` in parallel\n   * up to a maximum determined by the number of tokens returned\n   * from `dialer.getTokens`. Once a DialRequest is created, it can be\n   * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n   * all other dials in the request will be cancelled.\n   * @param {object} options\n   * @param {Multiaddr[]} options.addrs\n   * @param {function(Multiaddr):Promise<Connection>} options.dialAction\n   * @param {Dialer} options.dialer\n   */\n  constructor({\n    addrs,\n    dialAction,\n    dialer\n  }) {\n    this.addrs = addrs;\n    this.dialer = dialer;\n    this.dialAction = dialAction;\n  }\n  /**\n   * @async\n   * @param {object} options\n   * @param {AbortSignal} options.signal An AbortController signal\n   * @returns {Connection}\n   */\n\n\n  async run(options) {\n    const tokens = this.dialer.getTokens(this.addrs.length); // If no tokens are available, throw\n\n    if (tokens.length < 1) {\n      throw errCode(new Error('No dial tokens available'), 'ERR_NO_DIAL_TOKENS');\n    }\n\n    const tokenHolder = new FIFO();\n    tokens.forEach(token => tokenHolder.push(token));\n    const dialAbortControllers = this.addrs.map(() => new AbortController());\n    let completedDials = 0;\n\n    try {\n      return await pAny(this.addrs.map(async (addr, i) => {\n        const token = await tokenHolder.shift(); // get token\n\n        let conn;\n\n        try {\n          const signal = dialAbortControllers[i].signal;\n          conn = await this.dialAction(addr, { ...options,\n            signal: anySignal([signal, options.signal])\n          }); // Remove the successful AbortController so it is not aborted\n\n          dialAbortControllers.splice(i, 1);\n        } finally {\n          completedDials++; // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n\n          if (this.addrs.length - completedDials >= tokens.length) {\n            tokenHolder.push(token);\n          } else {\n            this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);\n          }\n        }\n\n        return conn;\n      }));\n    } finally {\n      dialAbortControllers.map(c => c.abort()); // success/failure happened, abort everything else\n\n      tokens.forEach(token => this.dialer.releaseToken(token)); // release tokens back to the dialer\n    }\n  }\n\n}\n\nmodule.exports.DialRequest = DialRequest;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/dialer/dial-request.js"],"names":["AbortController","require","anySignal","debug","errCode","log","error","FIFO","pAny","DialRequest","constructor","addrs","dialAction","dialer","run","options","tokens","getTokens","length","Error","tokenHolder","forEach","token","push","dialAbortControllers","map","completedDials","addr","i","shift","conn","signal","splice","releaseToken","indexOf","c","abort","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst AbortController = require('abort-controller')\nconst anySignal = require('any-signal')\nconst debug = require('debug')\nconst errCode = require('err-code')\nconst log = debug('libp2p:dialer:request')\nlog.error = debug('libp2p:dialer:request:error')\nconst FIFO = require('p-fifo')\nconst pAny = require('p-any')\n\nclass DialRequest {\n  /**\n   * Manages running the `dialAction` on multiple provided `addrs` in parallel\n   * up to a maximum determined by the number of tokens returned\n   * from `dialer.getTokens`. Once a DialRequest is created, it can be\n   * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n   * all other dials in the request will be cancelled.\n   * @param {object} options\n   * @param {Multiaddr[]} options.addrs\n   * @param {function(Multiaddr):Promise<Connection>} options.dialAction\n   * @param {Dialer} options.dialer\n   */\n  constructor ({\n    addrs,\n    dialAction,\n    dialer\n  }) {\n    this.addrs = addrs\n    this.dialer = dialer\n    this.dialAction = dialAction\n  }\n\n  /**\n   * @async\n   * @param {object} options\n   * @param {AbortSignal} options.signal An AbortController signal\n   * @returns {Connection}\n   */\n  async run (options) {\n    const tokens = this.dialer.getTokens(this.addrs.length)\n    // If no tokens are available, throw\n    if (tokens.length < 1) {\n      throw errCode(new Error('No dial tokens available'), 'ERR_NO_DIAL_TOKENS')\n    }\n\n    const tokenHolder = new FIFO()\n    tokens.forEach(token => tokenHolder.push(token))\n    const dialAbortControllers = this.addrs.map(() => new AbortController())\n    let completedDials = 0\n\n    try {\n      return await pAny(this.addrs.map(async (addr, i) => {\n        const token = await tokenHolder.shift() // get token\n        let conn\n        try {\n          const signal = dialAbortControllers[i].signal\n          conn = await this.dialAction(addr, { ...options, signal: anySignal([signal, options.signal]) })\n          // Remove the successful AbortController so it is not aborted\n          dialAbortControllers.splice(i, 1)\n        } finally {\n          completedDials++\n          // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n          if (this.addrs.length - completedDials >= tokens.length) {\n            tokenHolder.push(token)\n          } else {\n            this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0])\n          }\n        }\n\n        return conn\n      }))\n    } finally {\n      dialAbortControllers.map(c => c.abort()) // success/failure happened, abort everything else\n      tokens.forEach(token => this.dialer.releaseToken(token)) // release tokens back to the dialer\n    }\n  }\n}\n\nmodule.exports.DialRequest = DialRequest\n"]},"metadata":{},"sourceType":"script"}