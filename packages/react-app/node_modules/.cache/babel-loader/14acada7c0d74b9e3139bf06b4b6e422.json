{"ast":null,"code":"'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nrequire('node-forge/lib/aes');\n\nvar forge = require('node-forge/lib/forge');\n\nmodule.exports = {\n  createCipheriv: function createCipheriv(mode, key, iv) {\n    var cipher2 = forge.cipher.createCipher('AES-CTR', key.toString('binary'));\n    cipher2.start({\n      iv: iv.toString('binary')\n    });\n    return {\n      update: function update(data) {\n        cipher2.update(forge.util.createBuffer(data.toString('binary')));\n        return Buffer.from(cipher2.output.getBytes(), 'binary');\n      }\n    };\n  },\n  createDecipheriv: function createDecipheriv(mode, key, iv) {\n    var cipher2 = forge.cipher.createDecipher('AES-CTR', key.toString('binary'));\n    cipher2.start({\n      iv: iv.toString('binary')\n    });\n    return {\n      update: function update(data) {\n        cipher2.update(forge.util.createBuffer(data.toString('binary')));\n        return Buffer.from(cipher2.output.getBytes(), 'binary');\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/aes/ciphers-browser.js"],"names":["require","Buffer","forge","module","exports","createCipheriv","mode","key","iv","cipher2","cipher","createCipher","toString","start","update","data","util","createBuffer","from","output","getBytes","createDecipheriv","createDecipher"],"mappings":"AAAA;;eACmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACRD,OAAO,CAAC,oBAAD,CAAP;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,sBAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,cAAc,EAAE,wBAACC,IAAD,EAAOC,GAAP,EAAYC,EAAZ,EAAmB;AACjC,QAAMC,OAAO,GAAGP,KAAK,CAACQ,MAAN,CAAaC,YAAb,CAA0B,SAA1B,EAAqCJ,GAAG,CAACK,QAAJ,CAAa,QAAb,CAArC,CAAhB;AACAH,IAAAA,OAAO,CAACI,KAAR,CAAc;AAAEL,MAAAA,EAAE,EAAEA,EAAE,CAACI,QAAH,CAAY,QAAZ;AAAN,KAAd;AACA,WAAO;AACLE,MAAAA,MAAM,EAAE,gBAACC,IAAD,EAAU;AAChBN,QAAAA,OAAO,CAACK,MAAR,CAAeZ,KAAK,CAACc,IAAN,CAAWC,YAAX,CAAwBF,IAAI,CAACH,QAAL,CAAc,QAAd,CAAxB,CAAf;AACA,eAAOX,MAAM,CAACiB,IAAP,CAAYT,OAAO,CAACU,MAAR,CAAeC,QAAf,EAAZ,EAAuC,QAAvC,CAAP;AACD;AAJI,KAAP;AAMD,GAVc;AAWfC,EAAAA,gBAAgB,EAAE,0BAACf,IAAD,EAAOC,GAAP,EAAYC,EAAZ,EAAmB;AACnC,QAAMC,OAAO,GAAGP,KAAK,CAACQ,MAAN,CAAaY,cAAb,CAA4B,SAA5B,EAAuCf,GAAG,CAACK,QAAJ,CAAa,QAAb,CAAvC,CAAhB;AACAH,IAAAA,OAAO,CAACI,KAAR,CAAc;AAAEL,MAAAA,EAAE,EAAEA,EAAE,CAACI,QAAH,CAAY,QAAZ;AAAN,KAAd;AACA,WAAO;AACLE,MAAAA,MAAM,EAAE,gBAACC,IAAD,EAAU;AAChBN,QAAAA,OAAO,CAACK,MAAR,CAAeZ,KAAK,CAACc,IAAN,CAAWC,YAAX,CAAwBF,IAAI,CAACH,QAAL,CAAc,QAAd,CAAxB,CAAf;AACA,eAAOX,MAAM,CAACiB,IAAP,CAAYT,OAAO,CAACU,MAAR,CAAeC,QAAf,EAAZ,EAAuC,QAAvC,CAAP;AACD;AAJI,KAAP;AAMD;AApBc,CAAjB","sourcesContent":["'use strict'\nconst { Buffer } = require('buffer')\nrequire('node-forge/lib/aes')\nconst forge = require('node-forge/lib/forge')\n\nmodule.exports = {\n  createCipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createCipher('AES-CTR', key.toString('binary'))\n    cipher2.start({ iv: iv.toString('binary') })\n    return {\n      update: (data) => {\n        cipher2.update(forge.util.createBuffer(data.toString('binary')))\n        return Buffer.from(cipher2.output.getBytes(), 'binary')\n      }\n    }\n  },\n  createDecipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createDecipher('AES-CTR', key.toString('binary'))\n    cipher2.start({ iv: iv.toString('binary') })\n    return {\n      update: (data) => {\n        cipher2.update(forge.util.createBuffer(data.toString('binary')))\n        return Buffer.from(cipher2.output.getBytes(), 'binary')\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}