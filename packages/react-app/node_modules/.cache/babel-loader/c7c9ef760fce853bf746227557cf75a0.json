{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multicodec = require('multicodec');\n\nconst multihashing = require('multihashing-async');\n\nexports = module.exports;\nexports.codec = multicodec.DAG_PB;\nexports.defaultHashAlg = multicodec.SHA2_256;\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\n\nconst cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = {\n    cidVersion: 1,\n    hashAlg: exports.defaultHashAlg\n  };\n  const options = Object.assign(defaultOptions, userOptions);\n  const multihash = await multihashing(binaryBlob, options.hashAlg);\n  const codecName = multicodec.print[exports.codec];\n  const cid = new CID(options.cidVersion, codecName, multihash);\n  return cid;\n};\n\nexports.cid = cid;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipld-dag-pb/src/genCid.js"],"names":["CID","require","multicodec","multihashing","exports","module","codec","DAG_PB","defaultHashAlg","SHA2_256","cid","binaryBlob","userOptions","defaultOptions","cidVersion","hashAlg","options","Object","assign","multihash","codecName","print"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,oBAAD,CAA5B;;AAEAG,OAAO,GAAGC,MAAM,CAACD,OAAjB;AAEAA,OAAO,CAACE,KAAR,GAAgBJ,UAAU,CAACK,MAA3B;AACAH,OAAO,CAACI,cAAR,GAAyBN,UAAU,CAACO,QAApC;AAEA;;;;;;;;;;AASA,MAAMC,GAAG,GAAG,OAAOC,UAAP,EAAmBC,WAAnB,KAAmC;AAC7C,QAAMC,cAAc,GAAG;AAAEC,IAAAA,UAAU,EAAE,CAAd;AAAiBC,IAAAA,OAAO,EAAEX,OAAO,CAACI;AAAlC,GAAvB;AACA,QAAMQ,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcL,cAAd,EAA8BD,WAA9B,CAAhB;AAEA,QAAMO,SAAS,GAAG,MAAMhB,YAAY,CAACQ,UAAD,EAAaK,OAAO,CAACD,OAArB,CAApC;AACA,QAAMK,SAAS,GAAGlB,UAAU,CAACmB,KAAX,CAAiBjB,OAAO,CAACE,KAAzB,CAAlB;AACA,QAAMI,GAAG,GAAG,IAAIV,GAAJ,CAAQgB,OAAO,CAACF,UAAhB,EAA4BM,SAA5B,EAAuCD,SAAvC,CAAZ;AAEA,SAAOT,GAAP;AACD,CATD;;AAWAN,OAAO,CAACM,GAAR,GAAcA,GAAd","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\n\nexports = module.exports\n\nexports.codec = multicodec.DAG_PB\nexports.defaultHashAlg = multicodec.SHA2_256\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\nconst cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = { cidVersion: 1, hashAlg: exports.defaultHashAlg }\n  const options = Object.assign(defaultOptions, userOptions)\n\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\n  const codecName = multicodec.print[exports.codec]\n  const cid = new CID(options.cidVersion, codecName, multihash)\n\n  return cid\n}\n\nexports.cid = cid\n"]},"metadata":{},"sourceType":"script"}