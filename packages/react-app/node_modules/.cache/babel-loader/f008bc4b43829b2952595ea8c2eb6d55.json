{"ast":null,"code":"'use strict';\n\nconst defaultMigrations = require('../migrations');\n\nconst repoVersion = require('./repo/version');\n\nconst repoLock = require('./repo/lock');\n\nconst errors = require('./errors');\n\nconst log = require('debug')('repo-migrations:migrator');\n\nexports.getCurrentRepoVersion = repoVersion.getVersion;\nexports.errors = errors;\n/**\n * Returns the version of latest migration.\n * If no migrations are present returns 0.\n *\n * @param {array?} migrations - Array of migrations to consider. If undefined, the bundled migrations are used. Mainly for testing purpose.\n * @returns {int}\n */\n\nfunction getLatestMigrationVersion(migrations) {\n  migrations = migrations || defaultMigrations;\n\n  if (!Array.isArray(migrations) || migrations.length === 0) {\n    return 0;\n  }\n\n  return migrations[migrations.length - 1].version;\n}\n\nexports.getLatestMigrationVersion = getLatestMigrationVersion;\n/**\n * Main function to execute forward migrations.\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {int} toVersion - Version to which the repo should be migrated.\n * @param {Object} options - Options for migration\n * @param {boolean?} options.ignoreLock - Won't lock the repo for applying the migrations. Use with caution.\n * @param {object?} options.repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {function?} options.onProgress - Callback which will be called after each executed migration to report progress\n * @param {boolean?} options.isDryRun - Allows to simulate the execution of the migrations without any effect.\n * @param {array?} options.migrations - Array of migrations to migrate. If undefined, the bundled migrations are used. Mainly for testing purpose.\n * @returns {Promise<void>}\n */\n\nasync function migrate(path, toVersion, {\n  ignoreLock = false,\n  repoOptions,\n  onProgress,\n  isDryRun = false,\n  migrations\n}) {\n  migrations = migrations || defaultMigrations;\n\n  onProgress = onProgress || (() => {});\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!');\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('toVersion argument is required!');\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!');\n  }\n\n  const currentVersion = await repoVersion.getVersion(path);\n\n  if (currentVersion === toVersion) {\n    log('Nothing to migrate.');\n    return;\n  }\n\n  if (currentVersion > toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is higher then toVersion (${toVersion}), you probably wanted to revert it?`);\n  }\n\n  verifyAvailableMigrations(migrations, currentVersion, toVersion);\n  let lock;\n  if (!isDryRun && !ignoreLock) lock = await repoLock.lock(currentVersion, path);\n\n  try {\n    let counter = 0;\n    const totalMigrations = toVersion - currentVersion;\n\n    for (const migration of migrations) {\n      if (toVersion !== undefined && migration.version > toVersion) {\n        break;\n      }\n\n      if (migration.version <= currentVersion) {\n        continue;\n      }\n\n      counter++;\n      log(`Migrating version ${migration.version}`);\n\n      try {\n        if (!isDryRun) await migration.migrate(path, repoOptions);\n      } catch (e) {\n        const lastSuccessfullyMigratedVersion = migration.version - 1;\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully migrated version: ${lastSuccessfullyMigratedVersion}`);\n        await repoVersion.setVersion(path, lastSuccessfullyMigratedVersion);\n        e.message = `During migration to version ${migration.version} exception was raised: ${e.message}`;\n        throw e;\n      }\n\n      onProgress(migration, counter, totalMigrations); // Reports on migration process\n\n      log(`Migrating to version ${migration.version} finished`);\n    }\n\n    if (!isDryRun) await repoVersion.setVersion(path, toVersion || getLatestMigrationVersion(migrations));\n    log('Repo successfully migrated ', toVersion !== undefined ? `to version ${toVersion}!` : 'to latest version!');\n  } finally {\n    if (!isDryRun && !ignoreLock) await lock.close();\n  }\n}\n\nexports.migrate = migrate;\n/**\n * Main function to execute backward migration (reversion).\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {int} toVersion - Version to which the repo will be reverted.\n * @param {Object} options - Options for the reversion\n * @param {function?} options.onProgress - Callback which will be called after each reverted migration to report progress\n * @param {object?} options.repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {boolean?} options.isDryRun - Allows to simulate the execution of the reversion without any effects. Make sense to utilize onProgress with this argument.\n * @param {boolean?} options.ignoreLock - Won't lock the repo for reverting the migrations. Use with caution.\n * @param {array?} options.migrations - Array of migrations to migrate. If undefined, the bundled migrations are used. Mainly for testing purpose.\n * @returns {Promise<void>}\n */\n\nasync function revert(path, toVersion, {\n  ignoreLock = false,\n  repoOptions,\n  onProgress,\n  isDryRun = false,\n  migrations\n}) {\n  migrations = migrations || defaultMigrations;\n\n  onProgress = onProgress || (() => {});\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!');\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('When reverting migrations, you have to specify to which version to revert!');\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!');\n  }\n\n  const currentVersion = await repoVersion.getVersion(path);\n\n  if (currentVersion === toVersion) {\n    log('Nothing to revert.');\n    return;\n  }\n\n  if (currentVersion < toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is lower then toVersion (${toVersion}), you probably wanted to migrate it?`);\n  }\n\n  verifyAvailableMigrations(migrations, toVersion, currentVersion, true);\n  let lock;\n  if (!isDryRun && !ignoreLock) lock = await repoLock.lock(currentVersion, path);\n  log(`Reverting from version ${currentVersion} to ${toVersion}`);\n\n  try {\n    let counter = 0;\n    const totalMigrations = currentVersion - toVersion;\n    const reversedMigrationArray = migrations.slice().reverse();\n\n    for (const migration of reversedMigrationArray) {\n      if (migration.version <= toVersion) {\n        break;\n      }\n\n      if (migration.version > currentVersion) {\n        continue;\n      }\n\n      counter++;\n      log(`Reverting migration version ${migration.version}`);\n\n      try {\n        if (!isDryRun) await migration.revert(path, repoOptions);\n      } catch (e) {\n        const lastSuccessfullyRevertedVersion = migration.version;\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully reverted version: ${lastSuccessfullyRevertedVersion}`);\n        await repoVersion.setVersion(path, lastSuccessfullyRevertedVersion);\n        e.message = `During reversion to version ${migration.version} exception was raised: ${e.message}`;\n        throw e;\n      }\n\n      onProgress(migration, counter, totalMigrations); // Reports on migration process\n\n      log(`Reverting to version ${migration.version} finished`);\n    }\n\n    if (!isDryRun) await repoVersion.setVersion(path, toVersion);\n    log(`All migrations successfully reverted to version ${toVersion}!`);\n  } finally {\n    if (!isDryRun && !ignoreLock) await lock.close();\n  }\n}\n\nexports.revert = revert;\n/**\n * Function checks if all migrations in given range are available.\n *\n * @param {array} migrations\n * @param {int} fromVersion\n * @param {int} toVersion\n * @param {boolean} checkReversibility - Will additionally checks if all the migrations in the range are reversible\n * @returns {void}\n */\n\nfunction verifyAvailableMigrations(migrations, fromVersion, toVersion, checkReversibility = false) {\n  let migrationCounter = 0;\n\n  for (const migration of migrations) {\n    if (migration.version > toVersion) {\n      break;\n    }\n\n    if (migration.version > fromVersion) {\n      if (checkReversibility && !migration.revert) {\n        throw new errors.NonReversibleMigrationError(`It is not possible to revert to version ${fromVersion} because migration version ${migration.version} is not reversible. Cancelling reversion.`);\n      }\n\n      migrationCounter++;\n    }\n  }\n\n  if (migrationCounter !== toVersion - fromVersion) {\n    throw new errors.InvalidValueError(`The ipfs-repo-migrations package does not have all migration to migrate from version ${fromVersion} to ${toVersion}`);\n  }\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo-migrations/src/index.js"],"names":["defaultMigrations","require","repoVersion","repoLock","errors","log","exports","getCurrentRepoVersion","getVersion","getLatestMigrationVersion","migrations","Array","isArray","length","version","migrate","path","toVersion","ignoreLock","repoOptions","onProgress","isDryRun","RequiredParameterError","Number","isInteger","InvalidValueError","currentVersion","verifyAvailableMigrations","lock","counter","totalMigrations","migration","undefined","e","lastSuccessfullyMigratedVersion","setVersion","message","close","revert","reversedMigrationArray","slice","reverse","lastSuccessfullyRevertedVersion","fromVersion","checkReversibility","migrationCounter","NonReversibleMigrationError"],"mappings":"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","sourcesContent":["'use strict'\n\nconst defaultMigrations = require('../migrations')\nconst repoVersion = require('./repo/version')\nconst repoLock = require('./repo/lock')\nconst errors = require('./errors')\n\nconst log = require('debug')('repo-migrations:migrator')\n\nexports.getCurrentRepoVersion = repoVersion.getVersion\nexports.errors = errors\n\n/**\n * Returns the version of latest migration.\n * If no migrations are present returns 0.\n *\n * @param {array?} migrations - Array of migrations to consider. If undefined, the bundled migrations are used. Mainly for testing purpose.\n * @returns {int}\n */\nfunction getLatestMigrationVersion (migrations) {\n  migrations = migrations || defaultMigrations\n\n  if (!Array.isArray(migrations) || migrations.length === 0) {\n    return 0\n  }\n\n  return migrations[migrations.length - 1].version\n}\n\nexports.getLatestMigrationVersion = getLatestMigrationVersion\n\n/**\n * Main function to execute forward migrations.\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {int} toVersion - Version to which the repo should be migrated.\n * @param {Object} options - Options for migration\n * @param {boolean?} options.ignoreLock - Won't lock the repo for applying the migrations. Use with caution.\n * @param {object?} options.repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {function?} options.onProgress - Callback which will be called after each executed migration to report progress\n * @param {boolean?} options.isDryRun - Allows to simulate the execution of the migrations without any effect.\n * @param {array?} options.migrations - Array of migrations to migrate. If undefined, the bundled migrations are used. Mainly for testing purpose.\n * @returns {Promise<void>}\n */\nasync function migrate (path, toVersion, { ignoreLock = false, repoOptions, onProgress, isDryRun = false, migrations }) {\n  migrations = migrations || defaultMigrations\n  onProgress = onProgress || (() => {})\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('toVersion argument is required!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  const currentVersion = await repoVersion.getVersion(path)\n\n  if (currentVersion === toVersion) {\n    log('Nothing to migrate.')\n    return\n  }\n\n  if (currentVersion > toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is higher then toVersion (${toVersion}), you probably wanted to revert it?`)\n  }\n\n  verifyAvailableMigrations(migrations, currentVersion, toVersion)\n\n  let lock\n  if (!isDryRun && !ignoreLock) lock = await repoLock.lock(currentVersion, path)\n\n  try {\n    let counter = 0\n    const totalMigrations = toVersion - currentVersion\n    for (const migration of migrations) {\n      if (toVersion !== undefined && migration.version > toVersion) {\n        break\n      }\n      if (migration.version <= currentVersion) {\n        continue\n      }\n\n      counter++\n      log(`Migrating version ${migration.version}`)\n      try {\n        if (!isDryRun) await migration.migrate(path, repoOptions)\n      } catch (e) {\n        const lastSuccessfullyMigratedVersion = migration.version - 1\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully migrated version: ${lastSuccessfullyMigratedVersion}`)\n        await repoVersion.setVersion(path, lastSuccessfullyMigratedVersion)\n\n        e.message = `During migration to version ${migration.version} exception was raised: ${e.message}`\n        throw e\n      }\n\n      onProgress(migration, counter, totalMigrations) // Reports on migration process\n      log(`Migrating to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) await repoVersion.setVersion(path, toVersion || getLatestMigrationVersion(migrations))\n    log('Repo successfully migrated ', toVersion !== undefined ? `to version ${toVersion}!` : 'to latest version!')\n  } finally {\n    if (!isDryRun && !ignoreLock) await lock.close()\n  }\n}\n\nexports.migrate = migrate\n\n/**\n * Main function to execute backward migration (reversion).\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {int} toVersion - Version to which the repo will be reverted.\n * @param {Object} options - Options for the reversion\n * @param {function?} options.onProgress - Callback which will be called after each reverted migration to report progress\n * @param {object?} options.repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {boolean?} options.isDryRun - Allows to simulate the execution of the reversion without any effects. Make sense to utilize onProgress with this argument.\n * @param {boolean?} options.ignoreLock - Won't lock the repo for reverting the migrations. Use with caution.\n * @param {array?} options.migrations - Array of migrations to migrate. If undefined, the bundled migrations are used. Mainly for testing purpose.\n * @returns {Promise<void>}\n */\nasync function revert (path, toVersion, { ignoreLock = false, repoOptions, onProgress, isDryRun = false, migrations }) {\n  migrations = migrations || defaultMigrations\n  onProgress = onProgress || (() => {})\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('When reverting migrations, you have to specify to which version to revert!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  const currentVersion = await repoVersion.getVersion(path)\n  if (currentVersion === toVersion) {\n    log('Nothing to revert.')\n    return\n  }\n\n  if (currentVersion < toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is lower then toVersion (${toVersion}), you probably wanted to migrate it?`)\n  }\n\n  verifyAvailableMigrations(migrations, toVersion, currentVersion, true)\n\n  let lock\n  if (!isDryRun && !ignoreLock) lock = await repoLock.lock(currentVersion, path)\n\n  log(`Reverting from version ${currentVersion} to ${toVersion}`)\n  try {\n    let counter = 0\n    const totalMigrations = currentVersion - toVersion\n    const reversedMigrationArray = migrations.slice().reverse()\n    for (const migration of reversedMigrationArray) {\n      if (migration.version <= toVersion) {\n        break\n      }\n\n      if (migration.version > currentVersion) {\n        continue\n      }\n\n      counter++\n      log(`Reverting migration version ${migration.version}`)\n      try {\n        if (!isDryRun) await migration.revert(path, repoOptions)\n      } catch (e) {\n        const lastSuccessfullyRevertedVersion = migration.version\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully reverted version: ${lastSuccessfullyRevertedVersion}`)\n        await repoVersion.setVersion(path, lastSuccessfullyRevertedVersion)\n\n        e.message = `During reversion to version ${migration.version} exception was raised: ${e.message}`\n        throw e\n      }\n\n      onProgress(migration, counter, totalMigrations) // Reports on migration process\n      log(`Reverting to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) await repoVersion.setVersion(path, toVersion)\n    log(`All migrations successfully reverted to version ${toVersion}!`)\n  } finally {\n    if (!isDryRun && !ignoreLock) await lock.close()\n  }\n}\n\nexports.revert = revert\n\n/**\n * Function checks if all migrations in given range are available.\n *\n * @param {array} migrations\n * @param {int} fromVersion\n * @param {int} toVersion\n * @param {boolean} checkReversibility - Will additionally checks if all the migrations in the range are reversible\n * @returns {void}\n */\nfunction verifyAvailableMigrations (migrations, fromVersion, toVersion, checkReversibility = false) {\n  let migrationCounter = 0\n  for (const migration of migrations) {\n    if (migration.version > toVersion) {\n      break\n    }\n\n    if (migration.version > fromVersion) {\n      if (checkReversibility && !migration.revert) {\n        throw new errors.NonReversibleMigrationError(`It is not possible to revert to version ${fromVersion} because migration version ${migration.version} is not reversible. Cancelling reversion.`)\n      }\n\n      migrationCounter++\n    }\n  }\n\n  if (migrationCounter !== (toVersion - fromVersion)) {\n    throw new errors.InvalidValueError(`The ipfs-repo-migrations package does not have all migration to migrate from version ${fromVersion} to ${toVersion}`)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}