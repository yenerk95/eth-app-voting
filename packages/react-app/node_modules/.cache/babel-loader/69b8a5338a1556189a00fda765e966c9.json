{"ast":null,"code":"'use strict';\n\nconst {\n  createFromPrivKey\n} = require('peer-id');\n\nconst errcode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:ipns');\nlog.error = debug('ipfs:ipns:error');\n\nconst IpnsPublisher = require('./publisher');\n\nconst IpnsRepublisher = require('./republisher');\n\nconst IpnsResolver = require('./resolver');\n\nconst {\n  normalizePath\n} = require('../utils');\n\nconst TLRU = require('../../utils/tlru');\n\nconst defaultRecordTtl = 60 * 1000;\n\nclass IPNS {\n  constructor(routing, datastore, peerId, keychain, options) {\n    this.publisher = new IpnsPublisher(routing, datastore);\n    this.republisher = new IpnsRepublisher(this.publisher, datastore, peerId, keychain, options);\n    this.resolver = new IpnsResolver(routing);\n    this.cache = new TLRU(1000);\n    this.routing = routing;\n  } // Publish\n\n\n  async publish(privKey, value, lifetime = IpnsPublisher.defaultRecordLifetime) {\n    try {\n      value = normalizePath(value);\n      const peerId = await createFromPrivKey(privKey.bytes);\n      await this.publisher.publishWithEOL(privKey, value, lifetime);\n      log(`IPNS value ${value} was published correctly`); // // Add to cache\n\n      const id = peerId.toB58String();\n      const ttEol = parseFloat(lifetime);\n      const ttl = ttEol < defaultRecordTtl ? ttEol : defaultRecordTtl;\n      this.cache.set(id, value, ttl);\n      log(`IPNS value ${value} was cached correctly`);\n      return {\n        name: id,\n        value: value\n      };\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n  } // Resolve\n\n\n  async resolve(name, options) {\n    if (typeof name !== 'string') {\n      throw errcode(new Error('name received is not valid'), 'ERR_INVALID_NAME');\n    }\n\n    options = options || {}; // If recursive, we should not try to get the cached value\n\n    if (!options.nocache && !options.recursive) {\n      // Try to get the record from cache\n      const id = name.split('/')[2];\n      const result = this.cache.get(id);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    try {\n      const result = await this.resolver.resolve(name, options);\n      log(`IPNS record from ${name} was resolved correctly`);\n      return result;\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n  } // Initialize keyspace\n  // sets the ipns record for the given key to point to an empty directory\n\n\n  async initializeKeyspace(privKey, value) {\n    // eslint-disable-line require-await\n    return this.publish(privKey, value, IpnsPublisher.defaultRecordLifetime);\n  }\n\n}\n\nmodule.exports = IPNS;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/ipns/index.js"],"names":["createFromPrivKey","require","errcode","debug","log","error","IpnsPublisher","IpnsRepublisher","IpnsResolver","normalizePath","TLRU","defaultRecordTtl","IPNS","constructor","routing","datastore","peerId","keychain","options","publisher","republisher","resolver","cache","publish","privKey","value","lifetime","defaultRecordLifetime","bytes","publishWithEOL","id","toB58String","ttEol","parseFloat","ttl","set","name","err","resolve","Error","nocache","recursive","split","result","get","initializeKeyspace","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAwBC,OAAO,CAAC,SAAD,CAArC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,GAAG,GAAGD,KAAK,CAAC,WAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,iBAAD,CAAjB;;AAEA,MAAMG,aAAa,GAAGL,OAAO,CAAC,aAAD,CAA7B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,eAAD,CAA/B;;AACA,MAAMO,YAAY,GAAGP,OAAO,CAAC,YAAD,CAA5B;;AACA,MAAM;AAAEQ,EAAAA;AAAF,IAAoBR,OAAO,CAAC,UAAD,CAAjC;;AACA,MAAMS,IAAI,GAAGT,OAAO,CAAC,kBAAD,CAApB;;AACA,MAAMU,gBAAgB,GAAG,KAAK,IAA9B;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,CAAEC,OAAF,EAAWC,SAAX,EAAsBC,MAAtB,EAA8BC,QAA9B,EAAwCC,OAAxC,EAAiD;AAC1D,SAAKC,SAAL,GAAiB,IAAIb,aAAJ,CAAkBQ,OAAlB,EAA2BC,SAA3B,CAAjB;AACA,SAAKK,WAAL,GAAmB,IAAIb,eAAJ,CAAoB,KAAKY,SAAzB,EAAoCJ,SAApC,EAA+CC,MAA/C,EAAuDC,QAAvD,EAAiEC,OAAjE,CAAnB;AACA,SAAKG,QAAL,GAAgB,IAAIb,YAAJ,CAAiBM,OAAjB,CAAhB;AACA,SAAKQ,KAAL,GAAa,IAAIZ,IAAJ,CAAS,IAAT,CAAb;AACA,SAAKI,OAAL,GAAeA,OAAf;AACD,GAPQ,CAST;;;AACA,QAAMS,OAAN,CAAeC,OAAf,EAAwBC,KAAxB,EAA+BC,QAAQ,GAAGpB,aAAa,CAACqB,qBAAxD,EAA+E;AAC7E,QAAI;AACFF,MAAAA,KAAK,GAAGhB,aAAa,CAACgB,KAAD,CAArB;AAEA,YAAMT,MAAM,GAAG,MAAMhB,iBAAiB,CAACwB,OAAO,CAACI,KAAT,CAAtC;AACA,YAAM,KAAKT,SAAL,CAAeU,cAAf,CAA8BL,OAA9B,EAAuCC,KAAvC,EAA8CC,QAA9C,CAAN;AAEAtB,MAAAA,GAAG,CAAE,cAAaqB,KAAM,0BAArB,CAAH,CANE,CAQF;;AACA,YAAMK,EAAE,GAAGd,MAAM,CAACe,WAAP,EAAX;AACA,YAAMC,KAAK,GAAGC,UAAU,CAACP,QAAD,CAAxB;AACA,YAAMQ,GAAG,GAAIF,KAAK,GAAGrB,gBAAT,GAA6BqB,KAA7B,GAAqCrB,gBAAjD;AAEA,WAAKW,KAAL,CAAWa,GAAX,CAAeL,EAAf,EAAmBL,KAAnB,EAA0BS,GAA1B;AAEA9B,MAAAA,GAAG,CAAE,cAAaqB,KAAM,uBAArB,CAAH;AAEA,aAAO;AACLW,QAAAA,IAAI,EAAEN,EADD;AAELL,QAAAA,KAAK,EAAEA;AAFF,OAAP;AAID,KArBD,CAqBE,OAAOY,GAAP,EAAY;AACZjC,MAAAA,GAAG,CAACC,KAAJ,CAAUgC,GAAV;AAEA,YAAMA,GAAN;AACD;AACF,GArCQ,CAuCT;;;AACA,QAAMC,OAAN,CAAeF,IAAf,EAAqBlB,OAArB,EAA8B;AAC5B,QAAI,OAAOkB,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAMlC,OAAO,CAAC,IAAIqC,KAAJ,CAAU,4BAAV,CAAD,EAA0C,kBAA1C,CAAb;AACD;;AAEDrB,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAL4B,CAO5B;;AACA,QAAI,CAACA,OAAO,CAACsB,OAAT,IAAoB,CAACtB,OAAO,CAACuB,SAAjC,EAA4C;AAC1C;AACA,YAAMX,EAAE,GAAGM,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAX;AACA,YAAMC,MAAM,GAAG,KAAKrB,KAAL,CAAWsB,GAAX,CAAed,EAAf,CAAf;;AAEA,UAAIa,MAAJ,EAAY;AACV,eAAOA,MAAP;AACD;AACF;;AAED,QAAI;AACF,YAAMA,MAAM,GAAG,MAAM,KAAKtB,QAAL,CAAciB,OAAd,CAAsBF,IAAtB,EAA4BlB,OAA5B,CAArB;AAEAd,MAAAA,GAAG,CAAE,oBAAmBgC,IAAK,yBAA1B,CAAH;AAEA,aAAOO,MAAP;AACD,KAND,CAME,OAAON,GAAP,EAAY;AACZjC,MAAAA,GAAG,CAACC,KAAJ,CAAUgC,GAAV;AAEA,YAAMA,GAAN;AACD;AACF,GArEQ,CAuET;AACA;;;AACA,QAAMQ,kBAAN,CAA0BrB,OAA1B,EAAmCC,KAAnC,EAA0C;AAAE;AAC1C,WAAO,KAAKF,OAAL,CAAaC,OAAb,EAAsBC,KAAtB,EAA6BnB,aAAa,CAACqB,qBAA3C,CAAP;AACD;;AA3EQ;;AA8EXmB,MAAM,CAACC,OAAP,GAAiBnC,IAAjB","sourcesContent":["'use strict'\n\nconst { createFromPrivKey } = require('peer-id')\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('ipfs:ipns')\nlog.error = debug('ipfs:ipns:error')\n\nconst IpnsPublisher = require('./publisher')\nconst IpnsRepublisher = require('./republisher')\nconst IpnsResolver = require('./resolver')\nconst { normalizePath } = require('../utils')\nconst TLRU = require('../../utils/tlru')\nconst defaultRecordTtl = 60 * 1000\n\nclass IPNS {\n  constructor (routing, datastore, peerId, keychain, options) {\n    this.publisher = new IpnsPublisher(routing, datastore)\n    this.republisher = new IpnsRepublisher(this.publisher, datastore, peerId, keychain, options)\n    this.resolver = new IpnsResolver(routing)\n    this.cache = new TLRU(1000)\n    this.routing = routing\n  }\n\n  // Publish\n  async publish (privKey, value, lifetime = IpnsPublisher.defaultRecordLifetime) {\n    try {\n      value = normalizePath(value)\n\n      const peerId = await createFromPrivKey(privKey.bytes)\n      await this.publisher.publishWithEOL(privKey, value, lifetime)\n\n      log(`IPNS value ${value} was published correctly`)\n\n      // // Add to cache\n      const id = peerId.toB58String()\n      const ttEol = parseFloat(lifetime)\n      const ttl = (ttEol < defaultRecordTtl) ? ttEol : defaultRecordTtl\n\n      this.cache.set(id, value, ttl)\n\n      log(`IPNS value ${value} was cached correctly`)\n\n      return {\n        name: id,\n        value: value\n      }\n    } catch (err) {\n      log.error(err)\n\n      throw err\n    }\n  }\n\n  // Resolve\n  async resolve (name, options) {\n    if (typeof name !== 'string') {\n      throw errcode(new Error('name received is not valid'), 'ERR_INVALID_NAME')\n    }\n\n    options = options || {}\n\n    // If recursive, we should not try to get the cached value\n    if (!options.nocache && !options.recursive) {\n      // Try to get the record from cache\n      const id = name.split('/')[2]\n      const result = this.cache.get(id)\n\n      if (result) {\n        return result\n      }\n    }\n\n    try {\n      const result = await this.resolver.resolve(name, options)\n\n      log(`IPNS record from ${name} was resolved correctly`)\n\n      return result\n    } catch (err) {\n      log.error(err)\n\n      throw err\n    }\n  }\n\n  // Initialize keyspace\n  // sets the ipns record for the given key to point to an empty directory\n  async initializeKeyspace (privKey, value) { // eslint-disable-line require-await\n    return this.publish(privKey, value, IpnsPublisher.defaultRecordLifetime)\n  }\n}\n\nmodule.exports = IPNS\n"]},"metadata":{},"sourceType":"script"}