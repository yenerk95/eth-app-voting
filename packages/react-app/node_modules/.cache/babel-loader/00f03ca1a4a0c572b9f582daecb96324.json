{"ast":null,"code":"var _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nvar Rabin = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates an instance of Rabin.\n   * @param { import(\"./../dist/rabin-wasm\") } asModule\n   * @param {number} [bits=12]\n   * @param {number} [min=8 * 1024]\n   * @param {number} [max=32 * 1024]\n   * @param {number} polynomial\n   * @memberof Rabin\n   */\n  function Rabin(asModule) {\n    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n    var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8 * 1024;\n    var max = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32 * 1024;\n    var windowSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 64;\n    var polynomial = arguments.length > 5 ? arguments[5] : undefined;\n\n    _classCallCheck(this, Rabin);\n\n    this.bits = bits;\n    this.min = min;\n    this.max = max;\n    this.asModule = asModule;\n    this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial);\n    this.polynomial = polynomial;\n  }\n  /**\n   * Fingerprints the buffer\n   *\n   * @param {Uint8Array} buf\n   * @returns {Array<number>}\n   * @memberof Rabin\n   */\n\n\n  _createClass(Rabin, [{\n    key: \"fingerprint\",\n    value: function fingerprint(buf) {\n      var _this$asModule = this.asModule,\n          __retain = _this$asModule.__retain,\n          __release = _this$asModule.__release,\n          __allocArray = _this$asModule.__allocArray,\n          __getInt32Array = _this$asModule.__getInt32Array,\n          Int32Array_ID = _this$asModule.Int32Array_ID,\n          Uint8Array_ID = _this$asModule.Uint8Array_ID;\n      var lengths = new Int32Array(Math.ceil(buf.length / this.min));\n\n      var lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths));\n\n      var pointer = __retain(__allocArray(Uint8Array_ID, buf));\n\n      var out = this.rabin.fingerprint(pointer, lengthsPtr);\n\n      var processed = __getInt32Array(out);\n\n      __release(pointer);\n\n      __release(lengthsPtr);\n\n      var cleanArr = [];\n\n      for (var i = 0; i < processed.length; i++) {\n        if (processed[i] === 0) break;\n        cleanArr[i] = processed[i];\n      }\n\n      return cleanArr;\n    }\n  }]);\n\n  return Rabin;\n}();\n\nmodule.exports = Rabin;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/rabin-wasm/src/rabin.js"],"names":["Rabin","asModule","bits","min","max","windowSize","polynomial","rabin","buf","__retain","__release","__allocArray","__getInt32Array","Int32Array_ID","Uint8Array_ID","lengths","Int32Array","Math","ceil","length","lengthsPtr","pointer","out","fingerprint","processed","cleanArr","i","module","exports"],"mappings":";;;;AAAA;;;;;IAKMA,K;;;AACF;;;;;;;;;AASA,iBAAYC,QAAZ,EAA+F;AAAA,QAAzEC,IAAyE,uEAAlE,EAAkE;AAAA,QAA9DC,GAA8D,uEAAxD,IAAI,IAAoD;AAAA,QAA9CC,GAA8C,uEAAxC,KAAK,IAAmC;AAAA,QAA7BC,UAA6B,uEAAhB,EAAgB;AAAA,QAAZC,UAAY;;AAAA;;AAC3F,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKM,KAAL,GAAa,IAAIN,QAAQ,CAACD,KAAb,CAAmBE,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,UAAnC,EAA+CC,UAA/C,CAAb;AACA,SAAKA,UAAL,GAAkBA,UAAlB;AACH;AAED;;;;;;;;;;;gCAOYE,G,EAAK;AAAA,2BAQT,KAAKP,QARI;AAAA,UAETQ,QAFS,kBAETA,QAFS;AAAA,UAGTC,SAHS,kBAGTA,SAHS;AAAA,UAITC,YAJS,kBAITA,YAJS;AAAA,UAKTC,eALS,kBAKTA,eALS;AAAA,UAMTC,aANS,kBAMTA,aANS;AAAA,UAOTC,aAPS,kBAOTA,aAPS;AAUb,UAAMC,OAAO,GAAG,IAAIC,UAAJ,CAAeC,IAAI,CAACC,IAAL,CAAUV,GAAG,CAACW,MAAJ,GAAW,KAAKhB,GAA1B,CAAf,CAAhB;;AACA,UAAMiB,UAAU,GAAGX,QAAQ,CAACE,YAAY,CAACE,aAAD,EAAgBE,OAAhB,CAAb,CAA3B;;AACA,UAAMM,OAAO,GAAGZ,QAAQ,CAACE,YAAY,CAACG,aAAD,EAAgBN,GAAhB,CAAb,CAAxB;;AAEA,UAAMc,GAAG,GAAG,KAAKf,KAAL,CAAWgB,WAAX,CAAuBF,OAAvB,EAAgCD,UAAhC,CAAZ;;AACA,UAAMI,SAAS,GAAGZ,eAAe,CAACU,GAAD,CAAjC;;AAEAZ,MAAAA,SAAS,CAACW,OAAD,CAAT;;AACAX,MAAAA,SAAS,CAACU,UAAD,CAAT;;AAEA,UAAMK,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACL,MAA9B,EAAsCO,CAAC,EAAvC,EAA2C;AACvC,YAAGF,SAAS,CAACE,CAAD,CAAT,KAAiB,CAApB,EAAuB;AACvBD,QAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcF,SAAS,CAACE,CAAD,CAAvB;AACH;;AAED,aAAOD,QAAP;AACH;;;;;;AAGLE,MAAM,CAACC,OAAP,GAAiB5B,KAAjB","sourcesContent":["/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n    /**\n     * Creates an instance of Rabin.\n     * @param { import(\"./../dist/rabin-wasm\") } asModule\n     * @param {number} [bits=12]\n     * @param {number} [min=8 * 1024]\n     * @param {number} [max=32 * 1024]\n     * @param {number} polynomial\n     * @memberof Rabin\n     */\n    constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {\n        this.bits = bits\n        this.min = min\n        this.max = max\n        this.asModule = asModule\n        this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial)\n        this.polynomial = polynomial\n    }\n\n    /**\n     * Fingerprints the buffer\n     *\n     * @param {Uint8Array} buf\n     * @returns {Array<number>}\n     * @memberof Rabin\n     */\n    fingerprint(buf) {\n        const { \n            __retain,\n            __release,\n            __allocArray, \n            __getInt32Array, \n            Int32Array_ID, \n            Uint8Array_ID \n        } = this.asModule\n\n        const lengths = new Int32Array(Math.ceil(buf.length/this.min))\n        const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths))\n        const pointer = __retain(__allocArray(Uint8Array_ID, buf))\n\n        const out = this.rabin.fingerprint(pointer, lengthsPtr)\n        const processed = __getInt32Array(out)\n\n        __release(pointer)\n        __release(lengthsPtr)\n\n        const cleanArr = []\t\n        for (let i = 0; i < processed.length; i++) {\t\n            if(processed[i] === 0) break\t\n            cleanArr[i] = processed[i];\t\n        }\t\n\n        return cleanArr\n    }\n}\n\nmodule.exports = Rabin"]},"metadata":{},"sourceType":"script"}