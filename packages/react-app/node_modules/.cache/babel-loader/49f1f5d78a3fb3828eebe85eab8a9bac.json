{"ast":null,"code":"/*!\n * aead.js - aead for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://tools.ietf.org/html/rfc7539#section-2.8\n *   https://github.com/openssh/openssh-portable\n */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('../internal/assert');\n\nvar ChaCha20 = require('./chacha20');\n\nvar Poly1305 = require('./poly1305');\n/**\n * AEAD\n */\n\n\nvar AEAD = /*#__PURE__*/function () {\n  /**\n   * Create an AEAD context.\n   * @constructor\n   */\n  function AEAD() {\n    _classCallCheck(this, AEAD);\n\n    this.chacha = new ChaCha20();\n    this.poly = new Poly1305();\n    this.key = Buffer.alloc(64);\n    this.mode = -1;\n    this.aadLen = 0;\n    this.cipherLen = 0;\n  }\n  /**\n   * Initialize the AEAD with a key and iv.\n   * @param {Buffer} key\n   * @param {Buffer} iv - IV / packet sequence number.\n   */\n\n\n  _createClass(AEAD, [{\n    key: \"init\",\n    value: function init(key, iv) {\n      assert(Buffer.isBuffer(key));\n      assert(Buffer.isBuffer(iv));\n      this.key.fill(0x00);\n      this.chacha.init(key, iv, 0);\n      this.chacha.encrypt(this.key);\n      this.poly.init(this.key);\n      this.mode = 0;\n      this.aadLen = 0;\n      this.cipherLen = 0;\n      return this;\n    }\n    /**\n     * Update the aad (will be finalized\n     * on an encrypt/decrypt call).\n     * @param {Buffer} aad\n     */\n\n  }, {\n    key: \"aad\",\n    value: function aad(data) {\n      if (this.mode === -1) throw new Error('Context is not initialized.');\n      if (this.mode !== 0) throw new Error('Invalid state for aad.');\n      this.poly.update(data);\n      this.aadLen += data.length;\n      return this;\n    }\n    /**\n     * Encrypt a piece of data.\n     * @param {Buffer} data\n     */\n\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(data) {\n      if (this.mode === -1) throw new Error('Context is not initialized.');\n      if (this.mode !== 0 && this.mode !== 1) throw new Error('Invalid state for encrypt.');\n\n      if (this.mode === 0) {\n        this._pad16(this.aadLen);\n\n        this.mode = 1;\n      }\n\n      this.chacha.encrypt(data);\n      this.poly.update(data);\n      this.cipherLen += data.length;\n      return data;\n    }\n    /**\n     * Decrypt a piece of data.\n     * @param {Buffer} data\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(data) {\n      assert(Buffer.isBuffer(data));\n      if (this.mode === -1) throw new Error('Context is not initialized.');\n      if (this.mode !== 0 && this.mode !== 2) throw new Error('Invalid state for decrypt.');\n\n      if (this.mode === 0) {\n        this._pad16(this.aadLen);\n\n        this.mode = 2;\n      }\n\n      this.cipherLen += data.length;\n      this.poly.update(data);\n      this.chacha.encrypt(data);\n      return data;\n    }\n    /**\n     * Authenticate data without decrypting.\n     * @param {Buffer} data\n     */\n\n  }, {\n    key: \"auth\",\n    value: function auth(data) {\n      assert(Buffer.isBuffer(data));\n      if (this.mode === -1) throw new Error('Context is not initialized.');\n      if (this.mode !== 0 && this.mode !== 3) throw new Error('Invalid state for auth.');\n\n      if (this.mode === 0) {\n        this._pad16(this.aadLen);\n\n        this.mode = 3;\n      }\n\n      this.cipherLen += data.length;\n      this.poly.update(data);\n      return data;\n    }\n    /**\n     * Finalize the aead and generate a MAC.\n     * @returns {Buffer} MAC\n     */\n\n  }, {\n    key: \"final\",\n    value: function final() {\n      if (this.mode === -1) throw new Error('Context is not initialized.');\n      var len = Buffer.allocUnsafe(16);\n      writeU64(len, this.aadLen, 0);\n      writeU64(len, this.cipherLen, 8);\n      if (this.mode === 0) this._pad16(this.aadLen);\n\n      this._pad16(this.cipherLen);\n\n      this.poly.update(len);\n      var mac = this.poly.final();\n      this.destroy();\n      return mac;\n    }\n    /**\n     * Destroy the context.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.chacha.destroy();\n      this.poly.destroy();\n\n      for (var i = 0; i < 64; i++) {\n        this.key[i] = 0;\n      }\n\n      this.mode = -1;\n      this.aadLen = 0;\n      this.cipherLen = 0;\n      return this;\n    }\n    /**\n     * Finalize and verify MAC against tag.\n     * @param {Buffer} tag\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify(tag) {\n      assert(Buffer.isBuffer(tag));\n      assert(tag.length === 16);\n      var mac = this.final();\n      var z = 0;\n\n      for (var i = 0; i < 16; i++) {\n        z |= mac[i] ^ tag[i];\n      }\n\n      return z - 1 >>> 31 !== 0;\n    }\n    /**\n     * Pad a chunk before updating mac.\n     * @private\n     * @param {Number} size\n     */\n\n  }, {\n    key: \"_pad16\",\n    value: function _pad16(size) {\n      var pos = size & 15;\n      if (pos === 0) return;\n      var pad = Buffer.allocUnsafe(16 - pos);\n      pad.fill(0x00);\n      this.poly.update(pad);\n    }\n    /**\n     * Encrypt a piece of data.\n     * @param {Buffer} key\n     * @param {Buffer} iv\n     * @param {Buffer} msg\n     * @param {Buffer?} aad\n     * @returns {Buffer} tag\n     */\n\n  }], [{\n    key: \"encrypt\",\n    value: function encrypt(key, iv, msg, aad) {\n      var aead = new AEAD();\n      aead.init(key, iv);\n      if (aad) aead.aad(aad);\n      aead.encrypt(msg);\n      return aead.final();\n    }\n    /**\n     * Decrypt a piece of data.\n     * @param {Buffer} key\n     * @param {Buffer} iv\n     * @param {Buffer} msg\n     * @param {Buffer} tag\n     * @param {Buffer?} aad\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(key, iv, msg, tag, aad) {\n      var aead = new AEAD();\n      aead.init(key, iv);\n      if (aad) aead.aad(aad);\n      aead.decrypt(msg);\n      return aead.verify(tag);\n    }\n    /**\n     * Authenticate data without decrypting.\n     * @param {Buffer} key\n     * @param {Buffer} iv\n     * @param {Buffer} msg\n     * @param {Buffer} tag\n     * @param {Buffer?} aad\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"auth\",\n    value: function auth(key, iv, msg, tag, aad) {\n      var aead = new AEAD();\n      aead.init(key, iv);\n      if (aad) aead.aad(aad);\n      aead.auth(msg);\n      return aead.verify(tag);\n    }\n  }]);\n\n  return AEAD;\n}();\n/*\n * Static\n */\n\n\nAEAD.native = ChaCha20.native;\n/*\n * Helpers\n */\n\nfunction writeU32(dst, num, off) {\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  return off;\n}\n\nfunction writeU64(dst, num, off) {\n  var hi = num * (1 / 0x100000000) >>> 0;\n  var lo = num >>> 0;\n  writeU32(dst, lo, off + 0);\n  writeU32(dst, hi, off + 4);\n  return off + 8;\n}\n/*\n * Expose\n */\n\n\nmodule.exports = AEAD;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/bcrypto/lib/js/aead.js"],"names":["assert","require","ChaCha20","Poly1305","AEAD","chacha","poly","key","Buffer","alloc","mode","aadLen","cipherLen","iv","isBuffer","fill","init","encrypt","data","Error","update","length","_pad16","len","allocUnsafe","writeU64","mac","final","destroy","i","tag","z","size","pos","pad","msg","aad","aead","decrypt","verify","auth","native","writeU32","dst","num","off","hi","lo","module","exports"],"mappings":"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","sourcesContent":["/*!\n * aead.js - aead for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://tools.ietf.org/html/rfc7539#section-2.8\n *   https://github.com/openssh/openssh-portable\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\nconst ChaCha20 = require('./chacha20');\nconst Poly1305 = require('./poly1305');\n\n/**\n * AEAD\n */\n\nclass AEAD {\n  /**\n   * Create an AEAD context.\n   * @constructor\n   */\n\n  constructor() {\n    this.chacha = new ChaCha20();\n    this.poly = new Poly1305();\n    this.key = Buffer.alloc(64);\n    this.mode = -1;\n    this.aadLen = 0;\n    this.cipherLen = 0;\n  }\n\n  /**\n   * Initialize the AEAD with a key and iv.\n   * @param {Buffer} key\n   * @param {Buffer} iv - IV / packet sequence number.\n   */\n\n  init(key, iv) {\n    assert(Buffer.isBuffer(key));\n    assert(Buffer.isBuffer(iv));\n\n    this.key.fill(0x00);\n    this.chacha.init(key, iv, 0);\n    this.chacha.encrypt(this.key);\n    this.poly.init(this.key);\n\n    this.mode = 0;\n    this.aadLen = 0;\n    this.cipherLen = 0;\n\n    return this;\n  }\n\n  /**\n   * Update the aad (will be finalized\n   * on an encrypt/decrypt call).\n   * @param {Buffer} aad\n   */\n\n  aad(data) {\n    if (this.mode === -1)\n      throw new Error('Context is not initialized.');\n\n    if (this.mode !== 0)\n      throw new Error('Invalid state for aad.');\n\n    this.poly.update(data);\n    this.aadLen += data.length;\n\n    return this;\n  }\n\n  /**\n   * Encrypt a piece of data.\n   * @param {Buffer} data\n   */\n\n  encrypt(data) {\n    if (this.mode === -1)\n      throw new Error('Context is not initialized.');\n\n    if (this.mode !== 0 && this.mode !== 1)\n      throw new Error('Invalid state for encrypt.');\n\n    if (this.mode === 0) {\n      this._pad16(this.aadLen);\n      this.mode = 1;\n    }\n\n    this.chacha.encrypt(data);\n    this.poly.update(data);\n\n    this.cipherLen += data.length;\n\n    return data;\n  }\n\n  /**\n   * Decrypt a piece of data.\n   * @param {Buffer} data\n   */\n\n  decrypt(data) {\n    assert(Buffer.isBuffer(data));\n\n    if (this.mode === -1)\n      throw new Error('Context is not initialized.');\n\n    if (this.mode !== 0 && this.mode !== 2)\n      throw new Error('Invalid state for decrypt.');\n\n    if (this.mode === 0) {\n      this._pad16(this.aadLen);\n      this.mode = 2;\n    }\n\n    this.cipherLen += data.length;\n\n    this.poly.update(data);\n    this.chacha.encrypt(data);\n\n    return data;\n  }\n\n  /**\n   * Authenticate data without decrypting.\n   * @param {Buffer} data\n   */\n\n  auth(data) {\n    assert(Buffer.isBuffer(data));\n\n    if (this.mode === -1)\n      throw new Error('Context is not initialized.');\n\n    if (this.mode !== 0 && this.mode !== 3)\n      throw new Error('Invalid state for auth.');\n\n    if (this.mode === 0) {\n      this._pad16(this.aadLen);\n      this.mode = 3;\n    }\n\n    this.cipherLen += data.length;\n\n    this.poly.update(data);\n\n    return data;\n  }\n\n  /**\n   * Finalize the aead and generate a MAC.\n   * @returns {Buffer} MAC\n   */\n\n  final() {\n    if (this.mode === -1)\n      throw new Error('Context is not initialized.');\n\n    const len = Buffer.allocUnsafe(16);\n\n    writeU64(len, this.aadLen, 0);\n    writeU64(len, this.cipherLen, 8);\n\n    if (this.mode === 0)\n      this._pad16(this.aadLen);\n\n    this._pad16(this.cipherLen);\n    this.poly.update(len);\n\n    const mac = this.poly.final();\n\n    this.destroy();\n\n    return mac;\n  }\n\n  /**\n   * Destroy the context.\n   */\n\n  destroy() {\n    this.chacha.destroy();\n    this.poly.destroy();\n\n    for (let i = 0; i < 64; i++)\n      this.key[i] = 0;\n\n    this.mode = -1;\n    this.aadLen = 0;\n    this.cipherLen = 0;\n\n    return this;\n  }\n\n  /**\n   * Finalize and verify MAC against tag.\n   * @param {Buffer} tag\n   * @returns {Boolean}\n   */\n\n  verify(tag) {\n    assert(Buffer.isBuffer(tag));\n    assert(tag.length === 16);\n\n    const mac = this.final();\n\n    let z = 0;\n\n    for (let i = 0; i < 16; i++)\n      z |= mac[i] ^ tag[i];\n\n    return ((z - 1) >>> 31) !== 0;\n  }\n\n  /**\n   * Pad a chunk before updating mac.\n   * @private\n   * @param {Number} size\n   */\n\n  _pad16(size) {\n    const pos = size & 15;\n\n    if (pos === 0)\n      return;\n\n    const pad = Buffer.allocUnsafe(16 - pos);\n\n    pad.fill(0x00);\n\n    this.poly.update(pad);\n  }\n\n  /**\n   * Encrypt a piece of data.\n   * @param {Buffer} key\n   * @param {Buffer} iv\n   * @param {Buffer} msg\n   * @param {Buffer?} aad\n   * @returns {Buffer} tag\n   */\n\n  static encrypt(key, iv, msg, aad) {\n    const aead = new AEAD();\n\n    aead.init(key, iv);\n\n    if (aad)\n      aead.aad(aad);\n\n    aead.encrypt(msg);\n\n    return aead.final();\n  }\n\n  /**\n   * Decrypt a piece of data.\n   * @param {Buffer} key\n   * @param {Buffer} iv\n   * @param {Buffer} msg\n   * @param {Buffer} tag\n   * @param {Buffer?} aad\n   * @returns {Boolean}\n   */\n\n  static decrypt(key, iv, msg, tag, aad) {\n    const aead = new AEAD();\n\n    aead.init(key, iv);\n\n    if (aad)\n      aead.aad(aad);\n\n    aead.decrypt(msg);\n\n    return aead.verify(tag);\n  }\n\n  /**\n   * Authenticate data without decrypting.\n   * @param {Buffer} key\n   * @param {Buffer} iv\n   * @param {Buffer} msg\n   * @param {Buffer} tag\n   * @param {Buffer?} aad\n   * @returns {Boolean}\n   */\n\n  static auth(key, iv, msg, tag, aad) {\n    const aead = new AEAD();\n\n    aead.init(key, iv);\n\n    if (aad)\n      aead.aad(aad);\n\n    aead.auth(msg);\n\n    return aead.verify(tag);\n  }\n}\n\n/*\n * Static\n */\n\nAEAD.native = ChaCha20.native;\n\n/*\n * Helpers\n */\n\nfunction writeU32(dst, num, off) {\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  return off;\n}\n\nfunction writeU64(dst, num, off) {\n  const hi = (num * (1 / 0x100000000)) >>> 0;\n  const lo = num >>> 0;\n\n  writeU32(dst, lo, off + 0);\n  writeU32(dst, hi, off + 4);\n\n  return off + 8;\n}\n\n/*\n * Expose\n */\n\nmodule.exports = AEAD;\n"]},"metadata":{},"sourceType":"script"}