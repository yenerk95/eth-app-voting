{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar withIs = require('class-is');\n\nvar noop = function noop() {};\n\nvar Topology = /*#__PURE__*/function () {\n  /**\n   * @param {Object} props\n   * @param {number} props.min minimum needed connections (default: 0)\n   * @param {number} props.max maximum needed connections (default: Infinity)\n   * @param {Object} [props.handlers]\n   * @param {function} [props.handlers.onConnect] protocol \"onConnect\" handler\n   * @param {function} [props.handlers.onDisconnect] protocol \"onDisconnect\" handler\n   * @constructor\n   */\n  function Topology(_ref) {\n    var _ref$min = _ref.min,\n        min = _ref$min === void 0 ? 0 : _ref$min,\n        _ref$max = _ref.max,\n        max = _ref$max === void 0 ? Infinity : _ref$max,\n        _ref$handlers = _ref.handlers,\n        handlers = _ref$handlers === void 0 ? {} : _ref$handlers;\n\n    _classCallCheck(this, Topology);\n\n    this.min = min;\n    this.max = max; // Handlers\n\n    this._onConnect = handlers.onConnect || noop;\n    this._onDisconnect = handlers.onDisconnect || noop;\n    /**\n     * Set of peers that support the protocol.\n     * @type {Set<string>}\n     */\n\n    this.peers = new Set();\n  }\n\n  _createClass(Topology, [{\n    key: \"disconnect\",\n\n    /**\n     * Notify about peer disconnected event.\n     * @param {PeerId} peerId\n     * @returns {void}\n     */\n    value: function disconnect(peerId) {\n      this._onDisconnect(peerId);\n    }\n  }, {\n    key: \"registrar\",\n    set: function set(registrar) {\n      this._registrar = registrar;\n    }\n  }]);\n\n  return Topology;\n}();\n\nmodule.exports = withIs(Topology, {\n  className: 'Topology',\n  symbolName: '@libp2p/js-interfaces/topology'\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-interfaces/src/topology/index.js"],"names":["withIs","require","noop","Topology","min","max","Infinity","handlers","_onConnect","onConnect","_onDisconnect","onDisconnect","peers","Set","peerId","registrar","_registrar","module","exports","className","symbolName"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAE,CAArB;;IAEMC,Q;AACJ;;;;;;;;;AASA,0BAIG;AAAA,wBAHDC,GAGC;AAAA,QAHDA,GAGC,yBAHK,CAGL;AAAA,wBAFDC,GAEC;AAAA,QAFDA,GAEC,yBAFKC,QAEL;AAAA,6BADDC,QACC;AAAA,QADDA,QACC,8BADU,EACV;;AAAA;;AACD,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAWA,GAAX,CAFC,CAID;;AACA,SAAKG,UAAL,GAAkBD,QAAQ,CAACE,SAAT,IAAsBP,IAAxC;AACA,SAAKQ,aAAL,GAAqBH,QAAQ,CAACI,YAAT,IAAyBT,IAA9C;AAEA;;;;;AAIA,SAAKU,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;;;;;AAMD;;;;;+BAKYC,M,EAAQ;AAClB,WAAKJ,aAAL,CAAmBI,MAAnB;AACD;;;sBAXcC,S,EAAW;AACxB,WAAKC,UAAL,GAAkBD,SAAlB;AACD;;;;;;AAYHE,MAAM,CAACC,OAAP,GAAiBlB,MAAM,CAACG,QAAD,EAAW;AAAEgB,EAAAA,SAAS,EAAE,UAAb;AAAyBC,EAAAA,UAAU,EAAE;AAArC,CAAX,CAAvB","sourcesContent":["'use strict'\n\nconst withIs = require('class-is')\n\nconst noop = () => {}\n\nclass Topology {\n  /**\n   * @param {Object} props\n   * @param {number} props.min minimum needed connections (default: 0)\n   * @param {number} props.max maximum needed connections (default: Infinity)\n   * @param {Object} [props.handlers]\n   * @param {function} [props.handlers.onConnect] protocol \"onConnect\" handler\n   * @param {function} [props.handlers.onDisconnect] protocol \"onDisconnect\" handler\n   * @constructor\n   */\n  constructor ({\n    min = 0,\n    max = Infinity,\n    handlers = {}\n  }) {\n    this.min = min\n    this.max = max\n\n    // Handlers\n    this._onConnect = handlers.onConnect || noop\n    this._onDisconnect = handlers.onDisconnect || noop\n\n    /**\n     * Set of peers that support the protocol.\n     * @type {Set<string>}\n     */\n    this.peers = new Set()\n  }\n\n  set registrar (registrar) {\n    this._registrar = registrar\n  }\n\n  /**\n   * Notify about peer disconnected event.\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n  disconnect (peerId) {\n    this._onDisconnect(peerId)\n  }\n}\n\nmodule.exports = withIs(Topology, { className: 'Topology', symbolName: '@libp2p/js-interfaces/topology' })\n"]},"metadata":{},"sourceType":"script"}