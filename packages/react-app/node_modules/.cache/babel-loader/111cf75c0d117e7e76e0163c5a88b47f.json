{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:circuit:hop');\nlog.error = debug('libp2p:circuit:hop:error');\n\nconst PeerId = require('peer-id');\n\nconst {\n  validateAddrs\n} = require('./utils');\n\nconst StreamHandler = require('./stream-handler');\n\nconst {\n  CircuitRelay: CircuitPB\n} = require('../protocol');\n\nconst pipe = require('it-pipe');\n\nconst errCode = require('err-code');\n\nconst {\n  codes: Errors\n} = require('../../errors');\n\nconst {\n  stop\n} = require('./stop');\n\nconst multicodec = require('./../multicodec');\n\nmodule.exports.handleHop = async function handleHop({\n  connection,\n  request,\n  streamHandler,\n  circuit\n}) {\n  // Ensure hop is enabled\n  if (!circuit._options.hop.enabled) {\n    log('HOP request received but we are not acting as a relay');\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n    });\n  } // Validate the HOP request has the required input\n\n\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid hop request via peer %s', connection.remotePeer.toB58String(), err);\n  } // Get the connection to the destination (stop) peer\n\n\n  const destinationPeer = new PeerId(request.dstPeer.id);\n\n  const destinationConnection = circuit._connectionManager.get(destinationPeer);\n\n  if (!destinationConnection && !circuit._options.hop.active) {\n    log('HOP request received but we are not connected to the destination peer');\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n    });\n  } // TODO: Handle being an active relay\n  // Handle the incoming HOP request by performing a STOP request\n\n\n  const stopRequest = {\n    type: CircuitPB.Type.STOP,\n    dstPeer: request.dstPeer,\n    srcPeer: request.srcPeer\n  };\n  let destinationStream;\n\n  try {\n    destinationStream = await stop({\n      connection: destinationConnection,\n      request: stopRequest,\n      circuit\n    });\n  } catch (err) {\n    return log.error(err);\n  }\n\n  log('hop request from %s is valid', connection.remotePeer.toB58String());\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  const sourceStream = streamHandler.rest(); // Short circuit the two streams to create the relayed connection\n\n  return pipe(sourceStream, destinationStream, sourceStream);\n};\n/**\n * Performs a HOP request to a relay peer, to request a connection to another\n * peer. A new, virtual, connection will be created between the two via the relay.\n *\n * @param {object} options\n * @param {Connection} options.connection Connection to the relay\n * @param {*} options.request\n * @param {Circuit} options.circuit\n * @returns {Promise<Connection>}\n */\n\n\nmodule.exports.hop = async function hop({\n  connection,\n  request\n}) {\n  // Create a new stream to the relay\n  const {\n    stream\n  } = await connection.newStream([multicodec.relay]); // Send the HOP request\n\n  const streamHandler = new StreamHandler({\n    stream\n  });\n  streamHandler.write(request);\n  const response = await streamHandler.read();\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('hop request was successful');\n    return streamHandler.rest();\n  }\n\n  log('hop request failed with code %d, closing stream', response.code);\n  streamHandler.close();\n  throw errCode(new Error(`HOP request failed with code ${response.code}`), Errors.ERR_HOP_REQUEST_FAILED);\n};\n/**\n * Creates an unencoded CAN_HOP response based on the Circuits configuration\n * @private\n */\n\n\nmodule.exports.handleCanHop = function handleCanHop({\n  connection,\n  streamHandler,\n  circuit\n}) {\n  const canHop = circuit._options.hop.enabled;\n  log('can hop (%s) request from %s', canHop, connection.remotePeer.toB58String());\n  streamHandler.end({\n    type: CircuitPB.Type.STATUS,\n    code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/circuit/circuit/hop.js"],"names":["debug","require","log","error","PeerId","validateAddrs","StreamHandler","CircuitRelay","CircuitPB","pipe","errCode","codes","Errors","stop","multicodec","module","exports","handleHop","connection","request","streamHandler","circuit","_options","hop","enabled","end","type","Type","STATUS","code","Status","HOP_CANT_SPEAK_RELAY","err","remotePeer","toB58String","destinationPeer","dstPeer","id","destinationConnection","_connectionManager","get","active","HOP_NO_CONN_TO_DST","stopRequest","STOP","srcPeer","destinationStream","write","SUCCESS","sourceStream","rest","stream","newStream","relay","response","read","close","Error","ERR_HOP_REQUEST_FAILED","handleCanHop","canHop"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:circuit:hop')\nlog.error = debug('libp2p:circuit:hop:error')\n\nconst PeerId = require('peer-id')\nconst { validateAddrs } = require('./utils')\nconst StreamHandler = require('./stream-handler')\nconst { CircuitRelay: CircuitPB } = require('../protocol')\nconst pipe = require('it-pipe')\nconst errCode = require('err-code')\nconst { codes: Errors } = require('../../errors')\n\nconst { stop } = require('./stop')\n\nconst multicodec = require('./../multicodec')\n\nmodule.exports.handleHop = async function handleHop ({\n  connection,\n  request,\n  streamHandler,\n  circuit\n}) {\n  // Ensure hop is enabled\n  if (!circuit._options.hop.enabled) {\n    log('HOP request received but we are not acting as a relay')\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n    })\n  }\n\n  // Validate the HOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err) {\n    return log.error('invalid hop request via peer %s', connection.remotePeer.toB58String(), err)\n  }\n\n  // Get the connection to the destination (stop) peer\n  const destinationPeer = new PeerId(request.dstPeer.id)\n\n  const destinationConnection = circuit._connectionManager.get(destinationPeer)\n  if (!destinationConnection && !circuit._options.hop.active) {\n    log('HOP request received but we are not connected to the destination peer')\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n    })\n  }\n\n  // TODO: Handle being an active relay\n\n  // Handle the incoming HOP request by performing a STOP request\n  const stopRequest = {\n    type: CircuitPB.Type.STOP,\n    dstPeer: request.dstPeer,\n    srcPeer: request.srcPeer\n  }\n\n  let destinationStream\n  try {\n    destinationStream = await stop({\n      connection: destinationConnection,\n      request: stopRequest,\n      circuit\n    })\n  } catch (err) {\n    return log.error(err)\n  }\n\n  log('hop request from %s is valid', connection.remotePeer.toB58String())\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n  const sourceStream = streamHandler.rest()\n\n  // Short circuit the two streams to create the relayed connection\n  return pipe(\n    sourceStream,\n    destinationStream,\n    sourceStream\n  )\n}\n\n/**\n * Performs a HOP request to a relay peer, to request a connection to another\n * peer. A new, virtual, connection will be created between the two via the relay.\n *\n * @param {object} options\n * @param {Connection} options.connection Connection to the relay\n * @param {*} options.request\n * @param {Circuit} options.circuit\n * @returns {Promise<Connection>}\n */\nmodule.exports.hop = async function hop ({\n  connection,\n  request\n}) {\n  // Create a new stream to the relay\n  const { stream } = await connection.newStream([multicodec.relay])\n  // Send the HOP request\n  const streamHandler = new StreamHandler({ stream })\n  streamHandler.write(request)\n\n  const response = await streamHandler.read()\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('hop request was successful')\n    return streamHandler.rest()\n  }\n\n  log('hop request failed with code %d, closing stream', response.code)\n  streamHandler.close()\n  throw errCode(new Error(`HOP request failed with code ${response.code}`), Errors.ERR_HOP_REQUEST_FAILED)\n}\n\n/**\n * Creates an unencoded CAN_HOP response based on the Circuits configuration\n * @private\n */\nmodule.exports.handleCanHop = function handleCanHop ({\n  connection,\n  streamHandler,\n  circuit\n}) {\n  const canHop = circuit._options.hop.enabled\n  log('can hop (%s) request from %s', canHop, connection.remotePeer.toB58String())\n  streamHandler.end({\n    type: CircuitPB.Type.STATUS,\n    code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n  })\n}\n"]},"metadata":{},"sourceType":"script"}