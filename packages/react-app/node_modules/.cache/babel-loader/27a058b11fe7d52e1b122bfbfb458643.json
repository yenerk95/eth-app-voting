{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar multihashing = require('multihashing-async');\n\nvar multicodec = require('multicodec'); // binary resolver\n\n\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multicodec.SHA2_256,\n  resolver: {\n    /**\n     * Resolves a path within a Raw block.\n     *\n     * Always returns the raw data as value without any remainderPath.\n     *\n     * @param {Buffer} binaryBlob - Binary representation of a PB block\n     * @param {string} [path='/'] - Path that should be resolved.  Must be '/' or an exception is thrown\n     * @returns {Object} result - Result of the path it it was resolved successfully\n     * @returns {*} result.value - The raw data\n     * @returns {string} result.remainderPath - An empty string\n     */\n    resolve: function resolve(binaryBlob, path) {\n      if (path !== '/') {\n        throw new Error('Only the root path / may be resolved');\n      }\n\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      };\n    },\n\n    /**\n     * Return all available paths of a block.\n     *\n     * @generator\n     * @param {Buffer} binaryBlob - The raw data\n     * @returns {Object} - Finished generator with `done: true`\n     */\n    tree: function tree(binaryBlob) {\n      return {\n        done: true\n      };\n    }\n  },\n  util: {\n    deserialize: function deserialize(data) {\n      return data;\n    },\n    serialize: function serialize(data) {\n      return data;\n    },\n\n    /**\n     * Calculate the CID of the binary blob.\n     *\n     * @param {Object} binaryBlob - Encoded IPLD Node\n     * @param {Object} [userOptions] - Options to create the CID\n     * @param {number} [userOptions.cidVersion=1] - CID version number\n     * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n     * @returns {Promise.<CID>}\n     */\n    cid: function () {\n      var _cid = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(binaryBlob, userOptions) {\n        var defaultOptions, options, multihash, codecName, cid;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                defaultOptions = {\n                  cidVersion: 1,\n                  hashAlg: module.exports.defaultHashAlg\n                };\n                options = Object.assign(defaultOptions, userOptions);\n                _context.next = 4;\n                return multihashing(binaryBlob, options.hashAlg);\n\n              case 4:\n                multihash = _context.sent;\n                codecName = multicodec.print[module.exports.codec];\n                cid = new CID(options.cidVersion, codecName, multihash);\n                return _context.abrupt(\"return\", cid);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function cid(_x, _x2) {\n        return _cid.apply(this, arguments);\n      }\n\n      return cid;\n    }()\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipld-raw/src/index.js"],"names":["CID","require","multihashing","multicodec","module","exports","codec","RAW","defaultHashAlg","SHA2_256","resolver","resolve","binaryBlob","path","Error","value","remainderPath","tree","done","util","deserialize","data","serialize","cid","userOptions","defaultOptions","cidVersion","hashAlg","options","Object","assign","multihash","codecName","print"],"mappings":"AAAA;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B,C,CAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,KAAK,EAAEH,UAAU,CAACI,GADH;AAEfC,EAAAA,cAAc,EAAEL,UAAU,CAACM,QAFZ;AAGfC,EAAAA,QAAQ,EAAE;AACR;;;;;;;;;;;AAWAC,IAAAA,OAAO,EAAE,iBAACC,UAAD,EAAaC,IAAb,EAAsB;AAC7B,UAAIA,IAAI,KAAK,GAAb,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,aAAO;AACLC,QAAAA,KAAK,EAAEH,UADF;AAELI,QAAAA,aAAa,EAAE;AAFV,OAAP;AAID,KArBO;;AAsBR;;;;;;;AAOAC,IAAAA,IAAI,EAAE,cAACL,UAAD,EAAgB;AACpB,aAAO;AACLM,QAAAA,IAAI,EAAE;AADD,OAAP;AAGD;AAjCO,GAHK;AAsCfC,EAAAA,IAAI,EAAE;AACJC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAU;AACrB,aAAOA,IAAP;AACD,KAHG;AAIJC,IAAAA,SAAS,EAAE,mBAACD,IAAD,EAAU;AACnB,aAAOA,IAAP;AACD,KANG;;AAOJ;;;;;;;;;AASAE,IAAAA,GAAG;AAAA,0EAAE,iBAAOX,UAAP,EAAmBY,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,gBAAAA,cADH,GACoB;AAAEC,kBAAAA,UAAU,EAAE,CAAd;AAAiBC,kBAAAA,OAAO,EAAEvB,MAAM,CAACC,OAAP,CAAeG;AAAzC,iBADpB;AAEGoB,gBAAAA,OAFH,GAEaC,MAAM,CAACC,MAAP,CAAcL,cAAd,EAA8BD,WAA9B,CAFb;AAAA;AAAA,uBAIqBtB,YAAY,CAACU,UAAD,EAAagB,OAAO,CAACD,OAArB,CAJjC;;AAAA;AAIGI,gBAAAA,SAJH;AAKGC,gBAAAA,SALH,GAKe7B,UAAU,CAAC8B,KAAX,CAAiB7B,MAAM,CAACC,OAAP,CAAeC,KAAhC,CALf;AAMGiB,gBAAAA,GANH,GAMS,IAAIvB,GAAJ,CAAQ4B,OAAO,CAACF,UAAhB,EAA4BM,SAA5B,EAAuCD,SAAvC,CANT;AAAA,iDAQIR,GARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhBC;AAtCS,CAAjB","sourcesContent":["'use strict'\nconst CID = require('cids')\nconst multihashing = require('multihashing-async')\nconst multicodec = require('multicodec')\n\n// binary resolver\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multicodec.SHA2_256,\n  resolver: {\n    /**\n     * Resolves a path within a Raw block.\n     *\n     * Always returns the raw data as value without any remainderPath.\n     *\n     * @param {Buffer} binaryBlob - Binary representation of a PB block\n     * @param {string} [path='/'] - Path that should be resolved.  Must be '/' or an exception is thrown\n     * @returns {Object} result - Result of the path it it was resolved successfully\n     * @returns {*} result.value - The raw data\n     * @returns {string} result.remainderPath - An empty string\n     */\n    resolve: (binaryBlob, path) => {\n      if (path !== '/') {\n        throw new Error('Only the root path / may be resolved')\n      }\n\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      }\n    },\n    /**\n     * Return all available paths of a block.\n     *\n     * @generator\n     * @param {Buffer} binaryBlob - The raw data\n     * @returns {Object} - Finished generator with `done: true`\n     */\n    tree: (binaryBlob) => {\n      return {\n        done: true\n      }\n    }\n  },\n  util: {\n    deserialize: (data) => {\n      return data\n    },\n    serialize: (data) => {\n      return data\n    },\n    /**\n     * Calculate the CID of the binary blob.\n     *\n     * @param {Object} binaryBlob - Encoded IPLD Node\n     * @param {Object} [userOptions] - Options to create the CID\n     * @param {number} [userOptions.cidVersion=1] - CID version number\n     * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n     * @returns {Promise.<CID>}\n     */\n    cid: async (binaryBlob, userOptions) => {\n      const defaultOptions = { cidVersion: 1, hashAlg: module.exports.defaultHashAlg }\n      const options = Object.assign(defaultOptions, userOptions)\n\n      const multihash = await multihashing(binaryBlob, options.hashAlg)\n      const codecName = multicodec.print[module.exports.codec]\n      const cid = new CID(options.cidVersion, codecName, multihash)\n\n      return cid\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}