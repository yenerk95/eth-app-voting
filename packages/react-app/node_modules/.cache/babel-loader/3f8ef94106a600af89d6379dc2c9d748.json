{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst updateTree = require('./utils/update-tree');\n\nconst updateMfsRoot = require('./utils/update-mfs-root');\n\nconst toSources = require('./utils/to-sources');\n\nconst removeLink = require('./utils/remove-link');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst toTrail = require('./utils/to-trail');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nconst defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  flush: true,\n  signal: undefined\n};\n\nmodule.exports = context => {\n  return withTimeoutOption(async function mfsRm(...args) {\n    const {\n      sources,\n      options\n    } = await toSources(context, args, defaultOptions);\n\n    if (!sources.length) {\n      throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS');\n    }\n\n    sources.forEach(source => {\n      if (source.path === '/') {\n        throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS');\n      }\n    });\n\n    for (const source of sources) {\n      await removePath(context, source.path, options);\n    }\n  });\n};\n\nconst removePath = async (context, path, options) => {\n  const mfsPath = await toMfsPath(context, path, options);\n  const trail = await toTrail(context, mfsPath.mfsPath, options);\n  const child = trail.pop();\n  const parent = trail[trail.length - 1];\n\n  if (!parent) {\n    throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND');\n  }\n\n  if (child.type === 'directory' && !options.recursive) {\n    throw errCode(new Error(`${path} is a directory, use -r to remove directories`), 'ERR_WAS_DIR');\n  }\n\n  const {\n    cid\n  } = await removeLink(context, {\n    parentCid: parent.cid,\n    name: child.name,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush\n  });\n  parent.cid = cid; // update the tree with the new child\n\n  const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree\n\n  await updateMfsRoot(context, newRootCid, options);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/rm.js"],"names":["errCode","require","updateTree","updateMfsRoot","toSources","removeLink","toMfsPath","toTrail","withTimeoutOption","defaultOptions","recursive","cidVersion","hashAlg","flush","signal","undefined","module","exports","context","mfsRm","args","sources","options","length","Error","forEach","source","path","removePath","mfsPath","trail","child","pop","parent","type","cid","parentCid","name","newRootCid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst toSources = require('./utils/to-sources')\nconst removeLink = require('./utils/remove-link')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst toTrail = require('./utils/to-trail')\nconst { withTimeoutOption } = require('../../utils')\n\nconst defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  flush: true,\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  return withTimeoutOption(async function mfsRm (...args) {\n    const {\n      sources,\n      options\n    } = await toSources(context, args, defaultOptions)\n\n    if (!sources.length) {\n      throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS')\n    }\n\n    sources.forEach(source => {\n      if (source.path === '/') {\n        throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS')\n      }\n    })\n\n    for (const source of sources) {\n      await removePath(context, source.path, options)\n    }\n  })\n}\n\nconst removePath = async (context, path, options) => {\n  const mfsPath = await toMfsPath(context, path, options)\n  const trail = await toTrail(context, mfsPath.mfsPath, options)\n  const child = trail.pop()\n  const parent = trail[trail.length - 1]\n\n  if (!parent) {\n    throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n  }\n\n  if (child.type === 'directory' && !options.recursive) {\n    throw errCode(new Error(`${path} is a directory, use -r to remove directories`), 'ERR_WAS_DIR')\n  }\n\n  const {\n    cid\n  } = await removeLink(context, {\n    parentCid: parent.cid,\n    name: child.name,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush\n  })\n\n  parent.cid = cid\n\n  // update the tree with the new child\n  const newRootCid = await updateTree(context, trail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n"]},"metadata":{},"sourceType":"script"}