{"ast":null,"code":"'use strict';\n\nconst get = require('dlv');\n\nconst mergeOptions = require('merge-options');\n\nconst errCode = require('err-code');\n\nconst PubsubRouters = require('../runtime/libp2p-pubsub-routers-nodejs');\n\nmodule.exports = ({\n  options,\n  peerId,\n  multiaddrs = [],\n  repo,\n  keychainConfig = {},\n  config\n}) => {\n  options = options || {};\n  config = config || {};\n  const {\n    datastore,\n    keys\n  } = repo;\n  const libp2pOptions = getLibp2pOptions({\n    options,\n    config,\n    datastore,\n    keys,\n    keychainConfig,\n    peerId,\n    multiaddrs\n  });\n\n  if (typeof options.libp2p === 'function') {\n    return options.libp2p({\n      libp2pOptions,\n      options,\n      config,\n      datastore,\n      peerId\n    });\n  } // Required inline to reduce startup time\n\n\n  const Libp2p = require('libp2p');\n\n  return new Libp2p(mergeOptions(libp2pOptions, get(options, 'libp2p', {})));\n};\n\nfunction getLibp2pOptions({\n  options,\n  config,\n  datastore,\n  keys,\n  keychainConfig,\n  peerId,\n  multiaddrs\n}) {\n  const getPubsubRouter = () => {\n    const router = get(config, 'Pubsub.Router') || 'gossipsub';\n\n    if (!PubsubRouters[router]) {\n      throw errCode(new Error(`Router unavailable. Configure libp2p.modules.pubsub to use the ${router} router.`), 'ERR_NOT_SUPPORTED');\n    }\n\n    return PubsubRouters[router];\n  };\n\n  const libp2pDefaults = {\n    datastore,\n    peerId: peerId,\n    modules: {}\n  };\n  const bootstrapList = get(options, 'config.Bootstrap', get(config, 'Bootstrap', []));\n  const libp2pOptions = {\n    modules: {\n      pubsub: getPubsubRouter()\n    },\n    config: {\n      peerDiscovery: {\n        mdns: {\n          enabled: get(options, 'config.Discovery.MDNS.Enabled', get(config, 'Discovery.MDNS.Enabled', true))\n        },\n        webRTCStar: {\n          enabled: get(options, 'config.Discovery.webRTCStar.Enabled', get(config, 'Discovery.webRTCStar.Enabled', true))\n        },\n        bootstrap: {\n          list: bootstrapList\n        }\n      },\n      relay: {\n        enabled: get(options, 'relay.enabled', get(config, 'relay.enabled', true)),\n        hop: {\n          enabled: get(options, 'relay.hop.enabled', get(config, 'relay.hop.enabled', false)),\n          active: get(options, 'relay.hop.active', get(config, 'relay.hop.active', false))\n        }\n      },\n      dht: {\n        kBucketSize: get(options, 'dht.kBucketSize', 20)\n      },\n      pubsub: {\n        enabled: get(options, 'config.Pubsub.Enabled', get(config, 'Pubsub.Enabled', true))\n      }\n    },\n    addresses: {\n      listen: multiaddrs\n    },\n    connectionManager: get(options, 'connectionManager', {\n      maxConnections: get(options, 'config.Swarm.ConnMgr.HighWater', get(config, 'Swarm.ConnMgr.HighWater')),\n      minConnections: get(options, 'config.Swarm.ConnMgr.LowWater', get(config, 'Swarm.ConnMgr.LowWater'))\n    }),\n    keychain: {\n      datastore: keys,\n      ...keychainConfig\n    }\n  }; // Required inline to reduce startup time\n  // Note: libp2p-nodejs gets replaced by libp2p-browser when webpacked/browserified\n\n  const getEnvLibp2pOptions = require('../runtime/libp2p-nodejs'); // Merge defaults with Node.js/browser/other environments options and configuration\n\n\n  const libp2pConfig = mergeOptions(libp2pDefaults, getEnvLibp2pOptions(), libp2pOptions);\n\n  if (bootstrapList.length > 0) {\n    libp2pConfig.modules.peerDiscovery.push(require('libp2p-bootstrap'));\n  }\n\n  return libp2pConfig;\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/libp2p.js"],"names":["get","require","mergeOptions","errCode","PubsubRouters","module","exports","options","peerId","multiaddrs","repo","keychainConfig","config","datastore","keys","libp2pOptions","getLibp2pOptions","libp2p","Libp2p","getPubsubRouter","router","Error","libp2pDefaults","modules","bootstrapList","pubsub","peerDiscovery","mdns","enabled","webRTCStar","bootstrap","list","relay","hop","active","dht","kBucketSize","addresses","listen","connectionManager","maxConnections","minConnections","keychain","getEnvLibp2pOptions","libp2pConfig","length","push"],"mappings":"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","sourcesContent":["'use strict'\n\nconst get = require('dlv')\nconst mergeOptions = require('merge-options')\nconst errCode = require('err-code')\nconst PubsubRouters = require('../runtime/libp2p-pubsub-routers-nodejs')\n\nmodule.exports = ({\n  options,\n  peerId,\n  multiaddrs = [],\n  repo,\n  keychainConfig = {},\n  config\n}) => {\n  options = options || {}\n  config = config || {}\n\n  const { datastore, keys } = repo\n\n  const libp2pOptions = getLibp2pOptions({\n    options,\n    config,\n    datastore,\n    keys,\n    keychainConfig,\n    peerId,\n    multiaddrs\n  })\n\n  if (typeof options.libp2p === 'function') {\n    return options.libp2p({ libp2pOptions, options, config, datastore, peerId })\n  }\n\n  // Required inline to reduce startup time\n  const Libp2p = require('libp2p')\n  return new Libp2p(mergeOptions(libp2pOptions, get(options, 'libp2p', {})))\n}\n\nfunction getLibp2pOptions ({ options, config, datastore, keys, keychainConfig, peerId, multiaddrs }) {\n  const getPubsubRouter = () => {\n    const router = get(config, 'Pubsub.Router') || 'gossipsub'\n\n    if (!PubsubRouters[router]) {\n      throw errCode(new Error(`Router unavailable. Configure libp2p.modules.pubsub to use the ${router} router.`), 'ERR_NOT_SUPPORTED')\n    }\n\n    return PubsubRouters[router]\n  }\n\n  const libp2pDefaults = {\n    datastore,\n    peerId: peerId,\n    modules: {}\n  }\n\n  const bootstrapList = get(options, 'config.Bootstrap', get(config, 'Bootstrap', []))\n  const libp2pOptions = {\n    modules: {\n      pubsub: getPubsubRouter()\n    },\n    config: {\n      peerDiscovery: {\n        mdns: {\n          enabled: get(options, 'config.Discovery.MDNS.Enabled',\n            get(config, 'Discovery.MDNS.Enabled', true))\n        },\n        webRTCStar: {\n          enabled: get(options, 'config.Discovery.webRTCStar.Enabled',\n            get(config, 'Discovery.webRTCStar.Enabled', true))\n        },\n        bootstrap: {\n          list: bootstrapList\n        }\n      },\n      relay: {\n        enabled: get(options, 'relay.enabled',\n          get(config, 'relay.enabled', true)),\n        hop: {\n          enabled: get(options, 'relay.hop.enabled',\n            get(config, 'relay.hop.enabled', false)),\n          active: get(options, 'relay.hop.active',\n            get(config, 'relay.hop.active', false))\n        }\n      },\n      dht: {\n        kBucketSize: get(options, 'dht.kBucketSize', 20)\n      },\n      pubsub: {\n        enabled: get(options, 'config.Pubsub.Enabled',\n          get(config, 'Pubsub.Enabled', true))\n      }\n    },\n    addresses: {\n      listen: multiaddrs\n    },\n    connectionManager: get(options, 'connectionManager', {\n      maxConnections: get(options, 'config.Swarm.ConnMgr.HighWater',\n        get(config, 'Swarm.ConnMgr.HighWater')),\n      minConnections: get(options, 'config.Swarm.ConnMgr.LowWater',\n        get(config, 'Swarm.ConnMgr.LowWater'))\n    }),\n    keychain: {\n      datastore: keys,\n      ...keychainConfig\n    }\n  }\n\n  // Required inline to reduce startup time\n  // Note: libp2p-nodejs gets replaced by libp2p-browser when webpacked/browserified\n  const getEnvLibp2pOptions = require('../runtime/libp2p-nodejs')\n\n  // Merge defaults with Node.js/browser/other environments options and configuration\n  const libp2pConfig = mergeOptions(\n    libp2pDefaults,\n    getEnvLibp2pOptions(),\n    libp2pOptions\n  )\n\n  if (bootstrapList.length > 0) {\n    libp2pConfig.modules.peerDiscovery.push(require('libp2p-bootstrap'))\n  }\n\n  return libp2pConfig\n}\n"]},"metadata":{},"sourceType":"script"}