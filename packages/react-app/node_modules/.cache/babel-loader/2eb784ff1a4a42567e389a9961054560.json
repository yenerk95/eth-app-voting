{"ast":null,"code":"/*!\n * sha256.js - SHA256 implementation for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/SHA-2\n *   https://tools.ietf.org/html/rfc4634\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/sha/256.js\n */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('../internal/assert');\n\nvar HMAC = require('../internal/hmac');\n/*\n * Constants\n */\n\n\nvar FINALIZED = -1;\nvar DESC = Buffer.alloc(8, 0x00);\nvar PADDING = Buffer.alloc(64, 0x00);\nPADDING[0] = 0x80;\nvar K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n/**\n * SHA256\n */\n\nvar SHA256 = /*#__PURE__*/function () {\n  function SHA256() {\n    _classCallCheck(this, SHA256);\n\n    this.state = new Uint32Array(8);\n    this.msg = new Uint32Array(64);\n    this.block = Buffer.allocUnsafe(64);\n    this.size = FINALIZED;\n  }\n\n  _createClass(SHA256, [{\n    key: \"init\",\n    value: function init() {\n      this.state[0] = 0x6a09e667;\n      this.state[1] = 0xbb67ae85;\n      this.state[2] = 0x3c6ef372;\n      this.state[3] = 0xa54ff53a;\n      this.state[4] = 0x510e527f;\n      this.state[5] = 0x9b05688c;\n      this.state[6] = 0x1f83d9ab;\n      this.state[7] = 0x5be0cd19;\n      this.size = 0;\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(data) {\n      assert(Buffer.isBuffer(data));\n\n      this._update(data, data.length);\n\n      return this;\n    }\n  }, {\n    key: \"final\",\n    value: function final() {\n      return this._final(Buffer.allocUnsafe(32));\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(data, len) {\n      assert(this.size !== FINALIZED, 'Context is not initialized.');\n      var pos = this.size & 63;\n      var off = 0;\n      this.size += len;\n\n      if (pos > 0) {\n        var want = 64 - pos;\n        if (want > len) want = len;\n        data.copy(this.block, pos, off, off + want);\n        pos += want;\n        len -= want;\n        off += want;\n        if (pos < 64) return;\n\n        this._transform(this.block, 0);\n      }\n\n      while (len >= 64) {\n        this._transform(data, off);\n\n        off += 64;\n        len -= 64;\n      }\n\n      if (len > 0) data.copy(this.block, 0, off, off + len);\n    }\n  }, {\n    key: \"_final\",\n    value: function _final(out) {\n      assert(this.size !== FINALIZED, 'Context is not initialized.');\n      var pos = this.size & 63;\n      var len = this.size * 8;\n      writeU32(DESC, len * (1 / 0x100000000) >>> 0, 0);\n      writeU32(DESC, len >>> 0, 4);\n\n      this._update(PADDING, 1 + (119 - pos & 63));\n\n      this._update(DESC, 8);\n\n      for (var i = 0; i < 8; i++) {\n        writeU32(out, this.state[i], i * 4);\n        this.state[i] = 0;\n      }\n\n      for (var _i = 0; _i < 64; _i++) {\n        this.msg[_i] = 0;\n      }\n\n      for (var _i2 = 0; _i2 < 64; _i2++) {\n        this.block[_i2] = 0;\n      }\n\n      this.size = FINALIZED;\n      return out;\n    }\n  }, {\n    key: \"_transform\",\n    value: function _transform(chunk, pos) {\n      var W = this.msg;\n      var a = this.state[0];\n      var b = this.state[1];\n      var c = this.state[2];\n      var d = this.state[3];\n      var e = this.state[4];\n      var f = this.state[5];\n      var g = this.state[6];\n      var h = this.state[7];\n      var i = 0;\n\n      for (; i < 16; i++) {\n        W[i] = readU32(chunk, pos + i * 4);\n      }\n\n      for (; i < 64; i++) {\n        W[i] = sigma1(W[i - 2]) + W[i - 7] + sigma0(W[i - 15]) + W[i - 16];\n      }\n\n      for (i = 0; i < 64; i++) {\n        var t1 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i];\n        var t2 = Sigma0(a) + Maj(a, b, c);\n        h = g;\n        g = f;\n        f = e;\n        e = d + t1 >>> 0;\n        d = c;\n        c = b;\n        b = a;\n        a = t1 + t2 >>> 0;\n      }\n\n      this.state[0] += a;\n      this.state[1] += b;\n      this.state[2] += c;\n      this.state[3] += d;\n      this.state[4] += e;\n      this.state[5] += f;\n      this.state[6] += g;\n      this.state[7] += h;\n    }\n  }], [{\n    key: \"hash\",\n    value: function hash() {\n      return new SHA256();\n    }\n  }, {\n    key: \"hmac\",\n    value: function hmac() {\n      return new HMAC(SHA256, 64);\n    }\n  }, {\n    key: \"digest\",\n    value: function digest(data) {\n      return SHA256.ctx.init().update(data).final();\n    }\n  }, {\n    key: \"root\",\n    value: function root(left, right) {\n      assert(Buffer.isBuffer(left) && left.length === 32);\n      assert(Buffer.isBuffer(right) && right.length === 32);\n      return SHA256.ctx.init().update(left).update(right).final();\n    }\n  }, {\n    key: \"multi\",\n    value: function multi(x, y, z) {\n      var ctx = SHA256.ctx;\n      ctx.init();\n      ctx.update(x);\n      ctx.update(y);\n      if (z) ctx.update(z);\n      return ctx.final();\n    }\n  }, {\n    key: \"mac\",\n    value: function mac(data, key) {\n      return SHA256.hmac().init(key).update(data).final();\n    }\n  }]);\n\n  return SHA256;\n}();\n/*\n * Static\n */\n\n\nSHA256.native = 0;\nSHA256.id = 'SHA256';\nSHA256.size = 32;\nSHA256.bits = 256;\nSHA256.blockSize = 64;\nSHA256.zero = Buffer.alloc(32, 0x00);\nSHA256.ctx = new SHA256();\n/*\n * Helpers\n */\n\nfunction Sigma0(x) {\n  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);\n}\n\nfunction Sigma1(x) {\n  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);\n}\n\nfunction sigma0(x) {\n  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;\n}\n\nfunction sigma1(x) {\n  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;\n}\n\nfunction Ch(x, y, z) {\n  return z ^ x & (y ^ z);\n}\n\nfunction Maj(x, y, z) {\n  return x & y | z & (x | y);\n}\n\nfunction readU32(data, off) {\n  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];\n}\n\nfunction writeU32(data, num, off) {\n  data[off++] = num >>> 24;\n  data[off++] = num >>> 16;\n  data[off++] = num >>> 8;\n  data[off++] = num;\n  return off;\n}\n/*\n * Expose\n */\n\n\nmodule.exports = SHA256;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/bcrypto/lib/js/sha256.js"],"names":["assert","require","HMAC","FINALIZED","DESC","Buffer","alloc","PADDING","K","Uint32Array","SHA256","state","msg","block","allocUnsafe","size","data","isBuffer","_update","length","_final","len","pos","off","want","copy","_transform","out","writeU32","i","chunk","W","a","b","c","d","e","f","g","h","readU32","sigma1","sigma0","t1","Sigma1","Ch","t2","Sigma0","Maj","ctx","init","update","final","left","right","x","y","z","key","hmac","native","id","bits","blockSize","zero","num","module","exports"],"mappings":"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","sourcesContent":["/*!\n * sha256.js - SHA256 implementation for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/SHA-2\n *   https://tools.ietf.org/html/rfc4634\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/sha/256.js\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\nconst HMAC = require('../internal/hmac');\n\n/*\n * Constants\n */\n\nconst FINALIZED = -1;\nconst DESC = Buffer.alloc(8, 0x00);\nconst PADDING = Buffer.alloc(64, 0x00);\n\nPADDING[0] = 0x80;\n\nconst K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/**\n * SHA256\n */\n\nclass SHA256 {\n  constructor() {\n    this.state = new Uint32Array(8);\n    this.msg = new Uint32Array(64);\n    this.block = Buffer.allocUnsafe(64);\n    this.size = FINALIZED;\n  }\n\n  init() {\n    this.state[0] = 0x6a09e667;\n    this.state[1] = 0xbb67ae85;\n    this.state[2] = 0x3c6ef372;\n    this.state[3] = 0xa54ff53a;\n    this.state[4] = 0x510e527f;\n    this.state[5] = 0x9b05688c;\n    this.state[6] = 0x1f83d9ab;\n    this.state[7] = 0x5be0cd19;\n    this.size = 0;\n    return this;\n  }\n\n  update(data) {\n    assert(Buffer.isBuffer(data));\n    this._update(data, data.length);\n    return this;\n  }\n\n  final() {\n    return this._final(Buffer.allocUnsafe(32));\n  }\n\n  _update(data, len) {\n    assert(this.size !== FINALIZED, 'Context is not initialized.');\n\n    let pos = this.size & 63;\n    let off = 0;\n\n    this.size += len;\n\n    if (pos > 0) {\n      let want = 64 - pos;\n\n      if (want > len)\n        want = len;\n\n      data.copy(this.block, pos, off, off + want);\n\n      pos += want;\n      len -= want;\n      off += want;\n\n      if (pos < 64)\n        return;\n\n      this._transform(this.block, 0);\n    }\n\n    while (len >= 64) {\n      this._transform(data, off);\n      off += 64;\n      len -= 64;\n    }\n\n    if (len > 0)\n      data.copy(this.block, 0, off, off + len);\n  }\n\n  _final(out) {\n    assert(this.size !== FINALIZED, 'Context is not initialized.');\n\n    const pos = this.size & 63;\n    const len = this.size * 8;\n\n    writeU32(DESC, (len * (1 / 0x100000000)) >>> 0, 0);\n    writeU32(DESC, len >>> 0, 4);\n\n    this._update(PADDING, 1 + ((119 - pos) & 63));\n    this._update(DESC, 8);\n\n    for (let i = 0; i < 8; i++) {\n      writeU32(out, this.state[i], i * 4);\n      this.state[i] = 0;\n    }\n\n    for (let i = 0; i < 64; i++)\n      this.msg[i] = 0;\n\n    for (let i = 0; i < 64; i++)\n      this.block[i] = 0;\n\n    this.size = FINALIZED;\n\n    return out;\n  }\n\n  _transform(chunk, pos) {\n    const W = this.msg;\n\n    let a = this.state[0];\n    let b = this.state[1];\n    let c = this.state[2];\n    let d = this.state[3];\n    let e = this.state[4];\n    let f = this.state[5];\n    let g = this.state[6];\n    let h = this.state[7];\n    let i = 0;\n\n    for (; i < 16; i++)\n      W[i] = readU32(chunk, pos + i * 4);\n\n    for (; i < 64; i++)\n      W[i] = sigma1(W[i - 2]) + W[i - 7] + sigma0(W[i - 15]) + W[i - 16];\n\n    for (i = 0; i < 64; i++) {\n      const t1 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i];\n      const t2 = Sigma0(a) + Maj(a, b, c);\n\n      h = g;\n      g = f;\n      f = e;\n\n      e = (d + t1) >>> 0;\n\n      d = c;\n      c = b;\n      b = a;\n\n      a = (t1 + t2) >>> 0;\n    }\n\n    this.state[0] += a;\n    this.state[1] += b;\n    this.state[2] += c;\n    this.state[3] += d;\n    this.state[4] += e;\n    this.state[5] += f;\n    this.state[6] += g;\n    this.state[7] += h;\n  }\n\n  static hash() {\n    return new SHA256();\n  }\n\n  static hmac() {\n    return new HMAC(SHA256, 64);\n  }\n\n  static digest(data) {\n    return SHA256.ctx.init().update(data).final();\n  }\n\n  static root(left, right) {\n    assert(Buffer.isBuffer(left) && left.length === 32);\n    assert(Buffer.isBuffer(right) && right.length === 32);\n    return SHA256.ctx.init().update(left).update(right).final();\n  }\n\n  static multi(x, y, z) {\n    const {ctx} = SHA256;\n\n    ctx.init();\n    ctx.update(x);\n    ctx.update(y);\n\n    if (z)\n      ctx.update(z);\n\n    return ctx.final();\n  }\n\n  static mac(data, key) {\n    return SHA256.hmac().init(key).update(data).final();\n  }\n}\n\n/*\n * Static\n */\n\nSHA256.native = 0;\nSHA256.id = 'SHA256';\nSHA256.size = 32;\nSHA256.bits = 256;\nSHA256.blockSize = 64;\nSHA256.zero = Buffer.alloc(32, 0x00);\nSHA256.ctx = new SHA256();\n\n/*\n * Helpers\n */\n\nfunction Sigma0(x) {\n  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);\n}\n\nfunction Sigma1(x) {\n  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);\n}\n\nfunction sigma0(x) {\n  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3);\n}\n\nfunction sigma1(x) {\n  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10);\n}\n\nfunction Ch(x, y, z) {\n  return z ^ (x & (y ^ z));\n}\n\nfunction Maj(x, y, z) {\n  return (x & y) | (z & (x | y));\n}\n\nfunction readU32(data, off) {\n  return (data[off++] * 0x1000000\n        + data[off++] * 0x10000\n        + data[off++] * 0x100\n        + data[off]);\n}\n\nfunction writeU32(data, num, off) {\n  data[off++] = num >>> 24;\n  data[off++] = num >>> 16;\n  data[off++] = num >>> 8;\n  data[off++] = num;\n  return off;\n}\n\n/*\n * Expose\n */\n\nmodule.exports = SHA256;\n"]},"metadata":{},"sourceType":"script"}