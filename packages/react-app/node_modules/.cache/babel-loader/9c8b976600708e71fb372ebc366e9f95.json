{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar pSettle = require('p-settle');\n\nvar _require = require('./errors'),\n    codes = _require.codes;\n\nvar errCode = require('err-code');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:transports');\nlog.error = debug('libp2p:transports:error');\n\nvar TransportManager = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Libp2p} options.libp2p The Libp2p instance. It will be passed to the transports.\n   * @param {Upgrader} options.upgrader The upgrader to provide to the transports\n   * @param {boolean} [options.faultTolerance = FAULT_TOLERANCE.FATAL_ALL] Address listen error tolerance.\n   */\n  function TransportManager(_ref) {\n    var libp2p = _ref.libp2p,\n        upgrader = _ref.upgrader,\n        _ref$faultTolerance = _ref.faultTolerance,\n        faultTolerance = _ref$faultTolerance === void 0 ? FAULT_TOLERANCE.FATAL_ALL : _ref$faultTolerance;\n\n    _classCallCheck(this, TransportManager);\n\n    this.libp2p = libp2p;\n    this.upgrader = upgrader;\n    this._transports = new Map();\n    this._listeners = new Map();\n    this.faultTolerance = faultTolerance;\n  }\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {String} key\n   * @param {Transport} Transport\n   * @param {*} transportOptions Additional options to pass to the transport\n   * @returns {void}\n   */\n\n\n  _createClass(TransportManager, [{\n    key: \"add\",\n    value: function add(key, Transport) {\n      var transportOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      log('adding %s', key);\n\n      if (!key) {\n        throw errCode(new Error(\"Transport must have a valid key, was given '\".concat(key, \"'\")), codes.ERR_INVALID_KEY);\n      }\n\n      if (this._transports.has(key)) {\n        throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT);\n      }\n\n      var transport = new Transport(_objectSpread(_objectSpread({}, transportOptions), {}, {\n        libp2p: this.libp2p,\n        upgrader: this.upgrader\n      }));\n\n      this._transports.set(key, transport);\n\n      if (!this._listeners.has(key)) {\n        this._listeners.set(key, []);\n      }\n    }\n    /**\n     * Stops all listeners\n     * @async\n     */\n\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var tasks, _iterator, _step, _step$value, key, listeners, listener, _iterator2, _step2, _key;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                tasks = [];\n                _iterator = _createForOfIteratorHelper(this._listeners);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], listeners = _step$value[1];\n                    log('closing listeners for %s', key);\n\n                    while (listeners.length) {\n                      listener = listeners.pop();\n                      tasks.push(listener.close());\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                _context.next = 5;\n                return Promise.all(tasks);\n\n              case 5:\n                log('all listeners closed');\n                _iterator2 = _createForOfIteratorHelper(this._listeners.keys());\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _key = _step2.value;\n\n                    this._listeners.set(_key, []);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n    /**\n     * Dials the given Multiaddr over it's supported transport\n     * @param {Multiaddr} ma\n     * @param {*} options\n     * @returns {Promise<Connection>}\n     */\n\n  }, {\n    key: \"dial\",\n    value: function () {\n      var _dial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ma, options) {\n        var transport;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                transport = this.transportForMultiaddr(ma);\n\n                if (transport) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw errCode(new Error(\"No transport available for address \".concat(String(ma))), codes.ERR_TRANSPORT_UNAVAILABLE);\n\n              case 3:\n                _context2.prev = 3;\n                _context2.next = 6;\n                return transport.dial(ma, options);\n\n              case 6:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                if (!_context2.t0.code) _context2.t0.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n                throw _context2.t0;\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function dial(_x, _x2) {\n        return _dial.apply(this, arguments);\n      }\n\n      return dial;\n    }()\n    /**\n     * Returns all Multiaddr's the listeners are using\n     * @returns {Multiaddr[]}\n     */\n\n  }, {\n    key: \"getAddrs\",\n    value: function getAddrs() {\n      var addrs = [];\n\n      var _iterator3 = _createForOfIteratorHelper(this._listeners.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var listeners = _step3.value;\n\n          var _iterator4 = _createForOfIteratorHelper(listeners),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var listener = _step4.value;\n              addrs = [].concat(_toConsumableArray(addrs), _toConsumableArray(listener.getAddrs()));\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return addrs;\n    }\n    /**\n     * Returns all the transports instances.\n     * @returns {Iterator<Transport>}\n     */\n\n  }, {\n    key: \"getTransports\",\n    value: function getTransports() {\n      return this._transports.values();\n    }\n    /**\n     * Finds a transport that matches the given Multiaddr\n     * @param {Multiaddr} ma\n     * @returns {Transport|null}\n     */\n\n  }, {\n    key: \"transportForMultiaddr\",\n    value: function transportForMultiaddr(ma) {\n      var _iterator5 = _createForOfIteratorHelper(this._transports.values()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var transport = _step5.value;\n          var addrs = transport.filter([ma]);\n          if (addrs.length) return transport;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return null;\n    }\n    /**\n     * Starts listeners for each listen Multiaddr.\n     * @async\n     */\n\n  }, {\n    key: \"listen\",\n    value: function () {\n      var _listen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var addrs, couldNotListen, _iterator6, _step6, _step6$value, key, transport, supportedAddrs, tasks, _iterator7, _step7, addr, listener, results, isListening, message;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                addrs = this.libp2p.addressManager.getListenAddrs();\n\n                if (!(addrs.length === 0)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                log('no addresses were provided for listening, this node is dial only');\n                return _context3.abrupt(\"return\");\n\n              case 4:\n                couldNotListen = [];\n                _iterator6 = _createForOfIteratorHelper(this._transports.entries());\n                _context3.prev = 6;\n\n                _iterator6.s();\n\n              case 8:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                _step6$value = _slicedToArray(_step6.value, 2), key = _step6$value[0], transport = _step6$value[1];\n                supportedAddrs = transport.filter(addrs);\n                tasks = []; // For each supported multiaddr, create a listener\n\n                _iterator7 = _createForOfIteratorHelper(supportedAddrs);\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    addr = _step7.value;\n                    log('creating listener for %s on %s', key, addr);\n                    listener = transport.createListener({}, this.onConnection);\n\n                    this._listeners.get(key).push(listener); // We need to attempt to listen on everything\n\n\n                    tasks.push(listener.listen(addr));\n                  } // Keep track of transports we had no addresses for\n\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n\n                if (!(tasks.length === 0)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                couldNotListen.push(key);\n                return _context3.abrupt(\"continue\", 23);\n\n              case 17:\n                _context3.next = 19;\n                return pSettle(tasks);\n\n              case 19:\n                results = _context3.sent;\n                // If we are listening on at least 1 address, succeed.\n                // TODO: we should look at adding a retry (`p-retry`) here to better support\n                // listening on remote addresses as they may be offline. We could then potentially\n                // just wait for any (`p-any`) listener to succeed on each transport before returning\n                isListening = results.find(function (r) {\n                  return r.isFulfilled === true;\n                });\n\n                if (isListening) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                throw errCode(new Error(\"Transport (\".concat(key, \") could not listen on any available address\")), codes.ERR_NO_VALID_ADDRESSES);\n\n              case 23:\n                _context3.next = 8;\n                break;\n\n              case 25:\n                _context3.next = 30;\n                break;\n\n              case 27:\n                _context3.prev = 27;\n                _context3.t0 = _context3[\"catch\"](6);\n\n                _iterator6.e(_context3.t0);\n\n              case 30:\n                _context3.prev = 30;\n\n                _iterator6.f();\n\n                return _context3.finish(30);\n\n              case 33:\n                if (!(couldNotListen.length === this._transports.size)) {\n                  _context3.next = 38;\n                  break;\n                }\n\n                message = \"no valid addresses were provided for transports [\".concat(couldNotListen, \"]\");\n\n                if (!(this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL)) {\n                  _context3.next = 37;\n                  break;\n                }\n\n                throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES);\n\n              case 37:\n                log(\"libp2p in dial mode only: \".concat(message));\n\n              case 38:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 27, 30, 33]]);\n      }));\n\n      function listen() {\n        return _listen.apply(this, arguments);\n      }\n\n      return listen;\n    }()\n    /**\n     * Removes the given transport from the manager.\n     * If a transport has any running listeners, they will be closed.\n     *\n     * @async\n     * @param {string} key\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key) {\n        var _iterator8, _step8, listener;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                log('removing %s', key);\n\n                if (!this._listeners.has(key)) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                // Close any running listeners\n                _iterator8 = _createForOfIteratorHelper(this._listeners.get(key));\n                _context4.prev = 3;\n\n                _iterator8.s();\n\n              case 5:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                listener = _step8.value;\n                _context4.next = 9;\n                return listener.close();\n\n              case 9:\n                _context4.next = 5;\n                break;\n\n              case 11:\n                _context4.next = 16;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](3);\n\n                _iterator8.e(_context4.t0);\n\n              case 16:\n                _context4.prev = 16;\n\n                _iterator8.f();\n\n                return _context4.finish(16);\n\n              case 19:\n                this._transports.delete(key);\n\n                this._listeners.delete(key);\n\n              case 21:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 13, 16, 19]]);\n      }));\n\n      function remove(_x3) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Removes all transports from the manager.\n     * If any listeners are running, they will be closed.\n     * @async\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function () {\n      var _removeAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var tasks, _iterator9, _step9, key;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                tasks = [];\n                _iterator9 = _createForOfIteratorHelper(this._transports.keys());\n\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    key = _step9.value;\n                    tasks.push(this.remove(key));\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n\n                _context5.next = 5;\n                return Promise.all(tasks);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function removeAll() {\n        return _removeAll.apply(this, arguments);\n      }\n\n      return removeAll;\n    }()\n  }]);\n\n  return TransportManager;\n}();\n/**\n * Enum Transport Manager Fault Tolerance values.\n * FATAL_ALL should be used for failing in any listen circumstance.\n * NO_FATAL should be used for not failing when not listening.\n * @readonly\n * @enum {number}\n */\n\n\nvar FAULT_TOLERANCE = {\n  FATAL_ALL: 0,\n  NO_FATAL: 1\n};\nTransportManager.FaultTolerance = FAULT_TOLERANCE;\nmodule.exports = TransportManager;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/transport-manager.js"],"names":["pSettle","require","codes","errCode","debug","log","error","TransportManager","libp2p","upgrader","faultTolerance","FAULT_TOLERANCE","FATAL_ALL","_transports","Map","_listeners","key","Transport","transportOptions","Error","ERR_INVALID_KEY","has","ERR_DUPLICATE_TRANSPORT","transport","set","tasks","listeners","length","listener","pop","push","close","Promise","all","keys","ma","options","transportForMultiaddr","String","ERR_TRANSPORT_UNAVAILABLE","dial","code","ERR_TRANSPORT_DIAL_FAILED","addrs","values","getAddrs","filter","addressManager","getListenAddrs","couldNotListen","entries","supportedAddrs","addr","createListener","onConnection","get","listen","results","isListening","find","r","isFulfilled","ERR_NO_VALID_ADDRESSES","size","message","delete","remove","NO_FATAL","FaultTolerance","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst pSettle = require('p-settle')\nconst { codes } = require('./errors')\nconst errCode = require('err-code')\nconst debug = require('debug')\nconst log = debug('libp2p:transports')\nlog.error = debug('libp2p:transports:error')\n\nclass TransportManager {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Libp2p} options.libp2p The Libp2p instance. It will be passed to the transports.\n   * @param {Upgrader} options.upgrader The upgrader to provide to the transports\n   * @param {boolean} [options.faultTolerance = FAULT_TOLERANCE.FATAL_ALL] Address listen error tolerance.\n   */\n  constructor ({ libp2p, upgrader, faultTolerance = FAULT_TOLERANCE.FATAL_ALL }) {\n    this.libp2p = libp2p\n    this.upgrader = upgrader\n    this._transports = new Map()\n    this._listeners = new Map()\n    this.faultTolerance = faultTolerance\n  }\n\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {String} key\n   * @param {Transport} Transport\n   * @param {*} transportOptions Additional options to pass to the transport\n   * @returns {void}\n   */\n  add (key, Transport, transportOptions = {}) {\n    log('adding %s', key)\n    if (!key) {\n      throw errCode(new Error(`Transport must have a valid key, was given '${key}'`), codes.ERR_INVALID_KEY)\n    }\n    if (this._transports.has(key)) {\n      throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT)\n    }\n\n    const transport = new Transport({\n      ...transportOptions,\n      libp2p: this.libp2p,\n      upgrader: this.upgrader\n    })\n\n    this._transports.set(key, transport)\n    if (!this._listeners.has(key)) {\n      this._listeners.set(key, [])\n    }\n  }\n\n  /**\n   * Stops all listeners\n   * @async\n   */\n  async close () {\n    const tasks = []\n    for (const [key, listeners] of this._listeners) {\n      log('closing listeners for %s', key)\n      while (listeners.length) {\n        const listener = listeners.pop()\n        tasks.push(listener.close())\n      }\n    }\n\n    await Promise.all(tasks)\n    log('all listeners closed')\n    for (const key of this._listeners.keys()) {\n      this._listeners.set(key, [])\n    }\n  }\n\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   * @param {Multiaddr} ma\n   * @param {*} options\n   * @returns {Promise<Connection>}\n   */\n  async dial (ma, options) {\n    const transport = this.transportForMultiaddr(ma)\n    if (!transport) {\n      throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE)\n    }\n\n    try {\n      return await transport.dial(ma, options)\n    } catch (err) {\n      if (!err.code) err.code = codes.ERR_TRANSPORT_DIAL_FAILED\n      throw err\n    }\n  }\n\n  /**\n   * Returns all Multiaddr's the listeners are using\n   * @returns {Multiaddr[]}\n   */\n  getAddrs () {\n    let addrs = []\n    for (const listeners of this._listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()]\n      }\n    }\n    return addrs\n  }\n\n  /**\n   * Returns all the transports instances.\n   * @returns {Iterator<Transport>}\n   */\n  getTransports () {\n    return this._transports.values()\n  }\n\n  /**\n   * Finds a transport that matches the given Multiaddr\n   * @param {Multiaddr} ma\n   * @returns {Transport|null}\n   */\n  transportForMultiaddr (ma) {\n    for (const transport of this._transports.values()) {\n      const addrs = transport.filter([ma])\n      if (addrs.length) return transport\n    }\n    return null\n  }\n\n  /**\n   * Starts listeners for each listen Multiaddr.\n   * @async\n   */\n  async listen () {\n    const addrs = this.libp2p.addressManager.getListenAddrs()\n\n    if (addrs.length === 0) {\n      log('no addresses were provided for listening, this node is dial only')\n      return\n    }\n\n    const couldNotListen = []\n    for (const [key, transport] of this._transports.entries()) {\n      const supportedAddrs = transport.filter(addrs)\n      const tasks = []\n\n      // For each supported multiaddr, create a listener\n      for (const addr of supportedAddrs) {\n        log('creating listener for %s on %s', key, addr)\n        const listener = transport.createListener({}, this.onConnection)\n        this._listeners.get(key).push(listener)\n\n        // We need to attempt to listen on everything\n        tasks.push(listener.listen(addr))\n      }\n\n      // Keep track of transports we had no addresses for\n      if (tasks.length === 0) {\n        couldNotListen.push(key)\n        continue\n      }\n\n      const results = await pSettle(tasks)\n      // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n      const isListening = results.find(r => r.isFulfilled === true)\n      if (!isListening) {\n        throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES)\n      }\n    }\n\n    // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n    if (couldNotListen.length === this._transports.size) {\n      const message = `no valid addresses were provided for transports [${couldNotListen}]`\n      if (this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL) {\n        throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES)\n      }\n      log(`libp2p in dial mode only: ${message}`)\n    }\n  }\n\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   *\n   * @async\n   * @param {string} key\n   */\n  async remove (key) {\n    log('removing %s', key)\n    if (this._listeners.has(key)) {\n      // Close any running listeners\n      for (const listener of this._listeners.get(key)) {\n        await listener.close()\n      }\n    }\n\n    this._transports.delete(key)\n    this._listeners.delete(key)\n  }\n\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   * @async\n   */\n  async removeAll () {\n    const tasks = []\n    for (const key of this._transports.keys()) {\n      tasks.push(this.remove(key))\n    }\n\n    await Promise.all(tasks)\n  }\n}\n\n/**\n * Enum Transport Manager Fault Tolerance values.\n * FATAL_ALL should be used for failing in any listen circumstance.\n * NO_FATAL should be used for not failing when not listening.\n * @readonly\n * @enum {number}\n */\nconst FAULT_TOLERANCE = {\n  FATAL_ALL: 0,\n  NO_FATAL: 1\n}\n\nTransportManager.FaultTolerance = FAULT_TOLERANCE\n\nmodule.exports = TransportManager\n"]},"metadata":{},"sourceType":"script"}