{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst errcode = require('err-code');\n\nconst log = debug('libp2p:peer-store');\nlog.error = debug('libp2p:peer-store:error');\n\nconst {\n  ERR_INVALID_PARAMETERS\n} = require('./errors');\n\nconst Topology = require('libp2p-interfaces/src/topology');\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\n\n\nclass Registrar {\n  /**\n   * @param {Object} props\n   * @param {PeerStore} props.peerStore\n   * @param {connectionManager} props.connectionManager\n   * @constructor\n   */\n  constructor({\n    peerStore,\n    connectionManager\n  }) {\n    // Used on topology to listen for protocol changes\n    this.peerStore = peerStore;\n    this.connectionManager = connectionManager;\n    /**\n     * Map of topologies\n     *\n     * @type {Map<string, object>}\n     */\n\n    this.topologies = new Map();\n    this._handle = undefined;\n    this._onDisconnect = this._onDisconnect.bind(this);\n    this.connectionManager.on('peer:disconnect', this._onDisconnect);\n  }\n\n  get handle() {\n    return this._handle;\n  }\n\n  set handle(handle) {\n    this._handle = handle;\n  }\n  /**\n   * Get a connection with a peer.\n   * @param {PeerId} peerId\n   * @returns {Connection}\n   */\n\n\n  getConnection(peerId) {\n    return this.connectionManager.get(peerId);\n  }\n  /**\n   * Register handlers for a set of multicodecs given\n   * @param {Topology} topology protocol topology\n   * @return {string} registrar identifier\n   */\n\n\n  register(topology) {\n    if (!Topology.isTopology(topology)) {\n      throw errcode(new Error('topology must be an instance of interfaces/topology'), ERR_INVALID_PARAMETERS);\n    } // Create topology\n\n\n    const id = parseInt(Math.random() * 1e9).toString(36) + Date.now();\n    this.topologies.set(id, topology); // Set registrar\n\n    topology.registrar = this;\n    return id;\n  }\n  /**\n   * Unregister topology.\n   * @param {string} id registrar identifier\n   * @return {boolean} unregistered successfully\n   */\n\n\n  unregister(id) {\n    return this.topologies.delete(id);\n  }\n  /**\n   * Remove a disconnected peer from the record\n   * @param {Connection} connection\n   * @param {Error} [error]\n   * @returns {void}\n   */\n\n\n  _onDisconnect(connection, error) {\n    for (const [, topology] of this.topologies) {\n      topology.disconnect(connection.remotePeer, error);\n    }\n  }\n\n}\n\nmodule.exports = Registrar;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/registrar.js"],"names":["debug","require","errcode","log","error","ERR_INVALID_PARAMETERS","Topology","Registrar","constructor","peerStore","connectionManager","topologies","Map","_handle","undefined","_onDisconnect","bind","on","handle","getConnection","peerId","get","register","topology","isTopology","Error","id","parseInt","Math","random","toString","Date","now","set","registrar","unregister","delete","connection","disconnect","remotePeer","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,GAAG,GAAGH,KAAK,CAAC,mBAAD,CAAjB;AACAG,GAAG,CAACC,KAAJ,GAAYJ,KAAK,CAAC,yBAAD,CAAjB;;AAEA,MAAM;AACJK,EAAAA;AADI,IAEFJ,OAAO,CAAC,UAAD,CAFX;;AAGA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,gCAAD,CAAxB;AAEA;;;;;AAGA,MAAMM,SAAN,CAAgB;AACd;;;;;;AAMAC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAF,EAAoC;AAC7C;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AAEA,SAAKC,iBAAL,GAAyBA,iBAAzB;AAEA;;;;;;AAKA,SAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AAEA,SAAKC,OAAL,GAAeC,SAAf;AAEA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKN,iBAAL,CAAuBO,EAAvB,CAA0B,iBAA1B,EAA6C,KAAKF,aAAlD;AACD;;AAED,MAAIG,MAAJ,GAAc;AACZ,WAAO,KAAKL,OAAZ;AACD;;AAED,MAAIK,MAAJ,CAAYA,MAAZ,EAAoB;AAClB,SAAKL,OAAL,GAAeK,MAAf;AACD;AAED;;;;;;;AAKAC,EAAAA,aAAa,CAAEC,MAAF,EAAU;AACrB,WAAO,KAAKV,iBAAL,CAAuBW,GAAvB,CAA2BD,MAA3B,CAAP;AACD;AAED;;;;;;;AAKAE,EAAAA,QAAQ,CAAEC,QAAF,EAAY;AAClB,QAAI,CAACjB,QAAQ,CAACkB,UAAT,CAAoBD,QAApB,CAAL,EAAoC;AAClC,YAAMrB,OAAO,CAAC,IAAIuB,KAAJ,CAAU,qDAAV,CAAD,EAAmEpB,sBAAnE,CAAb;AACD,KAHiB,CAKlB;;;AACA,UAAMqB,EAAE,GAAIC,QAAQ,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,CAAT,CAAgCC,QAAhC,CAAyC,EAAzC,IAA+CC,IAAI,CAACC,GAAL,EAA1D;AAEA,SAAKrB,UAAL,CAAgBsB,GAAhB,CAAoBP,EAApB,EAAwBH,QAAxB,EARkB,CAUlB;;AACAA,IAAAA,QAAQ,CAACW,SAAT,GAAqB,IAArB;AAEA,WAAOR,EAAP;AACD;AAED;;;;;;;AAKAS,EAAAA,UAAU,CAAET,EAAF,EAAM;AACd,WAAO,KAAKf,UAAL,CAAgByB,MAAhB,CAAuBV,EAAvB,CAAP;AACD;AAED;;;;;;;;AAMAX,EAAAA,aAAa,CAAEsB,UAAF,EAAcjC,KAAd,EAAqB;AAChC,SAAK,MAAM,GAAGmB,QAAH,CAAX,IAA2B,KAAKZ,UAAhC,EAA4C;AAC1CY,MAAAA,QAAQ,CAACe,UAAT,CAAoBD,UAAU,CAACE,UAA/B,EAA2CnC,KAA3C;AACD;AACF;;AAnFa;;AAsFhBoC,MAAM,CAACC,OAAP,GAAiBlC,SAAjB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst errcode = require('err-code')\nconst log = debug('libp2p:peer-store')\nlog.error = debug('libp2p:peer-store:error')\n\nconst {\n  ERR_INVALID_PARAMETERS\n} = require('./errors')\nconst Topology = require('libp2p-interfaces/src/topology')\n\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\nclass Registrar {\n  /**\n   * @param {Object} props\n   * @param {PeerStore} props.peerStore\n   * @param {connectionManager} props.connectionManager\n   * @constructor\n   */\n  constructor ({ peerStore, connectionManager }) {\n    // Used on topology to listen for protocol changes\n    this.peerStore = peerStore\n\n    this.connectionManager = connectionManager\n\n    /**\n     * Map of topologies\n     *\n     * @type {Map<string, object>}\n     */\n    this.topologies = new Map()\n\n    this._handle = undefined\n\n    this._onDisconnect = this._onDisconnect.bind(this)\n    this.connectionManager.on('peer:disconnect', this._onDisconnect)\n  }\n\n  get handle () {\n    return this._handle\n  }\n\n  set handle (handle) {\n    this._handle = handle\n  }\n\n  /**\n   * Get a connection with a peer.\n   * @param {PeerId} peerId\n   * @returns {Connection}\n   */\n  getConnection (peerId) {\n    return this.connectionManager.get(peerId)\n  }\n\n  /**\n   * Register handlers for a set of multicodecs given\n   * @param {Topology} topology protocol topology\n   * @return {string} registrar identifier\n   */\n  register (topology) {\n    if (!Topology.isTopology(topology)) {\n      throw errcode(new Error('topology must be an instance of interfaces/topology'), ERR_INVALID_PARAMETERS)\n    }\n\n    // Create topology\n    const id = (parseInt(Math.random() * 1e9)).toString(36) + Date.now()\n\n    this.topologies.set(id, topology)\n\n    // Set registrar\n    topology.registrar = this\n\n    return id\n  }\n\n  /**\n   * Unregister topology.\n   * @param {string} id registrar identifier\n   * @return {boolean} unregistered successfully\n   */\n  unregister (id) {\n    return this.topologies.delete(id)\n  }\n\n  /**\n   * Remove a disconnected peer from the record\n   * @param {Connection} connection\n   * @param {Error} [error]\n   * @returns {void}\n   */\n  _onDisconnect (connection, error) {\n    for (const [, topology] of this.topologies) {\n      topology.disconnect(connection.remotePeer, error)\n    }\n  }\n}\n\nmodule.exports = Registrar\n"]},"metadata":{},"sourceType":"script"}