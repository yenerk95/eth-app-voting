{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar debug = require('debug');\n\nvar errcode = require('err-code');\n\nvar log = debug('libp2p:peer-store');\nlog.error = debug('libp2p:peer-store:error');\n\nvar _require = require('./errors'),\n    ERR_INVALID_PARAMETERS = _require.ERR_INVALID_PARAMETERS;\n\nvar Topology = require('libp2p-interfaces/src/topology');\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\n\n\nvar Registrar = /*#__PURE__*/function () {\n  /**\n   * @param {Object} props\n   * @param {PeerStore} props.peerStore\n   * @param {connectionManager} props.connectionManager\n   * @constructor\n   */\n  function Registrar(_ref) {\n    var peerStore = _ref.peerStore,\n        connectionManager = _ref.connectionManager;\n\n    _classCallCheck(this, Registrar);\n\n    // Used on topology to listen for protocol changes\n    this.peerStore = peerStore;\n    this.connectionManager = connectionManager;\n    /**\n     * Map of topologies\n     *\n     * @type {Map<string, object>}\n     */\n\n    this.topologies = new Map();\n    this._handle = undefined;\n    this._onDisconnect = this._onDisconnect.bind(this);\n    this.connectionManager.on('peer:disconnect', this._onDisconnect);\n  }\n\n  _createClass(Registrar, [{\n    key: \"getConnection\",\n\n    /**\n     * Get a connection with a peer.\n     * @param {PeerId} peerId\n     * @returns {Connection}\n     */\n    value: function getConnection(peerId) {\n      return this.connectionManager.get(peerId);\n    }\n    /**\n     * Register handlers for a set of multicodecs given\n     * @param {Topology} topology protocol topology\n     * @return {string} registrar identifier\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(topology) {\n      if (!Topology.isTopology(topology)) {\n        throw errcode(new Error('topology must be an instance of interfaces/topology'), ERR_INVALID_PARAMETERS);\n      } // Create topology\n\n\n      var id = parseInt(Math.random() * 1e9).toString(36) + Date.now();\n      this.topologies.set(id, topology); // Set registrar\n\n      topology.registrar = this;\n      return id;\n    }\n    /**\n     * Unregister topology.\n     * @param {string} id registrar identifier\n     * @return {boolean} unregistered successfully\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister(id) {\n      return this.topologies.delete(id);\n    }\n    /**\n     * Remove a disconnected peer from the record\n     * @param {Connection} connection\n     * @param {Error} [error]\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_onDisconnect\",\n    value: function _onDisconnect(connection, error) {\n      var _iterator = _createForOfIteratorHelper(this.topologies),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              topology = _step$value[1];\n\n          topology.disconnect(connection.remotePeer, error);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"handle\",\n    get: function get() {\n      return this._handle;\n    },\n    set: function set(handle) {\n      this._handle = handle;\n    }\n  }]);\n\n  return Registrar;\n}();\n\nmodule.exports = Registrar;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/registrar.js"],"names":["debug","require","errcode","log","error","ERR_INVALID_PARAMETERS","Topology","Registrar","peerStore","connectionManager","topologies","Map","_handle","undefined","_onDisconnect","bind","on","peerId","get","topology","isTopology","Error","id","parseInt","Math","random","toString","Date","now","set","registrar","delete","connection","disconnect","remotePeer","handle","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAME,GAAG,GAAGH,KAAK,CAAC,mBAAD,CAAjB;AACAG,GAAG,CAACC,KAAJ,GAAYJ,KAAK,CAAC,yBAAD,CAAjB;;eAIIC,OAAO,CAAC,UAAD,C;IADTI,sB,YAAAA,sB;;AAEF,IAAMC,QAAQ,GAAGL,OAAO,CAAC,gCAAD,CAAxB;AAEA;;;;;IAGMM,S;AACJ;;;;;;AAMA,2BAA+C;AAAA,QAAhCC,SAAgC,QAAhCA,SAAgC;AAAA,QAArBC,iBAAqB,QAArBA,iBAAqB;;AAAA;;AAC7C;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AAEA,SAAKC,iBAAL,GAAyBA,iBAAzB;AAEA;;;;;;AAKA,SAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AAEA,SAAKC,OAAL,GAAeC,SAAf;AAEA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKN,iBAAL,CAAuBO,EAAvB,CAA0B,iBAA1B,EAA6C,KAAKF,aAAlD;AACD;;;;;AAUD;;;;;kCAKeG,M,EAAQ;AACrB,aAAO,KAAKR,iBAAL,CAAuBS,GAAvB,CAA2BD,MAA3B,CAAP;AACD;AAED;;;;;;;;6BAKUE,Q,EAAU;AAClB,UAAI,CAACb,QAAQ,CAACc,UAAT,CAAoBD,QAApB,CAAL,EAAoC;AAClC,cAAMjB,OAAO,CAAC,IAAImB,KAAJ,CAAU,qDAAV,CAAD,EAAmEhB,sBAAnE,CAAb;AACD,OAHiB,CAKlB;;;AACA,UAAMiB,EAAE,GAAIC,QAAQ,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,CAAT,CAAgCC,QAAhC,CAAyC,EAAzC,IAA+CC,IAAI,CAACC,GAAL,EAA1D;AAEA,WAAKlB,UAAL,CAAgBmB,GAAhB,CAAoBP,EAApB,EAAwBH,QAAxB,EARkB,CAUlB;;AACAA,MAAAA,QAAQ,CAACW,SAAT,GAAqB,IAArB;AAEA,aAAOR,EAAP;AACD;AAED;;;;;;;;+BAKYA,E,EAAI;AACd,aAAO,KAAKZ,UAAL,CAAgBqB,MAAhB,CAAuBT,EAAvB,CAAP;AACD;AAED;;;;;;;;;kCAMeU,U,EAAY5B,K,EAAO;AAAA,iDACL,KAAKM,UADA;AAAA;;AAAA;AAChC,4DAA4C;AAAA;AAAA,cAA9BS,QAA8B;;AAC1CA,UAAAA,QAAQ,CAACc,UAAT,CAAoBD,UAAU,CAACE,UAA/B,EAA2C9B,KAA3C;AACD;AAH+B;AAAA;AAAA;AAAA;AAAA;AAIjC;;;wBAzDa;AACZ,aAAO,KAAKQ,OAAZ;AACD,K;sBAEWuB,M,EAAQ;AAClB,WAAKvB,OAAL,GAAeuB,MAAf;AACD;;;;;;AAsDHC,MAAM,CAACC,OAAP,GAAiB9B,SAAjB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst errcode = require('err-code')\nconst log = debug('libp2p:peer-store')\nlog.error = debug('libp2p:peer-store:error')\n\nconst {\n  ERR_INVALID_PARAMETERS\n} = require('./errors')\nconst Topology = require('libp2p-interfaces/src/topology')\n\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\nclass Registrar {\n  /**\n   * @param {Object} props\n   * @param {PeerStore} props.peerStore\n   * @param {connectionManager} props.connectionManager\n   * @constructor\n   */\n  constructor ({ peerStore, connectionManager }) {\n    // Used on topology to listen for protocol changes\n    this.peerStore = peerStore\n\n    this.connectionManager = connectionManager\n\n    /**\n     * Map of topologies\n     *\n     * @type {Map<string, object>}\n     */\n    this.topologies = new Map()\n\n    this._handle = undefined\n\n    this._onDisconnect = this._onDisconnect.bind(this)\n    this.connectionManager.on('peer:disconnect', this._onDisconnect)\n  }\n\n  get handle () {\n    return this._handle\n  }\n\n  set handle (handle) {\n    this._handle = handle\n  }\n\n  /**\n   * Get a connection with a peer.\n   * @param {PeerId} peerId\n   * @returns {Connection}\n   */\n  getConnection (peerId) {\n    return this.connectionManager.get(peerId)\n  }\n\n  /**\n   * Register handlers for a set of multicodecs given\n   * @param {Topology} topology protocol topology\n   * @return {string} registrar identifier\n   */\n  register (topology) {\n    if (!Topology.isTopology(topology)) {\n      throw errcode(new Error('topology must be an instance of interfaces/topology'), ERR_INVALID_PARAMETERS)\n    }\n\n    // Create topology\n    const id = (parseInt(Math.random() * 1e9)).toString(36) + Date.now()\n\n    this.topologies.set(id, topology)\n\n    // Set registrar\n    topology.registrar = this\n\n    return id\n  }\n\n  /**\n   * Unregister topology.\n   * @param {string} id registrar identifier\n   * @return {boolean} unregistered successfully\n   */\n  unregister (id) {\n    return this.topologies.delete(id)\n  }\n\n  /**\n   * Remove a disconnected peer from the record\n   * @param {Connection} connection\n   * @param {Error} [error]\n   * @returns {void}\n   */\n  _onDisconnect (connection, error) {\n    for (const [, topology] of this.topologies) {\n      topology.disconnect(connection.remotePeer, error)\n    }\n  }\n}\n\nmodule.exports = Registrar\n"]},"metadata":{},"sourceType":"script"}