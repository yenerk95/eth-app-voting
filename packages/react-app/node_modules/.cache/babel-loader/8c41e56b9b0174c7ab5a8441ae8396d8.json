{"ast":null,"code":"'use strict';\n\nconst mh = require('multihashing-async').multihash;\n\nconst utils = require('../utils');\n\nconst Run = require('./run');\n/**\n * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.\n * Within each path, query peers from closest to farthest away.\n */\n\n\nclass Query {\n  /**\n   * User-supplied function to set up an individual disjoint path. Per-path\n   * query state should be held in this function's closure.\n   * @typedef {makePath} function\n   * @param {number} pathNum - Numeric index from zero to numPaths - 1\n   * @returns {queryFunc} - Function to call on each peer in the query\n   */\n\n  /**\n   * Query function.\n   * @typedef {queryFunc} function\n   * @param {PeerId} next - Peer to query\n   * @param {function(Error, Object)} callback - Query result callback\n   */\n\n  /**\n   * Create a new query. The makePath function is called once per disjoint path, so that per-path\n   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to\n   * use when on that path.\n   *\n   * @param {DHT} dht - DHT instance\n   * @param {Buffer} key\n   * @param {makePath} makePath - Called to set up each disjoint path. Must return the query function.\n   */\n  constructor(dht, key, makePath) {\n    this.dht = dht;\n    this.key = key;\n    this.makePath = makePath;\n    this._log = utils.logger(this.dht.peerId, 'query:' + mh.toB58String(key));\n    this.running = false;\n    this._onStart = this._onStart.bind(this);\n    this._onComplete = this._onComplete.bind(this);\n  }\n  /**\n   * Run this query, start with the given list of peers first.\n   *\n   * @param {Array<PeerId>} peers\n   * @returns {Promise}\n   */\n\n\n  async run(peers) {\n    // eslint-disable-line require-await\n    if (!this.dht._queryManager.running) {\n      this._log.error('Attempt to run query after shutdown');\n\n      return {\n        finalSet: new Set(),\n        paths: []\n      };\n    }\n\n    if (peers.length === 0) {\n      this._log.error('Running query with no peers');\n\n      return {\n        finalSet: new Set(),\n        paths: []\n      };\n    }\n\n    this._run = new Run(this);\n\n    this._log(`query running with K=${this.dht.kBucketSize}, A=${this.dht.concurrency}, D=${Math.min(this.dht.disjointPaths, peers.length)}`);\n\n    this._run.once('start', this._onStart);\n\n    this._run.once('complete', this._onComplete);\n\n    return this._run.execute(peers);\n  }\n  /**\n   * Called when the run starts.\n   */\n\n\n  _onStart() {\n    this.running = true;\n    this._startTime = Date.now();\n\n    this._log('query:start'); // Register this query so we can stop it if the DHT stops\n\n\n    this.dht._queryManager.queryStarted(this);\n  }\n  /**\n   * Called when the run completes (even if there's an error).\n   */\n\n\n  _onComplete() {\n    // Ensure worker queues for all paths are stopped at the end of the query\n    this.stop();\n  }\n  /**\n   * Stop the query.\n   */\n\n\n  stop() {\n    this._log(`query:done in ${Date.now() - this._startTime}ms`);\n\n    if (this._run) {\n      this._log(`${this._run.errors.length} of ${this._run.peersSeen.size} peers errored (${this._run.errors.length / this._run.peersSeen.size * 100}% fail rate)`);\n    }\n\n    if (!this.running) {\n      return;\n    }\n\n    this._run.removeListener('start', this._onStart);\n\n    this._run.removeListener('complete', this._onComplete);\n\n    this.running = false;\n    this._run && this._run.stop();\n\n    this.dht._queryManager.queryCompleted(this);\n  }\n\n}\n\nmodule.exports = Query;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/query/index.js"],"names":["mh","require","multihash","utils","Run","Query","constructor","dht","key","makePath","_log","logger","peerId","toB58String","running","_onStart","bind","_onComplete","run","peers","_queryManager","error","finalSet","Set","paths","length","_run","kBucketSize","concurrency","Math","min","disjointPaths","once","execute","_startTime","Date","now","queryStarted","stop","errors","peersSeen","size","removeListener","queryCompleted","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst mh = require('multihashing-async').multihash\n\nconst utils = require('../utils')\nconst Run = require('./run')\n\n/**\n * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.\n * Within each path, query peers from closest to farthest away.\n */\nclass Query {\n  /**\n   * User-supplied function to set up an individual disjoint path. Per-path\n   * query state should be held in this function's closure.\n   * @typedef {makePath} function\n   * @param {number} pathNum - Numeric index from zero to numPaths - 1\n   * @returns {queryFunc} - Function to call on each peer in the query\n   */\n\n  /**\n   * Query function.\n   * @typedef {queryFunc} function\n   * @param {PeerId} next - Peer to query\n   * @param {function(Error, Object)} callback - Query result callback\n   */\n\n  /**\n   * Create a new query. The makePath function is called once per disjoint path, so that per-path\n   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to\n   * use when on that path.\n   *\n   * @param {DHT} dht - DHT instance\n   * @param {Buffer} key\n   * @param {makePath} makePath - Called to set up each disjoint path. Must return the query function.\n   */\n  constructor (dht, key, makePath) {\n    this.dht = dht\n    this.key = key\n    this.makePath = makePath\n    this._log = utils.logger(this.dht.peerId, 'query:' + mh.toB58String(key))\n\n    this.running = false\n\n    this._onStart = this._onStart.bind(this)\n    this._onComplete = this._onComplete.bind(this)\n  }\n\n  /**\n   * Run this query, start with the given list of peers first.\n   *\n   * @param {Array<PeerId>} peers\n   * @returns {Promise}\n   */\n  async run (peers) { // eslint-disable-line require-await\n    if (!this.dht._queryManager.running) {\n      this._log.error('Attempt to run query after shutdown')\n      return { finalSet: new Set(), paths: [] }\n    }\n\n    if (peers.length === 0) {\n      this._log.error('Running query with no peers')\n      return { finalSet: new Set(), paths: [] }\n    }\n\n    this._run = new Run(this)\n\n    this._log(`query running with K=${this.dht.kBucketSize}, A=${this.dht.concurrency}, D=${Math.min(this.dht.disjointPaths, peers.length)}`)\n    this._run.once('start', this._onStart)\n    this._run.once('complete', this._onComplete)\n\n    return this._run.execute(peers)\n  }\n\n  /**\n   * Called when the run starts.\n   */\n  _onStart () {\n    this.running = true\n    this._startTime = Date.now()\n    this._log('query:start')\n\n    // Register this query so we can stop it if the DHT stops\n    this.dht._queryManager.queryStarted(this)\n  }\n\n  /**\n   * Called when the run completes (even if there's an error).\n   */\n  _onComplete () {\n    // Ensure worker queues for all paths are stopped at the end of the query\n    this.stop()\n  }\n\n  /**\n   * Stop the query.\n   */\n  stop () {\n    this._log(`query:done in ${Date.now() - this._startTime}ms`)\n\n    if (this._run) {\n      this._log(`${this._run.errors.length} of ${this._run.peersSeen.size} peers errored (${this._run.errors.length / this._run.peersSeen.size * 100}% fail rate)`)\n    }\n\n    if (!this.running) {\n      return\n    }\n\n    this._run.removeListener('start', this._onStart)\n    this._run.removeListener('complete', this._onComplete)\n\n    this.running = false\n    this._run && this._run.stop()\n    this.dht._queryManager.queryCompleted(this)\n  }\n}\n\nmodule.exports = Query\n"]},"metadata":{},"sourceType":"script"}