{"ast":null,"code":"'use strict';\n\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, ipld) => {\n  return (options = {}) => {\n    return listDirectory(node, path, resolve, depth, ipld, options);\n  };\n};\n\nasync function* listDirectory(node, path, resolve, depth, ipld, options) {\n  const links = node.Links;\n\n  for (const link of links) {\n    const name = link.Name.substring(2);\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, ipld);\n      yield result.entry;\n    } else {\n      // descend into subshard\n      node = await ipld.get(link.Hash);\n\n      for await (const file of listDirectory(node, path, resolve, depth, ipld, options)) {\n        yield file;\n      }\n    }\n  }\n}\n\nmodule.exports = hamtShardedDirectoryContent;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js"],"names":["hamtShardedDirectoryContent","cid","node","unixfs","path","resolve","depth","ipld","options","listDirectory","links","Links","link","name","Name","substring","result","Hash","entry","get","file","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,2BAA2B,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,IAA1C,KAAmD;AACrF,SAAO,CAACC,OAAO,GAAG,EAAX,KAAkB;AACvB,WAAOC,aAAa,CAACP,IAAD,EAAOE,IAAP,EAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,OAAnC,CAApB;AACD,GAFD;AAGD,CAJD;;AAMA,gBAAiBC,aAAjB,CAAgCP,IAAhC,EAAsCE,IAAtC,EAA4CC,OAA5C,EAAqDC,KAArD,EAA4DC,IAA5D,EAAkEC,OAAlE,EAA2E;AACzE,QAAME,KAAK,GAAGR,IAAI,CAACS,KAAnB;;AAEA,OAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,UAAMG,IAAI,GAAGD,IAAI,CAACE,IAAL,CAAUC,SAAV,CAAoB,CAApB,CAAb;;AAEA,QAAIF,IAAJ,EAAU;AACR,YAAMG,MAAM,GAAG,MAAMX,OAAO,CAACO,IAAI,CAACK,IAAN,EAAYJ,IAAZ,EAAmB,GAAET,IAAK,IAAGS,IAAK,EAAlC,EAAqC,EAArC,EAAyCP,KAAK,GAAG,CAAjD,EAAoDC,IAApD,CAA5B;AAEA,YAAMS,MAAM,CAACE,KAAb;AACD,KAJD,MAIO;AACL;AACAhB,MAAAA,IAAI,GAAG,MAAMK,IAAI,CAACY,GAAL,CAASP,IAAI,CAACK,IAAd,CAAb;;AAEA,iBAAW,MAAMG,IAAjB,IAAyBX,aAAa,CAACP,IAAD,EAAOE,IAAP,EAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,OAAnC,CAAtC,EAAmF;AACjF,cAAMY,IAAN;AACD;AACF;AACF;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBtB,2BAAjB","sourcesContent":["'use strict'\n\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, ipld) => {\n  return (options = {}) => {\n    return listDirectory(node, path, resolve, depth, ipld, options)\n  }\n}\n\nasync function * listDirectory (node, path, resolve, depth, ipld, options) {\n  const links = node.Links\n\n  for (const link of links) {\n    const name = link.Name.substring(2)\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, ipld)\n\n      yield result.entry\n    } else {\n      // descend into subshard\n      node = await ipld.get(link.Hash)\n\n      for await (const file of listDirectory(node, path, resolve, depth, ipld, options)) {\n        yield file\n      }\n    }\n  }\n}\n\nmodule.exports = hamtShardedDirectoryContent\n"]},"metadata":{},"sourceType":"script"}