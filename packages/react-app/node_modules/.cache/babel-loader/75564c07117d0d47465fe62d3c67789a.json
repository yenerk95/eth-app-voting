{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar PeerId = require('peer-id');\n\nvar multiaddr = require('multiaddr');\n\nvar mafmt = require('mafmt');\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:bootstrap');\nlog.error = debug('libp2p:bootstrap:error');\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\n\nvar Bootstrap = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Bootstrap, _EventEmitter);\n\n  var _super = _createSuper(Bootstrap);\n\n  /**\n   * Constructs a new Bootstrap.\n   *\n   * @param {Object} options\n   * @param {Array<string>} options.list - the list of peer addresses in multi-address format\n   * @param {number} [options.interval] - the interval between emitting addresses in milliseconds (default: 10000)\n   *\n   */\n  function Bootstrap() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Bootstrap);\n\n    if (!options.list || !options.list.length) {\n      throw new Error('Bootstrap requires a list of peer addresses');\n    }\n\n    _this = _super.call(this);\n    _this._list = options.list;\n    _this._interval = options.interval || 10000;\n    _this._timer = null;\n    return _this;\n  }\n  /**\n   * Start emitting events.\n   */\n\n\n  _createClass(Bootstrap, [{\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      if (this._timer) {\n        return;\n      }\n\n      this._timer = setInterval(function () {\n        return _this2._discoverBootstrapPeers();\n      }, this._interval);\n\n      this._discoverBootstrapPeers();\n    }\n    /**\n     * Emit each address in the list as a PeerInfo.\n     */\n\n  }, {\n    key: \"_discoverBootstrapPeers\",\n    value: function _discoverBootstrapPeers() {\n      var _this3 = this;\n\n      if (!this._timer) {\n        return;\n      }\n\n      this._list.forEach(function (candidate) {\n        if (!mafmt.P2P.matches(candidate)) {\n          return log.error('Invalid multiaddr');\n        }\n\n        var ma = multiaddr(candidate);\n        var peerId = PeerId.createFromB58String(ma.getPeerId());\n\n        try {\n          _this3.emit('peer', {\n            id: peerId,\n            multiaddrs: [ma]\n          });\n        } catch (err) {\n          log.error('Invalid bootstrap peer id', err);\n        }\n      });\n    }\n    /**\n     * Stop emitting events.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearInterval(this._timer);\n      this._timer = null;\n    }\n  }]);\n\n  return Bootstrap;\n}(EventEmitter);\n\nexports = module.exports = Bootstrap;\nexports.tag = 'bootstrap';","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-bootstrap/src/index.js"],"names":["PeerId","require","multiaddr","mafmt","EventEmitter","debug","log","error","Bootstrap","options","list","length","Error","_list","_interval","interval","_timer","setInterval","_discoverBootstrapPeers","forEach","candidate","P2P","matches","ma","peerId","createFromB58String","getPeerId","emit","id","multiaddrs","err","clearInterval","exports","module","tag"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;eACyBA,OAAO,CAAC,QAAD,C;IAAxBG,Y,YAAAA,Y;;AACR,IAAMC,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMK,GAAG,GAAGD,KAAK,CAAC,kBAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,wBAAD,CAAjB;AAEA;;;;IAGMG,S;;;;;AACJ;;;;;;;;AAQA,uBAA2B;AAAA;;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACzB,QAAI,CAACA,OAAO,CAACC,IAAT,IAAiB,CAACD,OAAO,CAACC,IAAR,CAAaC,MAAnC,EAA2C;AACzC,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD;AAEA,UAAKC,KAAL,GAAaJ,OAAO,CAACC,IAArB;AACA,UAAKI,SAAL,GAAiBL,OAAO,CAACM,QAAR,IAAoB,KAArC;AACA,UAAKC,MAAL,GAAc,IAAd;AARyB;AAS1B;AAED;;;;;;;4BAGS;AAAA;;AACP,UAAI,KAAKA,MAAT,EAAiB;AACf;AACD;;AAED,WAAKA,MAAL,GAAcC,WAAW,CAAC;AAAA,eAAM,MAAI,CAACC,uBAAL,EAAN;AAAA,OAAD,EAAuC,KAAKJ,SAA5C,CAAzB;;AAEA,WAAKI,uBAAL;AACD;AAED;;;;;;8CAG2B;AAAA;;AACzB,UAAI,CAAC,KAAKF,MAAV,EAAkB;AAChB;AACD;;AAED,WAAKH,KAAL,CAAWM,OAAX,CAAmB,UAACC,SAAD,EAAe;AAChC,YAAI,CAACjB,KAAK,CAACkB,GAAN,CAAUC,OAAV,CAAkBF,SAAlB,CAAL,EAAmC;AACjC,iBAAOd,GAAG,CAACC,KAAJ,CAAU,mBAAV,CAAP;AACD;;AAED,YAAMgB,EAAE,GAAGrB,SAAS,CAACkB,SAAD,CAApB;AAEA,YAAMI,MAAM,GAAGxB,MAAM,CAACyB,mBAAP,CAA2BF,EAAE,CAACG,SAAH,EAA3B,CAAf;;AAEA,YAAI;AACF,UAAA,MAAI,CAACC,IAAL,CAAU,MAAV,EAAkB;AAChBC,YAAAA,EAAE,EAAEJ,MADY;AAEhBK,YAAAA,UAAU,EAAE,CAACN,EAAD;AAFI,WAAlB;AAID,SALD,CAKE,OAAOO,GAAP,EAAY;AACZxB,UAAAA,GAAG,CAACC,KAAJ,CAAU,2BAAV,EAAuCuB,GAAvC;AACD;AACF,OAjBD;AAkBD;AAED;;;;;;2BAGQ;AACNC,MAAAA,aAAa,CAAC,KAAKf,MAAN,CAAb;AACA,WAAKA,MAAL,GAAc,IAAd;AACD;;;;EAnEqBZ,Y;;AAsExB4B,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBxB,SAA3B;AACAwB,OAAO,CAACE,GAAR,GAAc,WAAd","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { EventEmitter } = require('events')\nconst debug = require('debug')\n\nconst log = debug('libp2p:bootstrap')\nlog.error = debug('libp2p:bootstrap:error')\n\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nclass Bootstrap extends EventEmitter {\n  /**\n   * Constructs a new Bootstrap.\n   *\n   * @param {Object} options\n   * @param {Array<string>} options.list - the list of peer addresses in multi-address format\n   * @param {number} [options.interval] - the interval between emitting addresses in milliseconds (default: 10000)\n   *\n   */\n  constructor (options = {}) {\n    if (!options.list || !options.list.length) {\n      throw new Error('Bootstrap requires a list of peer addresses')\n    }\n    super()\n\n    this._list = options.list\n    this._interval = options.interval || 10000\n    this._timer = null\n  }\n\n  /**\n   * Start emitting events.\n   */\n  start () {\n    if (this._timer) {\n      return\n    }\n\n    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval)\n\n    this._discoverBootstrapPeers()\n  }\n\n  /**\n   * Emit each address in the list as a PeerInfo.\n   */\n  _discoverBootstrapPeers () {\n    if (!this._timer) {\n      return\n    }\n\n    this._list.forEach((candidate) => {\n      if (!mafmt.P2P.matches(candidate)) {\n        return log.error('Invalid multiaddr')\n      }\n\n      const ma = multiaddr(candidate)\n\n      const peerId = PeerId.createFromB58String(ma.getPeerId())\n\n      try {\n        this.emit('peer', {\n          id: peerId,\n          multiaddrs: [ma]\n        })\n      } catch (err) {\n        log.error('Invalid bootstrap peer id', err)\n      }\n    })\n  }\n\n  /**\n   * Stop emitting events.\n   */\n  stop () {\n    clearInterval(this._timer)\n    this._timer = null\n  }\n}\n\nexports = module.exports = Bootstrap\nexports.tag = 'bootstrap'\n"]},"metadata":{},"sourceType":"script"}