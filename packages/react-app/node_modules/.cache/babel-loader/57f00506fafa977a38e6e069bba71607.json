{"ast":null,"code":"'use strict';\n\nconst Datastore = require('datastore-fs');\n\nconst log = require('debug')('repo-migrations:repo:init');\n\nconst Key = require('interface-datastore').Key;\n\nconst versionKey = new Key('/version');\nconst configKey = new Key('/config');\n\nexports.isRepoInitialized = async function isRepoInitialized(path) {\n  let root;\n\n  try {\n    root = new Datastore(path, {\n      extension: '',\n      createIfMissing: false\n    });\n    await root.open();\n    const versionCheck = await root.has(versionKey);\n    const configCheck = await root.has(configKey);\n\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`);\n      log(`Config entry present: ${configCheck}`);\n      return false;\n    }\n\n    return true;\n  } catch (e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message);\n    return false;\n  } finally {\n    if (root !== undefined) await root.close();\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo-migrations/src/repo/init.js"],"names":["Datastore","require","log","Key","versionKey","configKey","exports","isRepoInitialized","path","root","extension","createIfMissing","open","versionCheck","has","configCheck","e","message","undefined","close"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,2BAAjB,CAAZ;;AAEA,MAAME,GAAG,GAAGF,OAAO,CAAC,qBAAD,CAAP,CAA+BE,GAA3C;;AAEA,MAAMC,UAAU,GAAG,IAAID,GAAJ,CAAQ,UAAR,CAAnB;AACA,MAAME,SAAS,GAAG,IAAIF,GAAJ,CAAQ,SAAR,CAAlB;;AAEAG,OAAO,CAACC,iBAAR,GAA4B,eAAeA,iBAAf,CAAkCC,IAAlC,EAAwC;AAClE,MAAIC,IAAJ;;AACA,MAAI;AACFA,IAAAA,IAAI,GAAG,IAAIT,SAAJ,CAAcQ,IAAd,EAAoB;AAAEE,MAAAA,SAAS,EAAE,EAAb;AAAiBC,MAAAA,eAAe,EAAE;AAAlC,KAApB,CAAP;AACA,UAAMF,IAAI,CAACG,IAAL,EAAN;AACA,UAAMC,YAAY,GAAG,MAAMJ,IAAI,CAACK,GAAL,CAASV,UAAT,CAA3B;AACA,UAAMW,WAAW,GAAG,MAAMN,IAAI,CAACK,GAAL,CAAST,SAAT,CAA1B;;AACA,QAAI,CAACQ,YAAD,IAAiB,CAACE,WAAtB,EAAmC;AACjCb,MAAAA,GAAG,CAAE,0BAAyBW,YAAa,EAAxC,CAAH;AACAX,MAAAA,GAAG,CAAE,yBAAwBa,WAAY,EAAtC,CAAH;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAZD,CAYE,OAAOC,CAAP,EAAU;AACVd,IAAAA,GAAG,CAAC,6DAA6Dc,CAAC,CAACC,OAAhE,CAAH;AACA,WAAO,KAAP;AACD,GAfD,SAeU;AACR,QAAIR,IAAI,KAAKS,SAAb,EAAwB,MAAMT,IAAI,CAACU,KAAL,EAAN;AACzB;AACF,CApBD","sourcesContent":["'use strict'\n\nconst Datastore = require('datastore-fs')\nconst log = require('debug')('repo-migrations:repo:init')\n\nconst Key = require('interface-datastore').Key\n\nconst versionKey = new Key('/version')\nconst configKey = new Key('/config')\n\nexports.isRepoInitialized = async function isRepoInitialized (path) {\n  let root\n  try {\n    root = new Datastore(path, { extension: '', createIfMissing: false })\n    await root.open()\n    const versionCheck = await root.has(versionKey)\n    const configCheck = await root.has(configKey)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) await root.close()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}