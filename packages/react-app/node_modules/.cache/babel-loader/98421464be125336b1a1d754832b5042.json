{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar log = require('debug')('ipfs:mfs:utils:update-tree');\n\nvar addLink = require('./add-link');\n\nvar defaultOptions = {\n  shardSplitThreshold: 1000\n}; // loop backwards through the trail, replacing links of all components to update CIDs\n\nvar updateTree = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, trail, options) {\n    var index, child, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, node, cid, name, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = Object.assign({}, defaultOptions, options);\n            log('Trail', trail);\n            trail = trail.slice().reverse();\n            index = 0;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(context.ipld.getMany(trail.map(function (node) {\n              return node.cid;\n            })));\n\n          case 8:\n            _context.next = 10;\n            return _iterator.next();\n\n          case 10:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 14;\n            return _step.value;\n\n          case 14:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 30;\n              break;\n            }\n\n            node = _value;\n            cid = trail[index].cid;\n            name = trail[index].name;\n            index++;\n\n            if (child) {\n              _context.next = 23;\n              break;\n            }\n\n            child = {\n              cid: cid,\n              name: name,\n              size: node.size\n            };\n            return _context.abrupt(\"continue\", 27);\n\n          case 23:\n            _context.next = 25;\n            return addLink(context, {\n              parent: node,\n              name: child.name,\n              cid: child.cid,\n              size: child.size,\n              flush: options.flush,\n              shardSplitThreshold: options.shardSplitThreshold,\n              hashAlg: options.hashAlg,\n              cidVersion: options.cidVersion\n            });\n\n          case 25:\n            result = _context.sent;\n            // new child for next loop\n            child = {\n              cid: result.cid,\n              name: name,\n              size: result.size\n            };\n\n          case 27:\n            _iteratorNormalCompletion = true;\n            _context.next = 8;\n            break;\n\n          case 30:\n            _context.next = 36;\n            break;\n\n          case 32:\n            _context.prev = 32;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 36:\n            _context.prev = 36;\n            _context.prev = 37;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 41;\n              break;\n            }\n\n            _context.next = 41;\n            return _iterator.return();\n\n          case 41:\n            _context.prev = 41;\n\n            if (!_didIteratorError) {\n              _context.next = 44;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 44:\n            return _context.finish(41);\n\n          case 45:\n            return _context.finish(36);\n\n          case 46:\n            log(\"Final CID \".concat(child.cid));\n            return _context.abrupt(\"return\", child.cid);\n\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 32, 36, 46], [37,, 41, 45]]);\n  }));\n\n  return function updateTree(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = updateTree;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/utils/update-tree.js"],"names":["log","require","addLink","defaultOptions","shardSplitThreshold","updateTree","context","trail","options","Object","assign","slice","reverse","index","ipld","getMany","map","node","cid","name","child","size","parent","flush","hashAlg","cidVersion","result","module","exports"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,4BAAjB,CAAZ;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAME,cAAc,GAAG;AACrBC,EAAAA,mBAAmB,EAAE;AADA,CAAvB,C,CAIA;;AACA,IAAMC,UAAU;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,KAAhB,EAAuBC,OAAvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBA,YAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,cAAlB,EAAkCK,OAAlC,CAAV;AAEAR,YAAAA,GAAG,CAAC,OAAD,EAAUO,KAAV,CAAH;AACAA,YAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,GAAcC,OAAd,EAAR;AAEIC,YAAAA,KANa,GAML,CANK;AAAA;AAAA;AAAA;AAAA,uCASQP,OAAO,CAACQ,IAAR,CAAaC,OAAb,CAAqBR,KAAK,CAACS,GAAN,CAAU,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,GAAT;AAAA,aAAd,CAArB,CATR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AASAD,YAAAA,IATA;AAUTC,YAAAA,GAVS,GAUHX,KAAK,CAACM,KAAD,CAAL,CAAaK,GAVV;AAWTC,YAAAA,IAXS,GAWFZ,KAAK,CAACM,KAAD,CAAL,CAAaM,IAXX;AAYfN,YAAAA,KAAK;;AAZU,gBAcVO,KAdU;AAAA;AAAA;AAAA;;AAebA,YAAAA,KAAK,GAAG;AACNF,cAAAA,GAAG,EAAHA,GADM;AAENC,cAAAA,IAAI,EAAJA,IAFM;AAGNE,cAAAA,IAAI,EAAEJ,IAAI,CAACI;AAHL,aAAR;AAfa;;AAAA;AAAA;AAAA,mBAwBMnB,OAAO,CAACI,OAAD,EAAU;AACpCgB,cAAAA,MAAM,EAAEL,IAD4B;AAEpCE,cAAAA,IAAI,EAAEC,KAAK,CAACD,IAFwB;AAGpCD,cAAAA,GAAG,EAAEE,KAAK,CAACF,GAHyB;AAIpCG,cAAAA,IAAI,EAAED,KAAK,CAACC,IAJwB;AAKpCE,cAAAA,KAAK,EAAEf,OAAO,CAACe,KALqB;AAMpCnB,cAAAA,mBAAmB,EAAEI,OAAO,CAACJ,mBANO;AAOpCoB,cAAAA,OAAO,EAAEhB,OAAO,CAACgB,OAPmB;AAQpCC,cAAAA,UAAU,EAAEjB,OAAO,CAACiB;AARgB,aAAV,CAxBb;;AAAA;AAwBTC,YAAAA,MAxBS;AAmCf;AACAN,YAAAA,KAAK,GAAG;AACNF,cAAAA,GAAG,EAAEQ,MAAM,CAACR,GADN;AAENC,cAAAA,IAAI,EAAJA,IAFM;AAGNE,cAAAA,IAAI,EAAEK,MAAM,CAACL;AAHP,aAAR;;AApCe;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA2CjBrB,YAAAA,GAAG,qBAAcoB,KAAK,CAACF,GAApB,EAAH;AA3CiB,6CA6CVE,KAAK,CAACF,GA7CI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVb,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAgDAsB,MAAM,CAACC,OAAP,GAAiBvB,UAAjB","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:mfs:utils:update-tree')\nconst addLink = require('./add-link')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n// loop backwards through the trail, replacing links of all components to update CIDs\nconst updateTree = async (context, trail, options) => {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const node of context.ipld.getMany(trail.map(node => node.cid))) {\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: node.size\n      }\n\n      continue\n    }\n\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      size: result.size\n    }\n  }\n\n  log(`Final CID ${child.cid}`)\n\n  return child.cid\n}\n\nmodule.exports = updateTree\n"]},"metadata":{},"sourceType":"script"}