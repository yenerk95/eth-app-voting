{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nrequire('node-forge/lib/aes');\n\nconst forge = require('node-forge/lib/forge');\n\nmodule.exports = {\n  createCipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createCipher('AES-CTR', key.toString('binary'));\n    cipher2.start({\n      iv: iv.toString('binary')\n    });\n    return {\n      update: data => {\n        cipher2.update(forge.util.createBuffer(data.toString('binary')));\n        return Buffer.from(cipher2.output.getBytes(), 'binary');\n      }\n    };\n  },\n  createDecipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createDecipher('AES-CTR', key.toString('binary'));\n    cipher2.start({\n      iv: iv.toString('binary')\n    });\n    return {\n      update: data => {\n        cipher2.update(forge.util.createBuffer(data.toString('binary')));\n        return Buffer.from(cipher2.output.getBytes(), 'binary');\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/aes/ciphers-browser.js"],"names":["Buffer","require","forge","module","exports","createCipheriv","mode","key","iv","cipher2","cipher","createCipher","toString","start","update","data","util","createBuffer","from","output","getBytes","createDecipheriv","createDecipher"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACAA,OAAO,CAAC,oBAAD,CAAP;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,cAAc,EAAE,CAACC,IAAD,EAAOC,GAAP,EAAYC,EAAZ,KAAmB;AACjC,UAAMC,OAAO,GAAGP,KAAK,CAACQ,MAAN,CAAaC,YAAb,CAA0B,SAA1B,EAAqCJ,GAAG,CAACK,QAAJ,CAAa,QAAb,CAArC,CAAhB;AACAH,IAAAA,OAAO,CAACI,KAAR,CAAc;AAAEL,MAAAA,EAAE,EAAEA,EAAE,CAACI,QAAH,CAAY,QAAZ;AAAN,KAAd;AACA,WAAO;AACLE,MAAAA,MAAM,EAAGC,IAAD,IAAU;AAChBN,QAAAA,OAAO,CAACK,MAAR,CAAeZ,KAAK,CAACc,IAAN,CAAWC,YAAX,CAAwBF,IAAI,CAACH,QAAL,CAAc,QAAd,CAAxB,CAAf;AACA,eAAOZ,MAAM,CAACkB,IAAP,CAAYT,OAAO,CAACU,MAAR,CAAeC,QAAf,EAAZ,EAAuC,QAAvC,CAAP;AACD;AAJI,KAAP;AAMD,GAVc;AAWfC,EAAAA,gBAAgB,EAAE,CAACf,IAAD,EAAOC,GAAP,EAAYC,EAAZ,KAAmB;AACnC,UAAMC,OAAO,GAAGP,KAAK,CAACQ,MAAN,CAAaY,cAAb,CAA4B,SAA5B,EAAuCf,GAAG,CAACK,QAAJ,CAAa,QAAb,CAAvC,CAAhB;AACAH,IAAAA,OAAO,CAACI,KAAR,CAAc;AAAEL,MAAAA,EAAE,EAAEA,EAAE,CAACI,QAAH,CAAY,QAAZ;AAAN,KAAd;AACA,WAAO;AACLE,MAAAA,MAAM,EAAGC,IAAD,IAAU;AAChBN,QAAAA,OAAO,CAACK,MAAR,CAAeZ,KAAK,CAACc,IAAN,CAAWC,YAAX,CAAwBF,IAAI,CAACH,QAAL,CAAc,QAAd,CAAxB,CAAf;AACA,eAAOZ,MAAM,CAACkB,IAAP,CAAYT,OAAO,CAACU,MAAR,CAAeC,QAAf,EAAZ,EAAuC,QAAvC,CAAP;AACD;AAJI,KAAP;AAMD;AApBc,CAAjB","sourcesContent":["'use strict'\nconst { Buffer } = require('buffer')\nrequire('node-forge/lib/aes')\nconst forge = require('node-forge/lib/forge')\n\nmodule.exports = {\n  createCipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createCipher('AES-CTR', key.toString('binary'))\n    cipher2.start({ iv: iv.toString('binary') })\n    return {\n      update: (data) => {\n        cipher2.update(forge.util.createBuffer(data.toString('binary')))\n        return Buffer.from(cipher2.output.getBytes(), 'binary')\n      }\n    }\n  },\n  createDecipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createDecipher('AES-CTR', key.toString('binary'))\n    cipher2.start({ iv: iv.toString('binary') })\n    return {\n      update: (data) => {\n        cipher2.update(forge.util.createBuffer(data.toString('binary')))\n        return Buffer.from(cipher2.output.getBytes(), 'binary')\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}