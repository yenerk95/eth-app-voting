{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst varint = require('varint');\n\nconst BufferList = require('bl/BufferList');\n\nconst POOL_SIZE = 10 * 1024;\n\nclass Encoder {\n  constructor() {\n    this._pool = Buffer.allocUnsafe(POOL_SIZE);\n    this._poolOffset = 0;\n  }\n  /**\n   * Encodes the given message and returns it and its header\n   * @param {*} msg The message object to encode\n   * @returns {Buffer|Buffer[]}\n   */\n\n\n  write(msg) {\n    const pool = this._pool;\n    let offset = this._poolOffset;\n    varint.encode(msg.id << 3 | msg.type, pool, offset);\n    offset += varint.encode.bytes;\n    varint.encode(msg.data ? msg.data.length : 0, pool, offset);\n    offset += varint.encode.bytes;\n    const header = pool.slice(this._poolOffset, offset);\n\n    if (POOL_SIZE - offset < 100) {\n      this._pool = Buffer.allocUnsafe(POOL_SIZE);\n      this._poolOffset = 0;\n    } else {\n      this._poolOffset = offset;\n    }\n\n    if (!msg.data) return header;\n    return [header, msg.data];\n  }\n\n}\n\nconst encoder = new Encoder(); // Encode one or more messages and yield a BufferList of encoded messages\n\nmodule.exports = source => async function* encode() {\n  for await (const msg of source) {\n    if (Array.isArray(msg)) {\n      yield new BufferList(msg.map(m => encoder.write(m)));\n    } else {\n      yield new BufferList(encoder.write(msg));\n    }\n  }\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-mplex/src/coder/encode.js"],"names":["Buffer","require","varint","BufferList","POOL_SIZE","Encoder","constructor","_pool","allocUnsafe","_poolOffset","write","msg","pool","offset","encode","id","type","bytes","data","length","header","slice","encoder","module","exports","source","Array","isArray","map","m"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AAEA,MAAMG,SAAS,GAAG,KAAK,IAAvB;;AAEA,MAAMC,OAAN,CAAc;AACZC,EAAAA,WAAW,GAAI;AACb,SAAKC,KAAL,GAAaP,MAAM,CAACQ,WAAP,CAAmBJ,SAAnB,CAAb;AACA,SAAKK,WAAL,GAAmB,CAAnB;AACD;AAED;;;;;;;AAKAC,EAAAA,KAAK,CAAEC,GAAF,EAAO;AACV,UAAMC,IAAI,GAAG,KAAKL,KAAlB;AACA,QAAIM,MAAM,GAAG,KAAKJ,WAAlB;AAEAP,IAAAA,MAAM,CAACY,MAAP,CAAcH,GAAG,CAACI,EAAJ,IAAU,CAAV,GAAcJ,GAAG,CAACK,IAAhC,EAAsCJ,IAAtC,EAA4CC,MAA5C;AACAA,IAAAA,MAAM,IAAIX,MAAM,CAACY,MAAP,CAAcG,KAAxB;AACAf,IAAAA,MAAM,CAACY,MAAP,CAAcH,GAAG,CAACO,IAAJ,GAAWP,GAAG,CAACO,IAAJ,CAASC,MAApB,GAA6B,CAA3C,EAA8CP,IAA9C,EAAoDC,MAApD;AACAA,IAAAA,MAAM,IAAIX,MAAM,CAACY,MAAP,CAAcG,KAAxB;AAEA,UAAMG,MAAM,GAAGR,IAAI,CAACS,KAAL,CAAW,KAAKZ,WAAhB,EAA6BI,MAA7B,CAAf;;AAEA,QAAIT,SAAS,GAAGS,MAAZ,GAAqB,GAAzB,EAA8B;AAC5B,WAAKN,KAAL,GAAaP,MAAM,CAACQ,WAAP,CAAmBJ,SAAnB,CAAb;AACA,WAAKK,WAAL,GAAmB,CAAnB;AACD,KAHD,MAGO;AACL,WAAKA,WAAL,GAAmBI,MAAnB;AACD;;AAED,QAAI,CAACF,GAAG,CAACO,IAAT,EAAe,OAAOE,MAAP;AAEf,WAAO,CAACA,MAAD,EAAST,GAAG,CAACO,IAAb,CAAP;AACD;;AAhCW;;AAmCd,MAAMI,OAAO,GAAG,IAAIjB,OAAJ,EAAhB,C,CAEA;;AACAkB,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAK,gBAAiBX,MAAjB,GAA2B;AACrD,aAAW,MAAMH,GAAjB,IAAwBc,MAAxB,EAAgC;AAC9B,QAAIC,KAAK,CAACC,OAAN,CAAchB,GAAd,CAAJ,EAAwB;AACtB,YAAM,IAAIR,UAAJ,CAAeQ,GAAG,CAACiB,GAAJ,CAAQC,CAAC,IAAIP,OAAO,CAACZ,KAAR,CAAcmB,CAAd,CAAb,CAAf,CAAN;AACD,KAFD,MAEO;AACL,YAAM,IAAI1B,UAAJ,CAAemB,OAAO,CAACZ,KAAR,CAAcC,GAAd,CAAf,CAAN;AACD;AACF;AACF,CAR0B,EAA3B","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst varint = require('varint')\nconst BufferList = require('bl/BufferList')\n\nconst POOL_SIZE = 10 * 1024\n\nclass Encoder {\n  constructor () {\n    this._pool = Buffer.allocUnsafe(POOL_SIZE)\n    this._poolOffset = 0\n  }\n\n  /**\n   * Encodes the given message and returns it and its header\n   * @param {*} msg The message object to encode\n   * @returns {Buffer|Buffer[]}\n   */\n  write (msg) {\n    const pool = this._pool\n    let offset = this._poolOffset\n\n    varint.encode(msg.id << 3 | msg.type, pool, offset)\n    offset += varint.encode.bytes\n    varint.encode(msg.data ? msg.data.length : 0, pool, offset)\n    offset += varint.encode.bytes\n\n    const header = pool.slice(this._poolOffset, offset)\n\n    if (POOL_SIZE - offset < 100) {\n      this._pool = Buffer.allocUnsafe(POOL_SIZE)\n      this._poolOffset = 0\n    } else {\n      this._poolOffset = offset\n    }\n\n    if (!msg.data) return header\n\n    return [header, msg.data]\n  }\n}\n\nconst encoder = new Encoder()\n\n// Encode one or more messages and yield a BufferList of encoded messages\nmodule.exports = source => (async function * encode () {\n  for await (const msg of source) {\n    if (Array.isArray(msg)) {\n      yield new BufferList(msg.map(m => encoder.write(m)))\n    } else {\n      yield new BufferList(encoder.write(msg))\n    }\n  }\n})()\n"]},"metadata":{},"sourceType":"script"}