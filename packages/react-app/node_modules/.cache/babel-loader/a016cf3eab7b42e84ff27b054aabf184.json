{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar protons = require('protons');\n\nvar pb = protons(require('./unixfs.proto'));\nvar unixfsData = pb.Data;\n\nvar errcode = require('err-code');\n\nvar types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nvar dirTypes = ['directory', 'hamt-sharded-directory'];\nvar DEFAULT_FILE_MODE = parseInt('0644', 8);\nvar DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\n\nfunction parseArgs(args) {\n  if (args.length === 0) {\n    return {\n      type: 'file'\n    };\n  }\n\n  if (args.length === 2) {\n    // support old-style constructor\n    return {\n      type: args[0],\n      data: args[1]\n    };\n  }\n\n  if (typeof args[0] === 'string' || args[0] instanceof String) {\n    return {\n      type: args[0]\n    };\n  }\n\n  return args[0];\n}\n\nfunction parseMtime(mtime) {\n  if (mtime == null) {\n    return undefined;\n  } // { secs, nsecs }\n\n\n  if (Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    mtime = {\n      secs: mtime.secs,\n      nsecs: mtime.nsecs\n    };\n  } // UnixFS TimeSpec\n\n\n  if (Object.prototype.hasOwnProperty.call(mtime, 'Seconds')) {\n    mtime = {\n      secs: mtime.Seconds,\n      nsecs: mtime.FractionalNanoseconds\n    };\n  } // process.hrtime()\n\n\n  if (Array.isArray(mtime)) {\n    mtime = {\n      secs: mtime[0],\n      nsecs: mtime[1]\n    };\n  } // Javascript Date\n\n\n  if (mtime instanceof Date) {\n    var ms = mtime.getTime();\n    var secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n   // process.hrtime.bigint()\n  if (typeof mtime === 'bigint') {\n    const secs = mtime / BigInt(1e9)\n    const nsecs = mtime - (secs * BigInt(1e9))\n     mtime = {\n      secs: parseInt(secs),\n      nsecs: parseInt(nsecs)\n    }\n  }\n  */\n\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n\n  if (mtime.nsecs < 0 || mtime.nsecs > 999999999) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n\n  return mtime;\n}\n\nfunction parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n\n  if (typeof mode === 'string' || mode instanceof String) {\n    mode = parseInt(mode, 8);\n  }\n\n  return mode & 0xFFF;\n}\n\nvar Data = /*#__PURE__*/function () {\n  _createClass(Data, null, [{\n    key: \"unmarshal\",\n    // decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n    value: function unmarshal(marshaled) {\n      var decoded = unixfsData.decode(marshaled);\n      var data = new Data({\n        type: types[decoded.Type],\n        data: decoded.hasData() ? decoded.Data : undefined,\n        blockSizes: decoded.blocksizes,\n        mode: decoded.hasMode() ? decoded.mode : undefined,\n        mtime: decoded.hasMtime() ? decoded.mtime : undefined\n      }); // make sure we honor the original mode\n\n      data._originalMode = decoded.hasMode() ? decoded.mode : undefined;\n      return data;\n    }\n  }]);\n\n  function Data() {\n    _classCallCheck(this, Data);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _parseArgs = parseArgs(args),\n        type = _parseArgs.type,\n        data = _parseArgs.data,\n        blockSizes = _parseArgs.blockSizes,\n        hashType = _parseArgs.hashType,\n        fanout = _parseArgs.fanout,\n        mtime = _parseArgs.mtime,\n        mode = _parseArgs.mode;\n\n    if (!types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    this.type = type;\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    var parsedMode = parseMode(mode);\n\n    if (parsedMode !== undefined) {\n      this.mode = parsedMode;\n    }\n\n    if (this.mode === undefined && type === 'file') {\n      this.mode = DEFAULT_FILE_MODE;\n    }\n\n    if (this.mode === undefined && this.isDirectory()) {\n      this.mode = DEFAULT_DIRECTORY_MODE;\n    }\n\n    var parsedMtime = parseMtime(mtime);\n\n    if (parsedMtime) {\n      this.mtime = parsedMtime;\n    }\n  }\n\n  _createClass(Data, [{\n    key: \"isDirectory\",\n    value: function isDirectory() {\n      return dirTypes.includes(this.type);\n    }\n  }, {\n    key: \"addBlockSize\",\n    value: function addBlockSize(size) {\n      this.blockSizes.push(size);\n    }\n  }, {\n    key: \"removeBlockSize\",\n    value: function removeBlockSize(index) {\n      this.blockSizes.splice(index, 1);\n    } // data.length + blockSizes\n\n  }, {\n    key: \"fileSize\",\n    value: function fileSize() {\n      if (this.isDirectory()) {\n        // dirs don't have file size\n        return undefined;\n      }\n\n      var sum = 0;\n      this.blockSizes.forEach(function (size) {\n        sum += size;\n      });\n\n      if (this.data) {\n        sum += this.data.length;\n      }\n\n      return sum;\n    } // encode to protobuf\n\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      var type;\n\n      switch (this.type) {\n        case 'raw':\n          type = unixfsData.DataType.Raw;\n          break;\n\n        case 'directory':\n          type = unixfsData.DataType.Directory;\n          break;\n\n        case 'file':\n          type = unixfsData.DataType.File;\n          break;\n\n        case 'metadata':\n          type = unixfsData.DataType.Metadata;\n          break;\n\n        case 'symlink':\n          type = unixfsData.DataType.Symlink;\n          break;\n\n        case 'hamt-sharded-directory':\n          type = unixfsData.DataType.HAMTShard;\n          break;\n\n        default:\n          throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n      }\n\n      var data = this.data;\n\n      if (!this.data || !this.data.length) {\n        data = undefined;\n      }\n\n      var blockSizes = this.blockSizes;\n\n      if (!this.blockSizes || !this.blockSizes.length) {\n        blockSizes = undefined;\n      }\n\n      var mode;\n\n      if (this.mode != null) {\n        mode = this._originalMode & 0xFFFFF000 | parseMode(this.mode);\n\n        if (mode === DEFAULT_FILE_MODE && this.type === 'file') {\n          mode = undefined;\n        }\n\n        if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n          mode = undefined;\n        }\n      }\n\n      var mtime;\n\n      if (this.mtime != null) {\n        var parsed = parseMtime(this.mtime);\n\n        if (parsed) {\n          mtime = {\n            Seconds: parsed.secs,\n            FractionalNanoseconds: parsed.nsecs\n          };\n\n          if (mtime.FractionalNanoseconds === 0) {\n            delete mtime.FractionalNanoseconds;\n          }\n        }\n      }\n\n      return unixfsData.encode({\n        Type: type,\n        Data: data,\n        filesize: this.fileSize(),\n        blocksizes: blockSizes,\n        hashType: this.hashType,\n        fanout: this.fanout,\n        mode: mode,\n        mtime: mtime\n      });\n    }\n  }]);\n\n  return Data;\n}();\n\nmodule.exports = Data;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs/src/index.js"],"names":["protons","require","pb","unixfsData","Data","errcode","types","dirTypes","DEFAULT_FILE_MODE","parseInt","DEFAULT_DIRECTORY_MODE","parseArgs","args","length","type","data","String","parseMtime","mtime","undefined","Object","prototype","hasOwnProperty","call","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","Error","parseMode","mode","marshaled","decoded","decode","Type","hasData","blockSizes","blocksizes","hasMode","hasMtime","_originalMode","hashType","fanout","includes","parsedMode","isDirectory","parsedMtime","size","push","index","splice","sum","forEach","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","parsed","encode","filesize","fileSize","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst protons = require('protons')\nconst pb = protons(require('./unixfs.proto'))\nconst unixfsData = pb.Data\nconst errcode = require('err-code')\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\nfunction parseArgs (args) {\n  if (args.length === 0) {\n    return {\n      type: 'file'\n    }\n  }\n\n  if (args.length === 2) {\n    // support old-style constructor\n    return {\n      type: args[0],\n      data: args[1]\n    }\n  }\n\n  if (typeof args[0] === 'string' || args[0] instanceof String) {\n    return {\n      type: args[0]\n    }\n  }\n\n  return args[0]\n}\n\nfunction parseMtime (mtime) {\n  if (mtime == null) {\n    return undefined\n  }\n\n  // { secs, nsecs }\n  if (Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    mtime = {\n      secs: mtime.secs,\n      nsecs: mtime.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (Object.prototype.hasOwnProperty.call(mtime, 'Seconds')) {\n    mtime = {\n      secs: mtime.Seconds,\n      nsecs: mtime.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(mtime)) {\n    mtime = {\n      secs: mtime[0],\n      nsecs: mtime[1]\n    }\n  }\n\n  // Javascript Date\n  if (mtime instanceof Date) {\n    const ms = mtime.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (typeof mtime === 'bigint') {\n    const secs = mtime / BigInt(1e9)\n    const nsecs = mtime - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs),\n      nsecs: parseInt(nsecs)\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime.nsecs < 0 || mtime.nsecs > 999999999) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nfunction parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string' || mode instanceof String) {\n    mode = parseInt(mode, 8)\n  }\n\n  return mode & 0xFFF\n}\n\nclass Data {\n  // decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n  static unmarshal (marshaled) {\n    const decoded = unixfsData.decode(marshaled)\n\n    const data = new Data({\n      type: types[decoded.Type],\n      data: decoded.hasData() ? decoded.Data : undefined,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.hasMode() ? decoded.mode : undefined,\n      mtime: decoded.hasMtime() ? decoded.mtime : undefined\n    })\n\n    // make sure we honor the original mode\n    data._originalMode = decoded.hasMode() ? decoded.mode : undefined\n\n    return data\n  }\n\n  constructor (...args) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = parseArgs(args)\n\n    if (!types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n    this.blockSizes = blockSizes || []\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this.mode = parsedMode\n    }\n\n    if (this.mode === undefined && type === 'file') {\n      this.mode = DEFAULT_FILE_MODE\n    }\n\n    if (this.mode === undefined && this.isDirectory()) {\n      this.mode = DEFAULT_DIRECTORY_MODE\n    }\n\n    const parsedMtime = parseMtime(mtime)\n\n    if (parsedMtime) {\n      this.mtime = parsedMtime\n    }\n  }\n\n  isDirectory () {\n    return dirTypes.includes(this.type)\n  }\n\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  // data.length + blockSizes\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return undefined\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  // encode to protobuf\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = unixfsData.DataType.Raw; break\n      case 'directory': type = unixfsData.DataType.Directory; break\n      case 'file': type = unixfsData.DataType.File; break\n      case 'metadata': type = unixfsData.DataType.Metadata; break\n      case 'symlink': type = unixfsData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = unixfsData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let blockSizes = this.blockSizes\n\n    if (!this.blockSizes || !this.blockSizes.length) {\n      blockSizes = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | parseMode(this.mode)\n\n      if (mode === DEFAULT_FILE_MODE && this.type === 'file') {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    return unixfsData.encode({\n      Type: type,\n      Data: data,\n      filesize: this.fileSize(),\n      blocksizes: blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    })\n  }\n}\n\nmodule.exports = Data\n"]},"metadata":{},"sourceType":"script"}