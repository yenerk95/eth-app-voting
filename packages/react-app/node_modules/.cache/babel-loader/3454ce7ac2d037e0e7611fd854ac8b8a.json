{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar errors = require('../errors');\n\nvar repoInit = require('./init');\n\nvar Datastore = require('datastore-fs');\n\nvar Key = require('interface-datastore').Key;\n\nvar versionKey = new Key('version');\nexports.getVersion = getVersion;\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {string} path\n * @returns {Promise<int>}\n */\n\nfunction getVersion(_x) {\n  return _getVersion.apply(this, arguments);\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {string} path\n * @param {int} version\n * @returns {Promise<void>}\n */\n\n\nfunction _getVersion() {\n  _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var store, version;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return repoInit.isRepoInitialized(path);\n\n          case 2:\n            if (_context.sent) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new errors.NotInitializedRepoError(\"Repo in path \".concat(path, \" is not initialized!\"));\n\n          case 4:\n            store = new Datastore(path, {\n              extension: '',\n              createIfMissing: false\n            });\n            _context.next = 7;\n            return store.open();\n\n          case 7:\n            _context.t0 = parseInt;\n            _context.next = 10;\n            return store.get(versionKey);\n\n          case 10:\n            _context.t1 = _context.sent;\n            version = (0, _context.t0)(_context.t1);\n            _context.next = 14;\n            return store.close();\n\n          case 14:\n            return _context.abrupt(\"return\", version);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getVersion.apply(this, arguments);\n}\n\nfunction setVersion(_x2, _x3) {\n  return _setVersion.apply(this, arguments);\n}\n\nfunction _setVersion() {\n  _setVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(path, version) {\n    var store;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            store = new Datastore(path, {\n              extension: '',\n              createIfMissing: false\n            });\n            _context2.next = 3;\n            return store.open();\n\n          case 3:\n            _context2.next = 5;\n            return store.put(versionKey, Buffer.from(String(version)));\n\n          case 5:\n            _context2.next = 7;\n            return store.close();\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _setVersion.apply(this, arguments);\n}\n\nexports.setVersion = setVersion;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo-migrations/src/repo/version.js"],"names":["require","Buffer","errors","repoInit","Datastore","Key","versionKey","exports","getVersion","path","isRepoInitialized","NotInitializedRepoError","store","extension","createIfMissing","open","parseInt","get","version","close","setVersion","put","from","String"],"mappings":"AAAA;;;;;;eAEmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,MAAM,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,QAAD,CAAxB;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAAzB;;AAEA,IAAMK,GAAG,GAAGL,OAAO,CAAC,qBAAD,CAAP,CAA+BK,GAA3C;;AAEA,IAAMC,UAAU,GAAG,IAAID,GAAJ,CAAQ,SAAR,CAAnB;AAEAE,OAAO,CAACC,UAAR,GAAqBA,UAArB;AAEA;;;;;;;;;SAQeA,U;;;AAcf;;;;;;;;;;yEAdA,iBAA2BC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcN,QAAQ,CAACO,iBAAT,CAA2BD,IAA3B,CADd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEU,IAAIP,MAAM,CAACS,uBAAX,wBAAmDF,IAAnD,0BAFV;;AAAA;AAKQG,YAAAA,KALR,GAKgB,IAAIR,SAAJ,CAAcK,IAAd,EAAoB;AAAEI,cAAAA,SAAS,EAAE,EAAb;AAAiBC,cAAAA,eAAe,EAAE;AAAlC,aAApB,CALhB;AAAA;AAAA,mBAMQF,KAAK,CAACG,IAAN,EANR;;AAAA;AAAA,0BAQkBC,QARlB;AAAA;AAAA,mBAQiCJ,KAAK,CAACK,GAAN,CAAUX,UAAV,CARjC;;AAAA;AAAA;AAQQY,YAAAA,OARR;AAAA;AAAA,mBASQN,KAAK,CAACO,KAAN,EATR;;AAAA;AAAA,6CAWSD,OAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAqBeE,U;;;;;yEAAf,kBAA2BX,IAA3B,EAAiCS,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQN,YAAAA,KADR,GACgB,IAAIR,SAAJ,CAAcK,IAAd,EAAoB;AAAEI,cAAAA,SAAS,EAAE,EAAb;AAAiBC,cAAAA,eAAe,EAAE;AAAlC,aAApB,CADhB;AAAA;AAAA,mBAEQF,KAAK,CAACG,IAAN,EAFR;;AAAA;AAAA;AAAA,mBAGQH,KAAK,CAACS,GAAN,CAAUf,UAAV,EAAsBL,MAAM,CAACqB,IAAP,CAAYC,MAAM,CAACL,OAAD,CAAlB,CAAtB,CAHR;;AAAA;AAAA;AAAA,mBAIQN,KAAK,CAACO,KAAN,EAJR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOAZ,OAAO,CAACa,UAAR,GAAqBA,UAArB","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst errors = require('../errors')\nconst repoInit = require('./init')\nconst Datastore = require('datastore-fs')\n\nconst Key = require('interface-datastore').Key\n\nconst versionKey = new Key('version')\n\nexports.getVersion = getVersion\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {string} path\n * @returns {Promise<int>}\n */\nasync function getVersion (path) {\n  if (!(await repoInit.isRepoInitialized(path))) {\n    throw new errors.NotInitializedRepoError(`Repo in path ${path} is not initialized!`)\n  }\n\n  const store = new Datastore(path, { extension: '', createIfMissing: false })\n  await store.open()\n\n  const version = parseInt(await store.get(versionKey))\n  await store.close()\n\n  return version\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {string} path\n * @param {int} version\n * @returns {Promise<void>}\n */\nasync function setVersion (path, version) {\n  const store = new Datastore(path, { extension: '', createIfMissing: false })\n  await store.open()\n  await store.put(versionKey, Buffer.from(String(version)))\n  await store.close()\n}\n\nexports.setVersion = setVersion\n"]},"metadata":{},"sourceType":"script"}