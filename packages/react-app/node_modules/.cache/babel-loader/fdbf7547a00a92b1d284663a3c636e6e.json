{"ast":null,"code":"/*!\n * random.js - random number generator for bcrypto\n * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://wiki.openssl.org/index.php/Random_Numbers\n *   https://csrc.nist.gov/projects/random-bit-generation/\n *   http://www.pcg-random.org/posts/bounded-rands.html\n *   https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n */\n'use strict';\n\nvar assert = require('../internal/assert');\n/*\n * Constants\n */\n\n\nvar crypto = global.crypto || global.msCrypto;\nvar HAS_CRYPTO = crypto && typeof crypto.getRandomValues === 'function';\nvar randomValues = HAS_CRYPTO ? crypto.getRandomValues.bind(crypto) : null;\nvar pool = new Uint32Array(1);\nvar MAX_BYTES = 65536;\n/**\n * Generate pseudo-random bytes.\n * @param {Number} size\n * @returns {Buffer}\n */\n\nfunction randomBytes(size) {\n  assert(size >>> 0 === size);\n  var data = Buffer.alloc(size);\n  randomFillSync(data, 0, size);\n  return data;\n}\n/**\n * Generate pseudo-random bytes.\n * @param {Buffer} data\n * @param {Number} [off=0]\n * @param {Number} [size=data.length-off]\n * @returns {Buffer}\n */\n\n\nfunction randomFill(data, off, size) {\n  assert(Buffer.isBuffer(data));\n  if (off == null) off = 0;\n  assert(off >>> 0 === off);\n  if (size == null) size = data.length - off;\n  assert(size >>> 0 === size);\n  assert(off + size <= data.length);\n  data.fill(0x00, off, off + size);\n  randomFillSync(data, off, size);\n  return data;\n}\n/**\n * Generate a random uint32.\n * @returns {Number}\n */\n\n\nfunction randomInt() {\n  getRandomValues(pool);\n  var r = pool[0];\n  pool[0] = 0;\n  return r;\n}\n/**\n * Generate a random uint32 within a range.\n * @param {Number} min - Inclusive.\n * @param {Number} max - Exclusive.\n * @returns {Number}\n */\n\n\nfunction randomRange(min, max) {\n  assert(min >>> 0 === min);\n  assert(max >>> 0 === max);\n  assert(max >= min);\n  var space = max - min;\n  if (space === 0) return min;\n  var top = -space >>> 0;\n  var x, r;\n\n  do {\n    x = randomInt();\n    r = x % space;\n  } while (x - r > top);\n\n  return r + min;\n}\n/*\n * Helpers\n */\n\n\nfunction getRandomValues(array) {\n  if (!HAS_CRYPTO) throw new Error('Entropy source not available.');\n  return randomValues(array);\n}\n\nfunction randomFillSync(data, off, size) {\n  assert(Buffer.isBuffer(data));\n  assert(data.buffer instanceof ArrayBuffer);\n  assert(data.byteOffset >>> 0 === data.byteOffset);\n  assert(data.byteLength >>> 0 === data.byteLength);\n  assert(off >>> 0 === off);\n  assert(size >>> 0 === size);\n  assert(off + size <= data.byteLength);\n  if (size > Math.pow(2, 31) - 1) throw new RangeError('The value \"size\" is out of range.');\n  var offset = data.byteOffset + off;\n  var array = new Uint8Array(data.buffer, offset, size);\n\n  if (array.length > MAX_BYTES) {\n    for (var i = 0; i < array.length; i += MAX_BYTES) {\n      var j = i + MAX_BYTES;\n      if (j > array.length) j = array.length;\n      getRandomValues(array.subarray(i, j));\n    }\n  } else {\n    if (array.length > 0) getRandomValues(array);\n  }\n}\n/*\n * Expose\n */\n\n\nexports.native = 0;\nexports.randomBytes = randomBytes;\nexports.randomFill = randomFill;\nexports.randomInt = randomInt;\nexports.randomRange = randomRange;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/bcrypto/lib/js/random.js"],"names":["assert","require","crypto","global","msCrypto","HAS_CRYPTO","getRandomValues","randomValues","bind","pool","Uint32Array","MAX_BYTES","randomBytes","size","data","Buffer","alloc","randomFillSync","randomFill","off","isBuffer","length","fill","randomInt","r","randomRange","min","max","space","top","x","array","Error","buffer","ArrayBuffer","byteOffset","byteLength","RangeError","offset","Uint8Array","i","j","subarray","exports","native"],"mappings":"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","sourcesContent":["/*!\n * random.js - random number generator for bcrypto\n * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://wiki.openssl.org/index.php/Random_Numbers\n *   https://csrc.nist.gov/projects/random-bit-generation/\n *   http://www.pcg-random.org/posts/bounded-rands.html\n *   https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\n\n/*\n * Constants\n */\n\nconst crypto = global.crypto || global.msCrypto;\nconst HAS_CRYPTO = crypto && typeof crypto.getRandomValues === 'function';\nconst randomValues = HAS_CRYPTO ? crypto.getRandomValues.bind(crypto) : null;\nconst pool = new Uint32Array(1);\nconst MAX_BYTES = 65536;\n\n/**\n * Generate pseudo-random bytes.\n * @param {Number} size\n * @returns {Buffer}\n */\n\nfunction randomBytes(size) {\n  assert((size >>> 0) === size);\n\n  const data = Buffer.alloc(size);\n\n  randomFillSync(data, 0, size);\n\n  return data;\n}\n\n/**\n * Generate pseudo-random bytes.\n * @param {Buffer} data\n * @param {Number} [off=0]\n * @param {Number} [size=data.length-off]\n * @returns {Buffer}\n */\n\nfunction randomFill(data, off, size) {\n  assert(Buffer.isBuffer(data));\n\n  if (off == null)\n    off = 0;\n\n  assert((off >>> 0) === off);\n\n  if (size == null)\n    size = data.length - off;\n\n  assert((size >>> 0) === size);\n  assert(off + size <= data.length);\n\n  data.fill(0x00, off, off + size);\n\n  randomFillSync(data, off, size);\n\n  return data;\n}\n\n/**\n * Generate a random uint32.\n * @returns {Number}\n */\n\nfunction randomInt() {\n  getRandomValues(pool);\n\n  const r = pool[0];\n\n  pool[0] = 0;\n\n  return r;\n}\n\n/**\n * Generate a random uint32 within a range.\n * @param {Number} min - Inclusive.\n * @param {Number} max - Exclusive.\n * @returns {Number}\n */\n\nfunction randomRange(min, max) {\n  assert((min >>> 0) === min);\n  assert((max >>> 0) === max);\n  assert(max >= min);\n\n  const space = max - min;\n\n  if (space === 0)\n    return min;\n\n  const top = -space >>> 0;\n\n  let x, r;\n\n  do {\n    x = randomInt();\n    r = x % space;\n  } while (x - r > top);\n\n  return r + min;\n}\n\n/*\n * Helpers\n */\n\nfunction getRandomValues(array) {\n  if (!HAS_CRYPTO)\n    throw new Error('Entropy source not available.');\n\n  return randomValues(array);\n}\n\nfunction randomFillSync(data, off, size) {\n  assert(Buffer.isBuffer(data));\n  assert(data.buffer instanceof ArrayBuffer);\n  assert((data.byteOffset >>> 0) === data.byteOffset);\n  assert((data.byteLength >>> 0) === data.byteLength);\n  assert((off >>> 0) === off);\n  assert((size >>> 0) === size);\n  assert(off + size <= data.byteLength);\n\n  if (size > 2 ** 31 - 1)\n    throw new RangeError('The value \"size\" is out of range.');\n\n  const offset = data.byteOffset + off;\n  const array = new Uint8Array(data.buffer, offset, size);\n\n  if (array.length > MAX_BYTES) {\n    for (let i = 0; i < array.length; i += MAX_BYTES) {\n      let j = i + MAX_BYTES;\n\n      if (j > array.length)\n        j = array.length;\n\n      getRandomValues(array.subarray(i, j));\n    }\n  } else {\n    if (array.length > 0)\n      getRandomValues(array);\n  }\n}\n\n/*\n * Expose\n */\n\nexports.native = 0;\nexports.randomBytes = randomBytes;\nexports.randomFill = randomFill;\nexports.randomInt = randomInt;\nexports.randomRange = randomRange;\n"]},"metadata":{},"sourceType":"script"}