{"ast":null,"code":"'use strict';\n\nconst debounce = require('just-debounce-it');\n\nconst Message = require('../types/message');\n\nconst logger = require('../utils').logger;\n\nconst {\n  wantlistSendDebounceMs\n} = require('../constants');\n\nmodule.exports = class MsgQueue {\n  constructor(selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    this._entries = [];\n    this._log = logger(selfPeerId, 'msgqueue', otherPeerId.toB58String().slice(0, 8));\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);\n  }\n\n  addMessage(msg) {\n    if (msg.empty) {\n      return;\n    }\n\n    this.send(msg);\n  }\n\n  addEntries(entries) {\n    this._entries = this._entries.concat(entries);\n    this.sendEntries();\n  }\n\n  _sendEntries() {\n    if (!this._entries.length) {\n      return;\n    }\n\n    const msg = new Message(false);\n\n    this._entries.forEach(entry => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid);\n      } else {\n        msg.addEntry(entry.cid, entry.priority);\n      }\n    });\n\n    this._entries = [];\n    this.addMessage(msg);\n  }\n\n  async send(msg) {\n    try {\n      await this.network.connectTo(this.peerId);\n    } catch (err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message);\n\n      return;\n    }\n\n    this._log('sending message to peer %s', this.peerId.toB58String()); // Note: Don't wait for sendMessage() to complete\n\n\n    this.network.sendMessage(this.peerId, msg).catch(err => {\n      this._log.error('send error: %s', err.message);\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/want-manager/msg-queue.js"],"names":["debounce","require","Message","logger","wantlistSendDebounceMs","module","exports","MsgQueue","constructor","selfPeerId","otherPeerId","network","peerId","refcnt","_entries","_log","toB58String","slice","sendEntries","_sendEntries","bind","addMessage","msg","empty","send","addEntries","entries","concat","length","forEach","entry","cancel","cid","addEntry","priority","connectTo","err","error","message","sendMessage","catch"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AAEA,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,MAAnC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA6BH,OAAO,CAAC,cAAD,CAA1C;;AAEAI,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,CAAe;AAC9BC,EAAAA,WAAW,CAAEC,UAAF,EAAcC,WAAd,EAA2BC,OAA3B,EAAoC;AAC7C,SAAKC,MAAL,GAAcF,WAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,MAAL,GAAc,CAAd;AAEA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,IAAL,GAAYZ,MAAM,CAACM,UAAD,EAAa,UAAb,EAAyBC,WAAW,CAACM,WAAZ,GAA0BC,KAA1B,CAAgC,CAAhC,EAAmC,CAAnC,CAAzB,CAAlB;AACA,SAAKC,WAAL,GAAmBlB,QAAQ,CAAC,KAAKmB,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,EAA+BhB,sBAA/B,CAA3B;AACD;;AAEDiB,EAAAA,UAAU,CAAEC,GAAF,EAAO;AACf,QAAIA,GAAG,CAACC,KAAR,EAAe;AACb;AACD;;AAED,SAAKC,IAAL,CAAUF,GAAV;AACD;;AAEDG,EAAAA,UAAU,CAAEC,OAAF,EAAW;AACnB,SAAKZ,QAAL,GAAgB,KAAKA,QAAL,CAAca,MAAd,CAAqBD,OAArB,CAAhB;AACA,SAAKR,WAAL;AACD;;AAEDC,EAAAA,YAAY,GAAI;AACd,QAAI,CAAC,KAAKL,QAAL,CAAcc,MAAnB,EAA2B;AACzB;AACD;;AAED,UAAMN,GAAG,GAAG,IAAIpB,OAAJ,CAAY,KAAZ,CAAZ;;AACA,SAAKY,QAAL,CAAce,OAAd,CAAuBC,KAAD,IAAW;AAC/B,UAAIA,KAAK,CAACC,MAAV,EAAkB;AAChBT,QAAAA,GAAG,CAACS,MAAJ,CAAWD,KAAK,CAACE,GAAjB;AACD,OAFD,MAEO;AACLV,QAAAA,GAAG,CAACW,QAAJ,CAAaH,KAAK,CAACE,GAAnB,EAAwBF,KAAK,CAACI,QAA9B;AACD;AACF,KAND;;AAOA,SAAKpB,QAAL,GAAgB,EAAhB;AACA,SAAKO,UAAL,CAAgBC,GAAhB;AACD;;AAED,QAAME,IAAN,CAAYF,GAAZ,EAAiB;AACf,QAAI;AACF,YAAM,KAAKX,OAAL,CAAawB,SAAb,CAAuB,KAAKvB,MAA5B,CAAN;AACD,KAFD,CAEE,OAAOwB,GAAP,EAAY;AACZ,WAAKrB,IAAL,CAAUsB,KAAV,CAAgB,6BAAhB,EAA+C,KAAKzB,MAAL,CAAYI,WAAZ,EAA/C,EAA0EoB,GAAG,CAACE,OAA9E;;AACA;AACD;;AAED,SAAKvB,IAAL,CAAU,4BAAV,EAAwC,KAAKH,MAAL,CAAYI,WAAZ,EAAxC,EARe,CAUf;;;AACA,SAAKL,OAAL,CAAa4B,WAAb,CAAyB,KAAK3B,MAA9B,EAAsCU,GAAtC,EAA2CkB,KAA3C,CAAkDJ,GAAD,IAAS;AACxD,WAAKrB,IAAL,CAAUsB,KAAV,CAAgB,gBAAhB,EAAkCD,GAAG,CAACE,OAAtC;AACD,KAFD;AAGD;;AAvD6B,CAAhC","sourcesContent":["'use strict'\n\nconst debounce = require('just-debounce-it')\n\nconst Message = require('../types/message')\nconst logger = require('../utils').logger\nconst { wantlistSendDebounceMs } = require('../constants')\n\nmodule.exports = class MsgQueue {\n  constructor (selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId\n    this.network = network\n    this.refcnt = 1\n\n    this._entries = []\n    this._log = logger(selfPeerId, 'msgqueue', otherPeerId.toB58String().slice(0, 8))\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs)\n  }\n\n  addMessage (msg) {\n    if (msg.empty) {\n      return\n    }\n\n    this.send(msg)\n  }\n\n  addEntries (entries) {\n    this._entries = this._entries.concat(entries)\n    this.sendEntries()\n  }\n\n  _sendEntries () {\n    if (!this._entries.length) {\n      return\n    }\n\n    const msg = new Message(false)\n    this._entries.forEach((entry) => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid)\n      } else {\n        msg.addEntry(entry.cid, entry.priority)\n      }\n    })\n    this._entries = []\n    this.addMessage(msg)\n  }\n\n  async send (msg) {\n    try {\n      await this.network.connectTo(this.peerId)\n    } catch (err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message)\n      return\n    }\n\n    this._log('sending message to peer %s', this.peerId.toB58String())\n\n    // Note: Don't wait for sendMessage() to complete\n    this.network.sendMessage(this.peerId, msg).catch((err) => {\n      this._log.error('send error: %s', err.message)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}