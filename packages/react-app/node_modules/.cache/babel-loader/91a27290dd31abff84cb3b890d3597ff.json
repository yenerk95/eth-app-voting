{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar log = require('debug')('ipfs');\n\nvar mergeOptions = require('merge-options');\n\nvar _require = require('ipfs-utils/src/env'),\n    isTest = _require.isTest;\n\nvar globSource = require('ipfs-utils/src/files/glob-source');\n\nvar urlSource = require('ipfs-utils/src/files/url-source');\n\nvar _require2 = require('buffer'),\n    Buffer = _require2.Buffer;\n\nvar PeerId = require('peer-id');\n\nvar crypto = require('libp2p-crypto');\n\nvar isIPFS = require('is-ipfs');\n\nvar multiaddr = require('multiaddr');\n\nvar multibase = require('multibase');\n\nvar multicodec = require('multicodec');\n\nvar multihashing = require('multihashing-async');\n\nvar multihash = multihashing.multihash;\n\nvar CID = require('cids');\n\nvar _require3 = require('./errors'),\n    NotInitializedError = _require3.NotInitializedError;\n\nvar Components = require('./components');\n\nvar ApiManager = require('./api-manager');\n\nvar getDefaultOptions = function getDefaultOptions() {\n  return {\n    init: true,\n    start: true,\n    EXPERIMENTAL: {},\n    preload: {\n      enabled: !isTest,\n      // preload by default, unless in test env\n      addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n    }\n  };\n};\n\nfunction create(_x) {\n  return _create.apply(this, arguments);\n}\n\nfunction _create() {\n  _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    var print, apiManager, _apiManager$update, api;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = mergeOptions(getDefaultOptions(), options); // eslint-disable-next-line no-console\n\n            print = options.silent ? log : console.log;\n            apiManager = new ApiManager();\n            _apiManager$update = apiManager.update({\n              init: Components.init({\n                apiManager: apiManager,\n                print: print,\n                options: options\n              }),\n              dns: Components.dns(),\n              isOnline: Components.isOnline({})\n            }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      throw new NotInitializedError();\n\n                    case 1:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }))), api = _apiManager$update.api; // eslint-disable-line require-await\n\n            if (options.init) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", api);\n\n          case 6:\n            _context2.next = 8;\n            return api.init();\n\n          case 8:\n            if (options.start) {\n              _context2.next = 10;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", api);\n\n          case 10:\n            return _context2.abrupt(\"return\", api.start());\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _create.apply(this, arguments);\n}\n\nmodule.exports = {\n  create: create,\n  crypto: crypto,\n  isIPFS: isIPFS,\n  Buffer: Buffer,\n  CID: CID,\n  multiaddr: multiaddr,\n  multibase: multibase,\n  multihash: multihash,\n  multihashing: multihashing,\n  multicodec: multicodec,\n  PeerId: PeerId,\n  globSource: globSource,\n  urlSource: urlSource\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/index.js"],"names":["log","require","mergeOptions","isTest","globSource","urlSource","Buffer","PeerId","crypto","isIPFS","multiaddr","multibase","multicodec","multihashing","multihash","CID","NotInitializedError","Components","ApiManager","getDefaultOptions","init","start","EXPERIMENTAL","preload","enabled","addresses","create","options","print","silent","console","apiManager","update","dns","isOnline","api","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs')\nconst mergeOptions = require('merge-options')\nconst { isTest } = require('ipfs-utils/src/env')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\nconst { Buffer } = require('buffer')\nconst PeerId = require('peer-id')\nconst crypto = require('libp2p-crypto')\nconst isIPFS = require('is-ipfs')\nconst multiaddr = require('multiaddr')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst multihash = multihashing.multihash\nconst CID = require('cids')\nconst { NotInitializedError } = require('./errors')\nconst Components = require('./components')\nconst ApiManager = require('./api-manager')\n\nconst getDefaultOptions = () => ({\n  init: true,\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n\nasync function create (options) {\n  options = mergeOptions(getDefaultOptions(), options)\n\n  // eslint-disable-next-line no-console\n  const print = options.silent ? log : console.log\n\n  const apiManager = new ApiManager()\n\n  const { api } = apiManager.update({\n    init: Components.init({ apiManager, print, options }),\n    dns: Components.dns(),\n    isOnline: Components.isOnline({})\n  }, async () => { throw new NotInitializedError() }) // eslint-disable-line require-await\n\n  if (!options.init) {\n    return api\n  }\n\n  await api.init()\n\n  if (!options.start) {\n    return api\n  }\n\n  return api.start()\n}\n\nmodule.exports = {\n  create,\n  crypto,\n  isIPFS,\n  Buffer,\n  CID,\n  multiaddr,\n  multibase,\n  multihash,\n  multihashing,\n  multicodec,\n  PeerId,\n  globSource,\n  urlSource\n}\n"]},"metadata":{},"sourceType":"script"}