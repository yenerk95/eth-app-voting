{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar errcode = require('err-code');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:peer-store:proto-book');\nlog.error = debug('libp2p:peer-store:proto-book:error');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar PeerId = require('peer-id');\n\nvar Book = require('./book');\n\nvar _require2 = require('../errors'),\n    ERR_INVALID_PARAMETERS = _require2.codes.ERR_INVALID_PARAMETERS;\n/**\n * The MetadataBook is responsible for keeping the known supported\n * protocols of a peer.\n * @fires MetadataBook#change:metadata\n */\n\n\nvar MetadataBook = /*#__PURE__*/function (_Book) {\n  _inherits(MetadataBook, _Book);\n\n  var _super = _createSuper(MetadataBook);\n\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  function MetadataBook(peerStore) {\n    var _this;\n\n    _classCallCheck(this, MetadataBook);\n\n    /**\n     * PeerStore Event emitter, used by the MetadataBook to emit:\n     * \"change:metadata\" - emitted when the known metadata of a peer change.\n     */\n    _this = _super.call(this, {\n      peerStore: peerStore,\n      eventName: 'change:metadata',\n      eventProperty: 'metadata'\n    });\n    /**\n     * Map known peers to their known protocols.\n     * @type {Map<string, Map<string, Buffer>>}\n     */\n\n    _this.data = new Map();\n    return _this;\n  }\n  /**\n   * Set metadata key and value of a provided peer.\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key metadata key\n   * @param {Buffer} value metadata value\n   * @returns {ProtoBook}\n   */\n\n\n  _createClass(MetadataBook, [{\n    key: \"set\",\n    value: function set(peerId, key, value) {\n      if (!PeerId.isPeerId(peerId)) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (typeof key !== 'string' || !Buffer.isBuffer(value)) {\n        log.error('valid key and value must be provided to store data');\n        throw errcode(new Error('valid key and value must be provided'), ERR_INVALID_PARAMETERS);\n      }\n\n      this._setValue(peerId, key, value);\n\n      return this;\n    }\n    /**\n     * Set data into the datastructure\n     * @override\n     */\n\n  }, {\n    key: \"_setValue\",\n    value: function _setValue(peerId, key, value) {\n      var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n          _ref$emit = _ref.emit,\n          emit = _ref$emit === void 0 ? true : _ref$emit;\n\n      var id = peerId.toB58String();\n      var rec = this.data.get(id) || new Map();\n      var recMap = rec.get(key); // Already exists and is equal\n\n      if (recMap && value.equals(recMap)) {\n        log(\"the metadata provided to store is equal to the already stored for \".concat(id, \" on \").concat(key));\n        return;\n      }\n\n      rec.set(key, value);\n      this.data.set(id, rec);\n      emit && this._emit(peerId, key);\n    }\n    /**\n     * Get the known data of a provided peer.\n     * @param {PeerId} peerId\n     * @returns {Map<string, Buffer>}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      return this.data.get(peerId.toB58String());\n    }\n    /**\n     * Get specific metadata value, if it exists\n     * @param {PeerId} peerId\n     * @param {string} key\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue(peerId, key) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var rec = this.data.get(peerId.toB58String());\n      return rec && rec.get(key);\n    }\n    /**\n     * Deletes the provided peer from the book.\n     * @param {PeerId} peerId\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (!this.data.delete(peerId.toB58String())) {\n        return false;\n      }\n\n      this._emit(peerId);\n\n      return true;\n    }\n    /**\n     * Deletes the provided peer metadata key from the book.\n     * @param {PeerId} peerId\n     * @param {string} key\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"deleteValue\",\n    value: function deleteValue(peerId, key) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var rec = this.data.get(peerId.toB58String());\n\n      if (!rec || !rec.delete(key)) {\n        return false;\n      }\n\n      this._emit(peerId, key);\n\n      return true;\n    }\n  }]);\n\n  return MetadataBook;\n}(Book);\n\nmodule.exports = MetadataBook;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/peer-store/metadata-book.js"],"names":["errcode","require","debug","log","error","Buffer","PeerId","Book","ERR_INVALID_PARAMETERS","codes","MetadataBook","peerStore","eventName","eventProperty","data","Map","peerId","key","value","isPeerId","Error","isBuffer","_setValue","emit","id","toB58String","rec","get","recMap","equals","set","_emit","delete","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('libp2p:peer-store:proto-book')\nlog.error = debug('libp2p:peer-store:proto-book:error')\n\nconst { Buffer } = require('buffer')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * The MetadataBook is responsible for keeping the known supported\n * protocols of a peer.\n * @fires MetadataBook#change:metadata\n */\nclass MetadataBook extends Book {\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  constructor (peerStore) {\n    /**\n     * PeerStore Event emitter, used by the MetadataBook to emit:\n     * \"change:metadata\" - emitted when the known metadata of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:metadata',\n      eventProperty: 'metadata'\n    })\n\n    /**\n     * Map known peers to their known protocols.\n     * @type {Map<string, Map<string, Buffer>>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set metadata key and value of a provided peer.\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key metadata key\n   * @param {Buffer} value metadata value\n   * @returns {ProtoBook}\n   */\n  set (peerId, key, value) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (typeof key !== 'string' || !Buffer.isBuffer(value)) {\n      log.error('valid key and value must be provided to store data')\n      throw errcode(new Error('valid key and value must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    this._setValue(peerId, key, value)\n\n    return this\n  }\n\n  /**\n   * Set data into the datastructure\n   * @override\n   */\n  _setValue (peerId, key, value, { emit = true } = {}) {\n    const id = peerId.toB58String()\n    const rec = this.data.get(id) || new Map()\n    const recMap = rec.get(key)\n\n    // Already exists and is equal\n    if (recMap && value.equals(recMap)) {\n      log(`the metadata provided to store is equal to the already stored for ${id} on ${key}`)\n      return\n    }\n\n    rec.set(key, value)\n    this.data.set(id, rec)\n\n    emit && this._emit(peerId, key)\n  }\n\n  /**\n   * Get the known data of a provided peer.\n   * @param {PeerId} peerId\n   * @returns {Map<string, Buffer>}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    return this.data.get(peerId.toB58String())\n  }\n\n  /**\n   * Get specific metadata value, if it exists\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {Buffer}\n   */\n  getValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n    return rec && rec.get(key)\n  }\n\n  /**\n   * Deletes the provided peer from the book.\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n  delete (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false\n    }\n\n    this._emit(peerId)\n\n    return true\n  }\n\n  /**\n   * Deletes the provided peer metadata key from the book.\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {boolean}\n   */\n  deleteValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    if (!rec || !rec.delete(key)) {\n      return false\n    }\n\n    this._emit(peerId, key)\n\n    return true\n  }\n}\n\nmodule.exports = MetadataBook\n"]},"metadata":{},"sourceType":"script"}