{"ast":null,"code":"/* eslint max-nested-callbacks: [\"error\", 8] */\n'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('../../utils'),\n    resolvePath = _require.resolvePath,\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var pinManager = _ref.pinManager,\n      gcLock = _ref.gcLock,\n      dag = _ref.dag;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(paths, options) {\n      var recursive, cids, pinAdd, lock, release;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = options || {};\n              recursive = options.recursive !== false;\n              _context2.next = 4;\n              return resolvePath(dag, paths, {\n                signal: options.signal\n              });\n\n            case 4:\n              cids = _context2.sent;\n\n              pinAdd = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var results, _iterator, _step, cid, key, pinset;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          results = []; // verify that each hash can be pinned\n\n                          _iterator = _createForOfIteratorHelper(cids);\n                          _context.prev = 2;\n\n                          _iterator.s();\n\n                        case 4:\n                          if ((_step = _iterator.n()).done) {\n                            _context.next = 24;\n                            break;\n                          }\n\n                          cid = _step.value;\n                          key = cid.toBaseEncodedString();\n\n                          if (!recursive) {\n                            _context.next = 16;\n                            break;\n                          }\n\n                          if (!pinManager.recursivePins.has(key)) {\n                            _context.next = 11;\n                            break;\n                          }\n\n                          // it's already pinned recursively\n                          results.push(cid);\n                          return _context.abrupt(\"continue\", 22);\n\n                        case 11:\n                          _context.next = 13;\n                          return pinManager.fetchCompleteDag(key, {\n                            preload: options.preload,\n                            signal: options.signal\n                          });\n\n                        case 13:\n                          // found all objects, we can add the pin\n                          results.push(cid);\n                          _context.next = 22;\n                          break;\n\n                        case 16:\n                          if (!pinManager.recursivePins.has(key)) {\n                            _context.next = 18;\n                            break;\n                          }\n\n                          throw new Error(\"\".concat(key, \" already pinned recursively\"));\n\n                        case 18:\n                          if (pinManager.directPins.has(key)) {\n                            _context.next = 21;\n                            break;\n                          }\n\n                          _context.next = 21;\n                          return dag.get(cid, {\n                            preload: options.preload\n                          });\n\n                        case 21:\n                          results.push(cid);\n\n                        case 22:\n                          _context.next = 4;\n                          break;\n\n                        case 24:\n                          _context.next = 29;\n                          break;\n\n                        case 26:\n                          _context.prev = 26;\n                          _context.t0 = _context[\"catch\"](2);\n\n                          _iterator.e(_context.t0);\n\n                        case 29:\n                          _context.prev = 29;\n\n                          _iterator.f();\n\n                          return _context.finish(29);\n\n                        case 32:\n                          // update the pin sets in memory\n                          pinset = recursive ? pinManager.recursivePins : pinManager.directPins;\n                          results.forEach(function (cid) {\n                            return pinset.add(cid.toString());\n                          }); // persist updated pin sets to datastore\n\n                          _context.next = 36;\n                          return pinManager.flushPins();\n\n                        case 36:\n                          return _context.abrupt(\"return\", results.map(function (cid) {\n                            return {\n                              cid: cid\n                            };\n                          }));\n\n                        case 37:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 26, 29, 32]]);\n                }));\n\n                return function pinAdd() {\n                  return _ref2.apply(this, arguments);\n                };\n              }(); // When adding a file, we take a lock that gets released after pinning\n              // is complete, so don't take a second lock here\n\n\n              lock = Boolean(options.lock);\n\n              if (lock) {\n                _context2.next = 9;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", pinAdd());\n\n            case 9:\n              _context2.next = 11;\n              return gcLock.readLock();\n\n            case 11:\n              release = _context2.sent;\n              _context2.prev = 12;\n              _context2.next = 15;\n              return pinAdd();\n\n            case 15:\n              _context2.prev = 15;\n              release();\n              return _context2.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[12,, 15, 18]]);\n    }));\n\n    function add(_x, _x2) {\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/pin/add.js"],"names":["require","resolvePath","withTimeoutOption","module","exports","pinManager","gcLock","dag","paths","options","recursive","signal","cids","pinAdd","results","cid","key","toBaseEncodedString","recursivePins","has","push","fetchCompleteDag","preload","Error","directPins","get","pinset","forEach","add","toString","flushPins","map","lock","Boolean","readLock","release"],"mappings":"AAAA;AACA;;;;;;;;eAE2CA,OAAO,CAAC,aAAD,C;IAA1CC,W,YAAAA,W;IAAaC,iB,YAAAA,iB;;AAErBC,MAAM,CAACC,OAAP,GAAiB,gBAAiC;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,MAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAChD,SAAOL,iBAAiB;AAAA,wEAAC,kBAAoBM,KAApB,EAA2BC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEMC,cAAAA,SAHiB,GAGLD,OAAO,CAACC,SAAR,KAAsB,KAHjB;AAAA;AAAA,qBAIJT,WAAW,CAACM,GAAD,EAAMC,KAAN,EAAa;AAAEG,gBAAAA,MAAM,EAAEF,OAAO,CAACE;AAAlB,eAAb,CAJP;;AAAA;AAIjBC,cAAAA,IAJiB;;AAKjBC,cAAAA,MALiB;AAAA,qFAKR;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPC,0BAAAA,OADO,GACG,EADH,EAGb;;AAHa,iEAIKF,IAJL;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIFG,0BAAAA,GAJE;AAKLC,0BAAAA,GALK,GAKCD,GAAG,CAACE,mBAAJ,EALD;;AAAA,+BAOPP,SAPO;AAAA;AAAA;AAAA;;AAAA,+BAQLL,UAAU,CAACa,aAAX,CAAyBC,GAAzB,CAA6BH,GAA7B,CARK;AAAA;AAAA;AAAA;;AASP;AACAF,0BAAAA,OAAO,CAACM,IAAR,CAAaL,GAAb;AAVO;;AAAA;AAAA;AAAA,iCAiBHV,UAAU,CAACgB,gBAAX,CAA4BL,GAA5B,EAAiC;AAAEM,4BAAAA,OAAO,EAAEb,OAAO,CAACa,OAAnB;AAA4BX,4BAAAA,MAAM,EAAEF,OAAO,CAACE;AAA5C,2BAAjC,CAjBG;;AAAA;AAmBT;AACAG,0BAAAA,OAAO,CAACM,IAAR,CAAaL,GAAb;AApBS;AAAA;;AAAA;AAAA,+BAsBLV,UAAU,CAACa,aAAX,CAAyBC,GAAzB,CAA6BH,GAA7B,CAtBK;AAAA;AAAA;AAAA;;AAAA,gCAwBD,IAAIO,KAAJ,WAAaP,GAAb,iCAxBC;;AAAA;AAAA,8BA2BJX,UAAU,CAACmB,UAAX,CAAsBL,GAAtB,CAA0BH,GAA1B,CA3BI;AAAA;AAAA;AAAA;;AAAA;AAAA,iCA6BDT,GAAG,CAACkB,GAAJ,CAAQV,GAAR,EAAa;AAAEO,4BAAAA,OAAO,EAAEb,OAAO,CAACa;AAAnB,2BAAb,CA7BC;;AAAA;AAgCTR,0BAAAA,OAAO,CAACM,IAAR,CAAaL,GAAb;;AAhCS;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAoCb;AACMW,0BAAAA,MArCO,GAqCEhB,SAAS,GAAGL,UAAU,CAACa,aAAd,GAA8Bb,UAAU,CAACmB,UArCpD;AAsCbV,0BAAAA,OAAO,CAACa,OAAR,CAAgB,UAAAZ,GAAG;AAAA,mCAAIW,MAAM,CAACE,GAAP,CAAWb,GAAG,CAACc,QAAJ,EAAX,CAAJ;AAAA,2BAAnB,EAtCa,CAwCb;;AAxCa;AAAA,iCAyCPxB,UAAU,CAACyB,SAAX,EAzCO;;AAAA;AAAA,2DA2CNhB,OAAO,CAACiB,GAAR,CAAY,UAAAhB,GAAG;AAAA,mCAAK;AAAEA,8BAAAA,GAAG,EAAHA;AAAF,6BAAL;AAAA,2BAAf,CA3CM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALQ;;AAAA,gCAKjBF,MALiB;AAAA;AAAA;AAAA,mBAmDvB;AACA;;;AACMmB,cAAAA,IArDiB,GAqDVC,OAAO,CAACxB,OAAO,CAACuB,IAAT,CArDG;;AAAA,kBAuDlBA,IAvDkB;AAAA;AAAA;AAAA;;AAAA,gDAwDdnB,MAAM,EAxDQ;;AAAA;AAAA;AAAA,qBA2DDP,MAAM,CAAC4B,QAAP,EA3DC;;AAAA;AA2DjBC,cAAAA,OA3DiB;AAAA;AAAA;AAAA,qBA8DftB,MAAM,EA9DS;;AAAA;AAAA;AAgErBsB,cAAAA,OAAO;AAhEc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBP,GAAhB;AAAA;AAAA;;AAAA,WAAgBA,GAAhB;AAAA,MAAxB;AAmED,CApED","sourcesContent":["/* eslint max-nested-callbacks: [\"error\", 8] */\n'use strict'\n\nconst { resolvePath, withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ pinManager, gcLock, dag }) => {\n  return withTimeoutOption(async function add (paths, options) {\n    options = options || {}\n\n    const recursive = options.recursive !== false\n    const cids = await resolvePath(dag, paths, { signal: options.signal })\n    const pinAdd = async () => {\n      const results = []\n\n      // verify that each hash can be pinned\n      for (const cid of cids) {\n        const key = cid.toBaseEncodedString()\n\n        if (recursive) {\n          if (pinManager.recursivePins.has(key)) {\n            // it's already pinned recursively\n            results.push(cid)\n\n            continue\n          }\n\n          // entire graph of nested links should be pinned,\n          // so make sure we have all the objects\n          await pinManager.fetchCompleteDag(key, { preload: options.preload, signal: options.signal })\n\n          // found all objects, we can add the pin\n          results.push(cid)\n        } else {\n          if (pinManager.recursivePins.has(key)) {\n            // recursive supersedes direct, can't have both\n            throw new Error(`${key} already pinned recursively`)\n          }\n\n          if (!pinManager.directPins.has(key)) {\n            // make sure we have the object\n            await dag.get(cid, { preload: options.preload })\n          }\n\n          results.push(cid)\n        }\n      }\n\n      // update the pin sets in memory\n      const pinset = recursive ? pinManager.recursivePins : pinManager.directPins\n      results.forEach(cid => pinset.add(cid.toString()))\n\n      // persist updated pin sets to datastore\n      await pinManager.flushPins()\n\n      return results.map(cid => ({ cid }))\n    }\n\n    // When adding a file, we take a lock that gets released after pinning\n    // is complete, so don't take a second lock here\n    const lock = Boolean(options.lock)\n\n    if (!lock) {\n      return pinAdd()\n    }\n\n    const release = await gcLock.readLock()\n\n    try {\n      await pinAdd()\n    } finally {\n      release()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}