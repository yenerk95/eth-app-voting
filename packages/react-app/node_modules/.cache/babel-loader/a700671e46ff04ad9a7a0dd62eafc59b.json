{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar errcode = require('err-code');\n\nvar PeerId = require('peer-id');\n\nvar _require = require('../errors'),\n    ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n\nvar passthrough = function passthrough(data) {\n  return data;\n};\n/**\n * The Book is the skeleton for the PeerStore books.\n */\n\n\nvar Book = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {Object} properties\n   * @param {PeerStore} properties.peerStore PeerStore instance.\n   * @param {string} properties.eventName Name of the event to emit by the PeerStore.\n   * @param {string} properties.eventProperty Name of the property to emit by the PeerStore.\n   * @param {function} [properties.eventTransformer] Transformer function of the provided data for being emitted.\n   */\n  function Book(_ref) {\n    var peerStore = _ref.peerStore,\n        eventName = _ref.eventName,\n        eventProperty = _ref.eventProperty,\n        _ref$eventTransformer = _ref.eventTransformer,\n        eventTransformer = _ref$eventTransformer === void 0 ? passthrough : _ref$eventTransformer;\n\n    _classCallCheck(this, Book);\n\n    this._ps = peerStore;\n    this.eventName = eventName;\n    this.eventProperty = eventProperty;\n    this.eventTransformer = eventTransformer;\n    /**\n     * Map known peers to their data.\n     * @type {Map<string, Array<Data>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set known data of a provided peer.\n   * @param {PeerId} peerId\n   * @param {Array<Data>|Data} data\n   */\n\n\n  _createClass(Book, [{\n    key: \"set\",\n    value: function set(peerId, data) {\n      throw errcode(new Error('set must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');\n    }\n    /**\n     * Set data into the datastructure, persistence and emit it using the provided transformers.\n     * @private\n     * @param {PeerId} peerId peerId of the data to store\n     * @param {*} data data to store.\n     * @param {Object} [options] storing options.\n     * @param {boolean} [options.emit = true] emit the provided data.\n     * @return {void}\n     */\n\n  }, {\n    key: \"_setData\",\n    value: function _setData(peerId, data) {\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref2$emit = _ref2.emit,\n          emit = _ref2$emit === void 0 ? true : _ref2$emit;\n\n      var b58key = peerId.toB58String(); // Store data in memory\n\n      this.data.set(b58key, data); // Emit event\n\n      emit && this._emit(peerId, data);\n    }\n    /**\n     * Emit data.\n     * @private\n     * @param {PeerId} peerId\n     * @param {*} data\n     */\n\n  }, {\n    key: \"_emit\",\n    value: function _emit(peerId, data) {\n      this._ps.emit(this.eventName, _defineProperty({\n        peerId: peerId\n      }, this.eventProperty, this.eventTransformer(data)));\n    }\n    /**\n     * Get the known data of a provided peer.\n     * @param {PeerId} peerId\n     * @returns {Array<Data>}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var rec = this.data.get(peerId.toB58String());\n      return rec ? _toConsumableArray(rec) : undefined;\n    }\n    /**\n     * Deletes the provided peer from the book.\n     * @param {PeerId} peerId\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (!this.data.delete(peerId.toB58String())) {\n        return false;\n      }\n\n      this._emit(peerId, []);\n\n      return true;\n    }\n  }]);\n\n  return Book;\n}();\n\nmodule.exports = Book;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/peer-store/book.js"],"names":["errcode","require","PeerId","ERR_INVALID_PARAMETERS","codes","passthrough","data","Book","peerStore","eventName","eventProperty","eventTransformer","_ps","Map","peerId","Error","emit","b58key","toB58String","set","_emit","isPeerId","rec","get","undefined","delete","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;;eAIIA,OAAO,CAAC,WAAD,C;IADAE,sB,YAATC,K,CAASD,sB;;AAGX,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAC,IAAI;AAAA,SAAIA,IAAJ;AAAA,CAAxB;AAEA;;;;;IAGMC,I;AACJ;;;;;;;;AAQA,sBAAsF;AAAA,QAAvEC,SAAuE,QAAvEA,SAAuE;AAAA,QAA5DC,SAA4D,QAA5DA,SAA4D;AAAA,QAAjDC,aAAiD,QAAjDA,aAAiD;AAAA,qCAAlCC,gBAAkC;AAAA,QAAlCA,gBAAkC,sCAAfN,WAAe;;AAAA;;AACpF,SAAKO,GAAL,GAAWJ,SAAX;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AAEA;;;;;AAIA,SAAKL,IAAL,GAAY,IAAIO,GAAJ,EAAZ;AACD;AAED;;;;;;;;;wBAKKC,M,EAAQR,I,EAAM;AACjB,YAAMN,OAAO,CAAC,IAAIe,KAAJ,CAAU,yCAAV,CAAD,EAAuD,qBAAvD,CAAb;AACD;AAED;;;;;;;;;;;;6BASUD,M,EAAQR,I,EAA4B;AAAA,sFAAJ,EAAI;AAAA,6BAApBU,IAAoB;AAAA,UAApBA,IAAoB,2BAAb,IAAa;;AAC5C,UAAMC,MAAM,GAAGH,MAAM,CAACI,WAAP,EAAf,CAD4C,CAG5C;;AACA,WAAKZ,IAAL,CAAUa,GAAV,CAAcF,MAAd,EAAsBX,IAAtB,EAJ4C,CAM5C;;AACAU,MAAAA,IAAI,IAAI,KAAKI,KAAL,CAAWN,MAAX,EAAmBR,IAAnB,CAAR;AACD;AAED;;;;;;;;;0BAMOQ,M,EAAQR,I,EAAM;AACnB,WAAKM,GAAL,CAASI,IAAT,CAAc,KAAKP,SAAnB;AACEK,QAAAA,MAAM,EAANA;AADF,SAEG,KAAKJ,aAFR,EAEwB,KAAKC,gBAAL,CAAsBL,IAAtB,CAFxB;AAID;AAED;;;;;;;;wBAKKQ,M,EAAQ;AACX,UAAI,CAACZ,MAAM,CAACmB,QAAP,CAAgBP,MAAhB,CAAL,EAA8B;AAC5B,cAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAU,uCAAV,CAAD,EAAqDZ,sBAArD,CAAb;AACD;;AAED,UAAMmB,GAAG,GAAG,KAAKhB,IAAL,CAAUiB,GAAV,CAAcT,MAAM,CAACI,WAAP,EAAd,CAAZ;AAEA,aAAOI,GAAG,sBAAOA,GAAP,IAAcE,SAAxB;AACD;AAED;;;;;;;;4BAKQV,M,EAAQ;AACd,UAAI,CAACZ,MAAM,CAACmB,QAAP,CAAgBP,MAAhB,CAAL,EAA8B;AAC5B,cAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAU,uCAAV,CAAD,EAAqDZ,sBAArD,CAAb;AACD;;AAED,UAAI,CAAC,KAAKG,IAAL,CAAUmB,MAAV,CAAiBX,MAAM,CAACI,WAAP,EAAjB,CAAL,EAA6C;AAC3C,eAAO,KAAP;AACD;;AAED,WAAKE,KAAL,CAAWN,MAAX,EAAmB,EAAnB;;AAEA,aAAO,IAAP;AACD;;;;;;AAGHY,MAAM,CAACC,OAAP,GAAiBpB,IAAjB","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst PeerId = require('peer-id')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\nconst passthrough = data => data\n\n/**\n * The Book is the skeleton for the PeerStore books.\n */\nclass Book {\n  /**\n   * @constructor\n   * @param {Object} properties\n   * @param {PeerStore} properties.peerStore PeerStore instance.\n   * @param {string} properties.eventName Name of the event to emit by the PeerStore.\n   * @param {string} properties.eventProperty Name of the property to emit by the PeerStore.\n   * @param {function} [properties.eventTransformer] Transformer function of the provided data for being emitted.\n   */\n  constructor ({ peerStore, eventName, eventProperty, eventTransformer = passthrough }) {\n    this._ps = peerStore\n    this.eventName = eventName\n    this.eventProperty = eventProperty\n    this.eventTransformer = eventTransformer\n\n    /**\n     * Map known peers to their data.\n     * @type {Map<string, Array<Data>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set known data of a provided peer.\n   * @param {PeerId} peerId\n   * @param {Array<Data>|Data} data\n   */\n  set (peerId, data) {\n    throw errcode(new Error('set must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  /**\n   * Set data into the datastructure, persistence and emit it using the provided transformers.\n   * @private\n   * @param {PeerId} peerId peerId of the data to store\n   * @param {*} data data to store.\n   * @param {Object} [options] storing options.\n   * @param {boolean} [options.emit = true] emit the provided data.\n   * @return {void}\n   */\n  _setData (peerId, data, { emit = true } = {}) {\n    const b58key = peerId.toB58String()\n\n    // Store data in memory\n    this.data.set(b58key, data)\n\n    // Emit event\n    emit && this._emit(peerId, data)\n  }\n\n  /**\n   * Emit data.\n   * @private\n   * @param {PeerId} peerId\n   * @param {*} data\n   */\n  _emit (peerId, data) {\n    this._ps.emit(this.eventName, {\n      peerId,\n      [this.eventProperty]: this.eventTransformer(data)\n    })\n  }\n\n  /**\n   * Get the known data of a provided peer.\n   * @param {PeerId} peerId\n   * @returns {Array<Data>}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    return rec ? [...rec] : undefined\n  }\n\n  /**\n   * Deletes the provided peer from the book.\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n  delete (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false\n    }\n\n    this._emit(peerId, [])\n\n    return true\n  }\n}\n\nmodule.exports = Book\n"]},"metadata":{},"sourceType":"script"}