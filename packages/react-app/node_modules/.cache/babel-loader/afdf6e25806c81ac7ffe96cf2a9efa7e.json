{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar log = require('debug')('ipfs:mfs:stat');\n\nvar errCode = require('err-code');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar defaultOptions = {\n  withLocal: false,\n  signal: undefined\n};\n\nmodule.exports = function (context) {\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _mfsStat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options) {\n      var _yield$toMfsPath, type, cid, mfsPath, exportPath, file;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = applyDefaultOptions(options, defaultOptions);\n              log(\"Fetching stats for \".concat(path));\n              _context.next = 4;\n              return toMfsPath(context, path, options);\n\n            case 4:\n              _yield$toMfsPath = _context.sent;\n              type = _yield$toMfsPath.type;\n              cid = _yield$toMfsPath.cid;\n              mfsPath = _yield$toMfsPath.mfsPath;\n              exportPath = type === 'ipfs' && cid ? cid : mfsPath;\n              _context.prev = 9;\n              _context.next = 12;\n              return exporter(exportPath, context.ipld);\n\n            case 12:\n              file = _context.sent;\n              _context.next = 20;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](9);\n\n              if (!(_context.t0.code === 'ERR_NOT_FOUND')) {\n                _context.next = 19;\n                break;\n              }\n\n              throw errCode(new Error(\"\".concat(path, \" does not exist\")), 'ERR_NOT_FOUND');\n\n            case 19:\n              throw _context.t0;\n\n            case 20:\n              if (statters[file.cid.codec]) {\n                _context.next = 22;\n                break;\n              }\n\n              throw new Error(\"Cannot stat codec \".concat(file.cid.codec));\n\n            case 22:\n              return _context.abrupt(\"return\", statters[file.cid.codec](file, options));\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[9, 15]]);\n    }));\n\n    function mfsStat(_x, _x2) {\n      return _mfsStat.apply(this, arguments);\n    }\n\n    return mfsStat;\n  }());\n};\n\nvar statters = {\n  raw: function raw(file) {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n  'dag-pb': function dagPb(file) {\n    var blocks = file.node.Links.length;\n    var size = file.node.size;\n    var cumulativeSize = file.node.size;\n    var output = {\n      cid: file.cid,\n      size: size,\n      cumulativeSize: cumulativeSize,\n      blocks: blocks,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n\n    if (file.unixfs) {\n      output.size = file.unixfs.fileSize(); // for go-ipfs compatibility\n\n      if (file.unixfs.type === 'hamt-sharded-directory') {\n        output.type = 'directory';\n      } else {\n        output.type = file.unixfs.type;\n      }\n\n      output.mode = file.unixfs.mode;\n\n      if (file.unixfs.isDirectory()) {\n        output.size = 0;\n        output.cumulativeSize = file.node.size;\n      }\n\n      if (output.type === 'file') {\n        output.blocks = file.unixfs.blockSizes.length;\n      }\n\n      if (file.unixfs.mtime) {\n        output.mtime = file.unixfs.mtime;\n      }\n    }\n\n    return output;\n  },\n  'dag-cbor': function dagCbor(file) {\n    return {\n      cid: file.cid,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n  identity: function identity(file) {\n    return {\n      cid: file.cid,\n      size: file.node.digest.length,\n      cumulativeSize: file.node.digest.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/stat.js"],"names":["applyDefaultOptions","require","toMfsPath","exporter","log","errCode","withTimeoutOption","defaultOptions","withLocal","signal","undefined","module","exports","context","path","options","type","cid","mfsPath","exportPath","ipld","file","code","Error","statters","codec","mfsStat","raw","size","node","length","cumulativeSize","blocks","local","sizeLocal","withLocality","Links","output","unixfs","fileSize","mode","isDirectory","blockSizes","mtime","identity","digest"],"mappings":"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","sourcesContent":["'use strict'\n\nconst applyDefaultOptions = require('./utils/apply-default-options')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst exporter = require('ipfs-unixfs-exporter')\nconst log = require('debug')('ipfs:mfs:stat')\nconst errCode = require('err-code')\nconst { withTimeoutOption } = require('../../utils')\n\nconst defaultOptions = {\n  withLocal: false,\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  return withTimeoutOption(async function mfsStat (path, options) {\n    options = applyDefaultOptions(options, defaultOptions)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options)\n\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath\n    let file\n\n    try {\n      file = await exporter(exportPath, context.ipld)\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n      }\n\n      throw err\n    }\n\n    if (!statters[file.cid.codec]) {\n      throw new Error(`Cannot stat codec ${file.cid.codec}`)\n    }\n\n    return statters[file.cid.codec](file, options)\n  })\n}\n\nconst statters = {\n  raw: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  'dag-pb': (file) => {\n    const blocks = file.node.Links.length\n    const size = file.node.size\n    const cumulativeSize = file.node.size\n\n    const output = {\n      cid: file.cid,\n      size: size,\n      cumulativeSize: cumulativeSize,\n      blocks: blocks,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n\n    if (file.unixfs) {\n      output.size = file.unixfs.fileSize()\n\n      // for go-ipfs compatibility\n      if (file.unixfs.type === 'hamt-sharded-directory') {\n        output.type = 'directory'\n      } else {\n        output.type = file.unixfs.type\n      }\n\n      output.mode = file.unixfs.mode\n\n      if (file.unixfs.isDirectory()) {\n        output.size = 0\n        output.cumulativeSize = file.node.size\n      }\n\n      if (output.type === 'file') {\n        output.blocks = file.unixfs.blockSizes.length\n      }\n\n      if (file.unixfs.mtime) {\n        output.mtime = file.unixfs.mtime\n      }\n    }\n\n    return output\n  },\n  'dag-cbor': (file) => {\n    return {\n      cid: file.cid,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  identity: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.digest.length,\n      cumulativeSize: file.node.digest.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}