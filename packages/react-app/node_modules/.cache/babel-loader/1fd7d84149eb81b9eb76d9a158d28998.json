{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar abortable = require('abortable-iterator');\n\nvar toIterable = require('stream-to-it');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('./constants'),\n    CLOSE_TIMEOUT = _require2.CLOSE_TIMEOUT;\n\nvar toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:webrtc-star:socket');\nlog.error = debug('libp2p:webrtc-star:socket:error');\n\nvar toWebrtcMultiaddr = function toWebrtcMultiaddr(address, port) {\n  if (!address || !port) return undefined;\n\n  try {\n    return toMultiaddr(address, port);\n  } catch (err) {\n    log.error(err); // Account for mdns hostnames, just make it a local ip for now\n\n    return toMultiaddr('0.0.0.0', port);\n  }\n}; // Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\n\n\nmodule.exports = function (socket) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _toIterable$duplex = toIterable.duplex(socket),\n      _sink = _toIterable$duplex.sink,\n      source = _toIterable$duplex.source; // If the remote address was passed, use it - it may have the peer ID encapsulated\n\n\n  var remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort);\n  var localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort);\n  var maConn = {\n    sink: function sink(source) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (options.signal) {\n                  source = abortable(source, options.signal);\n                }\n\n                _context2.prev = 1;\n                _context2.next = 4;\n                return _sink(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _iteratorNormalCompletion = true;\n                          _didIteratorError = false;\n                          _context.prev = 2;\n                          _iterator = _asyncIterator(source);\n\n                        case 4:\n                          _context.next = 6;\n                          return _awaitAsyncGenerator(_iterator.next());\n\n                        case 6:\n                          _step = _context.sent;\n                          _iteratorNormalCompletion = _step.done;\n                          _context.next = 10;\n                          return _awaitAsyncGenerator(_step.value);\n\n                        case 10:\n                          _value = _context.sent;\n\n                          if (_iteratorNormalCompletion) {\n                            _context.next = 18;\n                            break;\n                          }\n\n                          chunk = _value;\n                          _context.next = 15;\n                          return Buffer.isBuffer(chunk) ? chunk : chunk.slice();\n\n                        case 15:\n                          _iteratorNormalCompletion = true;\n                          _context.next = 4;\n                          break;\n\n                        case 18:\n                          _context.next = 24;\n                          break;\n\n                        case 20:\n                          _context.prev = 20;\n                          _context.t0 = _context[\"catch\"](2);\n                          _didIteratorError = true;\n                          _iteratorError = _context.t0;\n\n                        case 24:\n                          _context.prev = 24;\n                          _context.prev = 25;\n\n                          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                            _context.next = 29;\n                            break;\n                          }\n\n                          _context.next = 29;\n                          return _awaitAsyncGenerator(_iterator.return());\n\n                        case 29:\n                          _context.prev = 29;\n\n                          if (!_didIteratorError) {\n                            _context.next = 32;\n                            break;\n                          }\n\n                          throw _iteratorError;\n\n                        case 32:\n                          return _context.finish(29);\n\n                        case 33:\n                          return _context.finish(24);\n\n                        case 34:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n                }))());\n\n              case 4:\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                // If aborted we can safely ignore\n                if (_context2.t0.type !== 'aborted') {\n                  // If the source errored the socket will already have been destroyed by\n                  // toIterable.duplex(). If the socket errored it will already be\n                  // destroyed. There's nothing to do here except log the error & return.\n                  log.error(_context2.t0);\n                }\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 6]]);\n      }))();\n    },\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: socket,\n    localAddr: localAddr,\n    remoteAddr: remoteAddr,\n    timeline: {\n      open: Date.now()\n    },\n    close: function close() {\n      if (socket.destroyed) return;\n      return new Promise(function (resolve, reject) {\n        var start = Date.now(); // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n\n        var timeout = setTimeout(function () {\n          if (maConn.remoteAddr) {\n            var _maConn$remoteAddr$to = maConn.remoteAddr.toOptions(),\n                host = _maConn$remoteAddr$to.host,\n                port = _maConn$remoteAddr$to.port;\n\n            log('timeout closing socket to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy();\n          }\n        }, CLOSE_TIMEOUT);\n        socket.once('close', function () {\n          resolve();\n        });\n        socket.end(function (err) {\n          clearTimeout(timeout);\n          maConn.timeline.close = Date.now();\n          if (err) return reject(err);\n        });\n      });\n    }\n  };\n  socket.once('close', function () {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-webrtc-star/src/socket-to-conn.js"],"names":["abortable","require","toIterable","Buffer","CLOSE_TIMEOUT","toMultiaddr","debug","log","error","toWebrtcMultiaddr","address","port","undefined","err","module","exports","socket","options","duplex","sink","source","remoteAddr","remoteAddress","remotePort","localAddr","localAddress","localPort","maConn","signal","chunk","isBuffer","slice","type","conn","timeline","open","Date","now","close","destroyed","Promise","resolve","reject","start","timeout","setTimeout","toOptions","host","destroy","once","end","clearTimeout"],"mappings":"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","sourcesContent":["'use strict'\n\nconst abortable = require('abortable-iterator')\nconst toIterable = require('stream-to-it')\nconst { Buffer } = require('buffer')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst debug = require('debug')\nconst log = debug('libp2p:webrtc-star:socket')\nlog.error = debug('libp2p:webrtc-star:socket:error')\n\nconst toWebrtcMultiaddr = (address, port) => {\n  if (!address || !port) return undefined\n\n  try {\n    return toMultiaddr(address, port)\n  } catch (err) {\n    log.error(err)\n    // Account for mdns hostnames, just make it a local ip for now\n    return toMultiaddr('0.0.0.0', port)\n  }\n}\n\n// Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\nmodule.exports = (socket, options = {}) => {\n  const { sink, source } = toIterable.duplex(socket)\n\n  // If the remote address was passed, use it - it may have the peer ID encapsulated\n  const remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort)\n  const localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort)\n\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield Buffer.isBuffer(chunk) ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n\n    conn: socket,\n\n    localAddr,\n    remoteAddr,\n\n    timeline: { open: Date.now() },\n\n    close () {\n      if (socket.destroyed) return\n\n      return new Promise((resolve, reject) => {\n        const start = Date.now()\n\n        // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n        const timeout = setTimeout(() => {\n          if (maConn.remoteAddr) {\n            const { host, port } = maConn.remoteAddr.toOptions()\n            log('timeout closing socket to %s:%s after %dms, destroying it manually',\n              host, port, Date.now() - start)\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy()\n          }\n        }, CLOSE_TIMEOUT)\n\n        socket.once('close', () => {\n          resolve()\n        })\n\n        socket.end(err => {\n          clearTimeout(timeout)\n\n          maConn.timeline.close = Date.now()\n          if (err) return reject(err)\n        })\n      })\n    }\n  }\n\n  socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"]},"metadata":{},"sourceType":"script"}