{"ast":null,"code":"'use strict';\n\nconst {\n  TieredDatastore\n} = require('datastore-core');\n\nconst get = require('dlv');\n\nconst PubsubDatastore = require('./pubsub-datastore');\n\nconst OfflineDatastore = require('./offline-datastore');\n\nmodule.exports = ({\n  libp2p,\n  repo,\n  peerId,\n  options\n}) => {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  const ipnsStores = []; // Add IPNS pubsub if enabled\n\n  let pubsubDs;\n\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    const pubsub = libp2p.pubsub;\n    const localDatastore = repo.datastore;\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId);\n    ipnsStores.push(pubsubDs);\n  } // DHT should not be added as routing if we are offline or it is disabled\n\n\n  if (get(options, 'offline') || !get(options, 'libp2p.config.dht.enabled', false)) {\n    const offlineDatastore = new OfflineDatastore(repo);\n    ipnsStores.push(offlineDatastore);\n  } else {\n    ipnsStores.push(libp2p._dht);\n  } // Create ipns routing with a set of datastores\n\n\n  return new TieredDatastore(ipnsStores);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/ipns/routing/config.js"],"names":["TieredDatastore","require","get","PubsubDatastore","OfflineDatastore","module","exports","libp2p","repo","peerId","options","ipnsStores","pubsubDs","pubsub","localDatastore","datastore","push","offlineDatastore","_dht"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAsBC,OAAO,CAAC,gBAAD,CAAnC;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAnB;;AAEA,MAAME,eAAe,GAAGF,OAAO,CAAC,oBAAD,CAA/B;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,qBAAD,CAAhC;;AAEAI,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA,MAAhB;AAAwBC,EAAAA;AAAxB,CAAD,KAAuC;AACtD;AACA,QAAMC,UAAU,GAAG,EAAnB,CAFsD,CAItD;;AACA,MAAIC,QAAJ;;AACA,MAAIV,GAAG,CAACQ,OAAD,EAAU,yBAAV,EAAqC,KAArC,CAAP,EAAoD;AAClD,UAAMG,MAAM,GAAGN,MAAM,CAACM,MAAtB;AACA,UAAMC,cAAc,GAAGN,IAAI,CAACO,SAA5B;AAEAH,IAAAA,QAAQ,GAAG,IAAIT,eAAJ,CAAoBU,MAApB,EAA4BC,cAA5B,EAA4CL,MAA5C,CAAX;AACAE,IAAAA,UAAU,CAACK,IAAX,CAAgBJ,QAAhB;AACD,GAZqD,CActD;;;AACA,MAAIV,GAAG,CAACQ,OAAD,EAAU,SAAV,CAAH,IAA2B,CAACR,GAAG,CAACQ,OAAD,EAAU,2BAAV,EAAuC,KAAvC,CAAnC,EAAkF;AAChF,UAAMO,gBAAgB,GAAG,IAAIb,gBAAJ,CAAqBI,IAArB,CAAzB;AACAG,IAAAA,UAAU,CAACK,IAAX,CAAgBC,gBAAhB;AACD,GAHD,MAGO;AACLN,IAAAA,UAAU,CAACK,IAAX,CAAgBT,MAAM,CAACW,IAAvB;AACD,GApBqD,CAsBtD;;;AACA,SAAO,IAAIlB,eAAJ,CAAoBW,UAApB,CAAP;AACD,CAxBD","sourcesContent":["'use strict'\n\nconst { TieredDatastore } = require('datastore-core')\nconst get = require('dlv')\n\nconst PubsubDatastore = require('./pubsub-datastore')\nconst OfflineDatastore = require('./offline-datastore')\n\nmodule.exports = ({ libp2p, repo, peerId, options }) => {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    const pubsub = libp2p.pubsub\n    const localDatastore = repo.datastore\n\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // DHT should not be added as routing if we are offline or it is disabled\n  if (get(options, 'offline') || !get(options, 'libp2p.config.dht.enabled', false)) {\n    const offlineDatastore = new OfflineDatastore(repo)\n    ipnsStores.push(offlineDatastore)\n  } else {\n    ipnsStores.push(libp2p._dht)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n"]},"metadata":{},"sourceType":"script"}