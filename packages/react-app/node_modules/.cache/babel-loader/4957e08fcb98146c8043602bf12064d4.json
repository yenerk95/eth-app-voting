{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGossipPeers = void 0;\n\nconst constants = __importStar(require(\"./constants\"));\n\nconst utils_1 = require(\"./utils\");\n/**\n * Given a topic, returns up to count peers subscribed to that topic\n *\n * @param {Gossipsub} router\n * @param {String} topic\n * @param {Number} count\n * @returns {Set<Peer>}\n *\n */\n\n\nfunction getGossipPeers(router, topic, count) {\n  const peersInTopic = router.topics.get(topic);\n\n  if (!peersInTopic) {\n    return new Set();\n  } // Adds all peers using our protocol\n\n\n  let peers = [];\n  peersInTopic.forEach(peer => {\n    if (peer.protocols.includes(constants.GossipsubID)) {\n      peers.push(peer);\n    }\n  }); // Pseudo-randomly shuffles peers\n\n  peers = utils_1.shuffle(peers);\n\n  if (count > 0 && peers.length > count) {\n    peers = peers.slice(0, count);\n  }\n\n  return new Set(peers);\n}\n\nexports.getGossipPeers = getGossipPeers;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-gossipsub/src/getGossipPeers.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","hasOwnProperty","call","exports","getGossipPeers","constants","require","utils_1","router","topic","count","peersInTopic","topics","Set","peers","forEach","peer","protocols","includes","GossipsubID","push","shuffle","length","slice"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getGossipPeers = void 0;\nconst constants = __importStar(require(\"./constants\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Given a topic, returns up to count peers subscribed to that topic\n *\n * @param {Gossipsub} router\n * @param {String} topic\n * @param {Number} count\n * @returns {Set<Peer>}\n *\n */\nfunction getGossipPeers(router, topic, count) {\n    const peersInTopic = router.topics.get(topic);\n    if (!peersInTopic) {\n        return new Set();\n    }\n    // Adds all peers using our protocol\n    let peers = [];\n    peersInTopic.forEach((peer) => {\n        if (peer.protocols.includes(constants.GossipsubID)) {\n            peers.push(peer);\n        }\n    });\n    // Pseudo-randomly shuffles peers\n    peers = utils_1.shuffle(peers);\n    if (count > 0 && peers.length > count) {\n        peers = peers.slice(0, count);\n    }\n    return new Set(peers);\n}\nexports.getGossipPeers = getGossipPeers;\n"]},"metadata":{},"sourceType":"script"}