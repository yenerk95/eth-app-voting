{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar crypto = require('libp2p-crypto');\n\nvar multihashing = require('multihashing-async');\n\nvar PeerId = require('peer-id');\n\nvar AbortController = require('abort-controller');\n\nvar errcode = require('err-code');\n\nvar times = require('p-times');\n\nvar c = require('./constants');\n\nvar _require = require('./utils'),\n    logger = _require.logger;\n\nvar RandomWalk = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {DHT} dht\n   * @param {object} options\n   * @param {randomWalkOptions.enabled} options.enabled\n   * @param {randomWalkOptions.queriesPerPeriod} options.queriesPerPeriod\n   * @param {randomWalkOptions.interval} options.interval\n   * @param {randomWalkOptions.timeout} options.timeout\n   * @param {randomWalkOptions.delay} options.delay\n   * @param {DHT} options.dht\n   */\n  function RandomWalk(dht, options) {\n    _classCallCheck(this, RandomWalk);\n\n    if (!dht) {\n      throw new Error('Random Walk needs an instance of the Kademlia DHT');\n    }\n\n    this._kadDHT = dht;\n    this._options = _objectSpread(_objectSpread({}, c.defaultRandomWalk), options);\n    this.log = logger(dht.peerId, 'random-walk');\n    this._timeoutId = undefined;\n  }\n  /**\n   * Start the Random Walk process. This means running a number of queries\n   * every interval requesting random data. This is done to keep the dht\n   * healthy over time.\n   *\n   * @returns {void}\n   */\n\n\n  _createClass(RandomWalk, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      // Don't run twice\n      if (this._timeoutId || !this._options.enabled) {\n        return;\n      } // Start doing random walks after `this._options.delay`\n\n\n      this._timeoutId = setTimeout(function () {\n        // Start runner immediately\n        _this._runPeriodically();\n      }, this._options.delay);\n    }\n    /**\n     * Stop the random-walk process. Any active\n     * queries will be aborted.\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timeoutId) {\n        clearTimeout(this._timeoutId);\n        this._timeoutId = undefined;\n      }\n\n      this._controller && this._controller.abort();\n    }\n    /**\n     * Run function `randomWalk._walk` on every `options.interval` ms\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_runPeriodically\",\n    value: function () {\n      var _runPeriodically2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._timeoutId) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.prev = 1;\n                _context.next = 4;\n                return this._walk(this._options.queriesPerPeriod, this._options.timeout);\n\n              case 4:\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](1);\n\n                this._kadDHT._log.error('random-walk:error', _context.t0);\n\n              case 9:\n                _context.next = 11;\n                return new Promise(function (resolve) {\n                  _this2._timeoutId = setTimeout(resolve, _this2._options.interval);\n                });\n\n              case 11:\n                _context.next = 0;\n                break;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 6]]);\n      }));\n\n      function _runPeriodically() {\n        return _runPeriodically2.apply(this, arguments);\n      }\n\n      return _runPeriodically;\n    }()\n    /**\n     * Do the random walk work.\n     *\n     * @param {number} queries\n     * @param {number} walkTimeout\n     * @returns {Promise}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_walk\",\n    value: function () {\n      var _walk2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(queries, walkTimeout) {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.log('start');\n                this._controller = new AbortController();\n                _context3.prev = 2;\n                _context3.next = 5;\n                return times(queries, /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(index) {\n                    var id;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _this3.log('running query %d', index);\n\n                            _context2.prev = 1;\n                            _context2.next = 4;\n                            return _this3._randomPeerId();\n\n                          case 4:\n                            id = _context2.sent;\n\n                            if (_this3._controller) {\n                              _context2.next = 7;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\");\n\n                          case 7:\n                            _context2.next = 9;\n                            return _this3._query(id, {\n                              timeout: walkTimeout,\n                              signal: _this3._controller.signal\n                            });\n\n                          case 9:\n                            _context2.next = 16;\n                            break;\n\n                          case 11:\n                            _context2.prev = 11;\n                            _context2.t0 = _context2[\"catch\"](1);\n\n                            if (!(_context2.t0 && _context2.t0.code !== 'ETIMEDOUT')) {\n                              _context2.next = 16;\n                              break;\n                            }\n\n                            _this3.log.error('query %d finished with error', index, _context2.t0);\n\n                            throw _context2.t0;\n\n                          case 16:\n                            _this3.log('finished query %d', index);\n\n                          case 17:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[1, 11]]);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 5:\n                _context3.prev = 5;\n                this._controller = null;\n                this.log('finished queries');\n                return _context3.finish(5);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2,, 5, 9]]);\n      }));\n\n      function _walk(_x, _x2) {\n        return _walk2.apply(this, arguments);\n      }\n\n      return _walk;\n    }()\n    /**\n     * The query run during a random walk request.\n     *\n     * TODO: While query currently supports an abort controller, it is not\n     * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82\n     * is complete, and AbortController support has been added to the\n     * DHT query functions, the abort here will just work, provided the\n     * functions support `options.signal`. Once done, this todo should be\n     * removed.\n     *\n     * @param {PeerId} id\n     * @param {object} options\n     * @param {number} options.timeout\n     * @param {AbortControllerSignal} options.signal\n     * @returns {Promise}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_query\",\n    value: function () {\n      var _query2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id, options) {\n        var peer;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.log('query:%s', id.toB58String());\n                _context4.prev = 1;\n                _context4.next = 4;\n                return this._kadDHT.findPeer(id, options);\n\n              case 4:\n                peer = _context4.sent;\n                _context4.next = 12;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                if (!(_context4.t0 && _context4.t0.code === 'ERR_NOT_FOUND')) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 11:\n                throw _context4.t0;\n\n              case 12:\n                this.log('query:found', peer); // wait what, there was something found? Lucky day!\n\n                throw errcode(\"random-walk: ACTUALLY FOUND PEER: \".concat(peer, \", \").concat(id.toB58String()), 'ERR_FOUND_RANDOM_PEER');\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 7]]);\n      }));\n\n      function _query(_x4, _x5) {\n        return _query2.apply(this, arguments);\n      }\n\n      return _query;\n    }()\n    /**\n     * Generate a random peer id for random-walk purposes.\n     *\n     * @returns {Promise<PeerId>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_randomPeerId\",\n    value: function () {\n      var _randomPeerId2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var digest;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return multihashing(crypto.randomBytes(16), 'sha2-256');\n\n              case 2:\n                digest = _context5.sent;\n                return _context5.abrupt(\"return\", new PeerId(digest));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function _randomPeerId() {\n        return _randomPeerId2.apply(this, arguments);\n      }\n\n      return _randomPeerId;\n    }()\n  }]);\n\n  return RandomWalk;\n}();\n\nmodule.exports = RandomWalk;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/random-walk.js"],"names":["crypto","require","multihashing","PeerId","AbortController","errcode","times","c","logger","RandomWalk","dht","options","Error","_kadDHT","_options","defaultRandomWalk","log","peerId","_timeoutId","undefined","enabled","setTimeout","_runPeriodically","delay","clearTimeout","_controller","abort","_walk","queriesPerPeriod","timeout","_log","error","Promise","resolve","interval","queries","walkTimeout","index","_randomPeerId","id","_query","signal","code","toB58String","findPeer","peer","randomBytes","digest","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst crypto = require('libp2p-crypto')\nconst multihashing = require('multihashing-async')\nconst PeerId = require('peer-id')\nconst AbortController = require('abort-controller')\nconst errcode = require('err-code')\nconst times = require('p-times')\nconst c = require('./constants')\nconst { logger } = require('./utils')\n\nclass RandomWalk {\n  /**\n   * @constructor\n   * @param {DHT} dht\n   * @param {object} options\n   * @param {randomWalkOptions.enabled} options.enabled\n   * @param {randomWalkOptions.queriesPerPeriod} options.queriesPerPeriod\n   * @param {randomWalkOptions.interval} options.interval\n   * @param {randomWalkOptions.timeout} options.timeout\n   * @param {randomWalkOptions.delay} options.delay\n   * @param {DHT} options.dht\n   */\n  constructor (dht, options) {\n    if (!dht) {\n      throw new Error('Random Walk needs an instance of the Kademlia DHT')\n    }\n\n    this._kadDHT = dht\n    this._options = {\n      ...c.defaultRandomWalk,\n      ...options\n    }\n\n    this.log = logger(dht.peerId, 'random-walk')\n    this._timeoutId = undefined\n  }\n\n  /**\n   * Start the Random Walk process. This means running a number of queries\n   * every interval requesting random data. This is done to keep the dht\n   * healthy over time.\n   *\n   * @returns {void}\n   */\n  start () {\n    // Don't run twice\n    if (this._timeoutId || !this._options.enabled) { return }\n\n    // Start doing random walks after `this._options.delay`\n    this._timeoutId = setTimeout(() => {\n      // Start runner immediately\n      this._runPeriodically()\n    }, this._options.delay)\n  }\n\n  /**\n   * Stop the random-walk process. Any active\n   * queries will be aborted.\n   *\n   * @returns {void}\n   */\n  stop () {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId)\n      this._timeoutId = undefined\n    }\n    this._controller && this._controller.abort()\n  }\n\n  /**\n   * Run function `randomWalk._walk` on every `options.interval` ms\n   *\n   * @private\n   */\n  async _runPeriodically () {\n    // run until the walk has been stopped\n    while (this._timeoutId) {\n      try {\n        await this._walk(this._options.queriesPerPeriod, this._options.timeout)\n      } catch (err) {\n        this._kadDHT._log.error('random-walk:error', err)\n      }\n      // Each subsequent walk should run on a `this._options.interval` interval\n      await new Promise(resolve => {\n        this._timeoutId = setTimeout(resolve, this._options.interval)\n      })\n    }\n  }\n\n  /**\n   * Do the random walk work.\n   *\n   * @param {number} queries\n   * @param {number} walkTimeout\n   * @returns {Promise}\n   *\n   * @private\n   */\n  async _walk (queries, walkTimeout) {\n    this.log('start')\n    this._controller = new AbortController()\n\n    try {\n      await times(queries, async (index) => {\n        this.log('running query %d', index)\n        try {\n          const id = await this._randomPeerId()\n\n          // Check if we've happened to already abort\n          if (!this._controller) return\n\n          await this._query(id, {\n            timeout: walkTimeout,\n            signal: this._controller.signal\n          })\n        } catch (err) {\n          if (err && err.code !== 'ETIMEDOUT') {\n            this.log.error('query %d finished with error', index, err)\n            throw err\n          }\n        }\n\n        this.log('finished query %d', index)\n      })\n    } finally {\n      this._controller = null\n      this.log('finished queries')\n    }\n  }\n\n  /**\n   * The query run during a random walk request.\n   *\n   * TODO: While query currently supports an abort controller, it is not\n   * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82\n   * is complete, and AbortController support has been added to the\n   * DHT query functions, the abort here will just work, provided the\n   * functions support `options.signal`. Once done, this todo should be\n   * removed.\n   *\n   * @param {PeerId} id\n   * @param {object} options\n   * @param {number} options.timeout\n   * @param {AbortControllerSignal} options.signal\n   * @returns {Promise}\n   *\n   * @private\n   */\n  async _query (id, options) {\n    this.log('query:%s', id.toB58String())\n\n    let peer\n    try {\n      peer = await this._kadDHT.findPeer(id, options)\n    } catch (err) {\n      if (err && err.code === 'ERR_NOT_FOUND') {\n        // expected case, we asked for random stuff after all\n        return\n      }\n\n      throw err\n    }\n\n    this.log('query:found', peer)\n\n    // wait what, there was something found? Lucky day!\n    throw errcode(`random-walk: ACTUALLY FOUND PEER: ${peer}, ${id.toB58String()}`, 'ERR_FOUND_RANDOM_PEER')\n  }\n\n  /**\n   * Generate a random peer id for random-walk purposes.\n   *\n   * @returns {Promise<PeerId>}\n   *\n   * @private\n   */\n  async _randomPeerId () {\n    const digest = await multihashing(crypto.randomBytes(16), 'sha2-256')\n    return new PeerId(digest)\n  }\n}\n\nmodule.exports = RandomWalk\n"]},"metadata":{},"sourceType":"script"}