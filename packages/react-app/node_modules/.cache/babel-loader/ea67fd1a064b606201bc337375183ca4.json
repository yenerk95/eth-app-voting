{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst errcode = require('err-code');\n\nconst utils = require('../../utils');\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:add-provider');\n  /**\n   * Process `AddProvider` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n\n  return async function addProvider(peerId, msg) {\n    // eslint-disable-line require-await\n    log('start');\n\n    if (!msg.key || msg.key.length === 0) {\n      throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY');\n    }\n\n    let cid;\n\n    try {\n      cid = new CID(msg.key);\n    } catch (err) {\n      const errMsg = `Invalid CID: ${err.message}`;\n      throw errcode(new Error(errMsg), 'ERR_INVALID_CID');\n    }\n\n    msg.providerPeers.forEach(pi => {\n      // Ignore providers not from the originator\n      if (!pi.id.isEqual(peerId)) {\n        log('invalid provider peer %s from %s', pi.id.toB58String(), peerId.toB58String());\n        return;\n      }\n\n      if (pi.multiaddrs.length < 1) {\n        log('no valid addresses for provider %s. Ignore', peerId.toB58String());\n        return;\n      }\n\n      log('received provider %s for %s (addrs %s)', peerId.toB58String(), cid.toBaseEncodedString(), pi.multiaddrs.map(m => m.toString()));\n\n      if (!dht._isSelf(pi.id)) {\n        // Add known address to peer store\n        dht.peerStore.addressBook.add(pi.id, pi.multiaddrs);\n        return dht.providers.addProvider(cid, pi.id);\n      }\n    }); // Previous versions of the JS DHT sent erroneous providers in the\n    // `providerPeers` field. In order to accommodate older clients that have\n    // this bug, we fall back to assuming the originator is the provider if\n    // we can't find any valid providers in the payload.\n    // https://github.com/libp2p/js-libp2p-kad-dht/pull/127\n    // https://github.com/libp2p/js-libp2p-kad-dht/issues/128\n\n    return dht.providers.addProvider(cid, peerId);\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/rpc/handlers/add-provider.js"],"names":["CID","require","errcode","utils","module","exports","dht","log","logger","peerId","addProvider","msg","key","length","Error","cid","err","errMsg","message","providerPeers","forEach","pi","id","isEqual","toB58String","multiaddrs","toBaseEncodedString","map","m","toString","_isSelf","peerStore","addressBook","add","providers"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAME,KAAK,GAAGF,OAAO,CAAC,aAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,kBAAzB,CAAZ;AACA;;;;;;;;AAOA,SAAO,eAAeC,WAAf,CAA4BD,MAA5B,EAAoCE,GAApC,EAAyC;AAAE;AAChDJ,IAAAA,GAAG,CAAC,OAAD,CAAH;;AAEA,QAAI,CAACI,GAAG,CAACC,GAAL,IAAYD,GAAG,CAACC,GAAJ,CAAQC,MAAR,KAAmB,CAAnC,EAAsC;AACpC,YAAMX,OAAO,CAAC,IAAIY,KAAJ,CAAU,aAAV,CAAD,EAA2B,iBAA3B,CAAb;AACD;;AAED,QAAIC,GAAJ;;AACA,QAAI;AACFA,MAAAA,GAAG,GAAG,IAAIf,GAAJ,CAAQW,GAAG,CAACC,GAAZ,CAAN;AACD,KAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,YAAMC,MAAM,GAAI,gBAAeD,GAAG,CAACE,OAAQ,EAA3C;AACA,YAAMhB,OAAO,CAAC,IAAIY,KAAJ,CAAUG,MAAV,CAAD,EAAoB,iBAApB,CAAb;AACD;;AAEDN,IAAAA,GAAG,CAACQ,aAAJ,CAAkBC,OAAlB,CAA2BC,EAAD,IAAQ;AAChC;AACA,UAAI,CAACA,EAAE,CAACC,EAAH,CAAMC,OAAN,CAAcd,MAAd,CAAL,EAA4B;AAC1BF,QAAAA,GAAG,CAAC,kCAAD,EAAqCc,EAAE,CAACC,EAAH,CAAME,WAAN,EAArC,EAA0Df,MAAM,CAACe,WAAP,EAA1D,CAAH;AACA;AACD;;AAED,UAAIH,EAAE,CAACI,UAAH,CAAcZ,MAAd,GAAuB,CAA3B,EAA8B;AAC5BN,QAAAA,GAAG,CAAC,4CAAD,EAA+CE,MAAM,CAACe,WAAP,EAA/C,CAAH;AACA;AACD;;AAEDjB,MAAAA,GAAG,CAAC,wCAAD,EAA2CE,MAAM,CAACe,WAAP,EAA3C,EAAiET,GAAG,CAACW,mBAAJ,EAAjE,EAA4FL,EAAE,CAACI,UAAH,CAAcE,GAAd,CAAmBC,CAAD,IAAOA,CAAC,CAACC,QAAF,EAAzB,CAA5F,CAAH;;AAEA,UAAI,CAACvB,GAAG,CAACwB,OAAJ,CAAYT,EAAE,CAACC,EAAf,CAAL,EAAyB;AACvB;AACAhB,QAAAA,GAAG,CAACyB,SAAJ,CAAcC,WAAd,CAA0BC,GAA1B,CAA8BZ,EAAE,CAACC,EAAjC,EAAqCD,EAAE,CAACI,UAAxC;AACA,eAAOnB,GAAG,CAAC4B,SAAJ,CAAcxB,WAAd,CAA0BK,GAA1B,EAA+BM,EAAE,CAACC,EAAlC,CAAP;AACD;AACF,KAnBD,EAf8C,CAoC9C;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOhB,GAAG,CAAC4B,SAAJ,CAAcxB,WAAd,CAA0BK,GAA1B,EAA+BN,MAA/B,CAAP;AACD,GA3CD;AA4CD,CArDD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst errcode = require('err-code')\n\nconst utils = require('../../utils')\n\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:add-provider')\n  /**\n   * Process `AddProvider` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n  return async function addProvider (peerId, msg) { // eslint-disable-line require-await\n    log('start')\n\n    if (!msg.key || msg.key.length === 0) {\n      throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY')\n    }\n\n    let cid\n    try {\n      cid = new CID(msg.key)\n    } catch (err) {\n      const errMsg = `Invalid CID: ${err.message}`\n      throw errcode(new Error(errMsg), 'ERR_INVALID_CID')\n    }\n\n    msg.providerPeers.forEach((pi) => {\n      // Ignore providers not from the originator\n      if (!pi.id.isEqual(peerId)) {\n        log('invalid provider peer %s from %s', pi.id.toB58String(), peerId.toB58String())\n        return\n      }\n\n      if (pi.multiaddrs.length < 1) {\n        log('no valid addresses for provider %s. Ignore', peerId.toB58String())\n        return\n      }\n\n      log('received provider %s for %s (addrs %s)', peerId.toB58String(), cid.toBaseEncodedString(), pi.multiaddrs.map((m) => m.toString()))\n\n      if (!dht._isSelf(pi.id)) {\n        // Add known address to peer store\n        dht.peerStore.addressBook.add(pi.id, pi.multiaddrs)\n        return dht.providers.addProvider(cid, pi.id)\n      }\n    })\n\n    // Previous versions of the JS DHT sent erroneous providers in the\n    // `providerPeers` field. In order to accommodate older clients that have\n    // this bug, we fall back to assuming the originator is the provider if\n    // we can't find any valid providers in the payload.\n    // https://github.com/libp2p/js-libp2p-kad-dht/pull/127\n    // https://github.com/libp2p/js-libp2p-kad-dht/issues/128\n    return dht.providers.addProvider(cid, peerId)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}