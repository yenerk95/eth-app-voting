{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar UnixFs = require('ipfs-unixfs');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nvar mc = require('multicodec');\n\nvar mh = require('multihashing-async').multihash;\n\nvar errCode = require('err-code');\n\nvar _require2 = require('../../../utils'),\n    MFS_ROOT_KEY = _require2.MFS_ROOT_KEY;\n\nvar loadMfsRoot = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, options) {\n    var cid, buf, node;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(options && options.signal && options.signal.aborted)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n              name: 'Aborted'\n            });\n\n          case 2:\n            _context.next = 4;\n            return context.repo.datastore.open();\n\n          case 4:\n            _context.prev = 4;\n            _context.next = 7;\n            return context.repo.datastore.get(MFS_ROOT_KEY);\n\n          case 7:\n            buf = _context.sent;\n            cid = new CID(buf);\n            _context.next = 24;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](4);\n\n            if (!(_context.t0.code !== 'ERR_NOT_FOUND')) {\n              _context.next = 15;\n              break;\n            }\n\n            throw _context.t0;\n\n          case 15:\n            log('Creating new MFS root');\n            node = new DAGNode(new UnixFs({\n              type: 'directory'\n            }).marshal());\n            _context.next = 19;\n            return context.ipld.put(node, mc.DAG_PB, {\n              cidVersion: 0,\n              hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n\n            });\n\n          case 19:\n            cid = _context.sent;\n\n            if (!(options && options.signal && options.signal.aborted)) {\n              _context.next = 22;\n              break;\n            }\n\n            throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n              name: 'Aborted'\n            });\n\n          case 22:\n            _context.next = 24;\n            return context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);\n\n          case 24:\n            log(\"Loaded MFS root /ipfs/\".concat(cid));\n            return _context.abrupt(\"return\", cid);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 11]]);\n  }));\n\n  return function loadMfsRoot(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = loadMfsRoot;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/utils/with-mfs-root.js"],"names":["CID","require","UnixFs","DAGNode","log","mc","mh","multihash","errCode","MFS_ROOT_KEY","loadMfsRoot","context","options","signal","aborted","Error","name","repo","datastore","open","get","buf","cid","code","node","type","marshal","ipld","put","DAG_PB","cidVersion","hashAlg","names","buffer","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;eAGIA,OAAO,CAAC,aAAD,C;IADTE,O,YAAAA,O;;AAEF,IAAMC,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;;AACA,IAAMI,EAAE,GAAGJ,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAMK,EAAE,GAAGL,OAAO,CAAC,oBAAD,CAAP,CAA8BM,SAAzC;;AACA,IAAMC,OAAO,GAAGP,OAAO,CAAC,UAAD,CAAvB;;gBAIIA,OAAO,CAAC,gBAAD,C;IADTQ,Y,aAAAA,Y;;AAGF,IAAMC,WAAW;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACdA,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAD9B;AAAA;AAAA;AAAA;;AAAA,kBAEVN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAA9C,CAFG;;AAAA;AAAA;AAAA,mBAMZL,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBC,IAAvB,EANY;;AAAA;AAAA;AAAA;AAAA,mBAYER,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBE,GAAvB,CAA2BX,YAA3B,CAZF;;AAAA;AAYVY,YAAAA,GAZU;AAchBC,YAAAA,GAAG,GAAG,IAAItB,GAAJ,CAAQqB,GAAR,CAAN;AAdgB;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAgBZ,YAAIE,IAAJ,KAAa,eAhBD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAoBhBnB,YAAAA,GAAG,CAAC,uBAAD,CAAH;AACMoB,YAAAA,IArBU,GAqBH,IAAIrB,OAAJ,CAAY,IAAID,MAAJ,CAAW;AAAEuB,cAAAA,IAAI,EAAE;AAAR,aAAX,EAAkCC,OAAlC,EAAZ,CArBG;AAAA;AAAA,mBAsBJf,OAAO,CAACgB,IAAR,CAAaC,GAAb,CAAiBJ,IAAjB,EAAuBnB,EAAE,CAACwB,MAA1B,EAAkC;AAC5CC,cAAAA,UAAU,EAAE,CADgC;AAE5CC,cAAAA,OAAO,EAAEzB,EAAE,CAAC0B,KAAH,CAAS,UAAT,CAFmC,CAEd;;AAFc,aAAlC,CAtBI;;AAAA;AAsBhBV,YAAAA,GAtBgB;;AAAA,kBA2BZV,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OA3BhC;AAAA;AAAA;AAAA;;AAAA,kBA4BRN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAA9C,CA5BC;;AAAA;AAAA;AAAA,mBA+BVL,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBU,GAAvB,CAA2BnB,YAA3B,EAAyCa,GAAG,CAACW,MAA7C,CA/BU;;AAAA;AAkClB7B,YAAAA,GAAG,iCAA0BkB,GAA1B,EAAH;AAlCkB,6CAoCXA,GApCW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXZ,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAuCAwB,MAAM,CAACC,OAAP,GAAiBzB,WAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst UnixFs = require('ipfs-unixfs')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root')\nconst mc = require('multicodec')\nconst mh = require('multihashing-async').multihash\nconst errCode = require('err-code')\n\nconst {\n  MFS_ROOT_KEY\n} = require('../../../utils')\n\nconst loadMfsRoot = async (context, options) => {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = new CID(buf)\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const node = new DAGNode(new UnixFs({ type: 'directory' }).marshal())\n    cid = await context.ipld.put(node, mc.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n    })\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n\nmodule.exports = loadMfsRoot\n"]},"metadata":{},"sourceType":"script"}