{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar errCode = require('err-code');\n\nvar extractDataFromBlock = require('../utils/extract-data-from-block');\n\nvar validateOffsetAndLength = require('../utils/validate-offset-and-length');\n\nvar mh = require('multihashing-async').multihash;\n\nvar rawContent = function rawContent(node) {\n  return /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var options,\n        _validateOffsetAndLen,\n        offset,\n        length,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _validateOffsetAndLen = validateOffsetAndLength(node.length, options.offset, options.length), offset = _validateOffsetAndLen.offset, length = _validateOffsetAndLen.length;\n            _context.next = 4;\n            return extractDataFromBlock(node, 0, offset, offset + length);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  });\n};\n\nvar resolve = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cid, name, path, toResolve, _resolve, depth, ipld, options) {\n    var buf;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!toResolve.length) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"No link named \".concat(path, \" found in raw node \").concat(cid.toBaseEncodedString())), 'ERR_NOT_FOUND');\n\n          case 2:\n            _context2.next = 4;\n            return mh.decode(cid.multihash);\n\n          case 4:\n            buf = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              entry: {\n                name: name,\n                path: path,\n                cid: cid,\n                node: buf,\n                content: rawContent(buf.digest),\n                depth: depth\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function resolve(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = resolve;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-exporter/src/resolvers/identity.js"],"names":["errCode","require","extractDataFromBlock","validateOffsetAndLength","mh","multihash","rawContent","node","options","length","offset","resolve","cid","name","path","toResolve","depth","ipld","Error","toBaseEncodedString","decode","buf","entry","content","digest","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,kCAAD,CAApC;;AACA,IAAME,uBAAuB,GAAGF,OAAO,CAAC,qCAAD,CAAvC;;AACA,IAAMG,EAAE,GAAGH,OAAO,CAAC,oBAAD,CAAP,CAA8BI,SAAzC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AAC3B,+CAAO;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAYC,YAAAA,OAAZ,2DAAsB,EAAtB;AAAA,oCAIDL,uBAAuB,CAACI,IAAI,CAACE,MAAN,EAAcD,OAAO,CAACE,MAAtB,EAA8BF,OAAO,CAACC,MAAtC,CAJtB,EAEHC,MAFG,yBAEHA,MAFG,EAGHD,MAHG,yBAGHA,MAHG;AAAA;AAML,mBAAMP,oBAAoB,CAACK,IAAD,EAAO,CAAP,EAAUG,MAAV,EAAkBA,MAAM,GAAGD,MAA3B,CAA1B;;AANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAQD,CATD;;AAWA,IAAME,OAAO;AAAA,sEAAG,kBAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCJ,QAAnC,EAA4CK,KAA5C,EAAmDC,IAAnD,EAAyDT,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACVO,SAAS,CAACN,MADA;AAAA;AAAA;AAAA;;AAAA,kBAENT,OAAO,CAAC,IAAIkB,KAAJ,yBAA2BJ,IAA3B,gCAAqDF,GAAG,CAACO,mBAAJ,EAArD,EAAD,EAAoF,eAApF,CAFD;;AAAA;AAAA;AAAA,mBAKIf,EAAE,CAACgB,MAAH,CAAUR,GAAG,CAACP,SAAd,CALJ;;AAAA;AAKRgB,YAAAA,GALQ;AAAA,8CAOP;AACLC,cAAAA,KAAK,EAAE;AACLT,gBAAAA,IAAI,EAAJA,IADK;AAELC,gBAAAA,IAAI,EAAJA,IAFK;AAGLF,gBAAAA,GAAG,EAAHA,GAHK;AAILL,gBAAAA,IAAI,EAAEc,GAJD;AAKLE,gBAAAA,OAAO,EAAEjB,UAAU,CAACe,GAAG,CAACG,MAAL,CALd;AAMLR,gBAAAA,KAAK,EAALA;AANK;AADF,aAPO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA;AAAA;AAAA;AAAA,GAAb;;AAmBAS,MAAM,CAACC,OAAP,GAAiBf,OAAjB","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst extractDataFromBlock = require('../utils/extract-data-from-block')\nconst validateOffsetAndLength = require('../utils/validate-offset-and-length')\nconst mh = require('multihashing-async').multihash\n\nconst rawContent = (node) => {\n  return function * (options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length)\n\n    yield extractDataFromBlock(node, 0, offset, offset + length)\n  }\n}\n\nconst resolve = async (cid, name, path, toResolve, resolve, depth, ipld, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid.toBaseEncodedString()}`), 'ERR_NOT_FOUND')\n  }\n\n  const buf = await mh.decode(cid.multihash)\n\n  return {\n    entry: {\n      name,\n      path,\n      cid,\n      node: buf,\n      content: rawContent(buf.digest),\n      depth\n    }\n  }\n}\n\nmodule.exports = resolve\n"]},"metadata":{},"sourceType":"script"}