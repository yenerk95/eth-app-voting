{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Datastore = require('datastore-fs');\n\nvar log = require('debug')('repo-migrations:repo:init');\n\nvar Key = require('interface-datastore').Key;\n\nvar versionKey = new Key('/version');\nvar configKey = new Key('/config');\n\nexports.isRepoInitialized = /*#__PURE__*/function () {\n  var _isRepoInitialized = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var root, versionCheck, configCheck;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            root = new Datastore(path, {\n              extension: '',\n              createIfMissing: false\n            });\n            _context.next = 4;\n            return root.open();\n\n          case 4:\n            _context.next = 6;\n            return root.has(versionKey);\n\n          case 6:\n            versionCheck = _context.sent;\n            _context.next = 9;\n            return root.has(configKey);\n\n          case 9:\n            configCheck = _context.sent;\n\n            if (!(!versionCheck || !configCheck)) {\n              _context.next = 14;\n              break;\n            }\n\n            log(\"Version entry present: \".concat(versionCheck));\n            log(\"Config entry present: \".concat(configCheck));\n            return _context.abrupt(\"return\", false);\n\n          case 14:\n            return _context.abrupt(\"return\", true);\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](0);\n            log('While checking if repo is initialized error was thrown: ' + _context.t0.message);\n            return _context.abrupt(\"return\", false);\n\n          case 21:\n            _context.prev = 21;\n\n            if (!(root !== undefined)) {\n              _context.next = 25;\n              break;\n            }\n\n            _context.next = 25;\n            return root.close();\n\n          case 25:\n            return _context.finish(21);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 17, 21, 26]]);\n  }));\n\n  function isRepoInitialized(_x) {\n    return _isRepoInitialized.apply(this, arguments);\n  }\n\n  return isRepoInitialized;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo-migrations/src/repo/init.js"],"names":["Datastore","require","log","Key","versionKey","configKey","exports","isRepoInitialized","path","root","extension","createIfMissing","open","has","versionCheck","configCheck","message","undefined","close"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,2BAAjB,CAAZ;;AAEA,IAAME,GAAG,GAAGF,OAAO,CAAC,qBAAD,CAAP,CAA+BE,GAA3C;;AAEA,IAAMC,UAAU,GAAG,IAAID,GAAJ,CAAQ,UAAR,CAAnB;AACA,IAAME,SAAS,GAAG,IAAIF,GAAJ,CAAQ,SAAR,CAAlB;;AAEAG,OAAO,CAACC,iBAAR;AAAA,oFAA4B,iBAAkCC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGxBC,YAAAA,IAAI,GAAG,IAAIT,SAAJ,CAAcQ,IAAd,EAAoB;AAAEE,cAAAA,SAAS,EAAE,EAAb;AAAiBC,cAAAA,eAAe,EAAE;AAAlC,aAApB,CAAP;AAHwB;AAAA,mBAIlBF,IAAI,CAACG,IAAL,EAJkB;;AAAA;AAAA;AAAA,mBAKGH,IAAI,CAACI,GAAL,CAAST,UAAT,CALH;;AAAA;AAKlBU,YAAAA,YALkB;AAAA;AAAA,mBAMEL,IAAI,CAACI,GAAL,CAASR,SAAT,CANF;;AAAA;AAMlBU,YAAAA,WANkB;;AAAA,kBAOpB,CAACD,YAAD,IAAiB,CAACC,WAPE;AAAA;AAAA;AAAA;;AAQtBb,YAAAA,GAAG,kCAA2BY,YAA3B,EAAH;AACAZ,YAAAA,GAAG,iCAA0Ba,WAA1B,EAAH;AATsB,6CAUf,KAVe;;AAAA;AAAA,6CAajB,IAbiB;;AAAA;AAAA;AAAA;AAexBb,YAAAA,GAAG,CAAC,6DAA6D,YAAEc,OAAhE,CAAH;AAfwB,6CAgBjB,KAhBiB;;AAAA;AAAA;;AAAA,kBAkBpBP,IAAI,KAAKQ,SAlBW;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkBMR,IAAI,CAACS,KAAL,EAlBN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA,WAA2CX,iBAA3C;AAAA;AAAA;;AAAA,SAA2CA,iBAA3C;AAAA","sourcesContent":["'use strict'\n\nconst Datastore = require('datastore-fs')\nconst log = require('debug')('repo-migrations:repo:init')\n\nconst Key = require('interface-datastore').Key\n\nconst versionKey = new Key('/version')\nconst configKey = new Key('/config')\n\nexports.isRepoInitialized = async function isRepoInitialized (path) {\n  let root\n  try {\n    root = new Datastore(path, { extension: '', createIfMissing: false })\n    await root.open()\n    const versionCheck = await root.has(versionKey)\n    const configCheck = await root.has(configKey)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) await root.close()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}