{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar batch = require('it-batch');\n\nfunction parallelBatch(_x, _x2) {\n  return _parallelBatch.apply(this, arguments);\n}\n\nfunction _parallelBatch() {\n  _parallelBatch = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, size) {\n    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, things, i, _yield$_awaitAsyncGen, res, _err;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            size = parseInt(size);\n\n            if (isNaN(size) || size < 1) {\n              size = 1;\n            }\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 4;\n            _iterator = _asyncIterator(batch(source, size));\n\n          case 6:\n            _context.next = 8;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 8:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 12;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 12:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 33;\n              break;\n            }\n\n            things = _value;\n            things = things.map(function (p) {\n              return p().then(function (res) {\n                return {\n                  res: res\n                };\n              }, function (err) {\n                return {\n                  err: err\n                };\n              });\n            });\n            i = 0;\n\n          case 17:\n            if (!(i < things.length)) {\n              _context.next = 30;\n              break;\n            }\n\n            _context.next = 20;\n            return _awaitAsyncGenerator(things[i]);\n\n          case 20:\n            _yield$_awaitAsyncGen = _context.sent;\n            res = _yield$_awaitAsyncGen.res;\n            _err = _yield$_awaitAsyncGen.err;\n\n            if (!_err) {\n              _context.next = 25;\n              break;\n            }\n\n            throw _err;\n\n          case 25:\n            _context.next = 27;\n            return res;\n\n          case 27:\n            i++;\n            _context.next = 17;\n            break;\n\n          case 30:\n            _iteratorNormalCompletion = true;\n            _context.next = 6;\n            break;\n\n          case 33:\n            _context.next = 39;\n            break;\n\n          case 35:\n            _context.prev = 35;\n            _context.t0 = _context[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 39:\n            _context.prev = 39;\n            _context.prev = 40;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 44;\n              break;\n            }\n\n            _context.next = 44;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 44:\n            _context.prev = 44;\n\n            if (!_didIteratorError) {\n              _context.next = 47;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 47:\n            return _context.finish(44);\n\n          case 48:\n            return _context.finish(39);\n\n          case 49:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 35, 39, 49], [40,, 44, 48]]);\n  }));\n  return _parallelBatch.apply(this, arguments);\n}\n\nmodule.exports = parallelBatch;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-parallel-batch/index.js"],"names":["batch","require","parallelBatch","source","size","parseInt","isNaN","things","map","p","then","res","err","i","length","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;;SAEiBC,a;;;;;8EAAjB,iBAAgCC,MAAhC,EAAwCC,IAAxC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEA,YAAAA,IAAI,GAAGC,QAAQ,CAACD,IAAD,CAAf;;AAEA,gBAAIE,KAAK,CAACF,IAAD,CAAL,IAAeA,IAAI,GAAG,CAA1B,EAA6B;AAC3BA,cAAAA,IAAI,GAAG,CAAP;AACD;;AALH;AAAA;AAAA;AAAA,uCAO2BJ,KAAK,CAACG,MAAD,EAASC,IAAT,CAPhC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAOiBG,YAAAA,MAPjB;AAQIA,YAAAA,MAAM,GAAGA,MAAM,CAACC,GAAP,CAAW,UAAAC,CAAC,EAAI;AACvB,qBAAOA,CAAC,GAAGC,IAAJ,CAAS,UAAAC,GAAG;AAAA,uBAAK;AAAEA,kBAAAA,GAAG,EAAHA;AAAF,iBAAL;AAAA,eAAZ,EAA2B,UAAAC,GAAG;AAAA,uBAAK;AAAEA,kBAAAA,GAAG,EAAHA;AAAF,iBAAL;AAAA,eAA9B,CAAP;AACD,aAFQ,CAAT;AAISC,YAAAA,CAZb,GAYiB,CAZjB;;AAAA;AAAA,kBAYoBA,CAAC,GAAGN,MAAM,CAACO,MAZ/B;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAaiCP,MAAM,CAACM,CAAD,CAbvC;;AAAA;AAAA;AAacF,YAAAA,GAbd,yBAacA,GAbd;AAamBC,YAAAA,IAbnB,yBAamBA,GAbnB;;AAAA,iBAeUA,IAfV;AAAA;AAAA;AAAA;;AAAA,kBAgBcA,IAhBd;;AAAA;AAAA;AAmBM,mBAAMD,GAAN;;AAnBN;AAYuCE,YAAAA,CAAC,EAZxC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBAE,MAAM,CAACC,OAAP,GAAiBd,aAAjB","sourcesContent":["'use strict'\n\nconst batch = require('it-batch')\n\nasync function * parallelBatch (source, size) {\n  size = parseInt(size)\n\n  if (isNaN(size) || size < 1) {\n    size = 1\n  }\n\n  for await (let things of batch(source, size)) {\n    things = things.map(p => {\n      return p().then(res => ({ res }), err => ({ err }))\n    })\n\n    for (let i = 0; i < things.length; i++) {\n      const { res, err } = await things[i]\n\n      if (err) {\n        throw err\n      }\n\n      yield res\n    }\n  }\n}\n\nmodule.exports = parallelBatch\n"]},"metadata":{},"sourceType":"script"}