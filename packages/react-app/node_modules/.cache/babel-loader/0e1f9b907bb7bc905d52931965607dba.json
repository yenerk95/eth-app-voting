{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:webrtc-star');\nlog.error = debug('libp2p:webrtc-star:error');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst errcode = require('err-code');\n\nconst withIs = require('class-is');\n\nconst {\n  AbortError\n} = require('abortable-iterator');\n\nconst SimplePeer = require('libp2p-webrtc-peer');\n\nconst {\n  supportsWebRTC: webrtcSupport\n} = require('ipfs-utils/src/supports');\n\nconst multiaddr = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst PeerId = require('peer-id');\n\nconst {\n  CODE_CIRCUIT\n} = require('./constants');\n\nconst createListener = require('./listener');\n\nconst toConnection = require('./socket-to-conn');\n\nconst {\n  cleanMultiaddr\n} = require('./utils');\n\nfunction noop() {}\n/**\n * @class WebRTCStar\n */\n\n\nclass WebRTCStar {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Upgrader} options.upgrader\n   */\n  constructor(options = {}) {\n    if (!options.upgrader) {\n      throw new Error('An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.');\n    }\n\n    this._upgrader = options.upgrader;\n    this._signallingAddr = undefined;\n    this.sioOptions = {\n      transports: ['websocket'],\n      'force new connection': true\n    };\n\n    if (options.wrtc) {\n      this.wrtc = options.wrtc;\n    }\n\n    this.listenersRefs = {}; // Discovery\n\n    this.discovery = new EventEmitter();\n    this.discovery.tag = 'webRTCStar';\n    this.discovery._isStarted = false;\n\n    this.discovery.start = () => {\n      this.discovery._isStarted = true;\n    };\n\n    this.discovery.stop = () => {\n      this.discovery._isStarted = false;\n    };\n\n    this._peerDiscovered = this._peerDiscovered.bind(this);\n  }\n  /**\n   * @async\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Connection} An upgraded Connection\n   */\n\n\n  async dial(ma, options = {}) {\n    const rawConn = await this._connect(ma, options);\n    const maConn = toConnection(rawConn, {\n      remoteAddr: ma,\n      signal: options.signal\n    });\n    log('new outbound connection %s', maConn.remoteAddr);\n    const conn = await this._upgrader.upgradeOutbound(maConn);\n    log('outbound connection %s upgraded', maConn.remoteAddr);\n    return conn;\n  }\n  /**\n   * @private\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Promise<SimplePeer>} Resolves a SimplePeer Webrtc channel\n   */\n\n\n  _connect(ma, options = {}) {\n    if (options.signal && options.signal.aborted) {\n      throw new AbortError();\n    }\n\n    const spOptions = {\n      initiator: true,\n      trickle: false\n    }; // Use custom WebRTC implementation\n\n    if (this.wrtc) {\n      spOptions.wrtc = this.wrtc;\n    }\n\n    const cOpts = ma.toOptions();\n    const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now();\n    const sioClient = this.listenersRefs[Object.keys(this.listenersRefs)[0]].io;\n    return new Promise((resolve, reject) => {\n      const start = Date.now();\n      let connected;\n      log('dialing %s:%s', cOpts.host, cOpts.port);\n      const channel = new SimplePeer(spOptions);\n\n      const onError = err => {\n        if (!connected) {\n          const msg = `connection error ${cOpts.host}:${cOpts.port}: ${err.message}`;\n          err.message = msg;\n          log.error(msg);\n          done(err);\n        }\n      };\n\n      const onTimeout = () => {\n        log('connnection timeout %s:%s', cOpts.host, cOpts.port);\n        const err = errcode(new Error(`connection timeout after ${Date.now() - start}ms`), 'ERR_CONNECT_TIMEOUT'); // Note: this will result in onError() being called\n\n        channel.emit('error', err);\n      };\n\n      const onConnect = () => {\n        connected = true;\n        log('connection opened %s:%s', cOpts.host, cOpts.port);\n        done(null);\n      };\n\n      const onAbort = () => {\n        log.error('connection aborted %s:%s', cOpts.host, cOpts.port);\n        channel.destroy();\n        done(new AbortError());\n      };\n\n      const done = err => {\n        channel.removeListener('timeout', onTimeout);\n        channel.removeListener('connect', onConnect);\n        options.signal && options.signal.removeEventListener('abort', onAbort);\n        err ? reject(err) : resolve(channel);\n      };\n\n      channel.on('error', onError);\n      channel.once('timeout', onTimeout);\n      channel.once('connect', onConnect);\n      channel.on('close', () => {\n        channel.removeListener('error', onError);\n      });\n      options.signal && options.signal.addEventListener('abort', onAbort);\n      channel.on('signal', signal => {\n        sioClient.emit('ss-handshake', {\n          intentId: intentId,\n          srcMultiaddr: this._signallingAddr.toString(),\n          dstMultiaddr: ma.toString(),\n          signal: signal\n        });\n      }); // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we\n      // are clueless as to why.\n\n      sioClient.on('ws-handshake', offer => {\n        if (offer.intentId === intentId && offer.err) {\n          reject(errcode(offer.err instanceof Error ? offer.err : new Error(offer.err), 'ERR_SIGNALLING_FAILED'));\n        }\n\n        if (offer.intentId !== intentId || !offer.answer || channel.destroyed) {\n          return;\n        }\n\n        channel.signal(offer.signal);\n      });\n    });\n  }\n  /**\n   * Creates a WebrtcStar listener. The provided `handler` function will be called\n   * anytime a new incoming Connection has been successfully upgraded via\n   * `upgrader.upgradeInbound`.\n   * @param {object} [options] simple-peer options for listener\n   * @param {function (Connection)} handler\n   * @returns {Listener} A WebrtcStar listener\n   */\n\n\n  createListener(options = {}, handler) {\n    if (!webrtcSupport && !this.wrtc) {\n      throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT');\n    }\n\n    if (typeof options === 'function') {\n      handler = options;\n      options = {};\n    }\n\n    handler = handler || noop;\n    return createListener({\n      handler,\n      upgrader: this._upgrader\n    }, this, options);\n  }\n  /**\n   * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n   * @param {Multiaddr[]} multiaddrs\n   * @returns {Multiaddr[]} Valid TCP multiaddrs\n   */\n\n\n  filter(multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n    return multiaddrs.filter(ma => {\n      if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n        return false;\n      }\n\n      return mafmt.WebRTCStar.matches(ma);\n    });\n  }\n\n  _peerDiscovered(maStr) {\n    if (!this.discovery._isStarted) return;\n    log('Peer Discovered:', maStr);\n    maStr = cleanMultiaddr(maStr);\n    const ma = multiaddr(maStr);\n    const peerId = PeerId.createFromB58String(ma.getPeerId());\n    this.discovery.emit('peer', {\n      id: peerId,\n      multiaddrs: [ma]\n    });\n  }\n\n}\n\nmodule.exports = withIs(WebRTCStar, {\n  className: 'WebRTCStar',\n  symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar'\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-webrtc-star/src/index.js"],"names":["debug","require","log","error","EventEmitter","errcode","withIs","AbortError","SimplePeer","supportsWebRTC","webrtcSupport","multiaddr","mafmt","PeerId","CODE_CIRCUIT","createListener","toConnection","cleanMultiaddr","noop","WebRTCStar","constructor","options","upgrader","Error","_upgrader","_signallingAddr","undefined","sioOptions","transports","wrtc","listenersRefs","discovery","tag","_isStarted","start","stop","_peerDiscovered","bind","dial","ma","rawConn","_connect","maConn","remoteAddr","signal","conn","upgradeOutbound","aborted","spOptions","initiator","trickle","cOpts","toOptions","intentId","Math","random","toString","Date","now","sioClient","Object","keys","io","Promise","resolve","reject","connected","host","port","channel","onError","err","msg","message","done","onTimeout","emit","onConnect","onAbort","destroy","removeListener","removeEventListener","on","once","addEventListener","srcMultiaddr","dstMultiaddr","offer","answer","destroyed","handler","filter","multiaddrs","Array","isArray","protoCodes","includes","matches","maStr","peerId","createFromB58String","getPeerId","id","module","exports","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:webrtc-star')\nlog.error = debug('libp2p:webrtc-star:error')\n\nconst { EventEmitter } = require('events')\nconst errcode = require('err-code')\nconst withIs = require('class-is')\n\nconst { AbortError } = require('abortable-iterator')\nconst SimplePeer = require('libp2p-webrtc-peer')\nconst { supportsWebRTC: webrtcSupport } = require('ipfs-utils/src/supports')\n\nconst multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\nconst PeerId = require('peer-id')\n\nconst { CODE_CIRCUIT } = require('./constants')\nconst createListener = require('./listener')\nconst toConnection = require('./socket-to-conn')\nconst { cleanMultiaddr } = require('./utils')\n\nfunction noop () { }\n\n/**\n * @class WebRTCStar\n */\nclass WebRTCStar {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Upgrader} options.upgrader\n   */\n  constructor (options = {}) {\n    if (!options.upgrader) {\n      throw new Error('An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.')\n    }\n\n    this._upgrader = options.upgrader\n\n    this._signallingAddr = undefined\n\n    this.sioOptions = {\n      transports: ['websocket'],\n      'force new connection': true\n    }\n\n    if (options.wrtc) {\n      this.wrtc = options.wrtc\n    }\n\n    this.listenersRefs = {}\n\n    // Discovery\n    this.discovery = new EventEmitter()\n    this.discovery.tag = 'webRTCStar'\n    this.discovery._isStarted = false\n    this.discovery.start = () => {\n      this.discovery._isStarted = true\n    }\n    this.discovery.stop = () => {\n      this.discovery._isStarted = false\n    }\n    this._peerDiscovered = this._peerDiscovered.bind(this)\n  }\n\n  /**\n   * @async\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Connection} An upgraded Connection\n   */\n  async dial (ma, options = {}) {\n    const rawConn = await this._connect(ma, options)\n    const maConn = toConnection(rawConn, { remoteAddr: ma, signal: options.signal })\n    log('new outbound connection %s', maConn.remoteAddr)\n    const conn = await this._upgrader.upgradeOutbound(maConn)\n    log('outbound connection %s upgraded', maConn.remoteAddr)\n    return conn\n  }\n\n  /**\n   * @private\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Promise<SimplePeer>} Resolves a SimplePeer Webrtc channel\n   */\n  _connect (ma, options = {}) {\n    if (options.signal && options.signal.aborted) {\n      throw new AbortError()\n    }\n\n    const spOptions = {\n      initiator: true,\n      trickle: false\n    }\n\n    // Use custom WebRTC implementation\n    if (this.wrtc) { spOptions.wrtc = this.wrtc }\n\n    const cOpts = ma.toOptions()\n\n    const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now()\n    const sioClient = this\n      .listenersRefs[Object.keys(this.listenersRefs)[0]].io\n\n    return new Promise((resolve, reject) => {\n      const start = Date.now()\n      let connected\n\n      log('dialing %s:%s', cOpts.host, cOpts.port)\n      const channel = new SimplePeer(spOptions)\n\n      const onError = (err) => {\n        if (!connected) {\n          const msg = `connection error ${cOpts.host}:${cOpts.port}: ${err.message}`\n\n          err.message = msg\n          log.error(msg)\n          done(err)\n        }\n      }\n\n      const onTimeout = () => {\n        log('connnection timeout %s:%s', cOpts.host, cOpts.port)\n        const err = errcode(new Error(`connection timeout after ${Date.now() - start}ms`), 'ERR_CONNECT_TIMEOUT')\n        // Note: this will result in onError() being called\n        channel.emit('error', err)\n      }\n\n      const onConnect = () => {\n        connected = true\n\n        log('connection opened %s:%s', cOpts.host, cOpts.port)\n        done(null)\n      }\n\n      const onAbort = () => {\n        log.error('connection aborted %s:%s', cOpts.host, cOpts.port)\n        channel.destroy()\n        done(new AbortError())\n      }\n\n      const done = (err) => {\n        channel.removeListener('timeout', onTimeout)\n        channel.removeListener('connect', onConnect)\n        options.signal && options.signal.removeEventListener('abort', onAbort)\n\n        err ? reject(err) : resolve(channel)\n      }\n\n      channel.on('error', onError)\n      channel.once('timeout', onTimeout)\n      channel.once('connect', onConnect)\n      channel.on('close', () => {\n        channel.removeListener('error', onError)\n      })\n      options.signal && options.signal.addEventListener('abort', onAbort)\n\n      channel.on('signal', (signal) => {\n        sioClient.emit('ss-handshake', {\n          intentId: intentId,\n          srcMultiaddr: this._signallingAddr.toString(),\n          dstMultiaddr: ma.toString(),\n          signal: signal\n        })\n      })\n\n      // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we\n      // are clueless as to why.\n      sioClient.on('ws-handshake', (offer) => {\n        if (offer.intentId === intentId && offer.err) {\n          reject(errcode(offer.err instanceof Error ? offer.err : new Error(offer.err), 'ERR_SIGNALLING_FAILED'))\n        }\n\n        if (offer.intentId !== intentId || !offer.answer || channel.destroyed) {\n          return\n        }\n\n        channel.signal(offer.signal)\n      })\n    })\n  }\n\n  /**\n   * Creates a WebrtcStar listener. The provided `handler` function will be called\n   * anytime a new incoming Connection has been successfully upgraded via\n   * `upgrader.upgradeInbound`.\n   * @param {object} [options] simple-peer options for listener\n   * @param {function (Connection)} handler\n   * @returns {Listener} A WebrtcStar listener\n   */\n  createListener (options = {}, handler) {\n    if (!webrtcSupport && !this.wrtc) {\n      throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT')\n    }\n\n    if (typeof options === 'function') {\n      handler = options\n      options = {}\n    }\n\n    handler = handler || noop\n\n    return createListener({ handler, upgrader: this._upgrader }, this, options)\n  }\n\n  /**\n   * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n   * @param {Multiaddr[]} multiaddrs\n   * @returns {Multiaddr[]} Valid TCP multiaddrs\n   */\n  filter (multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs]\n\n    return multiaddrs.filter((ma) => {\n      if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n        return false\n      }\n\n      return mafmt.WebRTCStar.matches(ma)\n    })\n  }\n\n  _peerDiscovered (maStr) {\n    if (!this.discovery._isStarted) return\n\n    log('Peer Discovered:', maStr)\n    maStr = cleanMultiaddr(maStr)\n\n    const ma = multiaddr(maStr)\n    const peerId = PeerId.createFromB58String(ma.getPeerId())\n\n    this.discovery.emit('peer', {\n      id: peerId,\n      multiaddrs: [ma]\n    })\n  }\n}\n\nmodule.exports = withIs(WebRTCStar, { className: 'WebRTCStar', symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar' })\n"]},"metadata":{},"sourceType":"script"}