{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Block = require('ipld-block');\n\nvar multihashing = require('multihashing-async');\n\nvar CID = require('cids');\n\nvar isIPFS = require('is-ipfs');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var blockService = _ref.blockService,\n      pin = _ref.pin,\n      gcLock = _ref.gcLock,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(block, options) {\n      var mhtype, format, cidVersion, multihash, cid, release;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n\n              if (!Array.isArray(block)) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Array is not supported');\n\n            case 3:\n              if (Block.isBlock(block)) {\n                _context.next = 16;\n                break;\n              }\n\n              if (!(options.cid && isIPFS.cid(options.cid))) {\n                _context.next = 8;\n                break;\n              }\n\n              block = new Block(block, CID.isCID(options.cid) ? options.cid : new CID(options.cid));\n              _context.next = 16;\n              break;\n\n            case 8:\n              mhtype = options.mhtype || 'sha2-256';\n              format = options.format || 'dag-pb';\n\n              if (options.version == null) {\n                // Pick appropriate CID version\n                cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1;\n              } else {\n                cidVersion = options.version;\n              }\n\n              _context.next = 13;\n              return multihashing(block, mhtype);\n\n            case 13:\n              multihash = _context.sent;\n              cid = new CID(cidVersion, format, multihash);\n              block = new Block(block, cid);\n\n            case 16:\n              _context.next = 18;\n              return gcLock.readLock();\n\n            case 18:\n              release = _context.sent;\n              _context.prev = 19;\n              _context.next = 22;\n              return blockService.put(block, {\n                signal: options.signal\n              });\n\n            case 22:\n              if (options.preload !== false) {\n                preload(block.cid);\n              }\n\n              if (!(options.pin === true)) {\n                _context.next = 26;\n                break;\n              }\n\n              _context.next = 26;\n              return pin.add(block.cid, {\n                recursive: true,\n                signal: options.signal\n              });\n\n            case 26:\n              return _context.abrupt(\"return\", block);\n\n            case 27:\n              _context.prev = 27;\n              release();\n              return _context.finish(27);\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[19,, 27, 30]]);\n    }));\n\n    function put(_x, _x2) {\n      return _put.apply(this, arguments);\n    }\n\n    return put;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/block/put.js"],"names":["Block","require","multihashing","CID","isIPFS","withTimeoutOption","module","exports","blockService","pin","gcLock","preload","block","options","Array","isArray","Error","isBlock","cid","isCID","mhtype","format","version","cidVersion","multihash","readLock","release","put","signal","add","recursive"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Block = require('ipld-block')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst isIPFS = require('is-ipfs')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ blockService, pin, gcLock, preload }) => {\n  return withTimeoutOption(async function put (block, options) {\n    options = options || {}\n\n    if (Array.isArray(block)) {\n      throw new Error('Array is not supported')\n    }\n\n    if (!Block.isBlock(block)) {\n      if (options.cid && isIPFS.cid(options.cid)) {\n        block = new Block(block, CID.isCID(options.cid) ? options.cid : new CID(options.cid))\n      } else {\n        const mhtype = options.mhtype || 'sha2-256'\n        const format = options.format || 'dag-pb'\n        let cidVersion\n\n        if (options.version == null) {\n          // Pick appropriate CID version\n          cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1\n        } else {\n          cidVersion = options.version\n        }\n\n        const multihash = await multihashing(block, mhtype)\n        const cid = new CID(cidVersion, format, multihash)\n\n        block = new Block(block, cid)\n      }\n    }\n\n    const release = await gcLock.readLock()\n\n    try {\n      await blockService.put(block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(block.cid)\n      }\n\n      if (options.pin === true) {\n        await pin.add(block.cid, {\n          recursive: true,\n          signal: options.signal\n        })\n      }\n\n      return block\n    } finally {\n      release()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}