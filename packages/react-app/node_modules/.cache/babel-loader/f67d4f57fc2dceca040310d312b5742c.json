{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Heartbeat = void 0;\n\nconst constants = __importStar(require(\"./constants\"));\n\nconst getGossipPeers_1 = require(\"./getGossipPeers\");\n\nconst utils_1 = require(\"./utils\"); // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\n\nconst errcode = require(\"err-code\");\n\nclass Heartbeat {\n  /**\n   * @param {Object} gossipsub\n   * @constructor\n   */\n  constructor(gossipsub) {\n    this.gossipsub = gossipsub;\n  }\n\n  start() {\n    if (this._heartbeatTimer) {\n      const errMsg = 'Heartbeat timer is already running';\n      this.gossipsub.log(errMsg);\n      throw errcode(new Error(errMsg), 'ERR_HEARTBEAT_ALREADY_RUNNING');\n    }\n\n    const heartbeat = this._heartbeat.bind(this);\n\n    const timeout = setTimeout(() => {\n      heartbeat();\n\n      this._heartbeatTimer.runPeriodically(heartbeat, constants.GossipsubHeartbeatInterval);\n    }, constants.GossipsubHeartbeatInitialDelay);\n    this._heartbeatTimer = {\n      _intervalId: undefined,\n      runPeriodically: (fn, period) => {\n        this._heartbeatTimer._intervalId = setInterval(fn, period);\n      },\n      cancel: () => {\n        clearTimeout(timeout);\n        clearInterval(this._heartbeatTimer._intervalId);\n      }\n    };\n  }\n  /**\n   * Unmounts the gossipsub protocol and shuts down every connection\n   * @override\n   * @returns {void}\n   */\n\n\n  stop() {\n    if (!this._heartbeatTimer) {\n      const errMsg = 'Heartbeat timer is not running';\n      this.gossipsub.log(errMsg);\n      throw errcode(new Error(errMsg), 'ERR_HEARTBEAT_NO_RUNNING');\n    }\n\n    this._heartbeatTimer.cancel();\n\n    this._heartbeatTimer = null;\n  }\n  /**\n   * Maintains the mesh and fanout maps in gossipsub.\n   *\n   * @returns {void}\n   */\n\n\n  _heartbeat() {\n    // flush pending control message from retries and gossip\n    // that hasn't been piggybacked since the last heartbeat\n    this.gossipsub._flush();\n    /**\n     * @type {Map<Peer, Array<String>>}\n     */\n\n\n    const tograft = new Map();\n    const toprune = new Map(); // maintain the mesh for topics we have joined\n\n    this.gossipsub.mesh.forEach((peers, topic) => {\n      // do we have enough peers?\n      if (peers.size < constants.GossipsubDlo) {\n        const ineed = constants.GossipsubD - peers.size;\n        const peersSet = getGossipPeers_1.getGossipPeers(this.gossipsub, topic, ineed);\n        peersSet.forEach(peer => {\n          // add topic peers not already in mesh\n          if (peers.has(peer)) {\n            return;\n          }\n\n          this.gossipsub.log('HEARTBEAT: Add mesh link to %s in %s', peer.id.toB58String(), topic);\n          peers.add(peer);\n          const peerGrafts = tograft.get(peer);\n\n          if (!peerGrafts) {\n            tograft.set(peer, [topic]);\n          } else {\n            peerGrafts.push(topic);\n          }\n        });\n      } // do we have to many peers?\n\n\n      if (peers.size > constants.GossipsubDhi) {\n        const idontneed = peers.size - constants.GossipsubD;\n        let peersArray = Array.from(peers);\n        peersArray = utils_1.shuffle(peersArray);\n        peersArray = peersArray.slice(0, idontneed);\n        peersArray.forEach(peer => {\n          this.gossipsub.log('HEARTBEAT: Remove mesh link to %s in %s', peer.id.toB58String(), topic);\n          peers.delete(peer);\n          const peerPrunes = toprune.get(peer);\n\n          if (!peerPrunes) {\n            toprune.set(peer, [topic]);\n          } else {\n            peerPrunes.push(topic);\n          }\n        });\n      }\n\n      this.gossipsub._emitGossip(topic, peers);\n    }); // expire fanout for topics we haven't published to in a while\n\n    const now = this.gossipsub._now();\n\n    this.gossipsub.lastpub.forEach((lastpb, topic) => {\n      if (lastpb + constants.GossipsubFanoutTTL < now) {\n        this.gossipsub.fanout.delete(topic);\n        this.gossipsub.lastpub.delete(topic);\n      }\n    }); // maintain our fanout for topics we are publishing but we have not joined\n\n    this.gossipsub.fanout.forEach((peers, topic) => {\n      // checks whether our peers are still in the topic\n      const topicGossip = this.gossipsub.topics.get(topic);\n      peers.forEach(peer => {\n        if (topicGossip.has(peer)) {\n          peers.delete(peer);\n        }\n      }); // do we need more peers?\n\n      if (peers.size < constants.GossipsubD) {\n        const ineed = constants.GossipsubD - peers.size;\n        const peersSet = getGossipPeers_1.getGossipPeers(this.gossipsub, topic, ineed);\n        peersSet.forEach(peer => {\n          if (!peers.has(peer)) {\n            return;\n          }\n\n          peers.add(peer);\n        });\n      }\n\n      this.gossipsub._emitGossip(topic, peers);\n    }); // send coalesced GRAFT/PRUNE messages (will piggyback gossip)\n\n    this.gossipsub._sendGraftPrune(tograft, toprune); // advance the message history window\n\n\n    this.gossipsub.messageCache.shift();\n    this.gossipsub.emit('gossipsub:heartbeat');\n  }\n\n}\n\nexports.Heartbeat = Heartbeat;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-gossipsub/src/heartbeat.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","hasOwnProperty","call","exports","Heartbeat","constants","require","getGossipPeers_1","utils_1","errcode","constructor","gossipsub","start","_heartbeatTimer","errMsg","log","Error","heartbeat","_heartbeat","bind","timeout","setTimeout","runPeriodically","GossipsubHeartbeatInterval","GossipsubHeartbeatInitialDelay","_intervalId","fn","period","setInterval","cancel","clearTimeout","clearInterval","stop","_flush","tograft","Map","toprune","mesh","forEach","peers","topic","size","GossipsubDlo","ineed","GossipsubD","peersSet","getGossipPeers","peer","has","id","toB58String","add","peerGrafts","set","push","GossipsubDhi","idontneed","peersArray","Array","from","shuffle","slice","delete","peerPrunes","_emitGossip","now","_now","lastpub","lastpb","GossipsubFanoutTTL","fanout","topicGossip","topics","_sendGraftPrune","messageCache","shift","emit"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Heartbeat = void 0;\nconst constants = __importStar(require(\"./constants\"));\nconst getGossipPeers_1 = require(\"./getGossipPeers\");\nconst utils_1 = require(\"./utils\");\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst errcode = require(\"err-code\");\nclass Heartbeat {\n    /**\n     * @param {Object} gossipsub\n     * @constructor\n     */\n    constructor(gossipsub) {\n        this.gossipsub = gossipsub;\n    }\n    start() {\n        if (this._heartbeatTimer) {\n            const errMsg = 'Heartbeat timer is already running';\n            this.gossipsub.log(errMsg);\n            throw errcode(new Error(errMsg), 'ERR_HEARTBEAT_ALREADY_RUNNING');\n        }\n        const heartbeat = this._heartbeat.bind(this);\n        const timeout = setTimeout(() => {\n            heartbeat();\n            this._heartbeatTimer.runPeriodically(heartbeat, constants.GossipsubHeartbeatInterval);\n        }, constants.GossipsubHeartbeatInitialDelay);\n        this._heartbeatTimer = {\n            _intervalId: undefined,\n            runPeriodically: (fn, period) => {\n                this._heartbeatTimer._intervalId = setInterval(fn, period);\n            },\n            cancel: () => {\n                clearTimeout(timeout);\n                clearInterval(this._heartbeatTimer._intervalId);\n            }\n        };\n    }\n    /**\n     * Unmounts the gossipsub protocol and shuts down every connection\n     * @override\n     * @returns {void}\n     */\n    stop() {\n        if (!this._heartbeatTimer) {\n            const errMsg = 'Heartbeat timer is not running';\n            this.gossipsub.log(errMsg);\n            throw errcode(new Error(errMsg), 'ERR_HEARTBEAT_NO_RUNNING');\n        }\n        this._heartbeatTimer.cancel();\n        this._heartbeatTimer = null;\n    }\n    /**\n     * Maintains the mesh and fanout maps in gossipsub.\n     *\n     * @returns {void}\n     */\n    _heartbeat() {\n        // flush pending control message from retries and gossip\n        // that hasn't been piggybacked since the last heartbeat\n        this.gossipsub._flush();\n        /**\n         * @type {Map<Peer, Array<String>>}\n         */\n        const tograft = new Map();\n        const toprune = new Map();\n        // maintain the mesh for topics we have joined\n        this.gossipsub.mesh.forEach((peers, topic) => {\n            // do we have enough peers?\n            if (peers.size < constants.GossipsubDlo) {\n                const ineed = constants.GossipsubD - peers.size;\n                const peersSet = getGossipPeers_1.getGossipPeers(this.gossipsub, topic, ineed);\n                peersSet.forEach((peer) => {\n                    // add topic peers not already in mesh\n                    if (peers.has(peer)) {\n                        return;\n                    }\n                    this.gossipsub.log('HEARTBEAT: Add mesh link to %s in %s', peer.id.toB58String(), topic);\n                    peers.add(peer);\n                    const peerGrafts = tograft.get(peer);\n                    if (!peerGrafts) {\n                        tograft.set(peer, [topic]);\n                    }\n                    else {\n                        peerGrafts.push(topic);\n                    }\n                });\n            }\n            // do we have to many peers?\n            if (peers.size > constants.GossipsubDhi) {\n                const idontneed = peers.size - constants.GossipsubD;\n                let peersArray = Array.from(peers);\n                peersArray = utils_1.shuffle(peersArray);\n                peersArray = peersArray.slice(0, idontneed);\n                peersArray.forEach((peer) => {\n                    this.gossipsub.log('HEARTBEAT: Remove mesh link to %s in %s', peer.id.toB58String(), topic);\n                    peers.delete(peer);\n                    const peerPrunes = toprune.get(peer);\n                    if (!peerPrunes) {\n                        toprune.set(peer, [topic]);\n                    }\n                    else {\n                        peerPrunes.push(topic);\n                    }\n                });\n            }\n            this.gossipsub._emitGossip(topic, peers);\n        });\n        // expire fanout for topics we haven't published to in a while\n        const now = this.gossipsub._now();\n        this.gossipsub.lastpub.forEach((lastpb, topic) => {\n            if ((lastpb + constants.GossipsubFanoutTTL) < now) {\n                this.gossipsub.fanout.delete(topic);\n                this.gossipsub.lastpub.delete(topic);\n            }\n        });\n        // maintain our fanout for topics we are publishing but we have not joined\n        this.gossipsub.fanout.forEach((peers, topic) => {\n            // checks whether our peers are still in the topic\n            const topicGossip = this.gossipsub.topics.get(topic);\n            peers.forEach((peer) => {\n                if (topicGossip.has(peer)) {\n                    peers.delete(peer);\n                }\n            });\n            // do we need more peers?\n            if (peers.size < constants.GossipsubD) {\n                const ineed = constants.GossipsubD - peers.size;\n                const peersSet = getGossipPeers_1.getGossipPeers(this.gossipsub, topic, ineed);\n                peersSet.forEach((peer) => {\n                    if (!peers.has(peer)) {\n                        return;\n                    }\n                    peers.add(peer);\n                });\n            }\n            this.gossipsub._emitGossip(topic, peers);\n        });\n        // send coalesced GRAFT/PRUNE messages (will piggyback gossip)\n        this.gossipsub._sendGraftPrune(tograft, toprune);\n        // advance the message history window\n        this.gossipsub.messageCache.shift();\n        this.gossipsub.emit('gossipsub:heartbeat');\n    }\n}\nexports.Heartbeat = Heartbeat;\n"]},"metadata":{},"sourceType":"script"}