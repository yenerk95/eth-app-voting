{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nconst TLRU = require('../../utils/tlru');\n\nconst {\n  default: PQueue\n} = require('p-queue');\n\nconst HTTP = require('ipfs-utils/src/http'); // Avoid sending multiple queries for the same hostname by caching results\n\n\nconst cache = new TLRU(1000); // TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\n\nconst ttl = 60 * 1000; // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nconst httpQueue = new PQueue({\n  concurrency: 4\n});\n\nconst ipfsPath = response => {\n  if (response.Path) return response.Path;\n  throw new Error(response.Message);\n};\n\nmodule.exports = async (fqdn, opts) => {\n  // eslint-disable-line require-await\n  const resolveDnslink = async (fqdn, opts) => {\n    opts = opts || {};\n    const searchParams = new URLSearchParams(opts);\n    searchParams.set('arg', fqdn); // try cache first\n\n    const query = searchParams.toString();\n\n    if (!opts.nocache && cache.has(query)) {\n      const response = cache.get(query);\n      return ipfsPath(response);\n    } // fallback to delegated DNS resolver\n\n\n    const response = await httpQueue.add(async () => {\n      // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n      // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n      const res = await HTTP.get('https://ipfs.io/api/v0/dns', {\n        searchParams\n      });\n      const query = new URL(res.url).search.slice(1);\n      const json = await res.json();\n      cache.set(query, json, ttl);\n      return json;\n    });\n    return ipfsPath(response);\n  };\n\n  return resolveDnslink(fqdn, opts);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/runtime/dns-browser.js"],"names":["TLRU","require","default","PQueue","HTTP","cache","ttl","httpQueue","concurrency","ipfsPath","response","Path","Error","Message","module","exports","fqdn","opts","resolveDnslink","searchParams","URLSearchParams","set","query","toString","nocache","has","get","add","res","URL","url","search","slice","json"],"mappings":"AAAA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA,OAAO,EAAEC;AAAX,IAAsBF,OAAO,CAAC,SAAD,CAAnC;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,qBAAD,CAApB,C,CAEA;;;AACA,MAAMI,KAAK,GAAG,IAAIL,IAAJ,CAAS,IAAT,CAAd,C,CACA;AACA;AACA;;AACA,MAAMM,GAAG,GAAG,KAAK,IAAjB,C,CAEA;AACA;;AACA,MAAMC,SAAS,GAAG,IAAIJ,MAAJ,CAAW;AAAEK,EAAAA,WAAW,EAAE;AAAf,CAAX,CAAlB;;AAEA,MAAMC,QAAQ,GAAIC,QAAD,IAAc;AAC7B,MAAIA,QAAQ,CAACC,IAAb,EAAmB,OAAOD,QAAQ,CAACC,IAAhB;AACnB,QAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,OAAnB,CAAN;AACD,CAHD;;AAKAC,MAAM,CAACC,OAAP,GAAiB,OAAOC,IAAP,EAAaC,IAAb,KAAsB;AAAE;AACvC,QAAMC,cAAc,GAAG,OAAOF,IAAP,EAAaC,IAAb,KAAsB;AAC3CA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,UAAME,YAAY,GAAG,IAAIC,eAAJ,CAAoBH,IAApB,CAArB;AACAE,IAAAA,YAAY,CAACE,GAAb,CAAiB,KAAjB,EAAwBL,IAAxB,EAJ2C,CAM3C;;AACA,UAAMM,KAAK,GAAGH,YAAY,CAACI,QAAb,EAAd;;AACA,QAAI,CAACN,IAAI,CAACO,OAAN,IAAiBnB,KAAK,CAACoB,GAAN,CAAUH,KAAV,CAArB,EAAuC;AACrC,YAAMZ,QAAQ,GAAGL,KAAK,CAACqB,GAAN,CAAUJ,KAAV,CAAjB;AACA,aAAOb,QAAQ,CAACC,QAAD,CAAf;AACD,KAX0C,CAa3C;;;AACA,UAAMA,QAAQ,GAAG,MAAMH,SAAS,CAACoB,GAAV,CAAc,YAAY;AAC/C;AACA;AACA,YAAMC,GAAG,GAAG,MAAMxB,IAAI,CAACsB,GAAL,CAAS,4BAAT,EAAuC;AAAEP,QAAAA;AAAF,OAAvC,CAAlB;AACA,YAAMG,KAAK,GAAG,IAAIO,GAAJ,CAAQD,GAAG,CAACE,GAAZ,EAAiBC,MAAjB,CAAwBC,KAAxB,CAA8B,CAA9B,CAAd;AACA,YAAMC,IAAI,GAAG,MAAML,GAAG,CAACK,IAAJ,EAAnB;AACA5B,MAAAA,KAAK,CAACgB,GAAN,CAAUC,KAAV,EAAiBW,IAAjB,EAAuB3B,GAAvB;AAEA,aAAO2B,IAAP;AACD,KATsB,CAAvB;AAUA,WAAOxB,QAAQ,CAACC,QAAD,CAAf;AACD,GAzBD;;AA2BA,SAAOQ,cAAc,CAACF,IAAD,EAAOC,IAAP,CAArB;AACD,CA7BD","sourcesContent":["/* eslint-env browser */\n'use strict'\n\nconst TLRU = require('../../utils/tlru')\nconst { default: PQueue } = require('p-queue')\nconst HTTP = require('ipfs-utils/src/http')\n\n// Avoid sending multiple queries for the same hostname by caching results\nconst cache = new TLRU(1000)\n// TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\nconst ttl = 60 * 1000\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new PQueue({ concurrency: 4 })\n\nconst ipfsPath = (response) => {\n  if (response.Path) return response.Path\n  throw new Error(response.Message)\n}\n\nmodule.exports = async (fqdn, opts) => { // eslint-disable-line require-await\n  const resolveDnslink = async (fqdn, opts) => {\n    opts = opts || {}\n\n    const searchParams = new URLSearchParams(opts)\n    searchParams.set('arg', fqdn)\n\n    // try cache first\n    const query = searchParams.toString()\n    if (!opts.nocache && cache.has(query)) {\n      const response = cache.get(query)\n      return ipfsPath(response)\n    }\n\n    // fallback to delegated DNS resolver\n    const response = await httpQueue.add(async () => {\n      // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n      // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n      const res = await HTTP.get('https://ipfs.io/api/v0/dns', { searchParams })\n      const query = new URL(res.url).search.slice(1)\n      const json = await res.json()\n      cache.set(query, json, ttl)\n\n      return json\n    })\n    return ipfsPath(response)\n  }\n\n  return resolveDnslink(fqdn, opts)\n}\n"]},"metadata":{},"sourceType":"script"}