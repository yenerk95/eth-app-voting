{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('mss:handle');\n\nconst BufferList = require('bl/BufferList');\n\nconst multistream = require('./multistream');\n\nconst handshake = require('it-handshake');\n\nconst {\n  PROTOCOL_ID\n} = require('./constants');\n\nmodule.exports = async (stream, protocols) => {\n  protocols = Array.isArray(protocols) ? protocols : [protocols];\n  const {\n    writer,\n    reader,\n    rest,\n    stream: shakeStream\n  } = handshake(stream);\n\n  while (true) {\n    const protocol = (await multistream.read(reader)).toString();\n    log('read \"%s\"', protocol);\n\n    if (protocol === PROTOCOL_ID) {\n      log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol);\n      multistream.write(writer, PROTOCOL_ID);\n      continue;\n    }\n\n    if (protocols.includes(protocol)) {\n      multistream.write(writer, protocol);\n      log('respond with \"%s\" for \"%s\"', protocol, protocol);\n      rest();\n      return {\n        stream: shakeStream,\n        protocol\n      };\n    }\n\n    if (protocol === 'ls') {\n      // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n      multistream.write(writer, new BufferList(protocols.map(p => multistream.encode(p))));\n      log('respond with \"%s\" for %s', protocols, protocol);\n      continue;\n    }\n\n    multistream.write(writer, 'na');\n    log('respond with \"na\" for \"%s\"', protocol);\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/multistream-select/src/handle.js"],"names":["log","require","BufferList","multistream","handshake","PROTOCOL_ID","module","exports","stream","protocols","Array","isArray","writer","reader","rest","shakeStream","protocol","read","toString","write","includes","map","p","encode"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAZ;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAkBJ,OAAO,CAAC,aAAD,CAA/B;;AAEAK,MAAM,CAACC,OAAP,GAAiB,OAAOC,MAAP,EAAeC,SAAf,KAA6B;AAC5CA,EAAAA,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcF,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAAnD;AACA,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA,IAAlB;AAAwBN,IAAAA,MAAM,EAAEO;AAAhC,MAAgDX,SAAS,CAACI,MAAD,CAA/D;;AAEA,SAAO,IAAP,EAAa;AACX,UAAMQ,QAAQ,GAAG,CAAC,MAAMb,WAAW,CAACc,IAAZ,CAAiBJ,MAAjB,CAAP,EAAiCK,QAAjC,EAAjB;AACAlB,IAAAA,GAAG,CAAC,WAAD,EAAcgB,QAAd,CAAH;;AAEA,QAAIA,QAAQ,KAAKX,WAAjB,EAA8B;AAC5BL,MAAAA,GAAG,CAAC,4BAAD,EAA+BK,WAA/B,EAA4CW,QAA5C,CAAH;AACAb,MAAAA,WAAW,CAACgB,KAAZ,CAAkBP,MAAlB,EAA0BP,WAA1B;AACA;AACD;;AAED,QAAII,SAAS,CAACW,QAAV,CAAmBJ,QAAnB,CAAJ,EAAkC;AAChCb,MAAAA,WAAW,CAACgB,KAAZ,CAAkBP,MAAlB,EAA0BI,QAA1B;AACAhB,MAAAA,GAAG,CAAC,4BAAD,EAA+BgB,QAA/B,EAAyCA,QAAzC,CAAH;AACAF,MAAAA,IAAI;AACJ,aAAO;AAAEN,QAAAA,MAAM,EAAEO,WAAV;AAAuBC,QAAAA;AAAvB,OAAP;AACD;;AAED,QAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACAb,MAAAA,WAAW,CAACgB,KAAZ,CAAkBP,MAAlB,EAA0B,IAAIV,UAAJ,CACxBO,SAAS,CAACY,GAAV,CAAcC,CAAC,IAAInB,WAAW,CAACoB,MAAZ,CAAmBD,CAAnB,CAAnB,CADwB,CAA1B;AAGAtB,MAAAA,GAAG,CAAC,0BAAD,EAA6BS,SAA7B,EAAwCO,QAAxC,CAAH;AACA;AACD;;AAEDb,IAAAA,WAAW,CAACgB,KAAZ,CAAkBP,MAAlB,EAA0B,IAA1B;AACAZ,IAAAA,GAAG,CAAC,4BAAD,EAA+BgB,QAA/B,CAAH;AACD;AACF,CAjCD","sourcesContent":["'use strict'\n\nconst log = require('debug')('mss:handle')\nconst BufferList = require('bl/BufferList')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\nconst { PROTOCOL_ID } = require('./constants')\n\nmodule.exports = async (stream, protocols) => {\n  protocols = Array.isArray(protocols) ? protocols : [protocols]\n  const { writer, reader, rest, stream: shakeStream } = handshake(stream)\n\n  while (true) {\n    const protocol = (await multistream.read(reader)).toString()\n    log('read \"%s\"', protocol)\n\n    if (protocol === PROTOCOL_ID) {\n      log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol)\n      multistream.write(writer, PROTOCOL_ID)\n      continue\n    }\n\n    if (protocols.includes(protocol)) {\n      multistream.write(writer, protocol)\n      log('respond with \"%s\" for \"%s\"', protocol, protocol)\n      rest()\n      return { stream: shakeStream, protocol }\n    }\n\n    if (protocol === 'ls') {\n      // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n      multistream.write(writer, new BufferList(\n        protocols.map(p => multistream.encode(p))\n      ))\n      log('respond with \"%s\" for %s', protocols, protocol)\n      continue\n    }\n\n    multistream.write(writer, 'na')\n    log('respond with \"na\" for \"%s\"', protocol)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}