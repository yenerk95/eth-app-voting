{"ast":null,"code":"'use strict';\n\nconst {\n  CircuitRelay: CircuitPB\n} = require('../protocol');\n\nconst multicodec = require('../multicodec');\n\nconst StreamHandler = require('./stream-handler');\n\nconst {\n  validateAddrs\n} = require('./utils');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:circuit:stop');\nlog.error = debug('libp2p:circuit:stop:error');\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<*>} Resolves a duplex iterable\n */\n\nmodule.exports.handleStop = function handleStop({\n  connection,\n  request,\n  streamHandler\n}) {\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err);\n  } // The request is valid\n\n\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n};\n/**\n * Creates a STOP request\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<*>} Resolves a duplex iterable\n */\n\n\nmodule.exports.stop = async function stop({\n  connection,\n  request\n}) {\n  const {\n    stream\n  } = await connection.newStream([multicodec.relay]);\n  log('starting stop request to %s', connection.remotePeer.toB58String());\n  const streamHandler = new StreamHandler({\n    stream\n  });\n  streamHandler.write(request);\n  const response = await streamHandler.read();\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %s was successful', connection.remotePeer.toB58String());\n    return streamHandler.rest();\n  }\n\n  log('stop request failed with code %d', response.code);\n  streamHandler.close();\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/circuit/circuit/stop.js"],"names":["CircuitRelay","CircuitPB","require","multicodec","StreamHandler","validateAddrs","debug","log","error","module","exports","handleStop","connection","request","streamHandler","err","remotePeer","toB58String","write","type","Type","STATUS","code","Status","SUCCESS","rest","stop","stream","newStream","relay","response","read","close"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,YAAY,EAAEC;AAAhB,IAA8BC,OAAO,CAAC,aAAD,CAA3C;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAoBH,OAAO,CAAC,SAAD,CAAjC;;AAEA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMK,GAAG,GAAGD,KAAK,CAAC,qBAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,2BAAD,CAAjB;AAEA;;;;;;;;;;;AAUAG,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B,SAASA,UAAT,CAAqB;AAC/CC,EAAAA,UAD+C;AAE/CC,EAAAA,OAF+C;AAG/CC,EAAAA;AAH+C,CAArB,EAIzB;AACD;AACA,MAAI;AACFT,IAAAA,aAAa,CAACQ,OAAD,EAAUC,aAAV,CAAb;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,WAAOR,GAAG,CAACC,KAAJ,CAAU,kCAAV,EAA8CI,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAA9C,EAAmFF,GAAnF,CAAP;AACD,GANA,CAQD;;;AACAR,EAAAA,GAAG,CAAC,uBAAD,CAAH;AACAO,EAAAA,aAAa,CAACI,KAAd,CAAoB;AAClBC,IAAAA,IAAI,EAAElB,SAAS,CAACmB,IAAV,CAAeC,MADH;AAElBC,IAAAA,IAAI,EAAErB,SAAS,CAACsB,MAAV,CAAiBC;AAFL,GAApB;AAIA,SAAOV,aAAa,CAACW,IAAd,EAAP;AACD,CAnBD;AAqBA;;;;;;;;;;AAQAhB,MAAM,CAACC,OAAP,CAAegB,IAAf,GAAsB,eAAeA,IAAf,CAAqB;AACzCd,EAAAA,UADyC;AAEzCC,EAAAA;AAFyC,CAArB,EAGnB;AACD,QAAM;AAAEc,IAAAA;AAAF,MAAa,MAAMf,UAAU,CAACgB,SAAX,CAAqB,CAACzB,UAAU,CAAC0B,KAAZ,CAArB,CAAzB;AACAtB,EAAAA,GAAG,CAAC,6BAAD,EAAgCK,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAhC,CAAH;AACA,QAAMH,aAAa,GAAG,IAAIV,aAAJ,CAAkB;AAAEuB,IAAAA;AAAF,GAAlB,CAAtB;AAEAb,EAAAA,aAAa,CAACI,KAAd,CAAoBL,OAApB;AACA,QAAMiB,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,IAAd,EAAvB;;AAEA,MAAID,QAAQ,CAACR,IAAT,KAAkBrB,SAAS,CAACsB,MAAV,CAAiBC,OAAvC,EAAgD;AAC9CjB,IAAAA,GAAG,CAAC,mCAAD,EAAsCK,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAtC,CAAH;AACA,WAAOH,aAAa,CAACW,IAAd,EAAP;AACD;;AAEDlB,EAAAA,GAAG,CAAC,kCAAD,EAAqCuB,QAAQ,CAACR,IAA9C,CAAH;AACAR,EAAAA,aAAa,CAACkB,KAAd;AACD,CAlBD","sourcesContent":["'use strict'\n\nconst { CircuitRelay: CircuitPB } = require('../protocol')\nconst multicodec = require('../multicodec')\nconst StreamHandler = require('./stream-handler')\nconst { validateAddrs } = require('./utils')\n\nconst debug = require('debug')\nconst log = debug('libp2p:circuit:stop')\nlog.error = debug('libp2p:circuit:stop:error')\n\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<*>} Resolves a duplex iterable\n */\nmodule.exports.handleStop = function handleStop ({\n  connection,\n  request,\n  streamHandler\n}) {\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err)\n  }\n\n  // The request is valid\n  log('stop request is valid')\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n  return streamHandler.rest()\n}\n\n/**\n * Creates a STOP request\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<*>} Resolves a duplex iterable\n */\nmodule.exports.stop = async function stop ({\n  connection,\n  request\n}) {\n  const { stream } = await connection.newStream([multicodec.relay])\n  log('starting stop request to %s', connection.remotePeer.toB58String())\n  const streamHandler = new StreamHandler({ stream })\n\n  streamHandler.write(request)\n  const response = await streamHandler.read()\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %s was successful', connection.remotePeer.toB58String())\n    return streamHandler.rest()\n  }\n\n  log('stop request failed with code %d', response.code)\n  streamHandler.close()\n}\n"]},"metadata":{},"sourceType":"script"}