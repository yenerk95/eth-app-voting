{"ast":null,"code":"'use strict';\n\nconst directoryContent = (cid, node, unixfs, path, resolve, depth, ipld, options) => {\n  return async function* (options = {}) {\n    const offset = options.offset || 0;\n    const length = options.length || node.Links.length;\n    const links = node.Links.slice(offset, length);\n\n    for (const link of links) {\n      const result = await resolve(link.Hash, link.Name, `${path}/${link.Name}`, [], depth + 1, ipld, options);\n      yield result.entry;\n    }\n  };\n};\n\nmodule.exports = directoryContent;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/directory.js"],"names":["directoryContent","cid","node","unixfs","path","resolve","depth","ipld","options","offset","length","Links","links","slice","link","result","Hash","Name","entry","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgDC,OAAhD,KAA4D;AACnF,SAAO,iBAAkBA,OAAO,GAAG,EAA5B,EAAgC;AACrC,UAAMC,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,CAAjC;AACA,UAAMC,MAAM,GAAGF,OAAO,CAACE,MAAR,IAAkBR,IAAI,CAACS,KAAL,CAAWD,MAA5C;AACA,UAAME,KAAK,GAAGV,IAAI,CAACS,KAAL,CAAWE,KAAX,CAAiBJ,MAAjB,EAAyBC,MAAzB,CAAd;;AAEA,SAAK,MAAMI,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAMG,MAAM,GAAG,MAAMV,OAAO,CAACS,IAAI,CAACE,IAAN,EAAYF,IAAI,CAACG,IAAjB,EAAwB,GAAEb,IAAK,IAAGU,IAAI,CAACG,IAAK,EAA5C,EAA+C,EAA/C,EAAmDX,KAAK,GAAG,CAA3D,EAA8DC,IAA9D,EAAoEC,OAApE,CAA5B;AAEA,YAAMO,MAAM,CAACG,KAAb;AACD;AACF,GAVD;AAWD,CAZD;;AAcAC,MAAM,CAACC,OAAP,GAAiBpB,gBAAjB","sourcesContent":["'use strict'\n\nconst directoryContent = (cid, node, unixfs, path, resolve, depth, ipld, options) => {\n  return async function * (options = {}) {\n    const offset = options.offset || 0\n    const length = options.length || node.Links.length\n    const links = node.Links.slice(offset, length)\n\n    for (const link of links) {\n      const result = await resolve(link.Hash, link.Name, `${path}/${link.Name}`, [], depth + 1, ipld, options)\n\n      yield result.entry\n    }\n  }\n}\n\nmodule.exports = directoryContent\n"]},"metadata":{},"sourceType":"script"}