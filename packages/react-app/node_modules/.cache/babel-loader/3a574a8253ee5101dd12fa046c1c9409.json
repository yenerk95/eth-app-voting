{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar DAGNode = dagPB.DAGNode;\nvar DAGLink = dagPB.DAGLink;\n\nvar mh = require('multihashing-async').multihash;\n\nvar multicodec = require('multicodec');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar _require2 = require('buffer'),\n    Buffer = _require2.Buffer;\n\nfunction parseBuffer(buf, encoding) {\n  switch (encoding) {\n    case 'json':\n      return parseJSONBuffer(buf);\n\n    case 'protobuf':\n      return parseProtoBuffer(buf);\n\n    default:\n      throw new Error(\"unkown encoding: \".concat(encoding));\n  }\n}\n\nfunction parseJSONBuffer(buf) {\n  var data;\n  var links;\n\n  try {\n    var parsed = JSON.parse(buf.toString());\n    links = (parsed.Links || []).map(function (link) {\n      return new DAGLink(link.Name || link.name, link.Size || link.size, mh.fromB58String(link.Hash || link.hash || link.multihash));\n    });\n    data = Buffer.from(parsed.Data);\n  } catch (err) {\n    throw new Error('failed to parse JSON: ' + err);\n  }\n\n  return new DAGNode(data, links);\n}\n\nfunction parseProtoBuffer(buf) {\n  return dagPB.util.deserialize(buf);\n}\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      gcLock = _ref.gcLock,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(obj, options) {\n      var encoding, node, release, cid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              encoding = options.enc;\n\n              if (!Buffer.isBuffer(obj)) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!encoding) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return parseBuffer(obj, encoding);\n\n            case 6:\n              node = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 9:\n              node = new DAGNode(obj);\n\n            case 10:\n              _context.next = 21;\n              break;\n\n            case 12:\n              if (!DAGNode.isDAGNode(obj)) {\n                _context.next = 16;\n                break;\n              }\n\n              // already a dag node\n              node = obj;\n              _context.next = 21;\n              break;\n\n            case 16:\n              if (!(typeof obj === 'object')) {\n                _context.next = 20;\n                break;\n              }\n\n              node = new DAGNode(obj.Data, obj.Links);\n              _context.next = 21;\n              break;\n\n            case 20:\n              throw new Error('obj not recognized');\n\n            case 21:\n              _context.next = 23;\n              return gcLock.readLock();\n\n            case 23:\n              release = _context.sent;\n              _context.prev = 24;\n              _context.next = 27;\n              return ipld.put(node, multicodec.DAG_PB, {\n                cidVersion: 0,\n                hashAlg: multicodec.SHA2_256\n              });\n\n            case 27:\n              cid = _context.sent;\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", cid);\n\n            case 30:\n              _context.prev = 30;\n              release();\n              return _context.finish(30);\n\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[24,, 30, 33]]);\n    }));\n\n    function put(_x, _x2) {\n      return _put.apply(this, arguments);\n    }\n\n    return put;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/object/put.js"],"names":["dagPB","require","DAGNode","DAGLink","mh","multihash","multicodec","withTimeoutOption","Buffer","parseBuffer","buf","encoding","parseJSONBuffer","parseProtoBuffer","Error","data","links","parsed","JSON","parse","toString","Links","map","link","Name","name","Size","size","fromB58String","Hash","hash","from","Data","err","util","deserialize","module","exports","ipld","gcLock","preload","obj","options","enc","isBuffer","node","isDAGNode","readLock","release","put","DAG_PB","cidVersion","hashAlg","SHA2_256","cid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst DAGLink = dagPB.DAGLink\nconst mh = require('multihashing-async').multihash\nconst multicodec = require('multicodec')\nconst { withTimeoutOption } = require('../../utils')\nconst { Buffer } = require('buffer')\n\nfunction parseBuffer (buf, encoding) {\n  switch (encoding) {\n    case 'json':\n      return parseJSONBuffer(buf)\n    case 'protobuf':\n      return parseProtoBuffer(buf)\n    default:\n      throw new Error(`unkown encoding: ${encoding}`)\n  }\n}\n\nfunction parseJSONBuffer (buf) {\n  let data\n  let links\n\n  try {\n    const parsed = JSON.parse(buf.toString())\n\n    links = (parsed.Links || []).map((link) => {\n      return new DAGLink(\n        link.Name || link.name,\n        link.Size || link.size,\n        mh.fromB58String(link.Hash || link.hash || link.multihash)\n      )\n    })\n    data = Buffer.from(parsed.Data)\n  } catch (err) {\n    throw new Error('failed to parse JSON: ' + err)\n  }\n\n  return new DAGNode(data, links)\n}\n\nfunction parseProtoBuffer (buf) {\n  return dagPB.util.deserialize(buf)\n}\n\nmodule.exports = ({ ipld, gcLock, preload }) => {\n  return withTimeoutOption(async function put (obj, options) {\n    options = options || {}\n\n    const encoding = options.enc\n    let node\n\n    if (Buffer.isBuffer(obj)) {\n      if (encoding) {\n        node = await parseBuffer(obj, encoding)\n      } else {\n        node = new DAGNode(obj)\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      // already a dag node\n      node = obj\n    } else if (typeof obj === 'object') {\n      node = new DAGNode(obj.Data, obj.Links)\n    } else {\n      throw new Error('obj not recognized')\n    }\n\n    const release = await gcLock.readLock()\n\n    try {\n      const cid = await ipld.put(node, multicodec.DAG_PB, {\n        cidVersion: 0,\n        hashAlg: multicodec.SHA2_256\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      release()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}