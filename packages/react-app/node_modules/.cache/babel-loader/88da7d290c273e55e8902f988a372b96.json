{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst lp = require('it-length-prefixed');\n\nconst pushable = require('it-pushable');\n\nconst pipe = require('it-pipe');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p-pubsub:peer');\nlog.error = debug('libp2p-pubsub:peer:error');\n\nconst {\n  RPC\n} = require('./message');\n/**\n * The known state of a connected peer.\n */\n\n\nclass Peer extends EventEmitter {\n  /**\n   * @param {PeerId} id\n   * @param {Array<string>} protocols\n   */\n  constructor({\n    id,\n    protocols\n  }) {\n    super();\n    /**\n     * @type {PeerId}\n     */\n\n    this.id = id;\n    /**\n     * @type {string}\n     */\n\n    this.protocols = protocols;\n    /**\n     * @type {Connection}\n     */\n\n    this.conn = null;\n    /**\n     * @type {Set}\n     */\n\n    this.topics = new Set();\n    /**\n     * @type {Pushable}\n     */\n\n    this.stream = null;\n  }\n  /**\n   * Is the peer connected currently?\n   *\n   * @type {boolean}\n   */\n\n\n  get isConnected() {\n    return Boolean(this.conn);\n  }\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n\n\n  get isWritable() {\n    return Boolean(this.stream);\n  }\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Buffer} msg\n   * @returns {undefined}\n   */\n\n\n  write(msg) {\n    if (!this.isWritable) {\n      const id = this.id.toB58String();\n      throw new Error('No writable connection to ' + id);\n    }\n\n    this.stream.push(msg);\n  }\n  /**\n   * Attach the peer to a connection and setup a write stream\n   *\n   * @param {Connection} conn\n   * @returns {void}\n   */\n\n\n  async attachConnection(conn) {\n    const _prevStream = this.stream;\n\n    if (_prevStream) {\n      // End the stream without emitting a close event\n      await _prevStream.end(false);\n    }\n\n    this.stream = pushable({\n      onEnd: emit => {\n        // close readable side of the stream\n        this.conn.reset && this.conn.reset();\n        this.conn = null;\n        this.stream = null;\n\n        if (emit !== false) {\n          this.emit('close');\n        }\n      }\n    });\n    this.conn = conn;\n    pipe(this.stream, lp.encode(), conn).catch(err => {\n      log.error(err);\n    }); // Only emit if the connection is new\n\n    if (!_prevStream) {\n      this.emit('connection');\n    }\n  }\n\n  _sendRawSubscriptions(topics, subscribe) {\n    if (topics.size === 0) {\n      return;\n    }\n\n    const subs = [];\n    topics.forEach(topic => {\n      subs.push({\n        subscribe: subscribe,\n        topicID: topic\n      });\n    });\n    this.write(RPC.encode({\n      subscriptions: subs\n    }));\n  }\n  /**\n   * Send the given subscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n\n\n  sendSubscriptions(topics) {\n    this._sendRawSubscriptions(topics, true);\n  }\n  /**\n   * Send the given unsubscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n\n\n  sendUnsubscriptions(topics) {\n    this._sendRawSubscriptions(topics, false);\n  }\n  /**\n   * Send messages to this peer.\n   *\n   * @param {Array<any>} msgs\n   * @returns {undefined}\n   */\n\n\n  sendMessages(msgs) {\n    this.write(RPC.encode({\n      msgs: msgs\n    }));\n  }\n  /**\n   * Bulk process subscription updates.\n   *\n   * @param {Array} changes\n   * @returns {undefined}\n   */\n\n\n  updateSubscriptions(changes) {\n    changes.forEach(subopt => {\n      if (subopt.subscribe) {\n        this.topics.add(subopt.topicID);\n      } else {\n        this.topics.delete(subopt.topicID);\n      }\n    });\n  }\n  /**\n   * Closes the open connection to peer\n   * @returns {void}\n   */\n\n\n  close() {\n    // End the pushable\n    if (this.stream) {\n      this.stream.end();\n    }\n\n    this.conn = null;\n    this.stream = null;\n    this.emit('close');\n  }\n\n}\n\nmodule.exports = Peer;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-pubsub/src/peer.js"],"names":["EventEmitter","require","lp","pushable","pipe","debug","log","error","RPC","Peer","constructor","id","protocols","conn","topics","Set","stream","isConnected","Boolean","isWritable","write","msg","toB58String","Error","push","attachConnection","_prevStream","end","onEnd","emit","reset","encode","catch","err","_sendRawSubscriptions","subscribe","size","subs","forEach","topic","topicID","subscriptions","sendSubscriptions","sendUnsubscriptions","sendMessages","msgs","updateSubscriptions","changes","subopt","add","delete","close","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events')\n\nconst lp = require('it-length-prefixed')\nconst pushable = require('it-pushable')\nconst pipe = require('it-pipe')\nconst debug = require('debug')\n\nconst log = debug('libp2p-pubsub:peer')\nlog.error = debug('libp2p-pubsub:peer:error')\n\nconst { RPC } = require('./message')\n\n/**\n * The known state of a connected peer.\n */\nclass Peer extends EventEmitter {\n  /**\n   * @param {PeerId} id\n   * @param {Array<string>} protocols\n   */\n  constructor ({ id, protocols }) {\n    super()\n\n    /**\n     * @type {PeerId}\n     */\n    this.id = id\n    /**\n     * @type {string}\n     */\n    this.protocols = protocols\n    /**\n     * @type {Connection}\n     */\n    this.conn = null\n    /**\n     * @type {Set}\n     */\n    this.topics = new Set()\n    /**\n     * @type {Pushable}\n     */\n    this.stream = null\n  }\n\n  /**\n   * Is the peer connected currently?\n   *\n   * @type {boolean}\n   */\n  get isConnected () {\n    return Boolean(this.conn)\n  }\n\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n  get isWritable () {\n    return Boolean(this.stream)\n  }\n\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Buffer} msg\n   * @returns {undefined}\n   */\n  write (msg) {\n    if (!this.isWritable) {\n      const id = this.id.toB58String()\n      throw new Error('No writable connection to ' + id)\n    }\n\n    this.stream.push(msg)\n  }\n\n  /**\n   * Attach the peer to a connection and setup a write stream\n   *\n   * @param {Connection} conn\n   * @returns {void}\n   */\n  async attachConnection (conn) {\n    const _prevStream = this.stream\n    if (_prevStream) {\n      // End the stream without emitting a close event\n      await _prevStream.end(false)\n    }\n\n    this.stream = pushable({\n      onEnd: (emit) => {\n        // close readable side of the stream\n        this.conn.reset && this.conn.reset()\n        this.conn = null\n        this.stream = null\n        if (emit !== false) {\n          this.emit('close')\n        }\n      }\n    })\n    this.conn = conn\n\n    pipe(\n      this.stream,\n      lp.encode(),\n      conn\n    ).catch(err => {\n      log.error(err)\n    })\n\n    // Only emit if the connection is new\n    if (!_prevStream) {\n      this.emit('connection')\n    }\n  }\n\n  _sendRawSubscriptions (topics, subscribe) {\n    if (topics.size === 0) {\n      return\n    }\n\n    const subs = []\n    topics.forEach((topic) => {\n      subs.push({\n        subscribe: subscribe,\n        topicID: topic\n      })\n    })\n\n    this.write(RPC.encode({\n      subscriptions: subs\n    }))\n  }\n\n  /**\n   * Send the given subscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n  sendSubscriptions (topics) {\n    this._sendRawSubscriptions(topics, true)\n  }\n\n  /**\n   * Send the given unsubscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n  sendUnsubscriptions (topics) {\n    this._sendRawSubscriptions(topics, false)\n  }\n\n  /**\n   * Send messages to this peer.\n   *\n   * @param {Array<any>} msgs\n   * @returns {undefined}\n   */\n  sendMessages (msgs) {\n    this.write(RPC.encode({\n      msgs: msgs\n    }))\n  }\n\n  /**\n   * Bulk process subscription updates.\n   *\n   * @param {Array} changes\n   * @returns {undefined}\n   */\n  updateSubscriptions (changes) {\n    changes.forEach((subopt) => {\n      if (subopt.subscribe) {\n        this.topics.add(subopt.topicID)\n      } else {\n        this.topics.delete(subopt.topicID)\n      }\n    })\n  }\n\n  /**\n   * Closes the open connection to peer\n   * @returns {void}\n   */\n  close () {\n    // End the pushable\n    if (this.stream) {\n      this.stream.end()\n    }\n\n    this.conn = null\n    this.stream = null\n    this.emit('close')\n  }\n}\n\nmodule.exports = Peer\n"]},"metadata":{},"sourceType":"script"}