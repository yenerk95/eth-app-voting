{"ast":null,"code":"'use strict';\n\nvar multibase = require('multibase');\n\nvar errcode = require('err-code');\n\nvar namespace = '/record/';\nvar base64urlCode = 'u'; // base64url code from multibase\n\nmodule.exports.encodeBase32 = function (buf) {\n  return multibase.encode('base32', buf).slice(1); // slice off multibase codec\n}; // converts a binary record key to a pubsub topic key.\n\n\nmodule.exports.keyToTopic = function (key) {\n  // Record-store keys are arbitrary binary. However, pubsub requires UTF-8 string topic IDs\n  // Encodes to \"/record/base64url(key)\"\n  var b64url = multibase.encode('base64url', key).slice(1).toString();\n  return \"\".concat(namespace).concat(b64url);\n}; // converts a pubsub topic key to a binary record key.\n\n\nmodule.exports.topicToKey = function (topic) {\n  if (topic.substring(0, namespace.length) !== namespace) {\n    throw errcode(new Error('topic received is not from a record'), 'ERR_TOPIC_IS_NOT_FROM_RECORD_NAMESPACE');\n  }\n\n  var key = \"\".concat(base64urlCode).concat(topic.substring(namespace.length));\n  return multibase.decode(key);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/datastore-pubsub/src/utils.js"],"names":["multibase","require","errcode","namespace","base64urlCode","module","exports","encodeBase32","buf","encode","slice","keyToTopic","key","b64url","toString","topicToKey","topic","substring","length","Error","decode"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAME,SAAS,GAAG,UAAlB;AACA,IAAMC,aAAa,GAAG,GAAtB,C,CAA0B;;AAE1BC,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8B,UAACC,GAAD,EAAS;AACrC,SAAOR,SAAS,CAACS,MAAV,CAAiB,QAAjB,EAA2BD,GAA3B,EAAgCE,KAAhC,CAAsC,CAAtC,CAAP,CADqC,CACW;AACjD,CAFD,C,CAIA;;;AACAL,MAAM,CAACC,OAAP,CAAeK,UAAf,GAA4B,UAACC,GAAD,EAAS;AACnC;AACA;AACA,MAAMC,MAAM,GAAGb,SAAS,CAACS,MAAV,CAAiB,WAAjB,EAA8BG,GAA9B,EAAmCF,KAAnC,CAAyC,CAAzC,EAA4CI,QAA5C,EAAf;AAEA,mBAAUX,SAAV,SAAsBU,MAAtB;AACD,CAND,C,CAQA;;;AACAR,MAAM,CAACC,OAAP,CAAeS,UAAf,GAA4B,UAACC,KAAD,EAAW;AACrC,MAAIA,KAAK,CAACC,SAAN,CAAgB,CAAhB,EAAmBd,SAAS,CAACe,MAA7B,MAAyCf,SAA7C,EAAwD;AACtD,UAAMD,OAAO,CAAC,IAAIiB,KAAJ,CAAU,qCAAV,CAAD,EAAmD,wCAAnD,CAAb;AACD;;AAED,MAAMP,GAAG,aAAMR,aAAN,SAAsBY,KAAK,CAACC,SAAN,CAAgBd,SAAS,CAACe,MAA1B,CAAtB,CAAT;AAEA,SAAOlB,SAAS,CAACoB,MAAV,CAAiBR,GAAjB,CAAP;AACD,CARD","sourcesContent":["'use strict'\n\nconst multibase = require('multibase')\nconst errcode = require('err-code')\n\nconst namespace = '/record/'\nconst base64urlCode = 'u' // base64url code from multibase\n\nmodule.exports.encodeBase32 = (buf) => {\n  return multibase.encode('base32', buf).slice(1) // slice off multibase codec\n}\n\n// converts a binary record key to a pubsub topic key.\nmodule.exports.keyToTopic = (key) => {\n  // Record-store keys are arbitrary binary. However, pubsub requires UTF-8 string topic IDs\n  // Encodes to \"/record/base64url(key)\"\n  const b64url = multibase.encode('base64url', key).slice(1).toString()\n\n  return `${namespace}${b64url}`\n}\n\n// converts a pubsub topic key to a binary record key.\nmodule.exports.topicToKey = (topic) => {\n  if (topic.substring(0, namespace.length) !== namespace) {\n    throw errcode(new Error('topic received is not from a record'), 'ERR_TOPIC_IS_NOT_FROM_RECORD_NAMESPACE')\n  }\n\n  const key = `${base64urlCode}${topic.substring(namespace.length)}`\n\n  return multibase.decode(key)\n}\n"]},"metadata":{},"sourceType":"script"}