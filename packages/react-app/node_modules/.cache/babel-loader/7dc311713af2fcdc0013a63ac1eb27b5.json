{"ast":null,"code":"'use strict';\n\nconst toSources = require('./utils/to-sources');\n\nconst cp = require('./cp');\n\nconst rm = require('./rm');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nconst defaultOptions = {\n  parents: false,\n  recursive: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000,\n  signal: undefined\n};\n\nmodule.exports = context => {\n  return withTimeoutOption(async function mfsMv(...args) {\n    const {\n      sources,\n      options\n    } = await toSources(context, args, defaultOptions);\n    const cpArgs = sources.map(source => source.path).concat(options); // remove the last source as it'll be the destination\n\n    const rmArgs = sources.slice(0, -1).map(source => source.path).concat(Object.assign(options, {\n      recursive: true\n    }));\n    await cp(context).apply(null, cpArgs);\n    await rm(context).apply(null, rmArgs);\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/mv.js"],"names":["toSources","require","cp","rm","withTimeoutOption","defaultOptions","parents","recursive","flush","cidVersion","hashAlg","shardSplitThreshold","signal","undefined","module","exports","context","mfsMv","args","sources","options","cpArgs","map","source","path","concat","rmArgs","slice","Object","assign","apply"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAzB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAwBH,OAAO,CAAC,aAAD,CAArC;;AAEA,MAAMI,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,KADY;AAErBC,EAAAA,SAAS,EAAE,KAFU;AAGrBC,EAAAA,KAAK,EAAE,IAHc;AAIrBC,EAAAA,UAAU,EAAE,CAJS;AAKrBC,EAAAA,OAAO,EAAE,UALY;AAMrBC,EAAAA,mBAAmB,EAAE,IANA;AAOrBC,EAAAA,MAAM,EAAEC;AAPa,CAAvB;;AAUAC,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B,SAAOZ,iBAAiB,CAAC,eAAea,KAAf,CAAsB,GAAGC,IAAzB,EAA+B;AACtD,UAAM;AACJC,MAAAA,OADI;AAEJC,MAAAA;AAFI,QAGF,MAAMpB,SAAS,CAACgB,OAAD,EAAUE,IAAV,EAAgBb,cAAhB,CAHnB;AAKA,UAAMgB,MAAM,GAAGF,OAAO,CACnBG,GADY,CACRC,MAAM,IAAIA,MAAM,CAACC,IADT,EACeC,MADf,CACsBL,OADtB,CAAf,CANsD,CAStD;;AACA,UAAMM,MAAM,GAAGP,OAAO,CACnBQ,KADY,CACN,CADM,EACH,CAAC,CADE,EAEZL,GAFY,CAERC,MAAM,IAAIA,MAAM,CAACC,IAFT,EAGZC,MAHY,CAGLG,MAAM,CAACC,MAAP,CAAcT,OAAd,EAAuB;AAC7Bb,MAAAA,SAAS,EAAE;AADkB,KAAvB,CAHK,CAAf;AAOA,UAAML,EAAE,CAACc,OAAD,CAAF,CAAYc,KAAZ,CAAkB,IAAlB,EAAwBT,MAAxB,CAAN;AACA,UAAMlB,EAAE,CAACa,OAAD,CAAF,CAAYc,KAAZ,CAAkB,IAAlB,EAAwBJ,MAAxB,CAAN;AACD,GAnBuB,CAAxB;AAoBD,CArBD","sourcesContent":["'use strict'\n\nconst toSources = require('./utils/to-sources')\nconst cp = require('./cp')\nconst rm = require('./rm')\nconst { withTimeoutOption } = require('../../utils')\n\nconst defaultOptions = {\n  parents: false,\n  recursive: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000,\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  return withTimeoutOption(async function mfsMv (...args) {\n    const {\n      sources,\n      options\n    } = await toSources(context, args, defaultOptions)\n\n    const cpArgs = sources\n      .map(source => source.path).concat(options)\n\n    // remove the last source as it'll be the destination\n    const rmArgs = sources\n      .slice(0, -1)\n      .map(source => source.path)\n      .concat(Object.assign(options, {\n        recursive: true\n      }))\n\n    await cp(context).apply(null, cpArgs)\n    await rm(context).apply(null, rmArgs)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}