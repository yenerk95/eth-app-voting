{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst protobuf = require('protons');\n\nconst keysPBM = protobuf(require('./keys.proto'));\n\nrequire('node-forge/lib/asn1');\n\nrequire('node-forge/lib/pbe');\n\nconst forge = require('node-forge/lib/forge');\n\nconst errcode = require('err-code');\n\nexports = module.exports;\nconst supportedKeys = {\n  rsa: require('./rsa-class'),\n  ed25519: require('./ed25519-class'),\n  secp256k1: require('./secp256k1-class')(keysPBM, require('../random-bytes'))\n};\nexports.supportedKeys = supportedKeys;\nexports.keysPBM = keysPBM;\nconst ErrMissingSecp256K1 = {\n  message: 'secp256k1 support requires libp2p-crypto-secp256k1 package',\n  code: 'ERR_MISSING_PACKAGE'\n};\n\nfunction typeToKey(type) {\n  const key = supportedKeys[type.toLowerCase()];\n\n  if (!key) {\n    const supported = Object.keys(supportedKeys).join(' / ');\n    throw errcode(new Error(`invalid or unsupported key type ${type}. Must be ${supported}`), 'ERR_UNSUPPORTED_KEY_TYPE');\n  }\n\n  return key;\n}\n\nexports.keyStretcher = require('./key-stretcher');\nexports.generateEphemeralKeyPair = require('./ephemeral-keys'); // Generates a keypair of the given type and bitsize\n\nexports.generateKeyPair = async (type, bits) => {\n  // eslint-disable-line require-await\n  return typeToKey(type).generateKeyPair(bits);\n}; // Generates a keypair of the given type and bitsize\n// seed is a 32 byte uint8array\n\n\nexports.generateKeyPairFromSeed = async (type, seed, bits) => {\n  // eslint-disable-line require-await\n  const key = typeToKey(type);\n\n  if (type.toLowerCase() !== 'ed25519') {\n    throw errcode(new Error('Seed key derivation is unimplemented for RSA or secp256k1'), 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE');\n  }\n\n  return key.generateKeyPairFromSeed(seed, bits);\n}; // Converts a protobuf serialized public key into its\n// representative object\n\n\nexports.unmarshalPublicKey = buf => {\n  const decoded = keysPBM.PublicKey.decode(buf);\n  const data = decoded.Data;\n\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPublicKey(data);\n\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);\n\n    case keysPBM.KeyType.Secp256k1:\n      if (supportedKeys.secp256k1) {\n        return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);\n      } else {\n        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);\n      }\n\n    default:\n      typeToKey(decoded.Type);\n    // throws because type is not supported\n  }\n}; // Converts a public key object into a protobuf serialized public key\n\n\nexports.marshalPublicKey = (key, type) => {\n  type = (type || 'rsa').toLowerCase();\n  typeToKey(type); // check type\n\n  return key.bytes;\n}; // Converts a protobuf serialized private key into its\n// representative object\n\n\nexports.unmarshalPrivateKey = async buf => {\n  // eslint-disable-line require-await\n  const decoded = keysPBM.PrivateKey.decode(buf);\n  const data = decoded.Data;\n\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPrivateKey(data);\n\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);\n\n    case keysPBM.KeyType.Secp256k1:\n      if (supportedKeys.secp256k1) {\n        return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);\n      } else {\n        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);\n      }\n\n    default:\n      typeToKey(decoded.Type);\n    // throws because type is not supported\n  }\n}; // Converts a private key object into a protobuf serialized private key\n\n\nexports.marshalPrivateKey = (key, type) => {\n  type = (type || 'rsa').toLowerCase();\n  typeToKey(type); // check type\n\n  return key.bytes;\n};\n\nexports.import = async (pem, password) => {\n  // eslint-disable-line require-await\n  const key = forge.pki.decryptRsaPrivateKey(pem, password);\n\n  if (key === null) {\n    throw errcode(new Error('Cannot read the key, most likely the password is wrong or not a RSA key'), 'ERR_CANNOT_DECRYPT_PEM');\n  }\n\n  let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key));\n  der = Buffer.from(der.getBytes(), 'binary');\n  return supportedKeys.rsa.unmarshalRsaPrivateKey(der);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/keys/index.js"],"names":["Buffer","require","protobuf","keysPBM","forge","errcode","exports","module","supportedKeys","rsa","ed25519","secp256k1","ErrMissingSecp256K1","message","code","typeToKey","type","key","toLowerCase","supported","Object","keys","join","Error","keyStretcher","generateEphemeralKeyPair","generateKeyPair","bits","generateKeyPairFromSeed","seed","unmarshalPublicKey","buf","decoded","PublicKey","decode","data","Data","Type","KeyType","RSA","unmarshalRsaPublicKey","Ed25519","unmarshalEd25519PublicKey","Secp256k1","unmarshalSecp256k1PublicKey","marshalPublicKey","bytes","unmarshalPrivateKey","PrivateKey","unmarshalRsaPrivateKey","unmarshalEd25519PrivateKey","unmarshalSecp256k1PrivateKey","marshalPrivateKey","import","pem","password","pki","decryptRsaPrivateKey","der","asn1","toDer","privateKeyToAsn1","from","getBytes"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst protobuf = require('protons')\nconst keysPBM = protobuf(require('./keys.proto'))\nrequire('node-forge/lib/asn1')\nrequire('node-forge/lib/pbe')\nconst forge = require('node-forge/lib/forge')\nconst errcode = require('err-code')\n\nexports = module.exports\n\nconst supportedKeys = {\n  rsa: require('./rsa-class'),\n  ed25519: require('./ed25519-class'),\n  secp256k1: require('./secp256k1-class')(keysPBM, require('../random-bytes'))\n}\n\nexports.supportedKeys = supportedKeys\nexports.keysPBM = keysPBM\n\nconst ErrMissingSecp256K1 = {\n  message: 'secp256k1 support requires libp2p-crypto-secp256k1 package',\n  code: 'ERR_MISSING_PACKAGE'\n}\n\nfunction typeToKey (type) {\n  const key = supportedKeys[type.toLowerCase()]\n  if (!key) {\n    const supported = Object.keys(supportedKeys).join(' / ')\n    throw errcode(new Error(`invalid or unsupported key type ${type}. Must be ${supported}`), 'ERR_UNSUPPORTED_KEY_TYPE')\n  }\n  return key\n}\n\nexports.keyStretcher = require('./key-stretcher')\nexports.generateEphemeralKeyPair = require('./ephemeral-keys')\n\n// Generates a keypair of the given type and bitsize\nexports.generateKeyPair = async (type, bits) => { // eslint-disable-line require-await\n  return typeToKey(type).generateKeyPair(bits)\n}\n\n// Generates a keypair of the given type and bitsize\n// seed is a 32 byte uint8array\nexports.generateKeyPairFromSeed = async (type, seed, bits) => { // eslint-disable-line require-await\n  const key = typeToKey(type)\n  if (type.toLowerCase() !== 'ed25519') {\n    throw errcode(new Error('Seed key derivation is unimplemented for RSA or secp256k1'), 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE')\n  }\n  return key.generateKeyPairFromSeed(seed, bits)\n}\n\n// Converts a protobuf serialized public key into its\n// representative object\nexports.unmarshalPublicKey = (buf) => {\n  const decoded = keysPBM.PublicKey.decode(buf)\n  const data = decoded.Data\n\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPublicKey(data)\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PublicKey(data)\n    case keysPBM.KeyType.Secp256k1:\n      if (supportedKeys.secp256k1) {\n        return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data)\n      } else {\n        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code)\n      }\n    default:\n      typeToKey(decoded.Type) // throws because type is not supported\n  }\n}\n\n// Converts a public key object into a protobuf serialized public key\nexports.marshalPublicKey = (key, type) => {\n  type = (type || 'rsa').toLowerCase()\n  typeToKey(type) // check type\n  return key.bytes\n}\n\n// Converts a protobuf serialized private key into its\n// representative object\nexports.unmarshalPrivateKey = async (buf) => { // eslint-disable-line require-await\n  const decoded = keysPBM.PrivateKey.decode(buf)\n  const data = decoded.Data\n\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPrivateKey(data)\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data)\n    case keysPBM.KeyType.Secp256k1:\n      if (supportedKeys.secp256k1) {\n        return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data)\n      } else {\n        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code)\n      }\n    default:\n      typeToKey(decoded.Type) // throws because type is not supported\n  }\n}\n\n// Converts a private key object into a protobuf serialized private key\nexports.marshalPrivateKey = (key, type) => {\n  type = (type || 'rsa').toLowerCase()\n  typeToKey(type) // check type\n  return key.bytes\n}\n\nexports.import = async (pem, password) => { // eslint-disable-line require-await\n  const key = forge.pki.decryptRsaPrivateKey(pem, password)\n  if (key === null) {\n    throw errcode(new Error('Cannot read the key, most likely the password is wrong or not a RSA key'), 'ERR_CANNOT_DECRYPT_PEM')\n  }\n  let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key))\n  der = Buffer.from(der.getBytes(), 'binary')\n  return supportedKeys.rsa.unmarshalRsaPrivateKey(der)\n}\n"]},"metadata":{},"sourceType":"script"}