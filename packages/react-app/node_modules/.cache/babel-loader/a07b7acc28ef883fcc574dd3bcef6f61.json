{"ast":null,"code":"'use strict';\n\nconst abortable = require('abortable-iterator');\n\nconst AbortController = require('abort-controller');\n\nconst log = require('debug')('libp2p:mplex:stream');\n\nconst pushable = require('it-pushable');\n\nconst BufferList = require('bl/BufferList');\n\nconst {\n  MAX_MSG_SIZE\n} = require('./restrict-size');\n\nconst {\n  InitiatorMessageTypes,\n  ReceiverMessageTypes\n} = require('./message-types');\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send Called to send data through the stream\n * @param {function(Error)} [options.onEnd] Called whenever the stream ends\n * @param {string} [options.type] One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\n\n\nmodule.exports = ({\n  id,\n  name,\n  send,\n  onEnd = () => {},\n  type = 'initiator',\n  maxMsgSize = MAX_MSG_SIZE\n}) => {\n  const abortController = new AbortController();\n  const resetController = new AbortController();\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes;\n  const externalId = type === 'initiator' ? `i${id}` : `r${id}`;\n  name = String(name == null ? id : name);\n  let sourceEnded = false;\n  let sinkEnded = false;\n  let endErr;\n\n  const onSourceEnd = err => {\n    sourceEnded = true;\n    log('%s stream %s source end', type, name, err);\n    if (err && !endErr) endErr = err;\n\n    if (sinkEnded) {\n      stream.timeline.close = Date.now();\n      onEnd(endErr);\n    }\n  };\n\n  const onSinkEnd = err => {\n    sinkEnded = true;\n    log('%s stream %s sink end', type, name, err);\n    if (err && !endErr) endErr = err;\n\n    if (sourceEnded) {\n      stream.timeline.close = Date.now();\n      onEnd(endErr);\n    }\n  };\n\n  const stream = {\n    // Close for reading\n    close: () => stream.source.end(),\n    // Close for reading and writing (local error)\n    abort: err => {\n      log('%s stream %s abort', type, name, err); // End the source with the passed error\n\n      stream.source.end(err);\n      abortController.abort();\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => resetController.abort(),\n    sink: async source => {\n      source = abortable(source, [{\n        signal: abortController.signal,\n        options: {\n          abortMessage: 'stream aborted',\n          abortCode: 'ERR_MPLEX_STREAM_ABORT'\n        }\n      }, {\n        signal: resetController.signal,\n        options: {\n          abortMessage: 'stream reset',\n          abortCode: 'ERR_MPLEX_STREAM_RESET'\n        }\n      }]);\n\n      if (type === 'initiator') {\n        // If initiator, open a new stream\n        send({\n          id,\n          type: Types.NEW_STREAM,\n          data: name\n        });\n      }\n\n      try {\n        for await (let data of source) {\n          while (data.length) {\n            if (data.length <= maxMsgSize) {\n              send({\n                id,\n                type: Types.MESSAGE,\n                data\n              });\n              break;\n            }\n\n            data = BufferList.isBufferList(data) ? data : new BufferList(data);\n            send({\n              id,\n              type: Types.MESSAGE,\n              data: data.shallowSlice(0, maxMsgSize)\n            });\n            data.consume(maxMsgSize);\n          }\n        }\n      } catch (err) {\n        // Send no more data if this stream was remotely reset\n        if (err.code === 'ERR_MPLEX_STREAM_RESET') {\n          log('%s stream %s reset', type, name);\n        } else {\n          log('%s stream %s error', type, name, err);\n          send({\n            id,\n            type: Types.RESET\n          });\n        }\n\n        stream.source.end(err);\n        return onSinkEnd(err);\n      }\n\n      send({\n        id,\n        type: Types.CLOSE\n      });\n      onSinkEnd();\n    },\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  };\n  return stream;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-mplex/src/stream.js"],"names":["abortable","require","AbortController","log","pushable","BufferList","MAX_MSG_SIZE","InitiatorMessageTypes","ReceiverMessageTypes","module","exports","id","name","send","onEnd","type","maxMsgSize","abortController","resetController","Types","externalId","String","sourceEnded","sinkEnded","endErr","onSourceEnd","err","stream","timeline","close","Date","now","onSinkEnd","source","end","abort","reset","sink","signal","options","abortMessage","abortCode","NEW_STREAM","data","length","MESSAGE","isBufferList","shallowSlice","consume","code","RESET","CLOSE","open"],"mappings":"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","sourcesContent":["'use strict'\n\nconst abortable = require('abortable-iterator')\nconst AbortController = require('abort-controller')\nconst log = require('debug')('libp2p:mplex:stream')\nconst pushable = require('it-pushable')\nconst BufferList = require('bl/BufferList')\nconst { MAX_MSG_SIZE } = require('./restrict-size')\nconst { InitiatorMessageTypes, ReceiverMessageTypes } = require('./message-types')\n\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send Called to send data through the stream\n * @param {function(Error)} [options.onEnd] Called whenever the stream ends\n * @param {string} [options.type] One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\nmodule.exports = ({ id, name, send, onEnd = () => {}, type = 'initiator', maxMsgSize = MAX_MSG_SIZE }) => {\n  const abortController = new AbortController()\n  const resetController = new AbortController()\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes\n  const externalId = type === 'initiator' ? (`i${id}`) : `r${id}`\n\n  name = String(name == null ? id : name)\n\n  let sourceEnded = false\n  let sinkEnded = false\n  let endErr\n\n  const onSourceEnd = err => {\n    sourceEnded = true\n    log('%s stream %s source end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sinkEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const onSinkEnd = err => {\n    sinkEnded = true\n    log('%s stream %s sink end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sourceEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const stream = {\n    // Close for reading\n    close: () => stream.source.end(),\n    // Close for reading and writing (local error)\n    abort: err => {\n      log('%s stream %s abort', type, name, err)\n      // End the source with the passed error\n      stream.source.end(err)\n      abortController.abort()\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => resetController.abort(),\n    sink: async source => {\n      source = abortable(source, [\n        { signal: abortController.signal, options: { abortMessage: 'stream aborted', abortCode: 'ERR_MPLEX_STREAM_ABORT' } },\n        { signal: resetController.signal, options: { abortMessage: 'stream reset', abortCode: 'ERR_MPLEX_STREAM_RESET' } }\n      ])\n\n      if (type === 'initiator') { // If initiator, open a new stream\n        send({ id, type: Types.NEW_STREAM, data: name })\n      }\n\n      try {\n        for await (let data of source) {\n          while (data.length) {\n            if (data.length <= maxMsgSize) {\n              send({ id, type: Types.MESSAGE, data })\n              break\n            }\n            data = BufferList.isBufferList(data) ? data : new BufferList(data)\n            send({ id, type: Types.MESSAGE, data: data.shallowSlice(0, maxMsgSize) })\n            data.consume(maxMsgSize)\n          }\n        }\n      } catch (err) {\n        // Send no more data if this stream was remotely reset\n        if (err.code === 'ERR_MPLEX_STREAM_RESET') {\n          log('%s stream %s reset', type, name)\n        } else {\n          log('%s stream %s error', type, name, err)\n          send({ id, type: Types.RESET })\n        }\n\n        stream.source.end(err)\n        return onSinkEnd(err)\n      }\n\n      send({ id, type: Types.CLOSE })\n      onSinkEnd()\n    },\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  }\n\n  return stream\n}\n"]},"metadata":{},"sourceType":"script"}