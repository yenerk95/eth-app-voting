{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst basePacket = {\n  success: true,\n  time: 0,\n  text: ''\n};\n\nconst {\n  withTimeoutOption\n} = require('../utils');\n\nmodule.exports = ({\n  libp2p\n}) => {\n  return withTimeoutOption(async function* ping(peerId, options) {\n    options = options || {};\n    options.count = options.count || 10;\n\n    if (!PeerId.isPeerId(peerId)) {\n      peerId = PeerId.createFromCID(peerId);\n    }\n\n    let peer = libp2p.peerStore.get(peerId);\n\n    if (!peer) {\n      yield { ...basePacket,\n        text: `Looking up peer ${peerId}`\n      };\n      peer = await libp2p.peerRouting.findPeer(peerId);\n    }\n\n    yield { ...basePacket,\n      text: `PING ${peer.id.toB58String()}`\n    };\n    let packetCount = 0;\n    let totalTime = 0;\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(peer.id);\n        totalTime += time;\n        packetCount++;\n        yield { ...basePacket,\n          time\n        };\n      } catch (err) {\n        yield { ...basePacket,\n          success: false,\n          text: err.toString()\n        };\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount;\n      yield { ...basePacket,\n        text: `Average latency: ${average}ms`\n      };\n    }\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/ping.js"],"names":["PeerId","require","basePacket","success","time","text","withTimeoutOption","module","exports","libp2p","ping","peerId","options","count","isPeerId","createFromCID","peer","peerStore","get","peerRouting","findPeer","id","toB58String","packetCount","totalTime","i","err","toString","average"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,UAAU,GAAG;AAAEC,EAAAA,OAAO,EAAE,IAAX;AAAiBC,EAAAA,IAAI,EAAE,CAAvB;AAA0BC,EAAAA,IAAI,EAAE;AAAhC,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBL,OAAO,CAAC,UAAD,CAArC;;AAEAM,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC/B,SAAOH,iBAAiB,CAAC,gBAAiBI,IAAjB,CAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;AAC/DA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACC,KAAR,IAAiB,EAAjC;;AAEA,QAAI,CAACb,MAAM,CAACc,QAAP,CAAgBH,MAAhB,CAAL,EAA8B;AAC5BA,MAAAA,MAAM,GAAGX,MAAM,CAACe,aAAP,CAAqBJ,MAArB,CAAT;AACD;;AAED,QAAIK,IAAI,GAAGP,MAAM,CAACQ,SAAP,CAAiBC,GAAjB,CAAqBP,MAArB,CAAX;;AAEA,QAAI,CAACK,IAAL,EAAW;AACT,YAAM,EAAE,GAAGd,UAAL;AAAiBG,QAAAA,IAAI,EAAG,mBAAkBM,MAAO;AAAjD,OAAN;AACAK,MAAAA,IAAI,GAAG,MAAMP,MAAM,CAACU,WAAP,CAAmBC,QAAnB,CAA4BT,MAA5B,CAAb;AACD;;AAED,UAAM,EAAE,GAAGT,UAAL;AAAiBG,MAAAA,IAAI,EAAG,QAAOW,IAAI,CAACK,EAAL,CAAQC,WAAR,EAAsB;AAArD,KAAN;AAEA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACC,KAA5B,EAAmCY,CAAC,EAApC,EAAwC;AACtC,UAAI;AACF,cAAMrB,IAAI,GAAG,MAAMK,MAAM,CAACC,IAAP,CAAYM,IAAI,CAACK,EAAjB,CAAnB;AACAG,QAAAA,SAAS,IAAIpB,IAAb;AACAmB,QAAAA,WAAW;AACX,cAAM,EAAE,GAAGrB,UAAL;AAAiBE,UAAAA;AAAjB,SAAN;AACD,OALD,CAKE,OAAOsB,GAAP,EAAY;AACZ,cAAM,EAAE,GAAGxB,UAAL;AAAiBC,UAAAA,OAAO,EAAE,KAA1B;AAAiCE,UAAAA,IAAI,EAAEqB,GAAG,CAACC,QAAJ;AAAvC,SAAN;AACD;AACF;;AAED,QAAIJ,WAAJ,EAAiB;AACf,YAAMK,OAAO,GAAGJ,SAAS,GAAGD,WAA5B;AACA,YAAM,EAAE,GAAGrB,UAAL;AAAiBG,QAAAA,IAAI,EAAG,oBAAmBuB,OAAQ;AAAnD,OAAN;AACD;AACF,GAnCuB,CAAxB;AAoCD,CArCD","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst basePacket = { success: true, time: 0, text: '' }\nconst { withTimeoutOption } = require('../utils')\n\nmodule.exports = ({ libp2p }) => {\n  return withTimeoutOption(async function * ping (peerId, options) {\n    options = options || {}\n    options.count = options.count || 10\n\n    if (!PeerId.isPeerId(peerId)) {\n      peerId = PeerId.createFromCID(peerId)\n    }\n\n    let peer = libp2p.peerStore.get(peerId)\n\n    if (!peer) {\n      yield { ...basePacket, text: `Looking up peer ${peerId}` }\n      peer = await libp2p.peerRouting.findPeer(peerId)\n    }\n\n    yield { ...basePacket, text: `PING ${peer.id.toB58String()}` }\n\n    let packetCount = 0\n    let totalTime = 0\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(peer.id)\n        totalTime += time\n        packetCount++\n        yield { ...basePacket, time }\n      } catch (err) {\n        yield { ...basePacket, success: false, text: err.toString() }\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount\n      yield { ...basePacket, text: `Average latency: ${average}ms` }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}