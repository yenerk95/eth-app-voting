{"ast":null,"code":"module.exports = async socket => {\n  // if the socket is closing or closed, return end\n  if (socket.readyState >= 2) {\n    throw new Error('socket closed');\n  } // if open, return\n\n\n  if (socket.readyState === 1) {\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    const remove = socket && (socket.removeEventListener || socket.removeListener);\n\n    function cleanup() {\n      if (typeof remove === 'function') {\n        remove.call(socket, 'open', handleOpen);\n        remove.call(socket, 'error', handleErr);\n      }\n    }\n\n    function handleOpen() {\n      cleanup();\n      resolve();\n    }\n\n    function handleErr(evt) {\n      cleanup();\n      reject(evt);\n    }\n\n    socket.addEventListener('open', handleOpen);\n    socket.addEventListener('error', handleErr);\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-ws/ready.js"],"names":["module","exports","socket","readyState","Error","Promise","resolve","reject","remove","removeEventListener","removeListener","cleanup","call","handleOpen","handleErr","evt","addEventListener"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,MAAN,IAAgB;AAC/B;AACA,MAAIA,MAAM,CAACC,UAAP,IAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD,GAJ8B,CAM/B;;;AACA,MAAIF,MAAM,CAACC,UAAP,KAAsB,CAA1B,EAA6B;AAC3B;AACD;;AAED,SAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,MAAM,GAAGN,MAAM,KAAKA,MAAM,CAACO,mBAAP,IAA8BP,MAAM,CAACQ,cAA1C,CAArB;;AAEA,aAASC,OAAT,GAAoB;AAClB,UAAI,OAAOH,MAAP,KAAkB,UAAtB,EAAkC;AAChCA,QAAAA,MAAM,CAACI,IAAP,CAAYV,MAAZ,EAAoB,MAApB,EAA4BW,UAA5B;AACAL,QAAAA,MAAM,CAACI,IAAP,CAAYV,MAAZ,EAAoB,OAApB,EAA6BY,SAA7B;AACD;AACF;;AAED,aAASD,UAAT,GAAuB;AACrBF,MAAAA,OAAO;AAAIL,MAAAA,OAAO;AACnB;;AAED,aAASQ,SAAT,CAAoBC,GAApB,EAAyB;AACvBJ,MAAAA,OAAO;AAAIJ,MAAAA,MAAM,CAACQ,GAAD,CAAN;AACZ;;AAEDb,IAAAA,MAAM,CAACc,gBAAP,CAAwB,MAAxB,EAAgCH,UAAhC;AACAX,IAAAA,MAAM,CAACc,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC;AACD,GApBM,CAAP;AAqBD,CAhCD","sourcesContent":["module.exports = async socket => {\n  // if the socket is closing or closed, return end\n  if (socket.readyState >= 2) {\n    throw new Error('socket closed')\n  }\n\n  // if open, return\n  if (socket.readyState === 1) {\n    return\n  }\n\n  return new Promise((resolve, reject) => {\n    const remove = socket && (socket.removeEventListener || socket.removeListener)\n\n    function cleanup () {\n      if (typeof remove === 'function') {\n        remove.call(socket, 'open', handleOpen)\n        remove.call(socket, 'error', handleErr)\n      }\n    }\n\n    function handleOpen () {\n      cleanup(); resolve()\n    }\n\n    function handleErr (evt) {\n      cleanup(); reject(evt)\n    }\n\n    socket.addEventListener('open', handleOpen)\n    socket.addEventListener('error', handleErr)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}