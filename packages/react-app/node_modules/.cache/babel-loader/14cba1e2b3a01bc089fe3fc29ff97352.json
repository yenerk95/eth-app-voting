{"ast":null,"code":"'use strict';\n\nvar WS = require('libp2p-websockets');\n\nvar WebRTCStar = require('libp2p-webrtc-star');\n\nvar Multiplex = require('libp2p-mplex');\n\nvar _require = require('libp2p-noise'),\n    NOISE = _require.NOISE;\n\nvar SECIO = require('libp2p-secio');\n\nvar KadDHT = require('libp2p-kad-dht');\n\nvar GossipSub = require('libp2p-gossipsub');\n\nvar ipnsUtils = require('../ipns/routing/utils');\n\nmodule.exports = function () {\n  return {\n    dialer: {\n      maxParallelDials: 150,\n      // 150 total parallel multiaddr dials\n      maxDialsPerPeer: 4,\n      // Allow 4 multiaddrs to be dialed per peer in parallel\n      dialTimeout: 10e3 // 10 second dial timeout per peer dial\n\n    },\n    modules: {\n      transport: [WS, WebRTCStar],\n      streamMuxer: [Multiplex],\n      connEncryption: [SECIO, NOISE],\n      peerDiscovery: [],\n      dht: KadDHT,\n      pubsub: GossipSub\n    },\n    config: {\n      peerDiscovery: {\n        autoDial: true,\n        bootstrap: {\n          enabled: true\n        },\n        webRTCStar: {\n          enabled: true\n        },\n        websocketStar: {\n          enabled: true\n        }\n      },\n      dht: {\n        kBucketSize: 20,\n        enabled: false,\n        randomWalk: {\n          enabled: false\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true\n      }\n    },\n    metrics: {\n      enabled: true\n    },\n    peerStore: {\n      persistence: true,\n      threshold: 1\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/runtime/libp2p-browser.js"],"names":["WS","require","WebRTCStar","Multiplex","NOISE","SECIO","KadDHT","GossipSub","ipnsUtils","module","exports","dialer","maxParallelDials","maxDialsPerPeer","dialTimeout","modules","transport","streamMuxer","connEncryption","peerDiscovery","dht","pubsub","config","autoDial","bootstrap","enabled","webRTCStar","websocketStar","kBucketSize","randomWalk","validators","ipns","validator","selectors","selector","emitSelf","metrics","peerStore","persistence","threshold"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,mBAAD,CAAlB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,oBAAD,CAA1B;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;eACkBA,OAAO,CAAC,cAAD,C;IAAjBG,K,YAAAA,K;;AACR,IAAMC,KAAK,GAAGJ,OAAO,CAAC,cAAD,CAArB;;AACA,IAAMK,MAAM,GAAGL,OAAO,CAAC,gBAAD,CAAtB;;AACA,IAAMM,SAAS,GAAGN,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMO,SAAS,GAAGP,OAAO,CAAC,uBAAD,CAAzB;;AAEAQ,MAAM,CAACC,OAAP,GAAiB,YAAM;AACrB,SAAO;AACLC,IAAAA,MAAM,EAAE;AACNC,MAAAA,gBAAgB,EAAE,GADZ;AACiB;AACvBC,MAAAA,eAAe,EAAE,CAFX;AAEc;AACpBC,MAAAA,WAAW,EAAE,IAHP,CAGY;;AAHZ,KADH;AAMLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,CACThB,EADS,EAETE,UAFS,CADJ;AAKPe,MAAAA,WAAW,EAAE,CACXd,SADW,CALN;AAQPe,MAAAA,cAAc,EAAE,CACdb,KADc,EAEdD,KAFc,CART;AAYPe,MAAAA,aAAa,EAAE,EAZR;AAaPC,MAAAA,GAAG,EAAEd,MAbE;AAcPe,MAAAA,MAAM,EAAEd;AAdD,KANJ;AAsBLe,IAAAA,MAAM,EAAE;AACNH,MAAAA,aAAa,EAAE;AACbI,QAAAA,QAAQ,EAAE,IADG;AAEbC,QAAAA,SAAS,EAAE;AACTC,UAAAA,OAAO,EAAE;AADA,SAFE;AAKbC,QAAAA,UAAU,EAAE;AACVD,UAAAA,OAAO,EAAE;AADC,SALC;AAQbE,QAAAA,aAAa,EAAE;AACbF,UAAAA,OAAO,EAAE;AADI;AARF,OADT;AAaNL,MAAAA,GAAG,EAAE;AACHQ,QAAAA,WAAW,EAAE,EADV;AAEHH,QAAAA,OAAO,EAAE,KAFN;AAGHI,QAAAA,UAAU,EAAE;AACVJ,UAAAA,OAAO,EAAE;AADC,SAHT;AAMHK,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,EAAEvB,SAAS,CAACwB;AADN,SANT;AASHC,QAAAA,SAAS,EAAE;AACTF,UAAAA,IAAI,EAAEvB,SAAS,CAAC0B;AADP;AATR,OAbC;AA0BNb,MAAAA,MAAM,EAAE;AACNI,QAAAA,OAAO,EAAE,IADH;AAENU,QAAAA,QAAQ,EAAE;AAFJ;AA1BF,KAtBH;AAqDLC,IAAAA,OAAO,EAAE;AACPX,MAAAA,OAAO,EAAE;AADF,KArDJ;AAwDLY,IAAAA,SAAS,EAAE;AACTC,MAAAA,WAAW,EAAE,IADJ;AAETC,MAAAA,SAAS,EAAE;AAFF;AAxDN,GAAP;AA6DD,CA9DD","sourcesContent":["'use strict'\n\nconst WS = require('libp2p-websockets')\nconst WebRTCStar = require('libp2p-webrtc-star')\nconst Multiplex = require('libp2p-mplex')\nconst { NOISE } = require('libp2p-noise')\nconst SECIO = require('libp2p-secio')\nconst KadDHT = require('libp2p-kad-dht')\nconst GossipSub = require('libp2p-gossipsub')\nconst ipnsUtils = require('../ipns/routing/utils')\n\nmodule.exports = () => {\n  return {\n    dialer: {\n      maxParallelDials: 150, // 150 total parallel multiaddr dials\n      maxDialsPerPeer: 4, // Allow 4 multiaddrs to be dialed per peer in parallel\n      dialTimeout: 10e3 // 10 second dial timeout per peer dial\n    },\n    modules: {\n      transport: [\n        WS,\n        WebRTCStar\n      ],\n      streamMuxer: [\n        Multiplex\n      ],\n      connEncryption: [\n        SECIO,\n        NOISE\n      ],\n      peerDiscovery: [],\n      dht: KadDHT,\n      pubsub: GossipSub\n    },\n    config: {\n      peerDiscovery: {\n        autoDial: true,\n        bootstrap: {\n          enabled: true\n        },\n        webRTCStar: {\n          enabled: true\n        },\n        websocketStar: {\n          enabled: true\n        }\n      },\n      dht: {\n        kBucketSize: 20,\n        enabled: false,\n        randomWalk: {\n          enabled: false\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true\n      }\n    },\n    metrics: {\n      enabled: true\n    },\n    peerStore: {\n      persistence: true,\n      threshold: 1\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}