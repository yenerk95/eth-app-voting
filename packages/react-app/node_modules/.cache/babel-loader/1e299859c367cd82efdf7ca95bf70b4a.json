{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar utils = require('../../utils');\n\nvar errcode = require('err-code');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerId, 'rpc:put-value');\n  /**\n   * Process `PutValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  return /*#__PURE__*/function () {\n    var _putValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, msg) {\n      var key, record, errMsg, recordKey;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              key = msg.key;\n              log('key: %b', key);\n              record = msg.record;\n\n              if (record) {\n                _context.next = 7;\n                break;\n              }\n\n              errMsg = \"Empty record from: \".concat(peerId.toB58String());\n              log.error(errMsg);\n              throw errcode(new Error(errMsg), 'ERR_EMPTY_RECORD');\n\n            case 7:\n              _context.next = 9;\n              return dht._verifyRecordLocally(record);\n\n            case 9:\n              record.timeReceived = new Date();\n              recordKey = utils.bufferToKey(record.key);\n              _context.next = 13;\n              return dht.datastore.put(recordKey, record.serialize());\n\n            case 13:\n              return _context.abrupt(\"return\", msg);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function putValue(_x, _x2) {\n      return _putValue.apply(this, arguments);\n    }\n\n    return putValue;\n  }();\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/rpc/handlers/put-value.js"],"names":["utils","require","errcode","module","exports","dht","log","logger","peerId","msg","key","record","errMsg","toB58String","error","Error","_verifyRecordLocally","timeReceived","Date","recordKey","bufferToKey","datastore","put","serialize","putValue"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAS;AACxB,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,eAAzB,CAAZ;AAEA;;;;;;;;AAOA;AAAA,6EAAO,iBAAyBA,MAAzB,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,GADD,GACOD,GAAG,CAACC,GADX;AAELJ,cAAAA,GAAG,CAAC,SAAD,EAAYI,GAAZ,CAAH;AAEMC,cAAAA,MAJD,GAIUF,GAAG,CAACE,MAJd;;AAAA,kBAMAA,MANA;AAAA;AAAA;AAAA;;AAOGC,cAAAA,MAPH,gCAOkCJ,MAAM,CAACK,WAAP,EAPlC;AASHP,cAAAA,GAAG,CAACQ,KAAJ,CAAUF,MAAV;AATG,oBAUGV,OAAO,CAAC,IAAIa,KAAJ,CAAUH,MAAV,CAAD,EAAoB,kBAApB,CAVV;;AAAA;AAAA;AAAA,qBAaCP,GAAG,CAACW,oBAAJ,CAAyBL,MAAzB,CAbD;;AAAA;AAeLA,cAAAA,MAAM,CAACM,YAAP,GAAsB,IAAIC,IAAJ,EAAtB;AACMC,cAAAA,SAhBD,GAgBanB,KAAK,CAACoB,WAAN,CAAkBT,MAAM,CAACD,GAAzB,CAhBb;AAAA;AAAA,qBAiBCL,GAAG,CAACgB,SAAJ,CAAcC,GAAd,CAAkBH,SAAlB,EAA6BR,MAAM,CAACY,SAAP,EAA7B,CAjBD;;AAAA;AAAA,+CAmBEd,GAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAsBe,QAAtB;AAAA;AAAA;;AAAA,WAAsBA,QAAtB;AAAA;AAqBD,CA/BD","sourcesContent":["'use strict'\n\nconst utils = require('../../utils')\nconst errcode = require('err-code')\n\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:put-value')\n\n  /**\n   * Process `PutValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n  return async function putValue (peerId, msg) {\n    const key = msg.key\n    log('key: %b', key)\n\n    const record = msg.record\n\n    if (!record) {\n      const errMsg = `Empty record from: ${peerId.toB58String()}`\n\n      log.error(errMsg)\n      throw errcode(new Error(errMsg), 'ERR_EMPTY_RECORD')\n    }\n\n    await dht._verifyRecordLocally(record)\n\n    record.timeReceived = new Date()\n    const recordKey = utils.bufferToKey(record.key)\n    await dht.datastore.put(recordKey, record.serialize())\n\n    return msg\n  }\n}\n"]},"metadata":{},"sourceType":"script"}