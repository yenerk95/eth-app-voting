{"ast":null,"code":"/*!\n * hmac.js - hmac for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/HMAC\n *   https://tools.ietf.org/html/rfc2104\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/hmac.js\n */\n'use strict';\n\nvar _toConsumableArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('../internal/assert');\n/**\n * HMAC\n */\n\n\nvar HMAC = /*#__PURE__*/function () {\n  /**\n   * Create an HMAC.\n   * @param {Function} Hash\n   * @param {Number} size\n   * @param {Array} [x=[]]\n   * @param {Array} [y=[]]\n   */\n  function HMAC(Hash, size) {\n    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    _classCallCheck(this, HMAC);\n\n    assert(typeof Hash === 'function');\n    assert(size >>> 0 === size);\n    assert(Array.isArray(x));\n    assert(Array.isArray(y));\n    this.hash = Hash;\n    this.size = size;\n    this.x = x;\n    this.y = y;\n    this.inner = new Hash();\n    this.outer = new Hash();\n  }\n  /**\n   * Initialize HMAC context.\n   * @param {Buffer} data\n   */\n\n\n  _createClass(HMAC, [{\n    key: \"init\",\n    value: function init(key) {\n      var _this$inner, _this$outer;\n\n      assert(Buffer.isBuffer(key)); // Shorten key\n\n      if (key.length > this.size) {\n        var Hash = this.hash;\n        var h = new Hash();\n        h.init.apply(h, _toConsumableArray(this.x));\n        h.update(key);\n        key = h.final.apply(h, _toConsumableArray(this.y));\n        assert(key.length <= this.size);\n      } // Pad key\n\n\n      var pad = Buffer.allocUnsafe(this.size);\n\n      for (var i = 0; i < key.length; i++) {\n        pad[i] = key[i] ^ 0x36;\n      }\n\n      for (var _i = key.length; _i < pad.length; _i++) {\n        pad[_i] = 0x36;\n      }\n\n      (_this$inner = this.inner).init.apply(_this$inner, _toConsumableArray(this.x));\n\n      this.inner.update(pad);\n\n      for (var _i2 = 0; _i2 < key.length; _i2++) {\n        pad[_i2] = key[_i2] ^ 0x5c;\n      }\n\n      for (var _i3 = key.length; _i3 < pad.length; _i3++) {\n        pad[_i3] = 0x5c;\n      }\n\n      (_this$outer = this.outer).init.apply(_this$outer, _toConsumableArray(this.x));\n\n      this.outer.update(pad);\n      return this;\n    }\n    /**\n     * Update HMAC context.\n     * @param {Buffer} data\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(data) {\n      this.inner.update(data);\n      return this;\n    }\n    /**\n     * Finalize HMAC context.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: \"final\",\n    value: function final() {\n      var _this$inner2, _this$outer2;\n\n      this.outer.update((_this$inner2 = this.inner).final.apply(_this$inner2, _toConsumableArray(this.y)));\n      return (_this$outer2 = this.outer).final.apply(_this$outer2, _toConsumableArray(this.y));\n    }\n  }]);\n\n  return HMAC;\n}();\n/*\n * Expose\n */\n\n\nmodule.exports = HMAC;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/bcrypto/lib/internal/hmac.js"],"names":["assert","require","HMAC","Hash","size","x","y","Array","isArray","hash","inner","outer","key","Buffer","isBuffer","length","h","init","update","final","pad","allocUnsafe","i","data","module","exports"],"mappings":"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","sourcesContent":["/*!\n * hmac.js - hmac for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/HMAC\n *   https://tools.ietf.org/html/rfc2104\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/hmac.js\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\n\n/**\n * HMAC\n */\n\nclass HMAC {\n  /**\n   * Create an HMAC.\n   * @param {Function} Hash\n   * @param {Number} size\n   * @param {Array} [x=[]]\n   * @param {Array} [y=[]]\n   */\n\n  constructor(Hash, size, x = [], y = []) {\n    assert(typeof Hash === 'function');\n    assert((size >>> 0) === size);\n    assert(Array.isArray(x));\n    assert(Array.isArray(y));\n\n    this.hash = Hash;\n    this.size = size;\n    this.x = x;\n    this.y = y;\n\n    this.inner = new Hash();\n    this.outer = new Hash();\n  }\n\n  /**\n   * Initialize HMAC context.\n   * @param {Buffer} data\n   */\n\n  init(key) {\n    assert(Buffer.isBuffer(key));\n\n    // Shorten key\n    if (key.length > this.size) {\n      const Hash = this.hash;\n      const h = new Hash();\n\n      h.init(...this.x);\n      h.update(key);\n\n      key = h.final(...this.y);\n\n      assert(key.length <= this.size);\n    }\n\n    // Pad key\n    const pad = Buffer.allocUnsafe(this.size);\n\n    for (let i = 0; i < key.length; i++)\n      pad[i] = key[i] ^ 0x36;\n\n    for (let i = key.length; i < pad.length; i++)\n      pad[i] = 0x36;\n\n    this.inner.init(...this.x);\n    this.inner.update(pad);\n\n    for (let i = 0; i < key.length; i++)\n      pad[i] = key[i] ^ 0x5c;\n\n    for (let i = key.length; i < pad.length; i++)\n      pad[i] = 0x5c;\n\n    this.outer.init(...this.x);\n    this.outer.update(pad);\n\n    return this;\n  }\n\n  /**\n   * Update HMAC context.\n   * @param {Buffer} data\n   */\n\n  update(data) {\n    this.inner.update(data);\n    return this;\n  }\n\n  /**\n   * Finalize HMAC context.\n   * @returns {Buffer}\n   */\n\n  final() {\n    this.outer.update(this.inner.final(...this.y));\n    return this.outer.final(...this.y);\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = HMAC;\n"]},"metadata":{},"sourceType":"script"}