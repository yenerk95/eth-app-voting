{"ast":null,"code":"'use strict';\n\nconst {\n  isValidMultiaddr\n} = require('./utils');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  repo\n}) => {\n  return withTimeoutOption(async function rm(multiaddr, options) {\n    options = options || {};\n\n    if (multiaddr && !isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`);\n    }\n\n    let res = [];\n    const config = await repo.config.getAll();\n\n    if (options.all) {\n      res = config.Bootstrap || [];\n      config.Bootstrap = [];\n    } else {\n      config.Bootstrap = (config.Bootstrap || []).filter(ma => ma !== multiaddr);\n    }\n\n    await repo.config.set(config);\n\n    if (!options.all && multiaddr) {\n      res.push(multiaddr);\n    }\n\n    return {\n      Peers: res\n    };\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/bootstrap/rm.js"],"names":["isValidMultiaddr","require","withTimeoutOption","module","exports","repo","rm","multiaddr","options","Error","res","config","getAll","all","Bootstrap","filter","ma","set","push","Peers"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAuBC,OAAO,CAAC,SAAD,CAApC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,OAAO,CAAC,aAAD,CAArC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B,SAAOH,iBAAiB,CAAC,eAAeI,EAAf,CAAmBC,SAAnB,EAA8BC,OAA9B,EAAuC;AAC9DA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAID,SAAS,IAAI,CAACP,gBAAgB,CAACO,SAAD,CAAlC,EAA+C;AAC7C,YAAM,IAAIE,KAAJ,CAAW,GAAEF,SAAU,2BAAvB,CAAN;AACD;;AAED,QAAIG,GAAG,GAAG,EAAV;AACA,UAAMC,MAAM,GAAG,MAAMN,IAAI,CAACM,MAAL,CAAYC,MAAZ,EAArB;;AAEA,QAAIJ,OAAO,CAACK,GAAZ,EAAiB;AACfH,MAAAA,GAAG,GAAGC,MAAM,CAACG,SAAP,IAAoB,EAA1B;AACAH,MAAAA,MAAM,CAACG,SAAP,GAAmB,EAAnB;AACD,KAHD,MAGO;AACLH,MAAAA,MAAM,CAACG,SAAP,GAAmB,CAACH,MAAM,CAACG,SAAP,IAAoB,EAArB,EAAyBC,MAAzB,CAAgCC,EAAE,IAAIA,EAAE,KAAKT,SAA7C,CAAnB;AACD;;AAED,UAAMF,IAAI,CAACM,MAAL,CAAYM,GAAZ,CAAgBN,MAAhB,CAAN;;AAEA,QAAI,CAACH,OAAO,CAACK,GAAT,IAAgBN,SAApB,EAA+B;AAC7BG,MAAAA,GAAG,CAACQ,IAAJ,CAASX,SAAT;AACD;;AAED,WAAO;AAAEY,MAAAA,KAAK,EAAET;AAAT,KAAP;AACD,GAxBuB,CAAxB;AAyBD,CA1BD","sourcesContent":["'use strict'\n\nconst { isValidMultiaddr } = require('./utils')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ repo }) => {\n  return withTimeoutOption(async function rm (multiaddr, options) {\n    options = options || {}\n\n    if (multiaddr && !isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    let res = []\n    const config = await repo.config.getAll()\n\n    if (options.all) {\n      res = config.Bootstrap || []\n      config.Bootstrap = []\n    } else {\n      config.Bootstrap = (config.Bootstrap || []).filter(ma => ma !== multiaddr)\n    }\n\n    await repo.config.set(config)\n\n    if (!options.all && multiaddr) {\n      res.push(multiaddr)\n    }\n\n    return { Peers: res }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}