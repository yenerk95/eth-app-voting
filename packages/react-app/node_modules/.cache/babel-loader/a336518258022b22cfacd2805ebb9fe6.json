{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar sha = require('multihashing-async/src/sha');\n\nvar protobuf = require('protons');\n\nvar multibase = require('multibase');\n\nvar errcode = require('err-code');\n\nvar crypto = require('./rsa');\n\nvar pbm = protobuf(require('./keys.proto'));\n\nrequire('node-forge/lib/sha512');\n\nrequire('node-forge/lib/ed25519');\n\nvar forge = require('node-forge/lib/forge');\n\nvar RsaPublicKey = /*#__PURE__*/function () {\n  function RsaPublicKey(key) {\n    _classCallCheck(this, RsaPublicKey);\n\n    this._key = key;\n  }\n\n  _createClass(RsaPublicKey, [{\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, sig) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", crypto.hashAndVerify(this._key, sig, data));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function verify(_x, _x2) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }()\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkix(this._key);\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(bytes) {\n      return crypto.encrypt(this._key, bytes);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", sha.multihashing(this.bytes, 'sha2-256'));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function hash() {\n        return _hash.apply(this, arguments);\n      }\n\n      return hash;\n    }()\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PublicKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      });\n    }\n  }]);\n\n  return RsaPublicKey;\n}();\n\nvar RsaPrivateKey = /*#__PURE__*/function () {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  function RsaPrivateKey(key, publicKey) {\n    _classCallCheck(this, RsaPrivateKey);\n\n    this._key = key;\n    this._publicKey = publicKey;\n  }\n\n  _createClass(RsaPrivateKey, [{\n    key: \"genSecret\",\n    value: function genSecret() {\n      return crypto.getRandomValues(16);\n    }\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(message) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", crypto.hashAndSign(this._key, message));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function sign(_x3) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(bytes) {\n      return crypto.decrypt(this._key, bytes);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkcs1(this._key);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", sha.multihashing(this.bytes, 'sha2-256'));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function hash() {\n        return _hash2.apply(this, arguments);\n      }\n\n      return hash;\n    }()\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @returns {Promise<String>}\n     */\n\n  }, {\n    key: \"id\",\n    value: function () {\n      var _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var hash;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.public.hash();\n\n              case 2:\n                hash = _context5.sent;\n                return _context5.abrupt(\"return\", multibase.encode('base58btc', hash).toString().slice(1));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function id() {\n        return _id.apply(this, arguments);\n      }\n\n      return id;\n    }()\n    /**\n     * Exports the key into a password protected PEM format\n     *\n     * @param {string} password - The password to read the encrypted PEM\n     * @param {string} [format] - Defaults to 'pkcs-8'.\n     */\n\n  }, {\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(password) {\n        var format,\n            pem,\n            buffer,\n            asn1,\n            privateKey,\n            options,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                format = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 'pkcs-8';\n                // eslint-disable-line require-await\n                pem = null;\n                buffer = new forge.util.ByteBuffer(this.marshal());\n                asn1 = forge.asn1.fromDer(buffer);\n                privateKey = forge.pki.privateKeyFromAsn1(asn1);\n\n                if (!(format === 'pkcs-8')) {\n                  _context6.next = 10;\n                  break;\n                }\n\n                options = {\n                  algorithm: 'aes256',\n                  count: 10000,\n                  saltSize: 128 / 8,\n                  prfAlgorithm: 'sha512'\n                };\n                pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options);\n                _context6.next = 11;\n                break;\n\n              case 10:\n                throw errcode(new Error(\"Unknown export format '\".concat(format, \"'. Must be pkcs-8\")), 'ERR_INVALID_EXPORT_FORMAT');\n\n              case 11:\n                return _context6.abrupt(\"return\", pem);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _export(_x4) {\n        return _export2.apply(this, arguments);\n      }\n\n      return _export;\n    }()\n  }, {\n    key: \"public\",\n    get: function get() {\n      if (!this._publicKey) {\n        throw errcode(new Error('public key not provided'), 'ERR_PUBKEY_NOT_PROVIDED');\n      }\n\n      return new RsaPublicKey(this._publicKey);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PrivateKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      });\n    }\n  }]);\n\n  return RsaPrivateKey;\n}();\n\nfunction unmarshalRsaPrivateKey(_x5) {\n  return _unmarshalRsaPrivateKey.apply(this, arguments);\n}\n\nfunction _unmarshalRsaPrivateKey() {\n  _unmarshalRsaPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(bytes) {\n    var jwk, keys;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            jwk = crypto.utils.pkcs1ToJwk(bytes);\n            _context7.next = 3;\n            return crypto.unmarshalPrivateKey(jwk);\n\n          case 3:\n            keys = _context7.sent;\n            return _context7.abrupt(\"return\", new RsaPrivateKey(keys.privateKey, keys.publicKey));\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _unmarshalRsaPrivateKey.apply(this, arguments);\n}\n\nfunction unmarshalRsaPublicKey(bytes) {\n  var jwk = crypto.utils.pkixToJwk(bytes);\n  return new RsaPublicKey(jwk);\n}\n\nfunction fromJwk(_x6) {\n  return _fromJwk.apply(this, arguments);\n}\n\nfunction _fromJwk() {\n  _fromJwk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(jwk) {\n    var keys;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return crypto.unmarshalPrivateKey(jwk);\n\n          case 2:\n            keys = _context8.sent;\n            return _context8.abrupt(\"return\", new RsaPrivateKey(keys.privateKey, keys.publicKey));\n\n          case 4:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _fromJwk.apply(this, arguments);\n}\n\nfunction generateKeyPair(_x7) {\n  return _generateKeyPair.apply(this, arguments);\n}\n\nfunction _generateKeyPair() {\n  _generateKeyPair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(bits) {\n    var keys;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return crypto.generateKey(bits);\n\n          case 2:\n            keys = _context9.sent;\n            return _context9.abrupt(\"return\", new RsaPrivateKey(keys.privateKey, keys.publicKey));\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _generateKeyPair.apply(this, arguments);\n}\n\nmodule.exports = {\n  RsaPublicKey: RsaPublicKey,\n  RsaPrivateKey: RsaPrivateKey,\n  unmarshalRsaPublicKey: unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey: unmarshalRsaPrivateKey,\n  generateKeyPair: generateKeyPair,\n  fromJwk: fromJwk\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/keys/rsa-class.js"],"names":["sha","require","protobuf","multibase","errcode","crypto","pbm","forge","RsaPublicKey","key","_key","data","sig","hashAndVerify","utils","jwkToPkix","bytes","encrypt","equals","multihashing","PublicKey","encode","Type","KeyType","RSA","Data","marshal","RsaPrivateKey","publicKey","_publicKey","getRandomValues","message","hashAndSign","decrypt","jwkToPkcs1","public","hash","toString","slice","password","format","pem","buffer","util","ByteBuffer","asn1","fromDer","privateKey","pki","privateKeyFromAsn1","options","algorithm","count","saltSize","prfAlgorithm","encryptRsaPrivateKey","Error","PrivateKey","unmarshalRsaPrivateKey","jwk","pkcs1ToJwk","unmarshalPrivateKey","keys","unmarshalRsaPublicKey","pkixToJwk","fromJwk","generateKeyPair","bits","generateKey","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst sha = require('multihashing-async/src/sha')\nconst protobuf = require('protons')\nconst multibase = require('multibase')\nconst errcode = require('err-code')\n\nconst crypto = require('./rsa')\nconst pbm = protobuf(require('./keys.proto'))\nrequire('node-forge/lib/sha512')\nrequire('node-forge/lib/ed25519')\nconst forge = require('node-forge/lib/forge')\n\nclass RsaPublicKey {\n  constructor (key) {\n    this._key = key\n  }\n\n  async verify (data, sig) { // eslint-disable-line require-await\n    return crypto.hashAndVerify(this._key, sig, data)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkix(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  encrypt (bytes) {\n    return crypto.encrypt(this._key, bytes)\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  async hash () { // eslint-disable-line require-await\n    return sha.multihashing(this.bytes, 'sha2-256')\n  }\n}\n\nclass RsaPrivateKey {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  constructor (key, publicKey) {\n    this._key = key\n    this._publicKey = publicKey\n  }\n\n  genSecret () {\n    return crypto.getRandomValues(16)\n  }\n\n  async sign (message) { // eslint-disable-line require-await\n    return crypto.hashAndSign(this._key, message)\n  }\n\n  get public () {\n    if (!this._publicKey) {\n      throw errcode(new Error('public key not provided'), 'ERR_PUBKEY_NOT_PROVIDED')\n    }\n\n    return new RsaPublicKey(this._publicKey)\n  }\n\n  decrypt (bytes) {\n    return crypto.decrypt(this._key, bytes)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkcs1(this._key)\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  async hash () { // eslint-disable-line require-await\n    return sha.multihashing(this.bytes, 'sha2-256')\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @returns {Promise<String>}\n   */\n  async id () {\n    const hash = await this.public.hash()\n    return multibase.encode('base58btc', hash).toString().slice(1)\n  }\n\n  /**\n   * Exports the key into a password protected PEM format\n   *\n   * @param {string} password - The password to read the encrypted PEM\n   * @param {string} [format] - Defaults to 'pkcs-8'.\n   */\n  async export (password, format = 'pkcs-8') { // eslint-disable-line require-await\n    let pem = null\n\n    const buffer = new forge.util.ByteBuffer(this.marshal())\n    const asn1 = forge.asn1.fromDer(buffer)\n    const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n\n    if (format === 'pkcs-8') {\n      const options = {\n        algorithm: 'aes256',\n        count: 10000,\n        saltSize: 128 / 8,\n        prfAlgorithm: 'sha512'\n      }\n      pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options)\n    } else {\n      throw errcode(new Error(`Unknown export format '${format}'. Must be pkcs-8`), 'ERR_INVALID_EXPORT_FORMAT')\n    }\n\n    return pem\n  }\n}\n\nasync function unmarshalRsaPrivateKey (bytes) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes)\n  const keys = await crypto.unmarshalPrivateKey(jwk)\n  return new RsaPrivateKey(keys.privateKey, keys.publicKey)\n}\n\nfunction unmarshalRsaPublicKey (bytes) {\n  const jwk = crypto.utils.pkixToJwk(bytes)\n  return new RsaPublicKey(jwk)\n}\n\nasync function fromJwk (jwk) {\n  const keys = await crypto.unmarshalPrivateKey(jwk)\n  return new RsaPrivateKey(keys.privateKey, keys.publicKey)\n}\n\nasync function generateKeyPair (bits) {\n  const keys = await crypto.generateKey(bits)\n  return new RsaPrivateKey(keys.privateKey, keys.publicKey)\n}\n\nmodule.exports = {\n  RsaPublicKey,\n  RsaPrivateKey,\n  unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey,\n  generateKeyPair,\n  fromJwk\n}\n"]},"metadata":{},"sourceType":"script"}