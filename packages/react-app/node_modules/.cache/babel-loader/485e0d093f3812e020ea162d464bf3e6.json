{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar CID = require('cids');\n\nvar util = require('./util');\n/**\n * Resolves a path within a PB block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a PB block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\n\n\nexports.resolve = function (binaryBlob, path) {\n  var node = util.deserialize(binaryBlob);\n  var parts = path.split('/').filter(Boolean);\n\n  while (parts.length) {\n    var key = parts.shift();\n\n    if (node[key] === undefined) {\n      // There might be a matching named link\n      var _iterator = _createForOfIteratorHelper(node.Links),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var link = _step.value;\n\n          if (link.Name === key) {\n            return {\n              value: link.Hash,\n              remainderPath: parts.join('/')\n            };\n          }\n        } // There wasn't even a matching named link\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      throw new Error(\"Object has no property '\".concat(key, \"'\"));\n    }\n\n    node = node[key];\n\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Buffer} binaryBlob - Binary representation of a PB block\n * @yields {string} - A single path\n */\n\n\nexports.tree = /*#__PURE__*/_regeneratorRuntime.mark(function _callee(binaryBlob) {\n  var node, ii;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          node = util.deserialize(binaryBlob); // There is always a `Data` and `Links` property\n\n          _context.next = 3;\n          return 'Data';\n\n        case 3:\n          _context.next = 5;\n          return 'Links';\n\n        case 5:\n          ii = 0;\n\n        case 6:\n          if (!(ii < node.Links.length)) {\n            _context.next = 18;\n            break;\n          }\n\n          _context.next = 9;\n          return \"Links/\".concat(ii);\n\n        case 9:\n          _context.next = 11;\n          return \"Links/\".concat(ii, \"/Name\");\n\n        case 11:\n          _context.next = 13;\n          return \"Links/\".concat(ii, \"/Tsize\");\n\n        case 13:\n          _context.next = 15;\n          return \"Links/\".concat(ii, \"/Hash\");\n\n        case 15:\n          ii++;\n          _context.next = 6;\n          break;\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipld-dag-pb/src/resolver.js"],"names":["CID","require","util","exports","resolve","binaryBlob","path","node","deserialize","parts","split","filter","Boolean","length","key","shift","undefined","Links","link","Name","value","Hash","remainderPath","join","Error","isCID","tree","ii"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;AAEA;;;;;;;;;;;;;;;;AAcAE,OAAO,CAACC,OAAR,GAAkB,UAACC,UAAD,EAAaC,IAAb,EAAsB;AACtC,MAAIC,IAAI,GAAGL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CAAX;AAEA,MAAMI,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAd;;AACA,SAAOH,KAAK,CAACI,MAAb,EAAqB;AACnB,QAAMC,GAAG,GAAGL,KAAK,CAACM,KAAN,EAAZ;;AACA,QAAIR,IAAI,CAACO,GAAD,CAAJ,KAAcE,SAAlB,EAA6B;AAC3B;AAD2B,iDAERT,IAAI,CAACU,KAFG;AAAA;;AAAA;AAE3B,4DAA+B;AAAA,cAApBC,IAAoB;;AAC7B,cAAIA,IAAI,CAACC,IAAL,KAAcL,GAAlB,EAAuB;AACrB,mBAAO;AACLM,cAAAA,KAAK,EAAEF,IAAI,CAACG,IADP;AAELC,cAAAA,aAAa,EAAEb,KAAK,CAACc,IAAN,CAAW,GAAX;AAFV,aAAP;AAID;AACF,SAT0B,CAW3B;;AAX2B;AAAA;AAAA;AAAA;AAAA;;AAY3B,YAAM,IAAIC,KAAJ,mCAAqCV,GAArC,OAAN;AACD;;AAEDP,IAAAA,IAAI,GAAGA,IAAI,CAACO,GAAD,CAAX;;AACA,QAAId,GAAG,CAACyB,KAAJ,CAAUlB,IAAV,CAAJ,EAAqB;AACnB,aAAO;AACLa,QAAAA,KAAK,EAAEb,IADF;AAELe,QAAAA,aAAa,EAAEb,KAAK,CAACc,IAAN,CAAW,GAAX;AAFV,OAAP;AAID;AACF;;AAED,SAAO;AACLH,IAAAA,KAAK,EAAEb,IADF;AAELe,IAAAA,aAAa,EAAE;AAFV,GAAP;AAID,CAlCD;AAoCA;;;;;;;;;AAOAnB,OAAO,CAACuB,IAAR,yCAAe,iBAAYrB,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACPE,UAAAA,IADO,GACAL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CADA,EAGb;;AAHa;AAIb,iBAAM,MAAN;;AAJa;AAAA;AAKb,iBAAM,OAAN;;AALa;AAMJsB,UAAAA,EANI,GAMC,CAND;;AAAA;AAAA,gBAMIA,EAAE,GAAGpB,IAAI,CAACU,KAAL,CAAWJ,MANpB;AAAA;AAAA;AAAA;;AAAA;AAOX,iCAAec,EAAf;;AAPW;AAAA;AAQX,iCAAeA,EAAf;;AARW;AAAA;AASX,iCAAeA,EAAf;;AATW;AAAA;AAUX,iCAAeA,EAAf;;AAVW;AAM4BA,UAAAA,EAAE,EAN9B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["'use strict'\n\nconst CID = require('cids')\n\nconst util = require('./util')\n\n/**\n * Resolves a path within a PB block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a PB block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    if (node[key] === undefined) {\n      // There might be a matching named link\n      for (const link of node.Links) {\n        if (link.Name === key) {\n          return {\n            value: link.Hash,\n            remainderPath: parts.join('/')\n          }\n        }\n      }\n\n      // There wasn't even a matching named link\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Buffer} binaryBlob - Binary representation of a PB block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  // There is always a `Data` and `Links` property\n  yield 'Data'\n  yield 'Links'\n  for (let ii = 0; ii < node.Links.length; ii++) {\n    yield `Links/${ii}`\n    yield `Links/${ii}/Name`\n    yield `Links/${ii}/Tsize`\n    yield `Links/${ii}/Hash`\n  }\n}\n"]},"metadata":{},"sourceType":"script"}