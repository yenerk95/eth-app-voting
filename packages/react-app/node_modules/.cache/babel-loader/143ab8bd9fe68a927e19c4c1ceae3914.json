{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar lp = require('it-length-prefixed');\n\nvar handshake = require('it-handshake');\n\nvar _require = require('../protocol'),\n    CircuitPB = _require.CircuitRelay;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:circuit:stream-handler');\nlog.error = debug('libp2p:circuit:stream-handler:error');\n\nvar StreamHandler = /*#__PURE__*/function () {\n  /**\n   * Create a stream handler for connection\n   *\n   * @param {object} options\n   * @param {*} options.stream - A duplex iterable\n   * @param {Number} options.maxLength - max bytes length of message\n   */\n  function StreamHandler(_ref) {\n    var stream = _ref.stream,\n        _ref$maxLength = _ref.maxLength,\n        maxLength = _ref$maxLength === void 0 ? 4096 : _ref$maxLength;\n\n    _classCallCheck(this, StreamHandler);\n\n    this.stream = stream;\n    this.shake = handshake(this.stream);\n    this.decoder = lp.decode.fromReader(this.shake.reader, {\n      maxDataLength: maxLength\n    });\n  }\n  /**\n   * Read and decode message\n   * @async\n   * @returns {void}\n   */\n\n\n  _createClass(StreamHandler, [{\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var msg, value;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.decoder.next();\n\n              case 2:\n                msg = _context.sent;\n\n                if (!msg.value) {\n                  _context.next = 7;\n                  break;\n                }\n\n                value = CircuitPB.decode(msg.value.slice());\n                log('read message type', value.type);\n                return _context.abrupt(\"return\", value);\n\n              case 7:\n                log('read received no value, closing stream'); // End the stream, we didn't get data\n\n                this.close();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n    /**\n     * Encode and write array of buffers\n     *\n     * @param {*} msg An unencoded CircuitRelay protobuf message\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg) {\n      log('write message type %s', msg.type);\n      this.shake.write(lp.encode.single(CircuitPB.encode(msg)));\n    }\n    /**\n     * Return the handshake rest stream and invalidate handler\n     *\n     * @return {*} A duplex iterable\n     */\n\n  }, {\n    key: \"rest\",\n    value: function rest() {\n      this.shake.rest();\n      return this.shake.stream;\n    }\n  }, {\n    key: \"end\",\n    value: function end(msg) {\n      this.write(msg);\n      this.close();\n    }\n    /**\n     * Close the stream\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      log('closing the stream');\n      this.rest().sink([]);\n    }\n  }]);\n\n  return StreamHandler;\n}();\n\nmodule.exports = StreamHandler;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/circuit/circuit/stream-handler.js"],"names":["lp","require","handshake","CircuitPB","CircuitRelay","debug","log","error","StreamHandler","stream","maxLength","shake","decoder","decode","fromReader","reader","maxDataLength","next","msg","value","slice","type","close","write","encode","single","rest","sink","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,oBAAD,CAAlB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;eACoCA,OAAO,CAAC,aAAD,C;IAArBE,S,YAAdC,Y;;AAER,IAAMC,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMK,GAAG,GAAGD,KAAK,CAAC,+BAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,qCAAD,CAAjB;;IAEMG,a;AACJ;;;;;;;AAOA,+BAA2C;AAAA,QAA5BC,MAA4B,QAA5BA,MAA4B;AAAA,8BAApBC,SAAoB;AAAA,QAApBA,SAAoB,+BAAR,IAAQ;;AAAA;;AACzC,SAAKD,MAAL,GAAcA,MAAd;AAEA,SAAKE,KAAL,GAAaT,SAAS,CAAC,KAAKO,MAAN,CAAtB;AACA,SAAKG,OAAL,GAAeZ,EAAE,CAACa,MAAH,CAAUC,UAAV,CAAqB,KAAKH,KAAL,CAAWI,MAAhC,EAAwC;AAAEC,MAAAA,aAAa,EAAEN;AAAjB,KAAxC,CAAf;AACD;AAED;;;;;;;;;;;;;;;;;uBAMoB,KAAKE,OAAL,CAAaK,IAAb,E;;;AAAZC,gBAAAA,G;;qBACFA,GAAG,CAACC,K;;;;;AACAA,gBAAAA,K,GAAQhB,SAAS,CAACU,MAAV,CAAiBK,GAAG,CAACC,KAAJ,CAAUC,KAAV,EAAjB,C;AACdd,gBAAAA,GAAG,CAAC,mBAAD,EAAsBa,KAAK,CAACE,IAA5B,CAAH;iDACOF,K;;;AAGTb,gBAAAA,GAAG,CAAC,wCAAD,CAAH,C,CACA;;AACA,qBAAKgB,KAAL;;;;;;;;;;;;;;;;AAGF;;;;;;;;0BAKOJ,G,EAAK;AACVZ,MAAAA,GAAG,CAAC,uBAAD,EAA0BY,GAAG,CAACG,IAA9B,CAAH;AACA,WAAKV,KAAL,CAAWY,KAAX,CAAiBvB,EAAE,CAACwB,MAAH,CAAUC,MAAV,CAAiBtB,SAAS,CAACqB,MAAV,CAAiBN,GAAjB,CAAjB,CAAjB;AACD;AAED;;;;;;;;2BAKQ;AACN,WAAKP,KAAL,CAAWe,IAAX;AACA,aAAO,KAAKf,KAAL,CAAWF,MAAlB;AACD;;;wBAEIS,G,EAAK;AACR,WAAKK,KAAL,CAAWL,GAAX;AACA,WAAKI,KAAL;AACD;AAED;;;;;;;;4BAKS;AACPhB,MAAAA,GAAG,CAAC,oBAAD,CAAH;AACA,WAAKoB,IAAL,GAAYC,IAAZ,CAAiB,EAAjB;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBrB,aAAjB","sourcesContent":["'use strict'\n\nconst lp = require('it-length-prefixed')\nconst handshake = require('it-handshake')\nconst { CircuitRelay: CircuitPB } = require('../protocol')\n\nconst debug = require('debug')\nconst log = debug('libp2p:circuit:stream-handler')\nlog.error = debug('libp2p:circuit:stream-handler:error')\n\nclass StreamHandler {\n  /**\n   * Create a stream handler for connection\n   *\n   * @param {object} options\n   * @param {*} options.stream - A duplex iterable\n   * @param {Number} options.maxLength - max bytes length of message\n   */\n  constructor ({ stream, maxLength = 4096 }) {\n    this.stream = stream\n\n    this.shake = handshake(this.stream)\n    this.decoder = lp.decode.fromReader(this.shake.reader, { maxDataLength: maxLength })\n  }\n\n  /**\n   * Read and decode message\n   * @async\n   * @returns {void}\n   */\n  async read () {\n    const msg = await this.decoder.next()\n    if (msg.value) {\n      const value = CircuitPB.decode(msg.value.slice())\n      log('read message type', value.type)\n      return value\n    }\n\n    log('read received no value, closing stream')\n    // End the stream, we didn't get data\n    this.close()\n  }\n\n  /**\n   * Encode and write array of buffers\n   *\n   * @param {*} msg An unencoded CircuitRelay protobuf message\n   */\n  write (msg) {\n    log('write message type %s', msg.type)\n    this.shake.write(lp.encode.single(CircuitPB.encode(msg)))\n  }\n\n  /**\n   * Return the handshake rest stream and invalidate handler\n   *\n   * @return {*} A duplex iterable\n   */\n  rest () {\n    this.shake.rest()\n    return this.shake.stream\n  }\n\n  end (msg) {\n    this.write(msg)\n    this.close()\n  }\n\n  /**\n   * Close the stream\n   *\n   * @returns {void}\n   */\n  close () {\n    log('closing the stream')\n    this.rest().sink([])\n  }\n}\n\nmodule.exports = StreamHandler\n"]},"metadata":{},"sourceType":"script"}