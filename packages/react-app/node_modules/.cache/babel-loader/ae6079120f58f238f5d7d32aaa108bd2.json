{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar errCode = require('err-code');\n\nvar pAny = require('p-any');\n\nmodule.exports = function (node) {\n  var routers = node._modules.peerRouting || []; // If we have the dht, make it first\n\n  if (node._dht) {\n    routers.unshift(node._dht);\n  }\n\n  return {\n    /**\n     * Iterates over all peer routers in series to find the given peer.\n     *\n     * @param {String} id The id of the peer to find\n     * @param {object} [options]\n     * @param {number} [options.timeout] How long the query should run\n     * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n    findPeer: function () {\n      var _findPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, options) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (routers.length) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw errCode(new Error('No peer routers available'), 'NO_ROUTERS_AVAILABLE');\n\n              case 2:\n                return _context2.abrupt(\"return\", pAny(routers.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(router) {\n                    var result;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return router.findPeer(id, options);\n\n                          case 2:\n                            result = _context.sent;\n\n                            if (!(!result || Object.keys(result).length === 0)) {\n                              _context.next = 5;\n                              break;\n                            }\n\n                            throw errCode(new Error('not found'), 'NOT_FOUND');\n\n                          case 5:\n                            return _context.abrupt(\"return\", result);\n\n                          case 6:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }())));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function findPeer(_x, _x2) {\n        return _findPeer.apply(this, arguments);\n      }\n\n      return findPeer;\n    }()\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/peer-routing.js"],"names":["errCode","require","pAny","module","exports","node","routers","_modules","peerRouting","_dht","unshift","findPeer","id","options","length","Error","map","router","result","Object","keys"],"mappings":"AAAA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,OAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,MAAMC,OAAO,GAAGD,IAAI,CAACE,QAAL,CAAcC,WAAd,IAA6B,EAA7C,CADyB,CAGzB;;AACA,MAAIH,IAAI,CAACI,IAAT,EAAe;AACbH,IAAAA,OAAO,CAACI,OAAR,CAAgBL,IAAI,CAACI,IAArB;AACD;;AAED,SAAO;AACL;;;;;;;;AAQAE,IAAAA,QAAQ;AAAA,+EAAE,kBAAOC,EAAP,EAAWC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA,oBACHP,OAAO,CAACQ,MADL;AAAA;AAAA;AAAA;;AAAA,sBAEAd,OAAO,CAAC,IAAIe,KAAJ,CAAU,2BAAV,CAAD,EAAyC,sBAAzC,CAFP;;AAAA;AAAA,kDAKDb,IAAI,CAACI,OAAO,CAACU,GAAR;AAAA,sFAAY,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACDA,MAAM,CAACN,QAAP,CAAgBC,EAAhB,EAAoBC,OAApB,CADC;;AAAA;AAChBK,4BAAAA,MADgB;;AAAA,kCAIlB,CAACA,MAAD,IAAWC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBJ,MAApB,KAA+B,CAJxB;AAAA;AAAA;AAAA;;AAAA,kCAKdd,OAAO,CAAC,IAAIe,KAAJ,CAAU,WAAV,CAAD,EAAyB,WAAzB,CALO;;AAAA;AAAA,6DAQfG,MARe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAZ;;AAAA;AAAA;AAAA;AAAA,oBAAD,CALH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AATH,GAAP;AA0BD,CAlCD","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst pAny = require('p-any')\n\nmodule.exports = (node) => {\n  const routers = node._modules.peerRouting || []\n\n  // If we have the dht, make it first\n  if (node._dht) {\n    routers.unshift(node._dht)\n  }\n\n  return {\n    /**\n     * Iterates over all peer routers in series to find the given peer.\n     *\n     * @param {String} id The id of the peer to find\n     * @param {object} [options]\n     * @param {number} [options.timeout] How long the query should run\n     * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n    findPeer: async (id, options) => { // eslint-disable-line require-await\n      if (!routers.length) {\n        throw errCode(new Error('No peer routers available'), 'NO_ROUTERS_AVAILABLE')\n      }\n\n      return pAny(routers.map(async (router) => {\n        const result = await router.findPeer(id, options)\n\n        // If we don't have a result, we need to provide an error to keep trying\n        if (!result || Object.keys(result).length === 0) {\n          throw errCode(new Error('not found'), 'NOT_FOUND')\n        }\n\n        return result\n      }))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}