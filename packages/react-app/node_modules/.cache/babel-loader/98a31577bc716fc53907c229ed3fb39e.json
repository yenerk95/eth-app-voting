{"ast":null,"code":"'use strict';\n\nconst {\n  parseArgs\n} = require('./utils');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  return withTimeoutOption(async function get(cid, path, options) {\n    [cid, path, options] = parseArgs(cid, path, options);\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    if (path == null || path === '/') {\n      const value = await ipld.get(cid, options);\n      return {\n        value,\n        remainderPath: ''\n      };\n    } else {\n      let result;\n\n      for await (const entry of ipld.resolve(cid, path)) {\n        if (options.localResolve) {\n          return entry;\n        }\n\n        result = entry;\n      }\n\n      return result;\n    }\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/dag/get.js"],"names":["parseArgs","require","withTimeoutOption","module","exports","ipld","preload","get","cid","path","options","value","remainderPath","result","entry","resolve","localResolve"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,SAAD,CAA7B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,OAAO,CAAC,aAAD,CAArC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC,SAAOJ,iBAAiB,CAAC,eAAeK,GAAf,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AAC/D,KAACF,GAAD,EAAMC,IAAN,EAAYC,OAAZ,IAAuBV,SAAS,CAACQ,GAAD,EAAMC,IAAN,EAAYC,OAAZ,CAAhC;;AAEA,QAAIA,OAAO,CAACJ,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD;;AAED,QAAIC,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAK,GAA7B,EAAkC;AAChC,YAAME,KAAK,GAAG,MAAMN,IAAI,CAACE,GAAL,CAASC,GAAT,EAAcE,OAAd,CAApB;AAEA,aAAO;AACLC,QAAAA,KADK;AAELC,QAAAA,aAAa,EAAE;AAFV,OAAP;AAID,KAPD,MAOO;AACL,UAAIC,MAAJ;;AAEA,iBAAW,MAAMC,KAAjB,IAA0BT,IAAI,CAACU,OAAL,CAAaP,GAAb,EAAkBC,IAAlB,CAA1B,EAAmD;AACjD,YAAIC,OAAO,CAACM,YAAZ,EAA0B;AACxB,iBAAOF,KAAP;AACD;;AAEDD,QAAAA,MAAM,GAAGC,KAAT;AACD;;AAED,aAAOD,MAAP;AACD;AACF,GA3BuB,CAAxB;AA4BD,CA7BD","sourcesContent":["'use strict'\n\nconst { parseArgs } = require('./utils')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ ipld, preload }) => {\n  return withTimeoutOption(async function get (cid, path, options) {\n    [cid, path, options] = parseArgs(cid, path, options)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (path == null || path === '/') {\n      const value = await ipld.get(cid, options)\n\n      return {\n        value,\n        remainderPath: ''\n      }\n    } else {\n      let result\n\n      for await (const entry of ipld.resolve(cid, path)) {\n        if (options.localResolve) {\n          return entry\n        }\n\n        result = entry\n      }\n\n      return result\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}