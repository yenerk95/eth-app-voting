{"ast":null,"code":"'use strict';\n\nconst indentString = require('indent-string');\n\nconst cleanStack = require('clean-stack');\n\nconst cleanInternalStack = stack => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');\n\nclass AggregateError extends Error {\n  constructor(errors) {\n    if (!Array.isArray(errors)) {\n      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n    }\n\n    errors = [...errors].map(error => {\n      if (error instanceof Error) {\n        return error;\n      }\n\n      if (error !== null && typeof error === 'object') {\n        // Handle plain error objects with message property and/or possibly other metadata\n        return Object.assign(new Error(error.message), error);\n      }\n\n      return new Error(error);\n    });\n    let message = errors.map(error => {\n      // The `stack` property is not standardized, so we can't assume it exists\n      return typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n    }).join('\\n');\n    message = '\\n' + indentString(message, 4);\n    super(message);\n    this.name = 'AggregateError';\n    Object.defineProperty(this, '_errors', {\n      value: errors\n    });\n  }\n\n  *[Symbol.iterator]() {\n    for (const error of this._errors) {\n      yield error;\n    }\n  }\n\n}\n\nmodule.exports = AggregateError;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/aggregate-error/index.js"],"names":["indentString","require","cleanStack","cleanInternalStack","stack","replace","AggregateError","Error","constructor","errors","Array","isArray","TypeError","map","error","Object","assign","message","String","join","name","defineProperty","value","Symbol","iterator","_errors","module","exports"],"mappings":"AAAA;;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AAEA,MAAME,kBAAkB,GAAGC,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAc,+CAAd,EAA+D,EAA/D,CAApC;;AAEA,MAAMC,cAAN,SAA6BC,KAA7B,CAAmC;AAClCC,EAAAA,WAAW,CAACC,MAAD,EAAS;AACnB,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EAA4B;AAC3B,YAAM,IAAIG,SAAJ,CAAe,sCAAqC,OAAOH,MAAO,EAAlE,CAAN;AACA;;AAEDA,IAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYI,GAAZ,CAAgBC,KAAK,IAAI;AACjC,UAAIA,KAAK,YAAYP,KAArB,EAA4B;AAC3B,eAAOO,KAAP;AACA;;AAED,UAAIA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAvC,EAAiD;AAChD;AACA,eAAOC,MAAM,CAACC,MAAP,CAAc,IAAIT,KAAJ,CAAUO,KAAK,CAACG,OAAhB,CAAd,EAAwCH,KAAxC,CAAP;AACA;;AAED,aAAO,IAAIP,KAAJ,CAAUO,KAAV,CAAP;AACA,KAXQ,CAAT;AAaA,QAAIG,OAAO,GAAGR,MAAM,CAClBI,GADY,CACRC,KAAK,IAAI;AACb;AACA,aAAO,OAAOA,KAAK,CAACV,KAAb,KAAuB,QAAvB,GAAkCD,kBAAkB,CAACD,UAAU,CAACY,KAAK,CAACV,KAAP,CAAX,CAApD,GAAgFc,MAAM,CAACJ,KAAD,CAA7F;AACA,KAJY,EAKZK,IALY,CAKP,IALO,CAAd;AAMAF,IAAAA,OAAO,GAAG,OAAOjB,YAAY,CAACiB,OAAD,EAAU,CAAV,CAA7B;AACA,UAAMA,OAAN;AAEA,SAAKG,IAAL,GAAY,gBAAZ;AAEAL,IAAAA,MAAM,CAACM,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AAACC,MAAAA,KAAK,EAAEb;AAAR,KAAvC;AACA;;AAED,IAAGc,MAAM,CAACC,QAAV,IAAsB;AACrB,SAAK,MAAMV,KAAX,IAAoB,KAAKW,OAAzB,EAAkC;AACjC,YAAMX,KAAN;AACA;AACD;;AArCiC;;AAwCnCY,MAAM,CAACC,OAAP,GAAiBrB,cAAjB","sourcesContent":["'use strict';\nconst indentString = require('indent-string');\nconst cleanStack = require('clean-stack');\n\nconst cleanInternalStack = stack => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');\n\nclass AggregateError extends Error {\n\tconstructor(errors) {\n\t\tif (!Array.isArray(errors)) {\n\t\t\tthrow new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n\t\t}\n\n\t\terrors = [...errors].map(error => {\n\t\t\tif (error instanceof Error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (error !== null && typeof error === 'object') {\n\t\t\t\t// Handle plain error objects with message property and/or possibly other metadata\n\t\t\t\treturn Object.assign(new Error(error.message), error);\n\t\t\t}\n\n\t\t\treturn new Error(error);\n\t\t});\n\n\t\tlet message = errors\n\t\t\t.map(error => {\n\t\t\t\t// The `stack` property is not standardized, so we can't assume it exists\n\t\t\t\treturn typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n\t\t\t})\n\t\t\t.join('\\n');\n\t\tmessage = '\\n' + indentString(message, 4);\n\t\tsuper(message);\n\n\t\tthis.name = 'AggregateError';\n\n\t\tObject.defineProperty(this, '_errors', {value: errors});\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const error of this._errors) {\n\t\t\tyield error;\n\t\t}\n\t}\n}\n\nmodule.exports = AggregateError;\n"]},"metadata":{},"sourceType":"script"}