{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst pipe = require('it-pipe');\n\nconst lp = require('it-length-prefixed');\n\nconst pTimeout = require('p-timeout');\n\nconst {\n  consume\n} = require('streaming-iterables');\n\nconst MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology');\n\nconst rpc = require('./rpc');\n\nconst c = require('./constants');\n\nconst Message = require('./message');\n\nconst utils = require('./utils');\n/**\n * Handle network operations for the dht\n */\n\n\nclass Network {\n  /**\n   * Create a new network.\n   *\n   * @param {KadDHT} self\n   */\n  constructor(self) {\n    this.dht = self;\n    this.readMessageTimeout = c.READ_MESSAGE_TIMEOUT;\n    this._log = utils.logger(this.dht.peerId, 'net');\n    this._rpc = rpc(this.dht);\n    this._onPeerConnected = this._onPeerConnected.bind(this);\n    this._running = false;\n  }\n  /**\n   * Start the network.\n   * @returns {Promise<void>}\n   */\n\n\n  async start() {\n    if (this._running) {\n      return;\n    }\n\n    if (!this.dht.isStarted) {\n      throw errcode(new Error('Can not start network'), 'ERR_CANNOT_START_NETWORK');\n    }\n\n    this._running = true; // Only respond to queries when not in client mode\n\n    if (this.dht._clientMode === false) {\n      // Incoming streams\n      this.dht.registrar.handle(c.PROTOCOL_DHT, this._rpc);\n    } // register protocol with topology\n\n\n    const topology = new MulticodecTopology({\n      multicodecs: [c.PROTOCOL_DHT],\n      handlers: {\n        onConnect: this._onPeerConnected,\n        onDisconnect: () => {}\n      }\n    });\n    this._registrarId = await this.dht.registrar.register(topology);\n  }\n  /**\n   * Stop all network activity.\n   * @returns {Promise<void>}\n   */\n\n\n  async stop() {\n    if (!this.dht.isStarted && !this.isStarted) {\n      return;\n    }\n\n    this._running = false; // unregister protocol and handlers\n\n    await this.dht.registrar.unregister(this._registrarId);\n  }\n  /**\n   * Is the network online?\n   *\n   * @type {bool}\n   */\n\n\n  get isStarted() {\n    return this._running;\n  }\n  /**\n   * Are all network components there?\n   *\n   * @type {bool}\n   */\n\n\n  get isConnected() {\n    // TODO add a way to check if switch has started or not\n    return this.dht.isStarted && this.isStarted;\n  }\n  /**\n   * Registrar notifies a connection successfully with dht protocol.\n   * @private\n   * @param {PeerId} peerId remote peer id\n   * @returns {Promise<void>}\n   */\n\n\n  async _onPeerConnected(peerId) {\n    await this.dht._add(peerId);\n\n    this._log('added to the routing table: %s', peerId.toB58String());\n  }\n  /**\n   * Send a request and record RTT for latency measurements.\n   * @async\n   * @param {PeerId} to - The peer that should receive a message\n   * @param {Message} msg - The message to send.\n   * @returns {Promise<Message>}\n   */\n\n\n  async sendRequest(to, msg) {\n    // TODO: record latency\n    if (!this.isConnected) {\n      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');\n    }\n\n    const id = to.toB58String();\n\n    this._log('sending to: %s', id);\n\n    let conn = this.dht.registrar.connectionManager.get(to);\n\n    if (!conn) {\n      conn = await this.dht.dialer.connectToPeer(to);\n    }\n\n    const {\n      stream\n    } = await conn.newStream(c.PROTOCOL_DHT);\n    return this._writeReadMessage(stream, msg.serialize());\n  }\n  /**\n   * Sends a message without expecting an answer.\n   *\n   * @param {PeerId} to\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n\n\n  async sendMessage(to, msg) {\n    if (!this.isConnected) {\n      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');\n    }\n\n    const id = to.toB58String();\n\n    this._log('sending to: %s', id);\n\n    let conn = this.dht.registrar.connectionManager.get(to);\n\n    if (!conn) {\n      conn = await this.dht.dialer.connectToPeer(to);\n    }\n\n    const {\n      stream\n    } = await conn.newStream(c.PROTOCOL_DHT);\n    return this._writeMessage(stream, msg.serialize());\n  }\n  /**\n   * Write a message and read its response.\n   * If no response is received after the specified timeout\n   * this will error out.\n   *\n   * @param {DuplexIterable} stream - the stream to use\n   * @param {Buffer} msg - the message to send\n   * @returns {Promise<Message>}\n   * @private\n   */\n\n\n  async _writeReadMessage(stream, msg) {\n    // eslint-disable-line require-await\n    return pTimeout(writeReadMessage(stream, msg), this.readMessageTimeout);\n  }\n  /**\n   * Write a message to the given stream.\n   *\n   * @param {DuplexIterable} stream - the stream to use\n   * @param {Buffer} msg - the message to send\n   * @returns {Promise<void>}\n   * @private\n   */\n\n\n  _writeMessage(stream, msg) {\n    return pipe([msg], lp.encode(), stream, consume);\n  }\n\n}\n\nasync function writeReadMessage(stream, msg) {\n  const res = await pipe([msg], lp.encode(), stream, lp.decode(), async source => {\n    for await (const chunk of source) {\n      return chunk.slice();\n    }\n  });\n\n  if (res.length === 0) {\n    throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED');\n  }\n\n  return Message.deserialize(res);\n}\n\nmodule.exports = Network;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/network.js"],"names":["errcode","require","pipe","lp","pTimeout","consume","MulticodecTopology","rpc","c","Message","utils","Network","constructor","self","dht","readMessageTimeout","READ_MESSAGE_TIMEOUT","_log","logger","peerId","_rpc","_onPeerConnected","bind","_running","start","isStarted","Error","_clientMode","registrar","handle","PROTOCOL_DHT","topology","multicodecs","handlers","onConnect","onDisconnect","_registrarId","register","stop","unregister","isConnected","_add","toB58String","sendRequest","to","msg","id","conn","connectionManager","get","dialer","connectToPeer","stream","newStream","_writeReadMessage","serialize","sendMessage","_writeMessage","writeReadMessage","encode","res","decode","source","chunk","slice","length","deserialize","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,oBAAD,CAAlB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAcJ,OAAO,CAAC,qBAAD,CAA3B;;AAEA,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,oDAAD,CAAlC;;AAEA,MAAMM,GAAG,GAAGN,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAMO,CAAC,GAAGP,OAAO,CAAC,aAAD,CAAjB;;AACA,MAAMQ,OAAO,GAAGR,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,SAAD,CAArB;AAEA;;;;;AAGA,MAAMU,OAAN,CAAc;AACZ;;;;;AAKAC,EAAAA,WAAW,CAAEC,IAAF,EAAQ;AACjB,SAAKC,GAAL,GAAWD,IAAX;AACA,SAAKE,kBAAL,GAA0BP,CAAC,CAACQ,oBAA5B;AACA,SAAKC,IAAL,GAAYP,KAAK,CAACQ,MAAN,CAAa,KAAKJ,GAAL,CAASK,MAAtB,EAA8B,KAA9B,CAAZ;AACA,SAAKC,IAAL,GAAYb,GAAG,CAAC,KAAKO,GAAN,CAAf;AACA,SAAKO,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACD;AAED;;;;;;AAIA,QAAMC,KAAN,GAAe;AACb,QAAI,KAAKD,QAAT,EAAmB;AACjB;AACD;;AAED,QAAI,CAAC,KAAKT,GAAL,CAASW,SAAd,EAAyB;AACvB,YAAMzB,OAAO,CAAC,IAAI0B,KAAJ,CAAU,uBAAV,CAAD,EAAqC,0BAArC,CAAb;AACD;;AAED,SAAKH,QAAL,GAAgB,IAAhB,CATa,CAWb;;AACA,QAAI,KAAKT,GAAL,CAASa,WAAT,KAAyB,KAA7B,EAAoC;AAClC;AACA,WAAKb,GAAL,CAASc,SAAT,CAAmBC,MAAnB,CAA0BrB,CAAC,CAACsB,YAA5B,EAA0C,KAAKV,IAA/C;AACD,KAfY,CAiBb;;;AACA,UAAMW,QAAQ,GAAG,IAAIzB,kBAAJ,CAAuB;AACtC0B,MAAAA,WAAW,EAAE,CAACxB,CAAC,CAACsB,YAAH,CADyB;AAEtCG,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAE,KAAKb,gBADR;AAERc,QAAAA,YAAY,EAAE,MAAM,CAAE;AAFd;AAF4B,KAAvB,CAAjB;AAOA,SAAKC,YAAL,GAAoB,MAAM,KAAKtB,GAAL,CAASc,SAAT,CAAmBS,QAAnB,CAA4BN,QAA5B,CAA1B;AACD;AAED;;;;;;AAIA,QAAMO,IAAN,GAAc;AACZ,QAAI,CAAC,KAAKxB,GAAL,CAASW,SAAV,IAAuB,CAAC,KAAKA,SAAjC,EAA4C;AAC1C;AACD;;AACD,SAAKF,QAAL,GAAgB,KAAhB,CAJY,CAMZ;;AACA,UAAM,KAAKT,GAAL,CAASc,SAAT,CAAmBW,UAAnB,CAA8B,KAAKH,YAAnC,CAAN;AACD;AAED;;;;;;;AAKA,MAAIX,SAAJ,GAAiB;AACf,WAAO,KAAKF,QAAZ;AACD;AAED;;;;;;;AAKA,MAAIiB,WAAJ,GAAmB;AACjB;AACA,WAAO,KAAK1B,GAAL,CAASW,SAAT,IAAsB,KAAKA,SAAlC;AACD;AAED;;;;;;;;AAMA,QAAMJ,gBAAN,CAAwBF,MAAxB,EAAgC;AAC9B,UAAM,KAAKL,GAAL,CAAS2B,IAAT,CAActB,MAAd,CAAN;;AACA,SAAKF,IAAL,CAAU,gCAAV,EAA4CE,MAAM,CAACuB,WAAP,EAA5C;AACD;AAED;;;;;;;;;AAOA,QAAMC,WAAN,CAAmBC,EAAnB,EAAuBC,GAAvB,EAA4B;AAC1B;AACA,QAAI,CAAC,KAAKL,WAAV,EAAuB;AACrB,YAAMxC,OAAO,CAAC,IAAI0B,KAAJ,CAAU,oBAAV,CAAD,EAAkC,qBAAlC,CAAb;AACD;;AAED,UAAMoB,EAAE,GAAGF,EAAE,CAACF,WAAH,EAAX;;AACA,SAAKzB,IAAL,CAAU,gBAAV,EAA4B6B,EAA5B;;AAEA,QAAIC,IAAI,GAAG,KAAKjC,GAAL,CAASc,SAAT,CAAmBoB,iBAAnB,CAAqCC,GAArC,CAAyCL,EAAzC,CAAX;;AACA,QAAI,CAACG,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG,MAAM,KAAKjC,GAAL,CAASoC,MAAT,CAAgBC,aAAhB,CAA8BP,EAA9B,CAAb;AACD;;AAED,UAAM;AAAEQ,MAAAA;AAAF,QAAa,MAAML,IAAI,CAACM,SAAL,CAAe7C,CAAC,CAACsB,YAAjB,CAAzB;AAEA,WAAO,KAAKwB,iBAAL,CAAuBF,MAAvB,EAA+BP,GAAG,CAACU,SAAJ,EAA/B,CAAP;AACD;AAED;;;;;;;;;AAOA,QAAMC,WAAN,CAAmBZ,EAAnB,EAAuBC,GAAvB,EAA4B;AAC1B,QAAI,CAAC,KAAKL,WAAV,EAAuB;AACrB,YAAMxC,OAAO,CAAC,IAAI0B,KAAJ,CAAU,oBAAV,CAAD,EAAkC,qBAAlC,CAAb;AACD;;AAED,UAAMoB,EAAE,GAAGF,EAAE,CAACF,WAAH,EAAX;;AACA,SAAKzB,IAAL,CAAU,gBAAV,EAA4B6B,EAA5B;;AAEA,QAAIC,IAAI,GAAG,KAAKjC,GAAL,CAASc,SAAT,CAAmBoB,iBAAnB,CAAqCC,GAArC,CAAyCL,EAAzC,CAAX;;AACA,QAAI,CAACG,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG,MAAM,KAAKjC,GAAL,CAASoC,MAAT,CAAgBC,aAAhB,CAA8BP,EAA9B,CAAb;AACD;;AACD,UAAM;AAAEQ,MAAAA;AAAF,QAAa,MAAML,IAAI,CAACM,SAAL,CAAe7C,CAAC,CAACsB,YAAjB,CAAzB;AAEA,WAAO,KAAK2B,aAAL,CAAmBL,MAAnB,EAA2BP,GAAG,CAACU,SAAJ,EAA3B,CAAP;AACD;AAED;;;;;;;;;;;;AAUA,QAAMD,iBAAN,CAAyBF,MAAzB,EAAiCP,GAAjC,EAAsC;AAAE;AACtC,WAAOzC,QAAQ,CACbsD,gBAAgB,CAACN,MAAD,EAASP,GAAT,CADH,EAEb,KAAK9B,kBAFQ,CAAf;AAID;AAED;;;;;;;;;;AAQA0C,EAAAA,aAAa,CAAEL,MAAF,EAAUP,GAAV,EAAe;AAC1B,WAAO3C,IAAI,CACT,CAAC2C,GAAD,CADS,EAET1C,EAAE,CAACwD,MAAH,EAFS,EAGTP,MAHS,EAIT/C,OAJS,CAAX;AAMD;;AA7KW;;AAgLd,eAAeqD,gBAAf,CAAiCN,MAAjC,EAAyCP,GAAzC,EAA8C;AAC5C,QAAMe,GAAG,GAAG,MAAM1D,IAAI,CACpB,CAAC2C,GAAD,CADoB,EAEpB1C,EAAE,CAACwD,MAAH,EAFoB,EAGpBP,MAHoB,EAIpBjD,EAAE,CAAC0D,MAAH,EAJoB,EAKpB,MAAMC,MAAN,IAAgB;AACd,eAAW,MAAMC,KAAjB,IAA0BD,MAA1B,EAAkC;AAChC,aAAOC,KAAK,CAACC,KAAN,EAAP;AACD;AACF,GATmB,CAAtB;;AAYA,MAAIJ,GAAG,CAACK,MAAJ,KAAe,CAAnB,EAAsB;AACpB,UAAMjE,OAAO,CAAC,IAAI0B,KAAJ,CAAU,qBAAV,CAAD,EAAmC,yBAAnC,CAAb;AACD;;AAED,SAAOjB,OAAO,CAACyD,WAAR,CAAoBN,GAApB,CAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiBzD,OAAjB","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\n\nconst pipe = require('it-pipe')\nconst lp = require('it-length-prefixed')\nconst pTimeout = require('p-timeout')\nconst { consume } = require('streaming-iterables')\n\nconst MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology')\n\nconst rpc = require('./rpc')\nconst c = require('./constants')\nconst Message = require('./message')\nconst utils = require('./utils')\n\n/**\n * Handle network operations for the dht\n */\nclass Network {\n  /**\n   * Create a new network.\n   *\n   * @param {KadDHT} self\n   */\n  constructor (self) {\n    this.dht = self\n    this.readMessageTimeout = c.READ_MESSAGE_TIMEOUT\n    this._log = utils.logger(this.dht.peerId, 'net')\n    this._rpc = rpc(this.dht)\n    this._onPeerConnected = this._onPeerConnected.bind(this)\n    this._running = false\n  }\n\n  /**\n   * Start the network.\n   * @returns {Promise<void>}\n   */\n  async start () {\n    if (this._running) {\n      return\n    }\n\n    if (!this.dht.isStarted) {\n      throw errcode(new Error('Can not start network'), 'ERR_CANNOT_START_NETWORK')\n    }\n\n    this._running = true\n\n    // Only respond to queries when not in client mode\n    if (this.dht._clientMode === false) {\n      // Incoming streams\n      this.dht.registrar.handle(c.PROTOCOL_DHT, this._rpc)\n    }\n\n    // register protocol with topology\n    const topology = new MulticodecTopology({\n      multicodecs: [c.PROTOCOL_DHT],\n      handlers: {\n        onConnect: this._onPeerConnected,\n        onDisconnect: () => {}\n      }\n    })\n    this._registrarId = await this.dht.registrar.register(topology)\n  }\n\n  /**\n   * Stop all network activity.\n   * @returns {Promise<void>}\n   */\n  async stop () {\n    if (!this.dht.isStarted && !this.isStarted) {\n      return\n    }\n    this._running = false\n\n    // unregister protocol and handlers\n    await this.dht.registrar.unregister(this._registrarId)\n  }\n\n  /**\n   * Is the network online?\n   *\n   * @type {bool}\n   */\n  get isStarted () {\n    return this._running\n  }\n\n  /**\n   * Are all network components there?\n   *\n   * @type {bool}\n   */\n  get isConnected () {\n    // TODO add a way to check if switch has started or not\n    return this.dht.isStarted && this.isStarted\n  }\n\n  /**\n   * Registrar notifies a connection successfully with dht protocol.\n   * @private\n   * @param {PeerId} peerId remote peer id\n   * @returns {Promise<void>}\n   */\n  async _onPeerConnected (peerId) {\n    await this.dht._add(peerId)\n    this._log('added to the routing table: %s', peerId.toB58String())\n  }\n\n  /**\n   * Send a request and record RTT for latency measurements.\n   * @async\n   * @param {PeerId} to - The peer that should receive a message\n   * @param {Message} msg - The message to send.\n   * @returns {Promise<Message>}\n   */\n  async sendRequest (to, msg) {\n    // TODO: record latency\n    if (!this.isConnected) {\n      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE')\n    }\n\n    const id = to.toB58String()\n    this._log('sending to: %s', id)\n\n    let conn = this.dht.registrar.connectionManager.get(to)\n    if (!conn) {\n      conn = await this.dht.dialer.connectToPeer(to)\n    }\n\n    const { stream } = await conn.newStream(c.PROTOCOL_DHT)\n\n    return this._writeReadMessage(stream, msg.serialize())\n  }\n\n  /**\n   * Sends a message without expecting an answer.\n   *\n   * @param {PeerId} to\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n  async sendMessage (to, msg) {\n    if (!this.isConnected) {\n      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE')\n    }\n\n    const id = to.toB58String()\n    this._log('sending to: %s', id)\n\n    let conn = this.dht.registrar.connectionManager.get(to)\n    if (!conn) {\n      conn = await this.dht.dialer.connectToPeer(to)\n    }\n    const { stream } = await conn.newStream(c.PROTOCOL_DHT)\n\n    return this._writeMessage(stream, msg.serialize())\n  }\n\n  /**\n   * Write a message and read its response.\n   * If no response is received after the specified timeout\n   * this will error out.\n   *\n   * @param {DuplexIterable} stream - the stream to use\n   * @param {Buffer} msg - the message to send\n   * @returns {Promise<Message>}\n   * @private\n   */\n  async _writeReadMessage (stream, msg) { // eslint-disable-line require-await\n    return pTimeout(\n      writeReadMessage(stream, msg),\n      this.readMessageTimeout\n    )\n  }\n\n  /**\n   * Write a message to the given stream.\n   *\n   * @param {DuplexIterable} stream - the stream to use\n   * @param {Buffer} msg - the message to send\n   * @returns {Promise<void>}\n   * @private\n   */\n  _writeMessage (stream, msg) {\n    return pipe(\n      [msg],\n      lp.encode(),\n      stream,\n      consume\n    )\n  }\n}\n\nasync function writeReadMessage (stream, msg) {\n  const res = await pipe(\n    [msg],\n    lp.encode(),\n    stream,\n    lp.decode(),\n    async source => {\n      for await (const chunk of source) {\n        return chunk.slice()\n      }\n    }\n  )\n\n  if (res.length === 0) {\n    throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED')\n  }\n\n  return Message.deserialize(res)\n}\n\nmodule.exports = Network\n"]},"metadata":{},"sourceType":"script"}