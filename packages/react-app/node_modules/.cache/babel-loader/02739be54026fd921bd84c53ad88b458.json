{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p-ping');\nlog.error = debug('libp2p-ping:error');\n\nconst errCode = require('err-code');\n\nconst crypto = require('libp2p-crypto');\n\nconst pipe = require('it-pipe');\n\nconst {\n  toBuffer\n} = require('it-buffer');\n\nconst {\n  collect,\n  take\n} = require('streaming-iterables');\n\nconst {\n  PROTOCOL,\n  PING_LENGTH\n} = require('./constants');\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n * @param {Libp2p} node\n * @param {PeerId} peer\n * @returns {Promise<Number>}\n */\n\n\nasync function ping(node, peer) {\n  log('dialing %s to %s', PROTOCOL, peer.toB58String());\n  const {\n    stream\n  } = await node.dialProtocol(peer, PROTOCOL);\n  const start = new Date();\n  const data = crypto.randomBytes(PING_LENGTH);\n  const [result] = await pipe([data], stream, stream => take(1, stream), toBuffer, collect);\n  const end = Date.now();\n\n  if (!data.equals(result)) {\n    throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK');\n  }\n\n  return end - start;\n}\n/**\n * Subscribe ping protocol handler.\n * @param {Libp2p} node\n */\n\n\nfunction mount(node) {\n  node.handle(PROTOCOL, ({\n    stream\n  }) => pipe(stream, stream));\n}\n/**\n * Unsubscribe ping protocol handler.\n * @param {Libp2p} node\n */\n\n\nfunction unmount(node) {\n  node.unhandle(PROTOCOL);\n}\n\nexports = module.exports = ping;\nexports.mount = mount;\nexports.unmount = unmount;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/ping/index.js"],"names":["debug","require","log","error","errCode","crypto","pipe","toBuffer","collect","take","PROTOCOL","PING_LENGTH","ping","node","peer","toB58String","stream","dialProtocol","start","Date","data","randomBytes","result","end","now","equals","Error","mount","handle","unmount","unhandle","exports","module"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGF,KAAK,CAAC,aAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,mBAAD,CAAjB;;AACA,MAAMI,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,SAAD,CAApB;;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAeN,OAAO,CAAC,WAAD,CAA5B;;AACA,MAAM;AAAEO,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAoBR,OAAO,CAAC,qBAAD,CAAjC;;AAEA,MAAM;AAAES,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAA4BV,OAAO,CAAC,aAAD,CAAzC;AAEA;;;;;;;;AAMA,eAAeW,IAAf,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC/BZ,EAAAA,GAAG,CAAC,kBAAD,EAAqBQ,QAArB,EAA+BI,IAAI,CAACC,WAAL,EAA/B,CAAH;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAa,MAAMH,IAAI,CAACI,YAAL,CAAkBH,IAAlB,EAAwBJ,QAAxB,CAAzB;AAEA,QAAMQ,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAMC,IAAI,GAAGf,MAAM,CAACgB,WAAP,CAAmBV,WAAnB,CAAb;AAEA,QAAM,CAACW,MAAD,IAAW,MAAMhB,IAAI,CACzB,CAACc,IAAD,CADyB,EAEzBJ,MAFyB,EAGzBA,MAAM,IAAIP,IAAI,CAAC,CAAD,EAAIO,MAAJ,CAHW,EAIzBT,QAJyB,EAKzBC,OALyB,CAA3B;AAOA,QAAMe,GAAG,GAAGJ,IAAI,CAACK,GAAL,EAAZ;;AAEA,MAAI,CAACJ,IAAI,CAACK,MAAL,CAAYH,MAAZ,CAAL,EAA0B;AACxB,UAAMlB,OAAO,CAAC,IAAIsB,KAAJ,CAAU,yBAAV,CAAD,EAAuC,oBAAvC,CAAb;AACD;;AAED,SAAOH,GAAG,GAAGL,KAAb;AACD;AAED;;;;;;AAIA,SAASS,KAAT,CAAgBd,IAAhB,EAAsB;AACpBA,EAAAA,IAAI,CAACe,MAAL,CAAYlB,QAAZ,EAAsB,CAAC;AAAEM,IAAAA;AAAF,GAAD,KAAgBV,IAAI,CAACU,MAAD,EAASA,MAAT,CAA1C;AACD;AAED;;;;;;AAIA,SAASa,OAAT,CAAkBhB,IAAlB,EAAwB;AACtBA,EAAAA,IAAI,CAACiB,QAAL,CAAcpB,QAAd;AACD;;AAEDqB,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBnB,IAA3B;AACAmB,OAAO,CAACJ,KAAR,GAAgBA,KAAhB;AACAI,OAAO,CAACF,OAAR,GAAkBA,OAAlB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p-ping')\nlog.error = debug('libp2p-ping:error')\nconst errCode = require('err-code')\n\nconst crypto = require('libp2p-crypto')\nconst pipe = require('it-pipe')\nconst { toBuffer } = require('it-buffer')\nconst { collect, take } = require('streaming-iterables')\n\nconst { PROTOCOL, PING_LENGTH } = require('./constants')\n\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n * @param {Libp2p} node\n * @param {PeerId} peer\n * @returns {Promise<Number>}\n */\nasync function ping (node, peer) {\n  log('dialing %s to %s', PROTOCOL, peer.toB58String())\n\n  const { stream } = await node.dialProtocol(peer, PROTOCOL)\n\n  const start = new Date()\n  const data = crypto.randomBytes(PING_LENGTH)\n\n  const [result] = await pipe(\n    [data],\n    stream,\n    stream => take(1, stream),\n    toBuffer,\n    collect\n  )\n  const end = Date.now()\n\n  if (!data.equals(result)) {\n    throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK')\n  }\n\n  return end - start\n}\n\n/**\n * Subscribe ping protocol handler.\n * @param {Libp2p} node\n */\nfunction mount (node) {\n  node.handle(PROTOCOL, ({ stream }) => pipe(stream, stream))\n}\n\n/**\n * Unsubscribe ping protocol handler.\n * @param {Libp2p} node\n */\nfunction unmount (node) {\n  node.unhandle(PROTOCOL)\n}\n\nexports = module.exports = ping\nexports.mount = mount\nexports.unmount = unmount\n"]},"metadata":{},"sourceType":"script"}