{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar mh = require('multihashing-async').multihash;\n\nvar utils = require('../utils');\n\nvar Run = require('./run');\n/**\n * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.\n * Within each path, query peers from closest to farthest away.\n */\n\n\nvar Query = /*#__PURE__*/function () {\n  /**\n   * User-supplied function to set up an individual disjoint path. Per-path\n   * query state should be held in this function's closure.\n   * @typedef {makePath} function\n   * @param {number} pathNum - Numeric index from zero to numPaths - 1\n   * @returns {queryFunc} - Function to call on each peer in the query\n   */\n\n  /**\n   * Query function.\n   * @typedef {queryFunc} function\n   * @param {PeerId} next - Peer to query\n   * @param {function(Error, Object)} callback - Query result callback\n   */\n\n  /**\n   * Create a new query. The makePath function is called once per disjoint path, so that per-path\n   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to\n   * use when on that path.\n   *\n   * @param {DHT} dht - DHT instance\n   * @param {Buffer} key\n   * @param {makePath} makePath - Called to set up each disjoint path. Must return the query function.\n   */\n  function Query(dht, key, makePath) {\n    _classCallCheck(this, Query);\n\n    this.dht = dht;\n    this.key = key;\n    this.makePath = makePath;\n    this._log = utils.logger(this.dht.peerId, 'query:' + mh.toB58String(key));\n    this.running = false;\n    this._onStart = this._onStart.bind(this);\n    this._onComplete = this._onComplete.bind(this);\n  }\n  /**\n   * Run this query, start with the given list of peers first.\n   *\n   * @param {Array<PeerId>} peers\n   * @returns {Promise}\n   */\n\n\n  _createClass(Query, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peers) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.dht._queryManager.running) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this._log.error('Attempt to run query after shutdown');\n\n                return _context.abrupt(\"return\", {\n                  finalSet: new Set(),\n                  paths: []\n                });\n\n              case 3:\n                if (!(peers.length === 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                this._log.error('Running query with no peers');\n\n                return _context.abrupt(\"return\", {\n                  finalSet: new Set(),\n                  paths: []\n                });\n\n              case 6:\n                this._run = new Run(this);\n\n                this._log(\"query running with K=\".concat(this.dht.kBucketSize, \", A=\").concat(this.dht.concurrency, \", D=\").concat(Math.min(this.dht.disjointPaths, peers.length)));\n\n                this._run.once('start', this._onStart);\n\n                this._run.once('complete', this._onComplete);\n\n                return _context.abrupt(\"return\", this._run.execute(peers));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function run(_x) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /**\n     * Called when the run starts.\n     */\n\n  }, {\n    key: \"_onStart\",\n    value: function _onStart() {\n      this.running = true;\n      this._startTime = Date.now();\n\n      this._log('query:start'); // Register this query so we can stop it if the DHT stops\n\n\n      this.dht._queryManager.queryStarted(this);\n    }\n    /**\n     * Called when the run completes (even if there's an error).\n     */\n\n  }, {\n    key: \"_onComplete\",\n    value: function _onComplete() {\n      // Ensure worker queues for all paths are stopped at the end of the query\n      this.stop();\n    }\n    /**\n     * Stop the query.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._log(\"query:done in \".concat(Date.now() - this._startTime, \"ms\"));\n\n      if (this._run) {\n        this._log(\"\".concat(this._run.errors.length, \" of \").concat(this._run.peersSeen.size, \" peers errored (\").concat(this._run.errors.length / this._run.peersSeen.size * 100, \"% fail rate)\"));\n      }\n\n      if (!this.running) {\n        return;\n      }\n\n      this._run.removeListener('start', this._onStart);\n\n      this._run.removeListener('complete', this._onComplete);\n\n      this.running = false;\n      this._run && this._run.stop();\n\n      this.dht._queryManager.queryCompleted(this);\n    }\n  }]);\n\n  return Query;\n}();\n\nmodule.exports = Query;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/query/index.js"],"names":["mh","require","multihash","utils","Run","Query","dht","key","makePath","_log","logger","peerId","toB58String","running","_onStart","bind","_onComplete","peers","_queryManager","error","finalSet","Set","paths","length","_run","kBucketSize","concurrency","Math","min","disjointPaths","once","execute","_startTime","Date","now","queryStarted","stop","errors","peersSeen","size","removeListener","queryCompleted","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,SAAzC;;AAEA,IAAMC,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,IAAMG,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAnB;AAEA;;;;;;IAIMI,K;AACJ;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;;AASA,iBAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,QAAvB,EAAiC;AAAA;;AAC/B,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYN,KAAK,CAACO,MAAN,CAAa,KAAKJ,GAAL,CAASK,MAAtB,EAA8B,WAAWX,EAAE,CAACY,WAAH,CAAeL,GAAf,CAAzC,CAAZ;AAEA,SAAKM,OAAL,GAAe,KAAf;AAEA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACD;AAED;;;;;;;;;;;2FAMWE,K;;;;;oBACJ,KAAKX,GAAL,CAASY,aAAT,CAAuBL,O;;;;;AAC1B,qBAAKJ,IAAL,CAAUU,KAAV,CAAgB,qCAAhB;;iDACO;AAAEC,kBAAAA,QAAQ,EAAE,IAAIC,GAAJ,EAAZ;AAAuBC,kBAAAA,KAAK,EAAE;AAA9B,iB;;;sBAGLL,KAAK,CAACM,MAAN,KAAiB,C;;;;;AACnB,qBAAKd,IAAL,CAAUU,KAAV,CAAgB,6BAAhB;;iDACO;AAAEC,kBAAAA,QAAQ,EAAE,IAAIC,GAAJ,EAAZ;AAAuBC,kBAAAA,KAAK,EAAE;AAA9B,iB;;;AAGT,qBAAKE,IAAL,GAAY,IAAIpB,GAAJ,CAAQ,IAAR,CAAZ;;AAEA,qBAAKK,IAAL,gCAAkC,KAAKH,GAAL,CAASmB,WAA3C,iBAA6D,KAAKnB,GAAL,CAASoB,WAAtE,iBAAwFC,IAAI,CAACC,GAAL,CAAS,KAAKtB,GAAL,CAASuB,aAAlB,EAAiCZ,KAAK,CAACM,MAAvC,CAAxF;;AACA,qBAAKC,IAAL,CAAUM,IAAV,CAAe,OAAf,EAAwB,KAAKhB,QAA7B;;AACA,qBAAKU,IAAL,CAAUM,IAAV,CAAe,UAAf,EAA2B,KAAKd,WAAhC;;iDAEO,KAAKQ,IAAL,CAAUO,OAAV,CAAkBd,KAAlB,C;;;;;;;;;;;;;;;;AAGT;;;;;;+BAGY;AACV,WAAKJ,OAAL,GAAe,IAAf;AACA,WAAKmB,UAAL,GAAkBC,IAAI,CAACC,GAAL,EAAlB;;AACA,WAAKzB,IAAL,CAAU,aAAV,EAHU,CAKV;;;AACA,WAAKH,GAAL,CAASY,aAAT,CAAuBiB,YAAvB,CAAoC,IAApC;AACD;AAED;;;;;;kCAGe;AACb;AACA,WAAKC,IAAL;AACD;AAED;;;;;;2BAGQ;AACN,WAAK3B,IAAL,yBAA2BwB,IAAI,CAACC,GAAL,KAAa,KAAKF,UAA7C;;AAEA,UAAI,KAAKR,IAAT,EAAe;AACb,aAAKf,IAAL,WAAa,KAAKe,IAAL,CAAUa,MAAV,CAAiBd,MAA9B,iBAA2C,KAAKC,IAAL,CAAUc,SAAV,CAAoBC,IAA/D,6BAAsF,KAAKf,IAAL,CAAUa,MAAV,CAAiBd,MAAjB,GAA0B,KAAKC,IAAL,CAAUc,SAAV,CAAoBC,IAA9C,GAAqD,GAA3I;AACD;;AAED,UAAI,CAAC,KAAK1B,OAAV,EAAmB;AACjB;AACD;;AAED,WAAKW,IAAL,CAAUgB,cAAV,CAAyB,OAAzB,EAAkC,KAAK1B,QAAvC;;AACA,WAAKU,IAAL,CAAUgB,cAAV,CAAyB,UAAzB,EAAqC,KAAKxB,WAA1C;;AAEA,WAAKH,OAAL,GAAe,KAAf;AACA,WAAKW,IAAL,IAAa,KAAKA,IAAL,CAAUY,IAAV,EAAb;;AACA,WAAK9B,GAAL,CAASY,aAAT,CAAuBuB,cAAvB,CAAsC,IAAtC;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBtC,KAAjB","sourcesContent":["'use strict'\n\nconst mh = require('multihashing-async').multihash\n\nconst utils = require('../utils')\nconst Run = require('./run')\n\n/**\n * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.\n * Within each path, query peers from closest to farthest away.\n */\nclass Query {\n  /**\n   * User-supplied function to set up an individual disjoint path. Per-path\n   * query state should be held in this function's closure.\n   * @typedef {makePath} function\n   * @param {number} pathNum - Numeric index from zero to numPaths - 1\n   * @returns {queryFunc} - Function to call on each peer in the query\n   */\n\n  /**\n   * Query function.\n   * @typedef {queryFunc} function\n   * @param {PeerId} next - Peer to query\n   * @param {function(Error, Object)} callback - Query result callback\n   */\n\n  /**\n   * Create a new query. The makePath function is called once per disjoint path, so that per-path\n   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to\n   * use when on that path.\n   *\n   * @param {DHT} dht - DHT instance\n   * @param {Buffer} key\n   * @param {makePath} makePath - Called to set up each disjoint path. Must return the query function.\n   */\n  constructor (dht, key, makePath) {\n    this.dht = dht\n    this.key = key\n    this.makePath = makePath\n    this._log = utils.logger(this.dht.peerId, 'query:' + mh.toB58String(key))\n\n    this.running = false\n\n    this._onStart = this._onStart.bind(this)\n    this._onComplete = this._onComplete.bind(this)\n  }\n\n  /**\n   * Run this query, start with the given list of peers first.\n   *\n   * @param {Array<PeerId>} peers\n   * @returns {Promise}\n   */\n  async run (peers) { // eslint-disable-line require-await\n    if (!this.dht._queryManager.running) {\n      this._log.error('Attempt to run query after shutdown')\n      return { finalSet: new Set(), paths: [] }\n    }\n\n    if (peers.length === 0) {\n      this._log.error('Running query with no peers')\n      return { finalSet: new Set(), paths: [] }\n    }\n\n    this._run = new Run(this)\n\n    this._log(`query running with K=${this.dht.kBucketSize}, A=${this.dht.concurrency}, D=${Math.min(this.dht.disjointPaths, peers.length)}`)\n    this._run.once('start', this._onStart)\n    this._run.once('complete', this._onComplete)\n\n    return this._run.execute(peers)\n  }\n\n  /**\n   * Called when the run starts.\n   */\n  _onStart () {\n    this.running = true\n    this._startTime = Date.now()\n    this._log('query:start')\n\n    // Register this query so we can stop it if the DHT stops\n    this.dht._queryManager.queryStarted(this)\n  }\n\n  /**\n   * Called when the run completes (even if there's an error).\n   */\n  _onComplete () {\n    // Ensure worker queues for all paths are stopped at the end of the query\n    this.stop()\n  }\n\n  /**\n   * Stop the query.\n   */\n  stop () {\n    this._log(`query:done in ${Date.now() - this._startTime}ms`)\n\n    if (this._run) {\n      this._log(`${this._run.errors.length} of ${this._run.peersSeen.size} peers errored (${this._run.errors.length / this._run.peersSeen.size * 100}% fail rate)`)\n    }\n\n    if (!this.running) {\n      return\n    }\n\n    this._run.removeListener('start', this._onStart)\n    this._run.removeListener('complete', this._onComplete)\n\n    this.running = false\n    this._run && this._run.stop()\n    this.dht._queryManager.queryCompleted(this)\n  }\n}\n\nmodule.exports = Query\n"]},"metadata":{},"sourceType":"script"}