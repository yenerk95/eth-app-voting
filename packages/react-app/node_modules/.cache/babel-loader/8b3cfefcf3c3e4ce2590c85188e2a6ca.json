{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar propose = require('./propose');\n\nvar exchange = require('./exchange');\n\nvar finish = require('./finish'); // Performs initial communication over insecure channel to share keys, IDs,\n// and initiate communication, assigning all necessary params.\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _handshake = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(state, wrapped) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return propose(state, wrapped);\n\n          case 2:\n            _context.next = 4;\n            return exchange(state, wrapped);\n\n          case 4:\n            _context.next = 6;\n            return finish(state, wrapped);\n\n          case 6:\n            state.cleanSecrets();\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function handshake(_x, _x2) {\n    return _handshake.apply(this, arguments);\n  }\n\n  return handshake;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-secio/src/handshake/index.js"],"names":["propose","require","exchange","finish","module","exports","state","wrapped","cleanSecrets","handshake"],"mappings":"AAAA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB,C,CAEA;AACA;;;AACAG,MAAM,CAACC,OAAP;AAAA,4EAAiB,iBAA0BC,KAA1B,EAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACTP,OAAO,CAACM,KAAD,EAAQC,OAAR,CADE;;AAAA;AAAA;AAAA,mBAETL,QAAQ,CAACI,KAAD,EAAQC,OAAR,CAFC;;AAAA;AAAA;AAAA,mBAGTJ,MAAM,CAACG,KAAD,EAAQC,OAAR,CAHG;;AAAA;AAKfD,YAAAA,KAAK,CAACE,YAAN;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAgCC,SAAhC;AAAA;AAAA;;AAAA,SAAgCA,SAAhC;AAAA","sourcesContent":["'use strict'\n\nconst propose = require('./propose')\nconst exchange = require('./exchange')\nconst finish = require('./finish')\n\n// Performs initial communication over insecure channel to share keys, IDs,\n// and initiate communication, assigning all necessary params.\nmodule.exports = async function handshake (state, wrapped) {\n  await propose(state, wrapped)\n  await exchange(state, wrapped)\n  await finish(state, wrapped)\n\n  state.cleanSecrets()\n}\n"]},"metadata":{},"sourceType":"script"}