{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar multicodec = require('multicodec');\n\nvar nameToCodec = function nameToCodec(name) {\n  return multicodec[name.toUpperCase().replace(/-/g, '_')];\n};\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      pin = _ref.pin,\n      gcLock = _ref.gcLock,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dagNode, options) {\n      var optionDefaults, release, cid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n\n              if (!(options.cid && (options.format || options.hashAlg))) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hashAlg` options.');\n\n            case 5:\n              if (!(options.format && !options.hashAlg || !options.format && options.hashAlg)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error('Can\\'t put dag node. Please provide `format` AND `hashAlg` options.');\n\n            case 7:\n              optionDefaults = {\n                format: multicodec.DAG_CBOR,\n                hashAlg: multicodec.SHA2_256\n              }; // The IPLD expects the format and hashAlg as constants\n\n              if (options.format && typeof options.format === 'string') {\n                options.format = nameToCodec(options.format);\n              }\n\n              if (options.hashAlg && typeof options.hashAlg === 'string') {\n                options.hashAlg = nameToCodec(options.hashAlg);\n              }\n\n              options = options.cid ? options : Object.assign({}, optionDefaults, options); // js-ipld defaults to verion 1 CIDs. Hence set version 0 explicitly for\n              // dag-pb nodes\n\n              if (options.version === undefined) {\n                if (options.format === multicodec.DAG_PB && options.hashAlg === multicodec.SHA2_256) {\n                  options.version = 0;\n                } else {\n                  options.version = 1;\n                }\n              }\n\n              if (!options.pin) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 15;\n              return gcLock.readLock();\n\n            case 15:\n              release = _context.sent;\n\n            case 16:\n              _context.prev = 16;\n              _context.next = 19;\n              return ipld.put(dagNode, options.format, {\n                hashAlg: options.hashAlg,\n                cidVersion: options.version,\n                signal: options.signal\n              });\n\n            case 19:\n              cid = _context.sent;\n\n              if (!options.pin) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 23;\n              return pin.add(cid, {\n                lock: false\n              });\n\n            case 23:\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", cid);\n\n            case 25:\n              _context.prev = 25;\n\n              if (release) {\n                release();\n              }\n\n              return _context.finish(25);\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16,, 25, 28]]);\n    }));\n\n    function put(_x, _x2) {\n      return _put.apply(this, arguments);\n    }\n\n    return put;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/dag/put.js"],"names":["multicodec","require","nameToCodec","name","toUpperCase","replace","withTimeoutOption","module","exports","ipld","pin","gcLock","preload","dagNode","options","cid","format","hashAlg","Error","optionDefaults","DAG_CBOR","SHA2_256","Object","assign","version","undefined","DAG_PB","readLock","release","put","cidVersion","signal","add","lock"],"mappings":"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","sourcesContent":["'use strict'\n\nconst multicodec = require('multicodec')\nconst nameToCodec = name => multicodec[name.toUpperCase().replace(/-/g, '_')]\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ ipld, pin, gcLock, preload }) => {\n  return withTimeoutOption(async function put (dagNode, options) {\n    options = options || {}\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hashAlg` options.')\n    } else if (((options.format && !options.hashAlg) || (!options.format && options.hashAlg))) {\n      throw new Error('Can\\'t put dag node. Please provide `format` AND `hashAlg` options.')\n    }\n\n    const optionDefaults = {\n      format: multicodec.DAG_CBOR,\n      hashAlg: multicodec.SHA2_256\n    }\n\n    // The IPLD expects the format and hashAlg as constants\n    if (options.format && typeof options.format === 'string') {\n      options.format = nameToCodec(options.format)\n    }\n    if (options.hashAlg && typeof options.hashAlg === 'string') {\n      options.hashAlg = nameToCodec(options.hashAlg)\n    }\n\n    options = options.cid ? options : Object.assign({}, optionDefaults, options)\n\n    // js-ipld defaults to verion 1 CIDs. Hence set version 0 explicitly for\n    // dag-pb nodes\n    if (options.version === undefined) {\n      if (options.format === multicodec.DAG_PB && options.hashAlg === multicodec.SHA2_256) {\n        options.version = 0\n      } else {\n        options.version = 1\n      }\n    }\n\n    let release\n\n    if (options.pin) {\n      release = await gcLock.readLock()\n    }\n\n    try {\n      const cid = await ipld.put(dagNode, options.format, {\n        hashAlg: options.hashAlg,\n        cidVersion: options.version,\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await pin.add(cid, {\n          lock: false\n        })\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}