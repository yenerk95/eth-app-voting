{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar pipe = require('it-pipe');\n\nvar lp = require('it-length-prefixed');\n\nvar Message = require('../message');\n\nvar handlers = require('./handlers');\n\nvar utils = require('../utils');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerId, 'rpc');\n  var getMessageHandler = handlers(dht);\n  /**\n   * Process incoming DHT messages.\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   *\n   * @private\n   */\n\n  function handleMessage(_x, _x2) {\n    return _handleMessage.apply(this, arguments);\n  }\n  /**\n   * Handle incoming streams on the dht protocol.\n   * @param {Object} props\n   * @param {DuplexStream} props.stream\n   * @param {Connection} props.connection connection\n   * @returns {Promise<void>}\n   */\n\n\n  function _handleMessage() {\n    _handleMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(peerId, msg) {\n      var handler;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // get handler & execute it\n              handler = getMessageHandler(msg.type);\n              _context3.prev = 1;\n              _context3.next = 4;\n              return dht._add(peerId);\n\n            case 4:\n              _context3.next = 9;\n              break;\n\n            case 6:\n              _context3.prev = 6;\n              _context3.t0 = _context3[\"catch\"](1);\n              log.error('Failed to update the kbucket store', _context3.t0);\n\n            case 9:\n              if (handler) {\n                _context3.next = 12;\n                break;\n              }\n\n              log.error(\"no handler found for message type: \".concat(msg.type));\n              return _context3.abrupt(\"return\");\n\n            case 12:\n              return _context3.abrupt(\"return\", handler(peerId, msg));\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 6]]);\n    }));\n    return _handleMessage.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/function () {\n    var _onIncomingStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n      var stream, connection, peerId, idB58Str;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              stream = _ref2.stream, connection = _ref2.connection;\n              peerId = connection.remotePeer;\n              _context2.prev = 2;\n              _context2.next = 5;\n              return dht._add(peerId);\n\n            case 5:\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](2);\n              log.error(_context2.t0);\n\n            case 10:\n              idB58Str = peerId.toB58String();\n              log('from: %s', idB58Str);\n              _context2.next = 14;\n              return pipe(stream.source, lp.decode(), function (source) {\n                return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, msg, desMessage, res;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _iteratorNormalCompletion = true;\n                          _didIteratorError = false;\n                          _context.prev = 2;\n                          _iterator = _asyncIterator(source);\n\n                        case 4:\n                          _context.next = 6;\n                          return _awaitAsyncGenerator(_iterator.next());\n\n                        case 6:\n                          _step = _context.sent;\n                          _iteratorNormalCompletion = _step.done;\n                          _context.next = 10;\n                          return _awaitAsyncGenerator(_step.value);\n\n                        case 10:\n                          _value = _context.sent;\n\n                          if (_iteratorNormalCompletion) {\n                            _context.next = 23;\n                            break;\n                          }\n\n                          msg = _value;\n                          // handle the message\n                          desMessage = Message.deserialize(msg.slice());\n                          _context.next = 16;\n                          return _awaitAsyncGenerator(handleMessage(peerId, desMessage));\n\n                        case 16:\n                          res = _context.sent;\n\n                          if (!res) {\n                            _context.next = 20;\n                            break;\n                          }\n\n                          _context.next = 20;\n                          return res.serialize();\n\n                        case 20:\n                          _iteratorNormalCompletion = true;\n                          _context.next = 4;\n                          break;\n\n                        case 23:\n                          _context.next = 29;\n                          break;\n\n                        case 25:\n                          _context.prev = 25;\n                          _context.t0 = _context[\"catch\"](2);\n                          _didIteratorError = true;\n                          _iteratorError = _context.t0;\n\n                        case 29:\n                          _context.prev = 29;\n                          _context.prev = 30;\n\n                          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                            _context.next = 34;\n                            break;\n                          }\n\n                          _context.next = 34;\n                          return _awaitAsyncGenerator(_iterator.return());\n\n                        case 34:\n                          _context.prev = 34;\n\n                          if (!_didIteratorError) {\n                            _context.next = 37;\n                            break;\n                          }\n\n                          throw _iteratorError;\n\n                        case 37:\n                          return _context.finish(34);\n\n                        case 38:\n                          return _context.finish(29);\n\n                        case 39:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 25, 29, 39], [30,, 34, 38]]);\n                }))();\n              }, lp.encode(), stream.sink);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 7]]);\n    }));\n\n    function onIncomingStream(_x3) {\n      return _onIncomingStream.apply(this, arguments);\n    }\n\n    return onIncomingStream;\n  }();\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/rpc/index.js"],"names":["pipe","require","lp","Message","handlers","utils","module","exports","dht","log","logger","peerId","getMessageHandler","handleMessage","msg","handler","type","_add","error","stream","connection","remotePeer","idB58Str","toB58String","source","decode","desMessage","deserialize","slice","res","serialize","encode","sink","onIncomingStream"],"mappings":"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","sourcesContent":["'use strict'\n\nconst pipe = require('it-pipe')\nconst lp = require('it-length-prefixed')\n\nconst Message = require('../message')\nconst handlers = require('./handlers')\nconst utils = require('../utils')\n\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc')\n  const getMessageHandler = handlers(dht)\n\n  /**\n   * Process incoming DHT messages.\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   *\n   * @private\n   */\n  async function handleMessage (peerId, msg) {\n    // get handler & execute it\n    const handler = getMessageHandler(msg.type)\n\n    try {\n      await dht._add(peerId)\n    } catch (err) {\n      log.error('Failed to update the kbucket store', err)\n    }\n\n    if (!handler) {\n      log.error(`no handler found for message type: ${msg.type}`)\n      return\n    }\n\n    return handler(peerId, msg)\n  }\n\n  /**\n   * Handle incoming streams on the dht protocol.\n   * @param {Object} props\n   * @param {DuplexStream} props.stream\n   * @param {Connection} props.connection connection\n   * @returns {Promise<void>}\n   */\n  return async function onIncomingStream ({ stream, connection }) {\n    const peerId = connection.remotePeer\n\n    try {\n      await dht._add(peerId)\n    } catch (err) {\n      log.error(err)\n    }\n\n    const idB58Str = peerId.toB58String()\n    log('from: %s', idB58Str)\n\n    await pipe(\n      stream.source,\n      lp.decode(),\n      source => (async function * () {\n        for await (const msg of source) {\n          // handle the message\n          const desMessage = Message.deserialize(msg.slice())\n          const res = await handleMessage(peerId, desMessage)\n\n          // Not all handlers will return a response\n          if (res) {\n            yield res.serialize()\n          }\n        }\n      })(),\n      lp.encode(),\n      stream.sink\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}