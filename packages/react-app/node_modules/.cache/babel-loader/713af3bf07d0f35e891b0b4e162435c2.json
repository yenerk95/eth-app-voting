{"ast":null,"code":"import _slicedToArray from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(_syncBatch),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(syncBuffer),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(_syncConcat),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(_syncTake),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(_syncTime);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\nfunction __values(o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n      i,\n      q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\n\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n    throw e;\n  }), verb(\"return\"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: n === \"return\"\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\n\nfunction _batch(size, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _batch_1() {\n    var e_1, _a, dataBatch, iterable_1, iterable_1_1, data;\n\n    return _regeneratorRuntime.wrap(function _batch_1$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dataBatch = [];\n            _context.prev = 1;\n            iterable_1 = __asyncValues(iterable);\n\n          case 3:\n            _context.next = 5;\n            return __await(iterable_1.next());\n\n          case 5:\n            iterable_1_1 = _context.sent;\n\n            if (iterable_1_1.done) {\n              _context.next = 17;\n              break;\n            }\n\n            data = iterable_1_1.value;\n            dataBatch.push(data);\n\n            if (!(dataBatch.length === size)) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 12;\n            return __await(dataBatch);\n\n          case 12:\n            _context.next = 14;\n            return _context.sent;\n\n          case 14:\n            dataBatch = [];\n\n          case 15:\n            _context.next = 3;\n            break;\n\n          case 17:\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](1);\n            e_1 = {\n              error: _context.t0\n            };\n\n          case 22:\n            _context.prev = 22;\n            _context.prev = 23;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.next = 27;\n            return __await(_a.call(iterable_1));\n\n          case 27:\n            _context.prev = 27;\n\n            if (!e_1) {\n              _context.next = 30;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 30:\n            return _context.finish(27);\n\n          case 31:\n            return _context.finish(22);\n\n          case 32:\n            if (!(dataBatch.length > 0)) {\n              _context.next = 37;\n              break;\n            }\n\n            _context.next = 35;\n            return __await(dataBatch);\n\n          case 35:\n            _context.next = 37;\n            return _context.sent;\n\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _batch_1, null, [[1, 19, 22, 32], [23,, 27, 31]]);\n  }));\n}\n\nfunction _syncBatch(size, iterable) {\n  var dataBatch, _iterator, _step, data;\n\n  return _regeneratorRuntime.wrap(function _syncBatch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          dataBatch = [];\n          _iterator = _createForOfIteratorHelper(iterable);\n          _context2.prev = 2;\n\n          _iterator.s();\n\n        case 4:\n          if ((_step = _iterator.n()).done) {\n            _context2.next = 13;\n            break;\n          }\n\n          data = _step.value;\n          dataBatch.push(data);\n\n          if (!(dataBatch.length === size)) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.next = 10;\n          return dataBatch;\n\n        case 10:\n          dataBatch = [];\n\n        case 11:\n          _context2.next = 4;\n          break;\n\n        case 13:\n          _context2.next = 18;\n          break;\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](2);\n\n          _iterator.e(_context2.t0);\n\n        case 18:\n          _context2.prev = 18;\n\n          _iterator.f();\n\n          return _context2.finish(18);\n\n        case 21:\n          if (!(dataBatch.length > 0)) {\n            _context2.next = 24;\n            break;\n          }\n\n          _context2.next = 24;\n          return dataBatch;\n\n        case 24:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[2, 15, 18, 21]]);\n}\n\nfunction batch(size, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return batch(size, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator]) {\n    return _batch(size, iterable);\n  }\n\n  return _syncBatch(size, iterable);\n}\n\nfunction getIterator(iterable) {\n  if (typeof iterable.next === 'function') {\n    return iterable;\n  }\n\n  if (typeof iterable[Symbol.iterator] === 'function') {\n    return iterable[Symbol.iterator]();\n  }\n\n  if (typeof iterable[Symbol.asyncIterator] === 'function') {\n    return iterable[Symbol.asyncIterator]();\n  }\n\n  throw new TypeError('\"values\" does not to conform to any of the iterator or iterable protocols');\n}\n\nfunction defer() {\n  var reject;\n  var resolve;\n  var promise = new Promise(function (resolveFunc, rejectFunc) {\n    resolve = resolveFunc;\n    reject = rejectFunc;\n  });\n  return {\n    promise: promise,\n    reject: reject,\n    resolve: resolve\n  };\n} /// <reference lib=\"esnext.asynciterable\" />\n\n\nfunction _buffer(size, iterable) {\n  var iterator = getIterator(iterable);\n  var resultQueue = [];\n  var readQueue = [];\n  var reading = false;\n  var ended = false;\n\n  function fulfillReadQueue() {\n    while (readQueue.length > 0 && resultQueue.length > 0) {\n      var readDeferred = readQueue.shift();\n\n      var _resultQueue$shift = resultQueue.shift(),\n          error = _resultQueue$shift.error,\n          value = _resultQueue$shift.value;\n\n      if (error) {\n        readDeferred.reject(error);\n      } else {\n        readDeferred.resolve({\n          done: false,\n          value: value\n        });\n      }\n    }\n\n    while (readQueue.length > 0 && ended) {\n      var _readQueue$shift = readQueue.shift(),\n          resolve = _readQueue$shift.resolve;\n\n      resolve({\n        done: true,\n        value: undefined\n      });\n    }\n  }\n\n  function fillQueue() {\n    return _fillQueue.apply(this, arguments);\n  }\n\n  function _fillQueue() {\n    _fillQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$iterator$next, done, value;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!ended) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              if (!reading) {\n                _context3.next = 4;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 4:\n              if (!(resultQueue.length >= size)) {\n                _context3.next = 6;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 6:\n              reading = true;\n              _context3.prev = 7;\n              _context3.next = 10;\n              return iterator.next();\n\n            case 10:\n              _yield$iterator$next = _context3.sent;\n              done = _yield$iterator$next.done;\n              value = _yield$iterator$next.value;\n\n              if (done) {\n                ended = true;\n              } else {\n                resultQueue.push({\n                  value: value\n                });\n              }\n\n              _context3.next = 20;\n              break;\n\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](7);\n              ended = true;\n              resultQueue.push({\n                error: _context3.t0\n              });\n\n            case 20:\n              fulfillReadQueue();\n              reading = false;\n              fillQueue();\n\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee, null, [[7, 16]]);\n    }));\n    return _fillQueue.apply(this, arguments);\n  }\n\n  function next() {\n    return _next.apply(this, arguments);\n  }\n\n  function _next() {\n    _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _resultQueue$shift2, error, value, deferred;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(resultQueue.length > 0)) {\n                _context4.next = 6;\n                break;\n              }\n\n              _resultQueue$shift2 = resultQueue.shift(), error = _resultQueue$shift2.error, value = _resultQueue$shift2.value;\n\n              if (!error) {\n                _context4.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              fillQueue();\n              return _context4.abrupt(\"return\", {\n                done: false,\n                value: value\n              });\n\n            case 6:\n              if (!ended) {\n                _context4.next = 8;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                done: true,\n                value: undefined\n              });\n\n            case 8:\n              deferred = defer();\n              readQueue.push(deferred);\n              fillQueue();\n              return _context4.abrupt(\"return\", deferred.promise);\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _next.apply(this, arguments);\n  }\n\n  var asyncIterableIterator = _defineProperty({\n    next: next\n  }, Symbol.asyncIterator, function () {\n    return asyncIterableIterator;\n  });\n\n  return asyncIterableIterator;\n}\n\nfunction syncBuffer(size, iterable) {\n  var valueQueue, e, _iterator2, _step2, value, _i, _valueQueue, _value;\n\n  return _regeneratorRuntime.wrap(function syncBuffer$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          valueQueue = [];\n          _context5.prev = 1;\n          _iterator2 = _createForOfIteratorHelper(iterable);\n          _context5.prev = 3;\n\n          _iterator2.s();\n\n        case 5:\n          if ((_step2 = _iterator2.n()).done) {\n            _context5.next = 14;\n            break;\n          }\n\n          value = _step2.value;\n          valueQueue.push(value);\n\n          if (!(valueQueue.length <= size)) {\n            _context5.next = 10;\n            break;\n          }\n\n          return _context5.abrupt(\"continue\", 12);\n\n        case 10:\n          _context5.next = 12;\n          return valueQueue.shift();\n\n        case 12:\n          _context5.next = 5;\n          break;\n\n        case 14:\n          _context5.next = 19;\n          break;\n\n        case 16:\n          _context5.prev = 16;\n          _context5.t0 = _context5[\"catch\"](3);\n\n          _iterator2.e(_context5.t0);\n\n        case 19:\n          _context5.prev = 19;\n\n          _iterator2.f();\n\n          return _context5.finish(19);\n\n        case 22:\n          _context5.next = 27;\n          break;\n\n        case 24:\n          _context5.prev = 24;\n          _context5.t1 = _context5[\"catch\"](1);\n          e = _context5.t1;\n\n        case 27:\n          _i = 0, _valueQueue = valueQueue;\n\n        case 28:\n          if (!(_i < _valueQueue.length)) {\n            _context5.next = 35;\n            break;\n          }\n\n          _value = _valueQueue[_i];\n          _context5.next = 32;\n          return _value;\n\n        case 32:\n          _i++;\n          _context5.next = 28;\n          break;\n\n        case 35:\n          if (!e) {\n            _context5.next = 37;\n            break;\n          }\n\n          throw e;\n\n        case 37:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked2, null, [[1, 24], [3, 16, 19, 22]]);\n}\n\nfunction buffer(size, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return buffer(size, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator]) {\n    return _buffer(size, iterable);\n  }\n\n  return syncBuffer(size, iterable);\n}\n\nfunction _collect(_x) {\n  return _collect2.apply(this, arguments);\n}\n\nfunction _collect2() {\n  _collect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(iterable) {\n    var e_1, _a, values, iterable_1, iterable_1_1, value;\n\n    return _regeneratorRuntime.wrap(function _callee11$(_context28) {\n      while (1) {\n        switch (_context28.prev = _context28.next) {\n          case 0:\n            values = [];\n            _context28.prev = 1;\n            iterable_1 = __asyncValues(iterable);\n\n          case 3:\n            _context28.next = 5;\n            return iterable_1.next();\n\n          case 5:\n            iterable_1_1 = _context28.sent;\n\n            if (iterable_1_1.done) {\n              _context28.next = 11;\n              break;\n            }\n\n            value = iterable_1_1.value;\n            values.push(value);\n\n          case 9:\n            _context28.next = 3;\n            break;\n\n          case 11:\n            _context28.next = 16;\n            break;\n\n          case 13:\n            _context28.prev = 13;\n            _context28.t0 = _context28[\"catch\"](1);\n            e_1 = {\n              error: _context28.t0\n            };\n\n          case 16:\n            _context28.prev = 16;\n            _context28.prev = 17;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context28.next = 21;\n              break;\n            }\n\n            _context28.next = 21;\n            return _a.call(iterable_1);\n\n          case 21:\n            _context28.prev = 21;\n\n            if (!e_1) {\n              _context28.next = 24;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 24:\n            return _context28.finish(21);\n\n          case 25:\n            return _context28.finish(16);\n\n          case 26:\n            return _context28.abrupt(\"return\", values);\n\n          case 27:\n          case \"end\":\n            return _context28.stop();\n        }\n      }\n    }, _callee11, null, [[1, 13, 16, 26], [17,, 21, 25]]);\n  }));\n  return _collect2.apply(this, arguments);\n}\n\nfunction collect(iterable) {\n  if (iterable[Symbol.asyncIterator]) {\n    return _collect(iterable);\n  }\n\n  return Array.from(iterable);\n}\n\nfunction _concat(iterables) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _concat_1() {\n    var e_1, _a, iterables_1, iterables_1_1, iterable;\n\n    return _regeneratorRuntime.wrap(function _concat_1$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            iterables_1 = __asyncValues(iterables);\n\n          case 2:\n            _context6.next = 4;\n            return __await(iterables_1.next());\n\n          case 4:\n            iterables_1_1 = _context6.sent;\n\n            if (iterables_1_1.done) {\n              _context6.next = 14;\n              break;\n            }\n\n            iterable = iterables_1_1.value;\n            _context6.t0 = __await;\n            return _context6.delegateYield(__asyncDelegator(__asyncValues(iterable)), \"t1\", 9);\n\n          case 9:\n            _context6.t2 = _context6.t1;\n            _context6.next = 12;\n            return (0, _context6.t0)(_context6.t2);\n\n          case 12:\n            _context6.next = 2;\n            break;\n\n          case 14:\n            _context6.next = 19;\n            break;\n\n          case 16:\n            _context6.prev = 16;\n            _context6.t3 = _context6[\"catch\"](0);\n            e_1 = {\n              error: _context6.t3\n            };\n\n          case 19:\n            _context6.prev = 19;\n            _context6.prev = 20;\n\n            if (!(iterables_1_1 && !iterables_1_1.done && (_a = iterables_1.return))) {\n              _context6.next = 24;\n              break;\n            }\n\n            _context6.next = 24;\n            return __await(_a.call(iterables_1));\n\n          case 24:\n            _context6.prev = 24;\n\n            if (!e_1) {\n              _context6.next = 27;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 27:\n            return _context6.finish(24);\n\n          case 28:\n            return _context6.finish(19);\n\n          case 29:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _concat_1, null, [[0, 16, 19, 29], [20,, 24, 28]]);\n  }));\n}\n\nfunction _syncConcat(iterables) {\n  var _iterator3, _step3, iterable;\n\n  return _regeneratorRuntime.wrap(function _syncConcat$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _iterator3 = _createForOfIteratorHelper(iterables);\n          _context7.prev = 1;\n\n          _iterator3.s();\n\n        case 3:\n          if ((_step3 = _iterator3.n()).done) {\n            _context7.next = 8;\n            break;\n          }\n\n          iterable = _step3.value;\n          return _context7.delegateYield(iterable, \"t0\", 6);\n\n        case 6:\n          _context7.next = 3;\n          break;\n\n        case 8:\n          _context7.next = 13;\n          break;\n\n        case 10:\n          _context7.prev = 10;\n          _context7.t1 = _context7[\"catch\"](1);\n\n          _iterator3.e(_context7.t1);\n\n        case 13:\n          _context7.prev = 13;\n\n          _iterator3.f();\n\n          return _context7.finish(13);\n\n        case 16:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10, 13, 16]]);\n}\n\nfunction concat() {\n  for (var _len = arguments.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {\n    iterables[_key] = arguments[_key];\n  }\n\n  var hasAnyAsync = iterables.find(function (itr) {\n    return itr[Symbol.asyncIterator] !== undefined;\n  });\n\n  if (hasAnyAsync) {\n    return _concat(iterables);\n  } else {\n    return _syncConcat(iterables);\n  }\n}\n\nfunction _consume(_x2) {\n  return _consume2.apply(this, arguments);\n}\n\nfunction _consume2() {\n  _consume2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(iterable) {\n    var e_1, _a, iterable_1, iterable_1_1, val;\n\n    return _regeneratorRuntime.wrap(function _callee12$(_context29) {\n      while (1) {\n        switch (_context29.prev = _context29.next) {\n          case 0:\n            _context29.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context29.next = 4;\n            return iterable_1.next();\n\n          case 4:\n            iterable_1_1 = _context29.sent;\n\n            if (iterable_1_1.done) {\n              _context29.next = 9;\n              break;\n            }\n\n            val = iterable_1_1.value;\n\n          case 7:\n            _context29.next = 2;\n            break;\n\n          case 9:\n            _context29.next = 14;\n            break;\n\n          case 11:\n            _context29.prev = 11;\n            _context29.t0 = _context29[\"catch\"](0);\n            e_1 = {\n              error: _context29.t0\n            };\n\n          case 14:\n            _context29.prev = 14;\n            _context29.prev = 15;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context29.next = 19;\n              break;\n            }\n\n            _context29.next = 19;\n            return _a.call(iterable_1);\n\n          case 19:\n            _context29.prev = 19;\n\n            if (!e_1) {\n              _context29.next = 22;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 22:\n            return _context29.finish(19);\n\n          case 23:\n            return _context29.finish(14);\n\n          case 24:\n          case \"end\":\n            return _context29.stop();\n        }\n      }\n    }, _callee12, null, [[0, 11, 14, 24], [15,, 19, 23]]);\n  }));\n  return _consume2.apply(this, arguments);\n}\n\nfunction consume(iterable) {\n  if (iterable[Symbol.asyncIterator]) {\n    return _consume(iterable);\n  }\n}\n\nfunction _filter(filterFunc, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _filter_1() {\n    var e_1, _a, iterable_1, iterable_1_1, data;\n\n    return _regeneratorRuntime.wrap(function _filter_1$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context8.next = 4;\n            return __await(iterable_1.next());\n\n          case 4:\n            iterable_1_1 = _context8.sent;\n\n            if (iterable_1_1.done) {\n              _context8.next = 16;\n              break;\n            }\n\n            data = iterable_1_1.value;\n            _context8.next = 9;\n            return __await(filterFunc(data));\n\n          case 9:\n            if (!_context8.sent) {\n              _context8.next = 14;\n              break;\n            }\n\n            _context8.next = 12;\n            return __await(data);\n\n          case 12:\n            _context8.next = 14;\n            return _context8.sent;\n\n          case 14:\n            _context8.next = 2;\n            break;\n\n          case 16:\n            _context8.next = 21;\n            break;\n\n          case 18:\n            _context8.prev = 18;\n            _context8.t0 = _context8[\"catch\"](0);\n            e_1 = {\n              error: _context8.t0\n            };\n\n          case 21:\n            _context8.prev = 21;\n            _context8.prev = 22;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context8.next = 26;\n              break;\n            }\n\n            _context8.next = 26;\n            return __await(_a.call(iterable_1));\n\n          case 26:\n            _context8.prev = 26;\n\n            if (!e_1) {\n              _context8.next = 29;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 29:\n            return _context8.finish(26);\n\n          case 30:\n            return _context8.finish(21);\n\n          case 31:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _filter_1, null, [[0, 18, 21, 31], [22,, 26, 30]]);\n  }));\n}\n\nfunction filter(filterFunc, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _filter(filterFunc, curriedIterable);\n    };\n  }\n\n  return _filter(filterFunc, iterable);\n}\n\nfunction flatten(iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function flatten_1() {\n    var e_1, _a, iterable_1, iterable_1_1, maybeItr;\n\n    return _regeneratorRuntime.wrap(function flatten_1$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context9.next = 4;\n            return __await(iterable_1.next());\n\n          case 4:\n            iterable_1_1 = _context9.sent;\n\n            if (iterable_1_1.done) {\n              _context9.next = 21;\n              break;\n            }\n\n            maybeItr = iterable_1_1.value;\n\n            if (!(maybeItr && typeof maybeItr !== 'string' && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator]))) {\n              _context9.next = 15;\n              break;\n            }\n\n            _context9.t0 = __await;\n            return _context9.delegateYield(__asyncDelegator(__asyncValues(flatten(maybeItr))), \"t1\", 10);\n\n          case 10:\n            _context9.t2 = _context9.t1;\n            _context9.next = 13;\n            return (0, _context9.t0)(_context9.t2);\n\n          case 13:\n            _context9.next = 19;\n            break;\n\n          case 15:\n            _context9.next = 17;\n            return __await(maybeItr);\n\n          case 17:\n            _context9.next = 19;\n            return _context9.sent;\n\n          case 19:\n            _context9.next = 2;\n            break;\n\n          case 21:\n            _context9.next = 26;\n            break;\n\n          case 23:\n            _context9.prev = 23;\n            _context9.t3 = _context9[\"catch\"](0);\n            e_1 = {\n              error: _context9.t3\n            };\n\n          case 26:\n            _context9.prev = 26;\n            _context9.prev = 27;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context9.next = 31;\n              break;\n            }\n\n            _context9.next = 31;\n            return __await(_a.call(iterable_1));\n\n          case 31:\n            _context9.prev = 31;\n\n            if (!e_1) {\n              _context9.next = 34;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 34:\n            return _context9.finish(31);\n\n          case 35:\n            return _context9.finish(26);\n\n          case 36:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, flatten_1, null, [[0, 23, 26, 36], [27,, 31, 35]]);\n  }));\n}\n\nfunction _map(func, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _map_1() {\n    var e_1, _a, iterable_1, iterable_1_1, val;\n\n    return _regeneratorRuntime.wrap(function _map_1$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context10.next = 4;\n            return __await(iterable_1.next());\n\n          case 4:\n            iterable_1_1 = _context10.sent;\n\n            if (iterable_1_1.done) {\n              _context10.next = 17;\n              break;\n            }\n\n            val = iterable_1_1.value;\n            _context10.t0 = __await;\n            _context10.next = 10;\n            return __await(func(val));\n\n          case 10:\n            _context10.t1 = _context10.sent;\n            _context10.next = 13;\n            return (0, _context10.t0)(_context10.t1);\n\n          case 13:\n            _context10.next = 15;\n            return _context10.sent;\n\n          case 15:\n            _context10.next = 2;\n            break;\n\n          case 17:\n            _context10.next = 22;\n            break;\n\n          case 19:\n            _context10.prev = 19;\n            _context10.t2 = _context10[\"catch\"](0);\n            e_1 = {\n              error: _context10.t2\n            };\n\n          case 22:\n            _context10.prev = 22;\n            _context10.prev = 23;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context10.next = 27;\n              break;\n            }\n\n            _context10.next = 27;\n            return __await(_a.call(iterable_1));\n\n          case 27:\n            _context10.prev = 27;\n\n            if (!e_1) {\n              _context10.next = 30;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 30:\n            return _context10.finish(27);\n\n          case 31:\n            return _context10.finish(22);\n\n          case 32:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _map_1, null, [[0, 19, 22, 32], [23,, 27, 31]]);\n  }));\n}\n\nfunction map(func, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _map(func, curriedIterable);\n    };\n  }\n\n  return _map(func, iterable);\n}\n\nfunction flatMap(func, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return flatMap(func, curriedIterable);\n    };\n  }\n\n  return filter(function (i) {\n    return i !== undefined && i !== null;\n  }, flatten(map(func, iterable)));\n}\n\nfunction _flatTransform(concurrency, func, iterable) {\n  var iterator = getIterator(iterable);\n  var resultQueue = [];\n  var readQueue = [];\n  var ended = false;\n  var reading = false;\n  var inflightCount = 0;\n  var lastError = null;\n\n  function fulfillReadQueue() {\n    while (readQueue.length > 0 && resultQueue.length > 0) {\n      var _readQueue$shift2 = readQueue.shift(),\n          resolve = _readQueue$shift2.resolve;\n\n      var value = resultQueue.shift();\n      resolve({\n        done: false,\n        value: value\n      });\n    }\n\n    while (readQueue.length > 0 && inflightCount === 0 && ended) {\n      var _readQueue$shift3 = readQueue.shift(),\n          _resolve = _readQueue$shift3.resolve,\n          reject = _readQueue$shift3.reject;\n\n      if (lastError) {\n        reject(lastError);\n        lastError = null;\n      } else {\n        _resolve({\n          done: true,\n          value: undefined\n        });\n      }\n    }\n  }\n\n  function fillQueue() {\n    return _fillQueue2.apply(this, arguments);\n  }\n\n  function _fillQueue2() {\n    _fillQueue2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _yield$iterator$next2, done, value;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!ended) {\n                _context11.next = 3;\n                break;\n              }\n\n              fulfillReadQueue();\n              return _context11.abrupt(\"return\");\n\n            case 3:\n              if (!reading) {\n                _context11.next = 5;\n                break;\n              }\n\n              return _context11.abrupt(\"return\");\n\n            case 5:\n              if (!(inflightCount + resultQueue.length >= concurrency)) {\n                _context11.next = 7;\n                break;\n              }\n\n              return _context11.abrupt(\"return\");\n\n            case 7:\n              reading = true;\n              inflightCount++;\n              _context11.prev = 9;\n              _context11.next = 12;\n              return iterator.next();\n\n            case 12:\n              _yield$iterator$next2 = _context11.sent;\n              done = _yield$iterator$next2.done;\n              value = _yield$iterator$next2.value;\n\n              if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n              } else {\n                mapAndQueue(value);\n              }\n\n              _context11.next = 24;\n              break;\n\n            case 18:\n              _context11.prev = 18;\n              _context11.t0 = _context11[\"catch\"](9);\n              ended = true;\n              inflightCount--;\n              lastError = _context11.t0;\n              fulfillReadQueue();\n\n            case 24:\n              reading = false;\n              fillQueue();\n\n            case 26:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee3, null, [[9, 18]]);\n    }));\n    return _fillQueue2.apply(this, arguments);\n  }\n\n  function mapAndQueue(_x3) {\n    return _mapAndQueue.apply(this, arguments);\n  }\n\n  function _mapAndQueue() {\n    _mapAndQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(itrValue) {\n      var e_1, _a, value, _b, _c, asyncVal;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              _context12.next = 3;\n              return func(itrValue);\n\n            case 3:\n              value = _context12.sent;\n\n              if (!(value && value[Symbol.asyncIterator])) {\n                _context12.next = 32;\n                break;\n              }\n\n              _context12.prev = 5;\n              _b = __asyncValues(value);\n\n            case 7:\n              _context12.next = 9;\n              return _b.next();\n\n            case 9:\n              _c = _context12.sent;\n\n              if (_c.done) {\n                _context12.next = 15;\n                break;\n              }\n\n              asyncVal = _c.value;\n              resultQueue.push(asyncVal);\n\n            case 13:\n              _context12.next = 7;\n              break;\n\n            case 15:\n              _context12.next = 20;\n              break;\n\n            case 17:\n              _context12.prev = 17;\n              _context12.t0 = _context12[\"catch\"](5);\n              e_1 = {\n                error: _context12.t0\n              };\n\n            case 20:\n              _context12.prev = 20;\n              _context12.prev = 21;\n\n              if (!(_c && !_c.done && (_a = _b.return))) {\n                _context12.next = 25;\n                break;\n              }\n\n              _context12.next = 25;\n              return _a.call(_b);\n\n            case 25:\n              _context12.prev = 25;\n\n              if (!e_1) {\n                _context12.next = 28;\n                break;\n              }\n\n              throw e_1.error;\n\n            case 28:\n              return _context12.finish(25);\n\n            case 29:\n              return _context12.finish(20);\n\n            case 30:\n              _context12.next = 33;\n              break;\n\n            case 32:\n              resultQueue.push(value);\n\n            case 33:\n              _context12.next = 39;\n              break;\n\n            case 35:\n              _context12.prev = 35;\n              _context12.t1 = _context12[\"catch\"](0);\n              ended = true;\n              lastError = _context12.t1;\n\n            case 39:\n              inflightCount--;\n              fulfillReadQueue();\n              fillQueue();\n\n            case 42:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee4, null, [[0, 35], [5, 17, 20, 30], [21,, 25, 29]]);\n    }));\n    return _mapAndQueue.apply(this, arguments);\n  }\n\n  function next() {\n    return _next2.apply(this, arguments);\n  }\n\n  function _next2() {\n    _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var deferred, value;\n      return _regeneratorRuntime.wrap(function _callee5$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (!(resultQueue.length === 0)) {\n                _context13.next = 5;\n                break;\n              }\n\n              deferred = defer();\n              readQueue.push(deferred);\n              fillQueue();\n              return _context13.abrupt(\"return\", deferred.promise);\n\n            case 5:\n              value = resultQueue.shift();\n              fillQueue();\n              return _context13.abrupt(\"return\", {\n                done: false,\n                value: value\n              });\n\n            case 8:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _next2.apply(this, arguments);\n  }\n\n  var asyncIterableIterator = _defineProperty({\n    next: next\n  }, Symbol.asyncIterator, function () {\n    return asyncIterableIterator;\n  });\n\n  return asyncIterableIterator;\n}\n\nfunction flatTransform(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return curriedIterable ? flatTransform(concurrency, curriedFunc, curriedIterable) : flatTransform(concurrency, curriedFunc);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return flatTransform(concurrency, func, curriedIterable);\n    };\n  }\n\n  return filter(function (i) {\n    return i !== undefined && i !== null;\n  }, flatten(_flatTransform(concurrency, func, iterable)));\n}\n\nfunction onceReadable(_x4) {\n  return _onceReadable.apply(this, arguments);\n}\n\nfunction _onceReadable() {\n  _onceReadable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(stream) {\n    return _regeneratorRuntime.wrap(function _callee13$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            return _context30.abrupt(\"return\", new Promise(function (resolve) {\n              stream.once('readable', function () {\n                resolve();\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context30.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _onceReadable.apply(this, arguments);\n}\n\nfunction _fromStream(stream) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _fromStream_1() {\n    var data;\n    return _regeneratorRuntime.wrap(function _fromStream_1$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            if (!true) {\n              _context14.next = 16;\n              break;\n            }\n\n            data = stream.read();\n\n            if (!(data !== null)) {\n              _context14.next = 8;\n              break;\n            }\n\n            _context14.next = 5;\n            return __await(data);\n\n          case 5:\n            _context14.next = 7;\n            return _context14.sent;\n\n          case 7:\n            return _context14.abrupt(\"continue\", 0);\n\n          case 8:\n            if (!stream._readableState.ended) {\n              _context14.next = 12;\n              break;\n            }\n\n            _context14.next = 11;\n            return __await(void 0);\n\n          case 11:\n            return _context14.abrupt(\"return\", _context14.sent);\n\n          case 12:\n            _context14.next = 14;\n            return __await(onceReadable(stream));\n\n          case 14:\n            _context14.next = 0;\n            break;\n\n          case 16:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _fromStream_1);\n  }));\n}\n\nfunction fromStream(stream) {\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return stream;\n  }\n\n  return _fromStream(stream);\n}\n\nfunction merge() {\n  for (var _len2 = arguments.length, iterables = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    iterables[_key2] = arguments[_key2];\n  }\n\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function merge_1() {\n    var sources, _iterator4, _step4, iterator, nextVal;\n\n    return _regeneratorRuntime.wrap(function merge_1$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            sources = new Set(iterables.map(getIterator));\n\n          case 1:\n            if (!(sources.size > 0)) {\n              _context15.next = 30;\n              break;\n            }\n\n            _iterator4 = _createForOfIteratorHelper(sources);\n            _context15.prev = 3;\n\n            _iterator4.s();\n\n          case 5:\n            if ((_step4 = _iterator4.n()).done) {\n              _context15.next = 20;\n              break;\n            }\n\n            iterator = _step4.value;\n            _context15.next = 9;\n            return __await(iterator.next());\n\n          case 9:\n            nextVal = _context15.sent;\n\n            if (!nextVal.done) {\n              _context15.next = 14;\n              break;\n            }\n\n            sources.delete(iterator);\n            _context15.next = 18;\n            break;\n\n          case 14:\n            _context15.next = 16;\n            return __await(nextVal.value);\n\n          case 16:\n            _context15.next = 18;\n            return _context15.sent;\n\n          case 18:\n            _context15.next = 5;\n            break;\n\n          case 20:\n            _context15.next = 25;\n            break;\n\n          case 22:\n            _context15.prev = 22;\n            _context15.t0 = _context15[\"catch\"](3);\n\n            _iterator4.e(_context15.t0);\n\n          case 25:\n            _context15.prev = 25;\n\n            _iterator4.f();\n\n            return _context15.finish(25);\n\n          case 28:\n            _context15.next = 1;\n            break;\n\n          case 30:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, merge_1, null, [[3, 22, 25, 28]]);\n  }));\n}\n\nfunction pipeline(firstFn) {\n  var previousFn = firstFn();\n\n  for (var _len3 = arguments.length, fns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    fns[_key3 - 1] = arguments[_key3];\n  }\n\n  for (var _i2 = 0, _fns = fns; _i2 < _fns.length; _i2++) {\n    var func = _fns[_i2];\n    previousFn = func(previousFn);\n  }\n\n  return previousFn;\n}\n\nfunction _parallelMap(concurrency, func, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _parallelMap_1() {\n    var transformError, wrapFunc, stopOnError, output, itr, _yield$__await, value, done, val;\n\n    return _regeneratorRuntime.wrap(function _parallelMap_1$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            transformError = null;\n\n            wrapFunc = function wrapFunc(value) {\n              return {\n                value: func(value)\n              };\n            };\n\n            stopOnError = function stopOnError(source) {\n              return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                var e_1, _a, source_1, source_1_1, value;\n\n                return _regeneratorRuntime.wrap(function _callee6$(_context16) {\n                  while (1) {\n                    switch (_context16.prev = _context16.next) {\n                      case 0:\n                        _context16.prev = 0;\n                        source_1 = __asyncValues(source);\n\n                      case 2:\n                        _context16.next = 4;\n                        return __await(source_1.next());\n\n                      case 4:\n                        source_1_1 = _context16.sent;\n\n                        if (source_1_1.done) {\n                          _context16.next = 17;\n                          break;\n                        }\n\n                        value = source_1_1.value;\n\n                        if (!transformError) {\n                          _context16.next = 11;\n                          break;\n                        }\n\n                        _context16.next = 10;\n                        return __await(void 0);\n\n                      case 10:\n                        return _context16.abrupt(\"return\", _context16.sent);\n\n                      case 11:\n                        _context16.next = 13;\n                        return __await(value);\n\n                      case 13:\n                        _context16.next = 15;\n                        return _context16.sent;\n\n                      case 15:\n                        _context16.next = 2;\n                        break;\n\n                      case 17:\n                        _context16.next = 22;\n                        break;\n\n                      case 19:\n                        _context16.prev = 19;\n                        _context16.t0 = _context16[\"catch\"](0);\n                        e_1 = {\n                          error: _context16.t0\n                        };\n\n                      case 22:\n                        _context16.prev = 22;\n                        _context16.prev = 23;\n\n                        if (!(source_1_1 && !source_1_1.done && (_a = source_1.return))) {\n                          _context16.next = 27;\n                          break;\n                        }\n\n                        _context16.next = 27;\n                        return __await(_a.call(source_1));\n\n                      case 27:\n                        _context16.prev = 27;\n\n                        if (!e_1) {\n                          _context16.next = 30;\n                          break;\n                        }\n\n                        throw e_1.error;\n\n                      case 30:\n                        return _context16.finish(27);\n\n                      case 31:\n                        return _context16.finish(22);\n\n                      case 32:\n                      case \"end\":\n                        return _context16.stop();\n                    }\n                  }\n                }, _callee6, null, [[0, 19, 22, 32], [23,, 27, 31]]);\n              }));\n            };\n\n            output = pipeline(function () {\n              return iterable;\n            }, buffer(1), stopOnError, map(wrapFunc), buffer(concurrency));\n            itr = getIterator(output);\n\n          case 5:\n            if (!true) {\n              _context17.next = 29;\n              break;\n            }\n\n            _context17.next = 8;\n            return __await(itr.next());\n\n          case 8:\n            _yield$__await = _context17.sent;\n            value = _yield$__await.value;\n            done = _yield$__await.done;\n\n            if (!done) {\n              _context17.next = 13;\n              break;\n            }\n\n            return _context17.abrupt(\"break\", 29);\n\n          case 13:\n            _context17.prev = 13;\n            _context17.next = 16;\n            return __await(value.value);\n\n          case 16:\n            val = _context17.sent;\n\n            if (transformError) {\n              _context17.next = 22;\n              break;\n            }\n\n            _context17.next = 20;\n            return __await(val);\n\n          case 20:\n            _context17.next = 22;\n            return _context17.sent;\n\n          case 22:\n            _context17.next = 27;\n            break;\n\n          case 24:\n            _context17.prev = 24;\n            _context17.t0 = _context17[\"catch\"](13);\n            transformError = _context17.t0;\n\n          case 27:\n            _context17.next = 5;\n            break;\n\n          case 29:\n            if (!transformError) {\n              _context17.next = 31;\n              break;\n            }\n\n            throw transformError;\n\n          case 31:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _parallelMap_1, null, [[13, 24]]);\n  }));\n}\n\nfunction parallelMap(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return parallelMap(concurrency, curriedFunc, curriedIterable);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return parallelMap(concurrency, func, curriedIterable);\n    };\n  }\n\n  return _parallelMap(concurrency, func, iterable);\n}\n\nfunction parallelFlatMap(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return curriedIterable ? parallelFlatMap(concurrency, curriedFunc, curriedIterable) : parallelFlatMap(concurrency, curriedFunc);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return parallelFlatMap(concurrency, func, curriedIterable);\n    };\n  }\n\n  return filter(function (i) {\n    return i !== undefined && i !== null;\n  }, flatten(parallelMap(concurrency, func, iterable)));\n}\n\nfunction parallelMerge() {\n  for (var _len4 = arguments.length, iterables = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    iterables[_key4] = arguments[_key4];\n  }\n\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function parallelMerge_1() {\n    var inputs, concurrentWork, values, lastError, errCb, valueCb, notifyError, notifyDone, waitForQueue, queueNext, _iterator5, _step5, _input, _iterator6, _step6, _step6$value, input, value;\n\n    return _regeneratorRuntime.wrap(function parallelMerge_1$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            inputs = iterables.map(getIterator);\n            concurrentWork = new Set();\n            values = new Map();\n            lastError = null;\n            errCb = null;\n            valueCb = null;\n\n            notifyError = function notifyError(err) {\n              lastError = err;\n\n              if (errCb) {\n                errCb(err);\n              }\n            };\n\n            notifyDone = function notifyDone(value) {\n              if (valueCb) {\n                valueCb(value);\n              }\n            };\n\n            waitForQueue = function waitForQueue() {\n              return new Promise(function (resolve, reject) {\n                if (lastError) {\n                  reject(lastError);\n                }\n\n                if (values.size > 0) {\n                  return resolve();\n                }\n\n                valueCb = resolve;\n                errCb = reject;\n              });\n            };\n\n            queueNext = function queueNext(input) {\n              var nextVal = Promise.resolve(input.next()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref) {\n                  var done, value;\n                  return _regeneratorRuntime.wrap(function _callee7$(_context18) {\n                    while (1) {\n                      switch (_context18.prev = _context18.next) {\n                        case 0:\n                          done = _ref.done, value = _ref.value;\n\n                          if (!done) {\n                            values.set(input, value);\n                          }\n\n                          concurrentWork.delete(nextVal);\n\n                        case 3:\n                        case \"end\":\n                          return _context18.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                return function (_x5) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              concurrentWork.add(nextVal);\n              nextVal.then(notifyDone, notifyError);\n            };\n\n            _iterator5 = _createForOfIteratorHelper(inputs);\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                _input = _step5.value;\n                queueNext(_input);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n\n          case 12:\n            if (!true) {\n              _context19.next = 42;\n              break;\n            }\n\n            if (!(concurrentWork.size === 0 && values.size === 0)) {\n              _context19.next = 17;\n              break;\n            }\n\n            _context19.next = 16;\n            return __await(void 0);\n\n          case 16:\n            return _context19.abrupt(\"return\", _context19.sent);\n\n          case 17:\n            _context19.next = 19;\n            return __await(waitForQueue());\n\n          case 19:\n            _iterator6 = _createForOfIteratorHelper(values);\n            _context19.prev = 20;\n\n            _iterator6.s();\n\n          case 22:\n            if ((_step6 = _iterator6.n()).done) {\n              _context19.next = 32;\n              break;\n            }\n\n            _step6$value = _slicedToArray(_step6.value, 2), input = _step6$value[0], value = _step6$value[1];\n            values.delete(input);\n            _context19.next = 27;\n            return __await(value);\n\n          case 27:\n            _context19.next = 29;\n            return _context19.sent;\n\n          case 29:\n            queueNext(input);\n\n          case 30:\n            _context19.next = 22;\n            break;\n\n          case 32:\n            _context19.next = 37;\n            break;\n\n          case 34:\n            _context19.prev = 34;\n            _context19.t0 = _context19[\"catch\"](20);\n\n            _iterator6.e(_context19.t0);\n\n          case 37:\n            _context19.prev = 37;\n\n            _iterator6.f();\n\n            return _context19.finish(37);\n\n          case 40:\n            _context19.next = 12;\n            break;\n\n          case 42:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, parallelMerge_1, null, [[20, 34, 37, 40]]);\n  }));\n}\n\nfunction _reduce(_x6, _x7, _x8) {\n  return _reduce2.apply(this, arguments);\n}\n\nfunction _reduce2() {\n  _reduce2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(func, start, iterable) {\n    var e_1, _a, value, iterable_1, iterable_1_1, nextItem;\n\n    return _regeneratorRuntime.wrap(function _callee14$(_context31) {\n      while (1) {\n        switch (_context31.prev = _context31.next) {\n          case 0:\n            value = start;\n            _context31.prev = 1;\n            iterable_1 = __asyncValues(iterable);\n\n          case 3:\n            _context31.next = 5;\n            return iterable_1.next();\n\n          case 5:\n            iterable_1_1 = _context31.sent;\n\n            if (iterable_1_1.done) {\n              _context31.next = 13;\n              break;\n            }\n\n            nextItem = iterable_1_1.value;\n            _context31.next = 10;\n            return func(value, nextItem);\n\n          case 10:\n            value = _context31.sent;\n\n          case 11:\n            _context31.next = 3;\n            break;\n\n          case 13:\n            _context31.next = 18;\n            break;\n\n          case 15:\n            _context31.prev = 15;\n            _context31.t0 = _context31[\"catch\"](1);\n            e_1 = {\n              error: _context31.t0\n            };\n\n          case 18:\n            _context31.prev = 18;\n            _context31.prev = 19;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context31.next = 23;\n              break;\n            }\n\n            _context31.next = 23;\n            return _a.call(iterable_1);\n\n          case 23:\n            _context31.prev = 23;\n\n            if (!e_1) {\n              _context31.next = 26;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 26:\n            return _context31.finish(23);\n\n          case 27:\n            return _context31.finish(18);\n\n          case 28:\n            return _context31.abrupt(\"return\", value);\n\n          case 29:\n          case \"end\":\n            return _context31.stop();\n        }\n      }\n    }, _callee14, null, [[1, 15, 18, 28], [19,, 23, 27]]);\n  }));\n  return _reduce2.apply(this, arguments);\n}\n\nfunction reduce(func, start, iterable) {\n  if (start === undefined) {\n    return function (curriedStart, curriedIterable) {\n      return curriedIterable ? reduce(func, curriedStart, curriedIterable) : reduce(func, curriedStart);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return reduce(func, start, curriedIterable);\n    };\n  }\n\n  return _reduce(func, start, iterable);\n}\n\nfunction _take(count, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _take_1() {\n    var e_1, _a, taken, iterable_1, iterable_1_1, val;\n\n    return _regeneratorRuntime.wrap(function _take_1$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            taken = 0;\n            _context20.prev = 1;\n            iterable_1 = __asyncValues(iterable);\n\n          case 3:\n            _context20.next = 5;\n            return __await(iterable_1.next());\n\n          case 5:\n            iterable_1_1 = _context20.sent;\n\n            if (iterable_1_1.done) {\n              _context20.next = 23;\n              break;\n            }\n\n            val = iterable_1_1.value;\n            _context20.t0 = __await;\n            _context20.next = 11;\n            return __await(val);\n\n          case 11:\n            _context20.t1 = _context20.sent;\n            _context20.next = 14;\n            return (0, _context20.t0)(_context20.t1);\n\n          case 14:\n            _context20.next = 16;\n            return _context20.sent;\n\n          case 16:\n            taken++;\n\n            if (!(taken >= count)) {\n              _context20.next = 21;\n              break;\n            }\n\n            _context20.next = 20;\n            return __await(void 0);\n\n          case 20:\n            return _context20.abrupt(\"return\", _context20.sent);\n\n          case 21:\n            _context20.next = 3;\n            break;\n\n          case 23:\n            _context20.next = 28;\n            break;\n\n          case 25:\n            _context20.prev = 25;\n            _context20.t2 = _context20[\"catch\"](1);\n            e_1 = {\n              error: _context20.t2\n            };\n\n          case 28:\n            _context20.prev = 28;\n            _context20.prev = 29;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context20.next = 33;\n              break;\n            }\n\n            _context20.next = 33;\n            return __await(_a.call(iterable_1));\n\n          case 33:\n            _context20.prev = 33;\n\n            if (!e_1) {\n              _context20.next = 36;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 36:\n            return _context20.finish(33);\n\n          case 37:\n            return _context20.finish(28);\n\n          case 38:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, _take_1, null, [[1, 25, 28, 38], [29,, 33, 37]]);\n  }));\n}\n\nfunction _syncTake(count, iterable) {\n  var taken, _iterator7, _step7, val;\n\n  return _regeneratorRuntime.wrap(function _syncTake$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          taken = 0;\n          _iterator7 = _createForOfIteratorHelper(iterable);\n          _context21.prev = 2;\n\n          _iterator7.s();\n\n        case 4:\n          if ((_step7 = _iterator7.n()).done) {\n            _context21.next = 13;\n            break;\n          }\n\n          val = _step7.value;\n          _context21.next = 8;\n          return val;\n\n        case 8:\n          taken++;\n\n          if (!(taken >= count)) {\n            _context21.next = 11;\n            break;\n          }\n\n          return _context21.abrupt(\"return\");\n\n        case 11:\n          _context21.next = 4;\n          break;\n\n        case 13:\n          _context21.next = 18;\n          break;\n\n        case 15:\n          _context21.prev = 15;\n          _context21.t0 = _context21[\"catch\"](2);\n\n          _iterator7.e(_context21.t0);\n\n        case 18:\n          _context21.prev = 18;\n\n          _iterator7.f();\n\n          return _context21.finish(18);\n\n        case 21:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked4, null, [[2, 15, 18, 21]]);\n}\n\nfunction take(count, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return take(count, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator]) {\n    return _take(count, iterable);\n  }\n\n  return _syncTake(count, iterable);\n}\n\nfunction _asyncTap(func, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _asyncTap_1() {\n    var e_1, _a, iterable_1, iterable_1_1, val;\n\n    return _regeneratorRuntime.wrap(function _asyncTap_1$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            _context22.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context22.next = 4;\n            return __await(iterable_1.next());\n\n          case 4:\n            iterable_1_1 = _context22.sent;\n\n            if (iterable_1_1.done) {\n              _context22.next = 15;\n              break;\n            }\n\n            val = iterable_1_1.value;\n            _context22.next = 9;\n            return __await(func(val));\n\n          case 9:\n            _context22.next = 11;\n            return __await(val);\n\n          case 11:\n            _context22.next = 13;\n            return _context22.sent;\n\n          case 13:\n            _context22.next = 2;\n            break;\n\n          case 15:\n            _context22.next = 20;\n            break;\n\n          case 17:\n            _context22.prev = 17;\n            _context22.t0 = _context22[\"catch\"](0);\n            e_1 = {\n              error: _context22.t0\n            };\n\n          case 20:\n            _context22.prev = 20;\n            _context22.prev = 21;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context22.next = 25;\n              break;\n            }\n\n            _context22.next = 25;\n            return __await(_a.call(iterable_1));\n\n          case 25:\n            _context22.prev = 25;\n\n            if (!e_1) {\n              _context22.next = 28;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 28:\n            return _context22.finish(25);\n\n          case 29:\n            return _context22.finish(20);\n\n          case 30:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, _asyncTap_1, null, [[0, 17, 20, 30], [21,, 25, 29]]);\n  }));\n}\n\nfunction tap(func, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _asyncTap(func, curriedIterable);\n    };\n  }\n\n  return _asyncTap(func, iterable);\n}\n\nfunction addTime(a, b) {\n  var seconds = a[0] + b[0];\n  var nanoseconds = a[1] + b[1];\n\n  if (nanoseconds >= 1000000000) {\n    var remainder = nanoseconds % 1000000000;\n    seconds += (nanoseconds - remainder) / 1000000000;\n    nanoseconds = remainder;\n  }\n\n  return [seconds, nanoseconds];\n}\n\nfunction _asyncTime(config, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _asyncTime_1() {\n    var itr, total, start, _yield$__await2, value, done, delta;\n\n    return _regeneratorRuntime.wrap(function _asyncTime_1$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            itr = iterable[Symbol.asyncIterator]();\n            total = [0, 0];\n\n          case 2:\n            if (!true) {\n              _context23.next = 23;\n              break;\n            }\n\n            start = process.hrtime();\n            _context23.next = 6;\n            return __await(itr.next());\n\n          case 6:\n            _yield$__await2 = _context23.sent;\n            value = _yield$__await2.value;\n            done = _yield$__await2.done;\n            delta = process.hrtime(start);\n            total = addTime(total, delta);\n\n            if (config.progress) {\n              config.progress(delta, total);\n            }\n\n            if (!done) {\n              _context23.next = 17;\n              break;\n            }\n\n            if (config.total) {\n              config.total(total);\n            }\n\n            _context23.next = 16;\n            return __await(value);\n\n          case 16:\n            return _context23.abrupt(\"return\", _context23.sent);\n\n          case 17:\n            _context23.next = 19;\n            return __await(value);\n\n          case 19:\n            _context23.next = 21;\n            return _context23.sent;\n\n          case 21:\n            _context23.next = 2;\n            break;\n\n          case 23:\n          case \"end\":\n            return _context23.stop();\n        }\n      }\n    }, _asyncTime_1);\n  }));\n}\n\nfunction _syncTime(config, iterable) {\n  var itr, total, start, _itr$next, value, done, delta;\n\n  return _regeneratorRuntime.wrap(function _syncTime$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          itr = iterable[Symbol.iterator]();\n          total = [0, 0];\n\n        case 2:\n          if (!true) {\n            _context24.next = 15;\n            break;\n          }\n\n          start = process.hrtime();\n          _itr$next = itr.next(), value = _itr$next.value, done = _itr$next.done;\n          delta = process.hrtime(start);\n          total = addTime(total, delta);\n\n          if (config.progress) {\n            config.progress(delta, total);\n          }\n\n          if (!done) {\n            _context24.next = 11;\n            break;\n          }\n\n          if (config.total) {\n            config.total(total);\n          }\n\n          return _context24.abrupt(\"return\", value);\n\n        case 11:\n          _context24.next = 13;\n          return value;\n\n        case 13:\n          _context24.next = 2;\n          break;\n\n        case 15:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction time() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var iterable = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return time(config, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator] !== undefined) {\n    return _asyncTime(config, iterable);\n  } else {\n    return _syncTime(config, iterable);\n  }\n}\n\nfunction _transform(concurrency, func, iterable) {\n  var iterator = getIterator(iterable);\n  var resultQueue = [];\n  var readQueue = [];\n  var ended = false;\n  var reading = false;\n  var inflightCount = 0;\n  var lastError = null;\n\n  function fulfillReadQueue() {\n    while (readQueue.length > 0 && resultQueue.length > 0) {\n      var _readQueue$shift4 = readQueue.shift(),\n          resolve = _readQueue$shift4.resolve;\n\n      var value = resultQueue.shift();\n      resolve({\n        done: false,\n        value: value\n      });\n    }\n\n    while (readQueue.length > 0 && inflightCount === 0 && ended) {\n      var _readQueue$shift5 = readQueue.shift(),\n          _resolve2 = _readQueue$shift5.resolve,\n          reject = _readQueue$shift5.reject;\n\n      if (lastError) {\n        reject(lastError);\n        lastError = null;\n      } else {\n        _resolve2({\n          done: true,\n          value: undefined\n        });\n      }\n    }\n  }\n\n  function fillQueue() {\n    return _fillQueue3.apply(this, arguments);\n  }\n\n  function _fillQueue3() {\n    _fillQueue3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var _yield$iterator$next3, done, value;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              if (!ended) {\n                _context25.next = 3;\n                break;\n              }\n\n              fulfillReadQueue();\n              return _context25.abrupt(\"return\");\n\n            case 3:\n              if (!reading) {\n                _context25.next = 5;\n                break;\n              }\n\n              return _context25.abrupt(\"return\");\n\n            case 5:\n              if (!(inflightCount + resultQueue.length >= concurrency)) {\n                _context25.next = 7;\n                break;\n              }\n\n              return _context25.abrupt(\"return\");\n\n            case 7:\n              reading = true;\n              inflightCount++;\n              _context25.prev = 9;\n              _context25.next = 12;\n              return iterator.next();\n\n            case 12:\n              _yield$iterator$next3 = _context25.sent;\n              done = _yield$iterator$next3.done;\n              value = _yield$iterator$next3.value;\n\n              if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n              } else {\n                mapAndQueue(value);\n              }\n\n              _context25.next = 24;\n              break;\n\n            case 18:\n              _context25.prev = 18;\n              _context25.t0 = _context25[\"catch\"](9);\n              ended = true;\n              inflightCount--;\n              lastError = _context25.t0;\n              fulfillReadQueue();\n\n            case 24:\n              reading = false;\n              fillQueue();\n\n            case 26:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee8, null, [[9, 18]]);\n    }));\n    return _fillQueue3.apply(this, arguments);\n  }\n\n  function mapAndQueue(_x9) {\n    return _mapAndQueue2.apply(this, arguments);\n  }\n\n  function _mapAndQueue2() {\n    _mapAndQueue2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(itrValue) {\n      var value;\n      return _regeneratorRuntime.wrap(function _callee9$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.prev = 0;\n              _context26.next = 3;\n              return func(itrValue);\n\n            case 3:\n              value = _context26.sent;\n              resultQueue.push(value);\n              _context26.next = 11;\n              break;\n\n            case 7:\n              _context26.prev = 7;\n              _context26.t0 = _context26[\"catch\"](0);\n              ended = true;\n              lastError = _context26.t0;\n\n            case 11:\n              inflightCount--;\n              fulfillReadQueue();\n              fillQueue();\n\n            case 14:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee9, null, [[0, 7]]);\n    }));\n    return _mapAndQueue2.apply(this, arguments);\n  }\n\n  function next() {\n    return _next3.apply(this, arguments);\n  }\n\n  function _next3() {\n    _next3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var deferred, value;\n      return _regeneratorRuntime.wrap(function _callee10$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (!(resultQueue.length === 0)) {\n                _context27.next = 5;\n                break;\n              }\n\n              deferred = defer();\n              readQueue.push(deferred);\n              fillQueue();\n              return _context27.abrupt(\"return\", deferred.promise);\n\n            case 5:\n              value = resultQueue.shift();\n              fillQueue();\n              return _context27.abrupt(\"return\", {\n                done: false,\n                value: value\n              });\n\n            case 8:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _next3.apply(this, arguments);\n  }\n\n  var asyncIterableIterator = _defineProperty({\n    next: next\n  }, Symbol.asyncIterator, function () {\n    return asyncIterableIterator;\n  });\n\n  return asyncIterableIterator;\n}\n\nfunction transform(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return curriedIterable ? transform(concurrency, curriedFunc, curriedIterable) : transform(concurrency, curriedFunc);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return transform(concurrency, func, curriedIterable);\n    };\n  }\n\n  return _transform(concurrency, func, iterable);\n}\n\nfunction _writeToStream(_x10, _x11) {\n  return _writeToStream2.apply(this, arguments);\n}\n\nfunction _writeToStream2() {\n  _writeToStream2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(stream, iterable) {\n    var e_1, _a, lastError, errCb, drainCb, notifyError, notifyDrain, cleanup, waitForDrain, iterable_1, iterable_1_1, value;\n\n    return _regeneratorRuntime.wrap(function _callee15$(_context32) {\n      while (1) {\n        switch (_context32.prev = _context32.next) {\n          case 0:\n            lastError = null;\n            errCb = null;\n            drainCb = null;\n\n            notifyError = function notifyError(err) {\n              lastError = err;\n\n              if (errCb) {\n                errCb(err);\n              }\n            };\n\n            notifyDrain = function notifyDrain() {\n              if (drainCb) {\n                drainCb();\n              }\n            };\n\n            cleanup = function cleanup() {\n              stream.removeListener('error', notifyError);\n              stream.removeListener('drain', notifyDrain);\n            };\n\n            stream.once('error', notifyError);\n\n            waitForDrain = function waitForDrain() {\n              return new Promise(function (resolve, reject) {\n                if (lastError) {\n                  return reject(lastError);\n                }\n\n                stream.once('drain', notifyDrain);\n                drainCb = resolve;\n                errCb = reject;\n              });\n            };\n\n            _context32.prev = 8;\n            iterable_1 = __asyncValues(iterable);\n\n          case 10:\n            _context32.next = 12;\n            return iterable_1.next();\n\n          case 12:\n            iterable_1_1 = _context32.sent;\n\n            if (iterable_1_1.done) {\n              _context32.next = 22;\n              break;\n            }\n\n            value = iterable_1_1.value;\n\n            if (!(stream.write(value) === false)) {\n              _context32.next = 18;\n              break;\n            }\n\n            _context32.next = 18;\n            return waitForDrain();\n\n          case 18:\n            if (!lastError) {\n              _context32.next = 20;\n              break;\n            }\n\n            return _context32.abrupt(\"break\", 22);\n\n          case 20:\n            _context32.next = 10;\n            break;\n\n          case 22:\n            _context32.next = 27;\n            break;\n\n          case 24:\n            _context32.prev = 24;\n            _context32.t0 = _context32[\"catch\"](8);\n            e_1 = {\n              error: _context32.t0\n            };\n\n          case 27:\n            _context32.prev = 27;\n            _context32.prev = 28;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context32.next = 32;\n              break;\n            }\n\n            _context32.next = 32;\n            return _a.call(iterable_1);\n\n          case 32:\n            _context32.prev = 32;\n\n            if (!e_1) {\n              _context32.next = 35;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 35:\n            return _context32.finish(32);\n\n          case 36:\n            return _context32.finish(27);\n\n          case 37:\n            cleanup();\n\n            if (!lastError) {\n              _context32.next = 40;\n              break;\n            }\n\n            throw lastError;\n\n          case 40:\n          case \"end\":\n            return _context32.stop();\n        }\n      }\n    }, _callee15, null, [[8, 24, 27, 37], [28,, 32, 36]]);\n  }));\n  return _writeToStream2.apply(this, arguments);\n}\n\nfunction writeToStream(stream, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _writeToStream(stream, curriedIterable);\n    };\n  }\n\n  return _writeToStream(stream, iterable);\n} /// <reference lib=\"esnext.asynciterable\" />\n\n\nif (Symbol.asyncIterator === undefined) {\n  Symbol.asyncIterator = Symbol.for('asyncIterator');\n}\n\nexport { batch, buffer, collect, concat, consume, filter, flatMap, flatten, flatTransform, fromStream, getIterator, map, merge, parallelFlatMap, parallelMap, parallelMerge, pipeline, reduce, take, tap, time, transform, writeToStream };","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/streaming-iterables/dist/index-esm.js"],"names":["_syncBatch","syncBuffer","_syncConcat","_syncTake","_syncTime","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__await","v","__asyncGenerator","thisArg","_arguments","generator","asyncIterator","TypeError","g","apply","q","verb","n","Promise","a","b","push","resume","step","e","settle","r","resolve","then","fulfill","reject","f","shift","__asyncDelegator","p","__asyncValues","d","_batch","size","iterable","arguments","_batch_1","dataBatch","iterable_1","iterable_1_1","data","e_1","error","_a","return","batch","undefined","curriedIterable","getIterator","defer","promise","resolveFunc","rejectFunc","_buffer","resultQueue","readQueue","reading","ended","fulfillReadQueue","readDeferred","fillQueue","deferred","asyncIterableIterator","valueQueue","buffer","_collect","values","collect","Array","from","_concat","iterables","_concat_1","iterables_1","iterables_1_1","concat","hasAnyAsync","find","itr","_consume","val","consume","_filter","filterFunc","_filter_1","filter","flatten","flatten_1","maybeItr","_map","func","_map_1","map","flatMap","_flatTransform","concurrency","inflightCount","lastError","mapAndQueue","itrValue","_b","_c","asyncVal","flatTransform","curriedFunc","onceReadable","stream","once","_fromStream","_fromStream_1","read","_readableState","fromStream","merge","merge_1","sources","Set","nextVal","delete","pipeline","firstFn","previousFn","fns","_parallelMap","_parallelMap_1","transformError","wrapFunc","stopOnError","source","source_1","source_1_1","output","parallelMap","parallelFlatMap","parallelMerge","parallelMerge_1","inputs","concurrentWork","Map","errCb","valueCb","notifyError","err","notifyDone","waitForQueue","queueNext","input","set","add","_reduce","start","nextItem","reduce","curriedStart","_take","count","_take_1","taken","take","_asyncTap","_asyncTap_1","tap","addTime","seconds","nanoseconds","remainder","_asyncTime","config","_asyncTime_1","total","process","hrtime","delta","progress","time","_transform","transform","_writeToStream","drainCb","notifyDrain","cleanup","removeListener","waitForDrain","write","writeToStream","for"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\n\nfunction _batch(size, iterable) {\n    return __asyncGenerator(this, arguments, function* _batch_1() {\n        var e_1, _a;\n        let dataBatch = [];\n        try {\n            for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {\n                const data = iterable_1_1.value;\n                dataBatch.push(data);\n                if (dataBatch.length === size) {\n                    yield yield __await(dataBatch);\n                    dataBatch = [];\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (dataBatch.length > 0) {\n            yield yield __await(dataBatch);\n        }\n    });\n}\nfunction* _syncBatch(size, iterable) {\n    let dataBatch = [];\n    for (const data of iterable) {\n        dataBatch.push(data);\n        if (dataBatch.length === size) {\n            yield dataBatch;\n            dataBatch = [];\n        }\n    }\n    if (dataBatch.length > 0) {\n        yield dataBatch;\n    }\n}\nfunction batch(size, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => batch(size, curriedIterable);\n    }\n    if (iterable[Symbol.asyncIterator]) {\n        return _batch(size, iterable);\n    }\n    return _syncBatch(size, iterable);\n}\n\nfunction getIterator(iterable) {\n    if (typeof iterable.next === 'function') {\n        return iterable;\n    }\n    if (typeof iterable[Symbol.iterator] === 'function') {\n        return iterable[Symbol.iterator]();\n    }\n    if (typeof iterable[Symbol.asyncIterator] === 'function') {\n        return iterable[Symbol.asyncIterator]();\n    }\n    throw new TypeError('\"values\" does not to conform to any of the iterator or iterable protocols');\n}\n\nfunction defer() {\n    let reject;\n    let resolve;\n    const promise = new Promise((resolveFunc, rejectFunc) => {\n        resolve = resolveFunc;\n        reject = rejectFunc;\n    });\n    return {\n        promise,\n        reject,\n        resolve,\n    };\n}\n\n/// <reference lib=\"esnext.asynciterable\" />\nfunction _buffer(size, iterable) {\n    const iterator = getIterator(iterable);\n    const resultQueue = [];\n    const readQueue = [];\n    let reading = false;\n    let ended = false;\n    function fulfillReadQueue() {\n        while (readQueue.length > 0 && resultQueue.length > 0) {\n            const readDeferred = readQueue.shift();\n            const { error, value } = resultQueue.shift();\n            if (error) {\n                readDeferred.reject(error);\n            }\n            else {\n                readDeferred.resolve({ done: false, value });\n            }\n        }\n        while (readQueue.length > 0 && ended) {\n            const { resolve } = readQueue.shift();\n            resolve({ done: true, value: undefined });\n        }\n    }\n    async function fillQueue() {\n        if (ended) {\n            return;\n        }\n        if (reading) {\n            return;\n        }\n        if (resultQueue.length >= size) {\n            return;\n        }\n        reading = true;\n        try {\n            const { done, value } = await iterator.next();\n            if (done) {\n                ended = true;\n            }\n            else {\n                resultQueue.push({ value });\n            }\n        }\n        catch (error) {\n            ended = true;\n            resultQueue.push({ error });\n        }\n        fulfillReadQueue();\n        reading = false;\n        fillQueue();\n    }\n    async function next() {\n        if (resultQueue.length > 0) {\n            const { error, value } = resultQueue.shift();\n            if (error) {\n                throw error;\n            }\n            fillQueue();\n            return { done: false, value };\n        }\n        if (ended) {\n            return { done: true, value: undefined }; // stupid ts\n        }\n        const deferred = defer();\n        readQueue.push(deferred);\n        fillQueue();\n        return deferred.promise;\n    }\n    const asyncIterableIterator = {\n        next,\n        [Symbol.asyncIterator]: () => asyncIterableIterator,\n    };\n    return asyncIterableIterator;\n}\nfunction* syncBuffer(size, iterable) {\n    const valueQueue = [];\n    let e;\n    try {\n        for (const value of iterable) {\n            valueQueue.push(value);\n            if (valueQueue.length <= size) {\n                continue;\n            }\n            yield valueQueue.shift();\n        }\n    }\n    catch (error) {\n        e = error;\n    }\n    for (const value of valueQueue) {\n        yield value;\n    }\n    if (e) {\n        throw e;\n    }\n}\nfunction buffer(size, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => buffer(size, curriedIterable);\n    }\n    if (iterable[Symbol.asyncIterator]) {\n        return _buffer(size, iterable);\n    }\n    return syncBuffer(size, iterable);\n}\n\nasync function _collect(iterable) {\n    var e_1, _a;\n    const values = [];\n    try {\n        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), !iterable_1_1.done;) {\n            const value = iterable_1_1.value;\n            values.push(value);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) await _a.call(iterable_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return values;\n}\nfunction collect(iterable) {\n    if (iterable[Symbol.asyncIterator]) {\n        return _collect(iterable);\n    }\n    return Array.from(iterable);\n}\n\nfunction _concat(iterables) {\n    return __asyncGenerator(this, arguments, function* _concat_1() {\n        var e_1, _a;\n        try {\n            for (var iterables_1 = __asyncValues(iterables), iterables_1_1; iterables_1_1 = yield __await(iterables_1.next()), !iterables_1_1.done;) {\n                const iterable = iterables_1_1.value;\n                yield __await(yield* __asyncDelegator(__asyncValues(iterable)));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterables_1_1 && !iterables_1_1.done && (_a = iterables_1.return)) yield __await(_a.call(iterables_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\nfunction* _syncConcat(iterables) {\n    for (const iterable of iterables) {\n        yield* iterable;\n    }\n}\nfunction concat(...iterables) {\n    const hasAnyAsync = iterables.find(itr => itr[Symbol.asyncIterator] !== undefined);\n    if (hasAnyAsync) {\n        return _concat(iterables);\n    }\n    else {\n        return _syncConcat(iterables);\n    }\n}\n\nasync function _consume(iterable) {\n    var e_1, _a;\n    try {\n        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), !iterable_1_1.done;) {\n            const val = iterable_1_1.value;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) await _a.call(iterable_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n}\nfunction consume(iterable) {\n    if (iterable[Symbol.asyncIterator]) {\n        return _consume(iterable);\n    }\n}\n\nfunction _filter(filterFunc, iterable) {\n    return __asyncGenerator(this, arguments, function* _filter_1() {\n        var e_1, _a;\n        try {\n            for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {\n                const data = iterable_1_1.value;\n                if (yield __await(filterFunc(data))) {\n                    yield yield __await(data);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\nfunction filter(filterFunc, iterable) {\n    if (iterable === undefined) {\n        return (curriedIterable) => _filter(filterFunc, curriedIterable);\n    }\n    return _filter(filterFunc, iterable);\n}\n\nfunction flatten(iterable) {\n    return __asyncGenerator(this, arguments, function* flatten_1() {\n        var e_1, _a;\n        try {\n            for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {\n                const maybeItr = iterable_1_1.value;\n                if (maybeItr && typeof maybeItr !== 'string' && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator])) {\n                    yield __await(yield* __asyncDelegator(__asyncValues(flatten(maybeItr))));\n                }\n                else {\n                    yield yield __await(maybeItr);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\n\nfunction _map(func, iterable) {\n    return __asyncGenerator(this, arguments, function* _map_1() {\n        var e_1, _a;\n        try {\n            for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {\n                const val = iterable_1_1.value;\n                yield yield __await(yield __await(func(val)));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\nfunction map(func, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => _map(func, curriedIterable);\n    }\n    return _map(func, iterable);\n}\n\nfunction flatMap(func, iterable) {\n    if (iterable === undefined) {\n        return (curriedIterable) => flatMap(func, curriedIterable);\n    }\n    return filter(i => i !== undefined && i !== null, flatten(map(func, iterable)));\n}\n\nfunction _flatTransform(concurrency, func, iterable) {\n    const iterator = getIterator(iterable);\n    const resultQueue = [];\n    const readQueue = [];\n    let ended = false;\n    let reading = false;\n    let inflightCount = 0;\n    let lastError = null;\n    function fulfillReadQueue() {\n        while (readQueue.length > 0 && resultQueue.length > 0) {\n            const { resolve } = readQueue.shift();\n            const value = resultQueue.shift();\n            resolve({ done: false, value });\n        }\n        while (readQueue.length > 0 && inflightCount === 0 && ended) {\n            const { resolve, reject } = readQueue.shift();\n            if (lastError) {\n                reject(lastError);\n                lastError = null;\n            }\n            else {\n                resolve({ done: true, value: undefined });\n            }\n        }\n    }\n    async function fillQueue() {\n        if (ended) {\n            fulfillReadQueue();\n            return;\n        }\n        if (reading) {\n            return;\n        }\n        if (inflightCount + resultQueue.length >= concurrency) {\n            return;\n        }\n        reading = true;\n        inflightCount++;\n        try {\n            const { done, value } = await iterator.next();\n            if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n            }\n            else {\n                mapAndQueue(value);\n            }\n        }\n        catch (error) {\n            ended = true;\n            inflightCount--;\n            lastError = error;\n            fulfillReadQueue();\n        }\n        reading = false;\n        fillQueue();\n    }\n    async function mapAndQueue(itrValue) {\n        var e_1, _a;\n        try {\n            const value = await func(itrValue);\n            if (value && value[Symbol.asyncIterator]) {\n                try {\n                    for (var _b = __asyncValues(value), _c; _c = await _b.next(), !_c.done;) {\n                        const asyncVal = _c.value;\n                        resultQueue.push(asyncVal);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n            else {\n                resultQueue.push(value);\n            }\n        }\n        catch (error) {\n            ended = true;\n            lastError = error;\n        }\n        inflightCount--;\n        fulfillReadQueue();\n        fillQueue();\n    }\n    async function next() {\n        if (resultQueue.length === 0) {\n            const deferred = defer();\n            readQueue.push(deferred);\n            fillQueue();\n            return deferred.promise;\n        }\n        const value = resultQueue.shift();\n        fillQueue();\n        return { done: false, value };\n    }\n    const asyncIterableIterator = {\n        next,\n        [Symbol.asyncIterator]: () => asyncIterableIterator,\n    };\n    return asyncIterableIterator;\n}\nfunction flatTransform(concurrency, func, iterable) {\n    if (func === undefined) {\n        return (curriedFunc, curriedIterable) => curriedIterable\n            ? flatTransform(concurrency, curriedFunc, curriedIterable)\n            : flatTransform(concurrency, curriedFunc);\n    }\n    if (iterable === undefined) {\n        return (curriedIterable) => flatTransform(concurrency, func, curriedIterable);\n    }\n    return filter(i => i !== undefined && i !== null, flatten(_flatTransform(concurrency, func, iterable)));\n}\n\nasync function onceReadable(stream) {\n    return new Promise(resolve => {\n        stream.once('readable', () => {\n            resolve();\n        });\n    });\n}\nfunction _fromStream(stream) {\n    return __asyncGenerator(this, arguments, function* _fromStream_1() {\n        while (true) {\n            const data = stream.read();\n            if (data !== null) {\n                yield yield __await(data);\n                continue;\n            }\n            if (stream._readableState.ended) {\n                return yield __await(void 0);\n            }\n            yield __await(onceReadable(stream));\n        }\n    });\n}\nfunction fromStream(stream) {\n    if (typeof stream[Symbol.asyncIterator] === 'function') {\n        return stream;\n    }\n    return _fromStream(stream);\n}\n\nfunction merge(...iterables) {\n    return __asyncGenerator(this, arguments, function* merge_1() {\n        const sources = new Set(iterables.map(getIterator));\n        while (sources.size > 0) {\n            for (const iterator of sources) {\n                const nextVal = yield __await(iterator.next());\n                if (nextVal.done) {\n                    sources.delete(iterator);\n                }\n                else {\n                    yield yield __await(nextVal.value);\n                }\n            }\n        }\n    });\n}\n\nfunction pipeline(firstFn, ...fns) {\n    let previousFn = firstFn();\n    for (const func of fns) {\n        previousFn = func(previousFn);\n    }\n    return previousFn;\n}\n\nfunction _parallelMap(concurrency, func, iterable) {\n    return __asyncGenerator(this, arguments, function* _parallelMap_1() {\n        let transformError = null;\n        const wrapFunc = value => ({\n            value: func(value),\n        });\n        const stopOnError = function (source) {\n            return __asyncGenerator(this, arguments, function* () {\n                var e_1, _a;\n                try {\n                    for (var source_1 = __asyncValues(source), source_1_1; source_1_1 = yield __await(source_1.next()), !source_1_1.done;) {\n                        const value = source_1_1.value;\n                        if (transformError) {\n                            return yield __await(void 0);\n                        }\n                        yield yield __await(value);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield __await(_a.call(source_1));\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            });\n        };\n        const output = pipeline(() => iterable, buffer(1), stopOnError, map(wrapFunc), buffer(concurrency));\n        const itr = getIterator(output);\n        while (true) {\n            const { value, done } = yield __await(itr.next());\n            if (done) {\n                break;\n            }\n            try {\n                const val = yield __await(value.value);\n                if (!transformError) {\n                    yield yield __await(val);\n                }\n            }\n            catch (error) {\n                transformError = error;\n            }\n        }\n        if (transformError) {\n            throw transformError;\n        }\n    });\n}\nfunction parallelMap(concurrency, func, iterable) {\n    if (func === undefined) {\n        return (curriedFunc, curriedIterable) => parallelMap(concurrency, curriedFunc, curriedIterable);\n    }\n    if (iterable === undefined) {\n        return curriedIterable => parallelMap(concurrency, func, curriedIterable);\n    }\n    return _parallelMap(concurrency, func, iterable);\n}\n\nfunction parallelFlatMap(concurrency, func, iterable) {\n    if (func === undefined) {\n        return (curriedFunc, curriedIterable) => curriedIterable\n            ? parallelFlatMap(concurrency, curriedFunc, curriedIterable)\n            : parallelFlatMap(concurrency, curriedFunc);\n    }\n    if (iterable === undefined) {\n        return (curriedIterable) => parallelFlatMap(concurrency, func, curriedIterable);\n    }\n    return filter(i => i !== undefined && i !== null, flatten(parallelMap(concurrency, func, iterable)));\n}\n\nfunction parallelMerge(...iterables) {\n    return __asyncGenerator(this, arguments, function* parallelMerge_1() {\n        const inputs = iterables.map(getIterator);\n        const concurrentWork = new Set();\n        const values = new Map();\n        let lastError = null;\n        let errCb = null;\n        let valueCb = null;\n        const notifyError = err => {\n            lastError = err;\n            if (errCb) {\n                errCb(err);\n            }\n        };\n        const notifyDone = value => {\n            if (valueCb) {\n                valueCb(value);\n            }\n        };\n        const waitForQueue = () => new Promise((resolve, reject) => {\n            if (lastError) {\n                reject(lastError);\n            }\n            if (values.size > 0) {\n                return resolve();\n            }\n            valueCb = resolve;\n            errCb = reject;\n        });\n        const queueNext = input => {\n            const nextVal = Promise.resolve(input.next()).then(async ({ done, value }) => {\n                if (!done) {\n                    values.set(input, value);\n                }\n                concurrentWork.delete(nextVal);\n            });\n            concurrentWork.add(nextVal);\n            nextVal.then(notifyDone, notifyError);\n        };\n        for (const input of inputs) {\n            queueNext(input);\n        }\n        while (true) {\n            // We technically don't have to check `values.size` as the for loop should have emptied it\n            // However I haven't yet found specs verifying that behavior, only tests\n            // the guard in waitForQueue() checking for values is in place for the same reason\n            if (concurrentWork.size === 0 && values.size === 0) {\n                return yield __await(void 0);\n            }\n            yield __await(waitForQueue());\n            for (const [input, value] of values) {\n                values.delete(input);\n                yield yield __await(value);\n                queueNext(input);\n            }\n        }\n    });\n}\n\nasync function _reduce(func, start, iterable) {\n    var e_1, _a;\n    let value = start;\n    try {\n        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), !iterable_1_1.done;) {\n            const nextItem = iterable_1_1.value;\n            value = await func(value, nextItem);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) await _a.call(iterable_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return value;\n}\nfunction reduce(func, start, iterable) {\n    if (start === undefined) {\n        return (curriedStart, curriedIterable) => curriedIterable ? reduce(func, curriedStart, curriedIterable) : reduce(func, curriedStart);\n    }\n    if (iterable === undefined) {\n        return (curriedIterable) => reduce(func, start, curriedIterable);\n    }\n    return _reduce(func, start, iterable);\n}\n\nfunction _take(count, iterable) {\n    return __asyncGenerator(this, arguments, function* _take_1() {\n        var e_1, _a;\n        let taken = 0;\n        try {\n            for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {\n                const val = iterable_1_1.value;\n                yield yield __await(yield __await(val));\n                taken++;\n                if (taken >= count) {\n                    return yield __await(void 0);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\nfunction* _syncTake(count, iterable) {\n    let taken = 0;\n    for (const val of iterable) {\n        yield val;\n        taken++;\n        if (taken >= count) {\n            return;\n        }\n    }\n}\nfunction take(count, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => take(count, curriedIterable);\n    }\n    if (iterable[Symbol.asyncIterator]) {\n        return _take(count, iterable);\n    }\n    return _syncTake(count, iterable);\n}\n\nfunction _asyncTap(func, iterable) {\n    return __asyncGenerator(this, arguments, function* _asyncTap_1() {\n        var e_1, _a;\n        try {\n            for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {\n                const val = iterable_1_1.value;\n                yield __await(func(val));\n                yield yield __await(val);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\nfunction tap(func, iterable) {\n    if (iterable === undefined) {\n        return (curriedIterable) => _asyncTap(func, curriedIterable);\n    }\n    return _asyncTap(func, iterable);\n}\n\nfunction addTime(a, b) {\n    let seconds = a[0] + b[0];\n    let nanoseconds = a[1] + b[1];\n    if (nanoseconds >= 1000000000) {\n        const remainder = nanoseconds % 1000000000;\n        seconds += (nanoseconds - remainder) / 1000000000;\n        nanoseconds = remainder;\n    }\n    return [seconds, nanoseconds];\n}\nfunction _asyncTime(config, iterable) {\n    return __asyncGenerator(this, arguments, function* _asyncTime_1() {\n        const itr = iterable[Symbol.asyncIterator]();\n        let total = [0, 0];\n        while (true) {\n            const start = process.hrtime();\n            const { value, done } = yield __await(itr.next());\n            const delta = process.hrtime(start);\n            total = addTime(total, delta);\n            if (config.progress) {\n                config.progress(delta, total);\n            }\n            if (done) {\n                if (config.total) {\n                    config.total(total);\n                }\n                return yield __await(value);\n            }\n            yield yield __await(value);\n        }\n    });\n}\nfunction* _syncTime(config, iterable) {\n    const itr = iterable[Symbol.iterator]();\n    let total = [0, 0];\n    while (true) {\n        const start = process.hrtime();\n        const { value, done } = itr.next();\n        const delta = process.hrtime(start);\n        total = addTime(total, delta);\n        if (config.progress) {\n            config.progress(delta, total);\n        }\n        if (done) {\n            if (config.total) {\n                config.total(total);\n            }\n            return value;\n        }\n        yield value;\n    }\n}\nfunction time(config = {}, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => time(config, curriedIterable);\n    }\n    if (iterable[Symbol.asyncIterator] !== undefined) {\n        return _asyncTime(config, iterable);\n    }\n    else {\n        return _syncTime(config, iterable);\n    }\n}\n\nfunction _transform(concurrency, func, iterable) {\n    const iterator = getIterator(iterable);\n    const resultQueue = [];\n    const readQueue = [];\n    let ended = false;\n    let reading = false;\n    let inflightCount = 0;\n    let lastError = null;\n    function fulfillReadQueue() {\n        while (readQueue.length > 0 && resultQueue.length > 0) {\n            const { resolve } = readQueue.shift();\n            const value = resultQueue.shift();\n            resolve({ done: false, value });\n        }\n        while (readQueue.length > 0 && inflightCount === 0 && ended) {\n            const { resolve, reject } = readQueue.shift();\n            if (lastError) {\n                reject(lastError);\n                lastError = null;\n            }\n            else {\n                resolve({ done: true, value: undefined });\n            }\n        }\n    }\n    async function fillQueue() {\n        if (ended) {\n            fulfillReadQueue();\n            return;\n        }\n        if (reading) {\n            return;\n        }\n        if (inflightCount + resultQueue.length >= concurrency) {\n            return;\n        }\n        reading = true;\n        inflightCount++;\n        try {\n            const { done, value } = await iterator.next();\n            if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n            }\n            else {\n                mapAndQueue(value);\n            }\n        }\n        catch (error) {\n            ended = true;\n            inflightCount--;\n            lastError = error;\n            fulfillReadQueue();\n        }\n        reading = false;\n        fillQueue();\n    }\n    async function mapAndQueue(itrValue) {\n        try {\n            const value = await func(itrValue);\n            resultQueue.push(value);\n        }\n        catch (error) {\n            ended = true;\n            lastError = error;\n        }\n        inflightCount--;\n        fulfillReadQueue();\n        fillQueue();\n    }\n    async function next() {\n        if (resultQueue.length === 0) {\n            const deferred = defer();\n            readQueue.push(deferred);\n            fillQueue();\n            return deferred.promise;\n        }\n        const value = resultQueue.shift();\n        fillQueue();\n        return { done: false, value };\n    }\n    const asyncIterableIterator = {\n        next,\n        [Symbol.asyncIterator]: () => asyncIterableIterator,\n    };\n    return asyncIterableIterator;\n}\nfunction transform(concurrency, func, iterable) {\n    if (func === undefined) {\n        return (curriedFunc, curriedIterable) => curriedIterable\n            ? transform(concurrency, curriedFunc, curriedIterable)\n            : transform(concurrency, curriedFunc);\n    }\n    if (iterable === undefined) {\n        return (curriedIterable) => transform(concurrency, func, curriedIterable);\n    }\n    return _transform(concurrency, func, iterable);\n}\n\nasync function _writeToStream(stream, iterable) {\n    var e_1, _a;\n    let lastError = null;\n    let errCb = null;\n    let drainCb = null;\n    const notifyError = err => {\n        lastError = err;\n        if (errCb) {\n            errCb(err);\n        }\n    };\n    const notifyDrain = () => {\n        if (drainCb) {\n            drainCb();\n        }\n    };\n    const cleanup = () => {\n        stream.removeListener('error', notifyError);\n        stream.removeListener('drain', notifyDrain);\n    };\n    stream.once('error', notifyError);\n    const waitForDrain = () => new Promise((resolve, reject) => {\n        if (lastError) {\n            return reject(lastError);\n        }\n        stream.once('drain', notifyDrain);\n        drainCb = resolve;\n        errCb = reject;\n    });\n    try {\n        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), !iterable_1_1.done;) {\n            const value = iterable_1_1.value;\n            if (stream.write(value) === false) {\n                await waitForDrain();\n            }\n            if (lastError) {\n                break;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) await _a.call(iterable_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    cleanup();\n    if (lastError) {\n        throw lastError;\n    }\n}\nfunction writeToStream(stream, iterable) {\n    if (iterable === undefined) {\n        return (curriedIterable) => _writeToStream(stream, curriedIterable);\n    }\n    return _writeToStream(stream, iterable);\n}\n\n/// <reference lib=\"esnext.asynciterable\" />\nif (Symbol.asyncIterator === undefined) {\n    Symbol.asyncIterator = Symbol.for('asyncIterator');\n}\n\nexport { batch, buffer, collect, concat, consume, filter, flatMap, flatten, flatTransform, fromStream, getIterator, map, merge, parallelFlatMap, parallelMap, parallelMerge, pipeline, reduce, take, tap, time, transform, writeToStream };\n"]},"metadata":{},"sourceType":"module"}