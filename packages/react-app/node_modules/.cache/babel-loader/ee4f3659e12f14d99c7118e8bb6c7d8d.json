{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst CID = require('cids');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  bitswap\n}) => {\n  return withTimeoutOption(async function wantlist(peerId, options = {}) {\n    // eslint-disable-line require-await\n    if (peerId && !CID.isCID(peerId) && typeof peerId !== 'string' && !Buffer.isBuffer(peerId) && !PeerId.isPeerId(peerId)) {\n      options = peerId;\n      peerId = null;\n    }\n\n    const list = peerId ? bitswap.wantlistForPeer(PeerId.createFromCID(peerId)) : bitswap.getWantlist(options);\n    return Array.from(list).map(e => e[1].cid);\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/bitswap/wantlist.js"],"names":["PeerId","require","CID","withTimeoutOption","module","exports","bitswap","wantlist","peerId","options","isCID","Buffer","isBuffer","isPeerId","list","wantlistForPeer","createFromCID","getWantlist","Array","from","map","e","cid"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAwBF,OAAO,CAAC,aAAD,CAArC;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC,SAAOH,iBAAiB,CAAC,eAAeI,QAAf,CAAyBC,MAAzB,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAAE;AACxE,QAAID,MAAM,IAAI,CAACN,GAAG,CAACQ,KAAJ,CAAUF,MAAV,CAAX,IAAgC,OAAOA,MAAP,KAAkB,QAAlD,IAA8D,CAACG,MAAM,CAACC,QAAP,CAAgBJ,MAAhB,CAA/D,IAA0F,CAACR,MAAM,CAACa,QAAP,CAAgBL,MAAhB,CAA/F,EAAwH;AACtHC,MAAAA,OAAO,GAAGD,MAAV;AACAA,MAAAA,MAAM,GAAG,IAAT;AACD;;AAED,UAAMM,IAAI,GAAGN,MAAM,GACfF,OAAO,CAACS,eAAR,CAAwBf,MAAM,CAACgB,aAAP,CAAqBR,MAArB,CAAxB,CADe,GAEfF,OAAO,CAACW,WAAR,CAAoBR,OAApB,CAFJ;AAIA,WAAOS,KAAK,CAACC,IAAN,CAAWL,IAAX,EAAiBM,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAA/B,CAAP;AACD,GAXuB,CAAxB;AAYD,CAbD","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst CID = require('cids')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ bitswap }) => {\n  return withTimeoutOption(async function wantlist (peerId, options = {}) { // eslint-disable-line require-await\n    if (peerId && !CID.isCID(peerId) && typeof peerId !== 'string' && !Buffer.isBuffer(peerId) && !PeerId.isPeerId(peerId)) {\n      options = peerId\n      peerId = null\n    }\n\n    const list = peerId\n      ? bitswap.wantlistForPeer(PeerId.createFromCID(peerId))\n      : bitswap.getWantlist(options)\n\n    return Array.from(list).map(e => e[1].cid)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}