{"ast":null,"code":"/* eslint max-nested-callbacks: [\"error\", 5] */\n'use strict';\n\nconst sanitize = require('sanitize-filename');\n\nconst mergeOptions = require('merge-options');\n\nconst crypto = require('libp2p-crypto');\n\nconst DS = require('interface-datastore');\n\nconst CMS = require('./cms');\n\nconst errcode = require('err-code');\n\nconst keyPrefix = '/pkcs8/';\nconst infoPrefix = '/info/'; // NIST SP 800-132\n\nconst NIST = {\n  minKeyLength: 112 / 8,\n  minSaltLength: 128 / 8,\n  minIterationCount: 1000\n};\nconst defaultOptions = {\n  // See https://cryptosense.com/parametesr-choice-for-pbkdf2/\n  dek: {\n    keyLength: 512 / 8,\n    iterationCount: 10000,\n    salt: 'you should override this value with a crypto secure random number',\n    hash: 'sha2-512'\n  }\n};\n\nfunction validateKeyName(name) {\n  if (!name) return false;\n  if (typeof name !== 'string') return false;\n  return name === sanitize(name.trim());\n}\n/**\n * Throws an error after a delay\n *\n * This assumes than an error indicates that the keychain is under attack. Delay returning an\n * error to make brute force attacks harder.\n *\n * @param {string | Error} err - The error\n * @private\n */\n\n\nasync function throwDelayed(err) {\n  const min = 200;\n  const max = 1000;\n  const delay = Math.random() * (max - min) + min;\n  await new Promise(resolve => setTimeout(resolve, delay));\n  throw err;\n}\n/**\n * Converts a key name into a datastore name.\n *\n * @param {string} name\n * @returns {DS.Key}\n * @private\n */\n\n\nfunction DsName(name) {\n  return new DS.Key(keyPrefix + name);\n}\n/**\n * Converts a key name into a datastore info name.\n *\n * @param {string} name\n * @returns {DS.Key}\n * @private\n */\n\n\nfunction DsInfoName(name) {\n  return new DS.Key(infoPrefix + name);\n}\n/**\n * Information about a key.\n *\n * @typedef {Object} KeyInfo\n *\n * @property {string} id - The universally unique key id.\n * @property {string} name - The local key name.\n */\n\n/**\n * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.\n *\n * A key in the store has two entries\n * - '/info/*key-name*', contains the KeyInfo for the key\n * - '/pkcs8/*key-name*', contains the PKCS #8 for the key\n *\n */\n\n\nclass Keychain {\n  /**\n   * Creates a new instance of a key chain.\n   *\n   * @param {DS} store - where the key are.\n   * @param {object} options - ???\n   */\n  constructor(store, options) {\n    if (!store) {\n      throw new Error('store is required');\n    }\n\n    this.store = store;\n    this.opts = mergeOptions(defaultOptions, options); // Enforce NIST SP 800-132\n\n    if (!this.opts.passPhrase || this.opts.passPhrase.length < 20) {\n      throw new Error('passPhrase must be least 20 characters');\n    }\n\n    if (this.opts.dek.keyLength < NIST.minKeyLength) {\n      throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`);\n    }\n\n    if (this.opts.dek.salt.length < NIST.minSaltLength) {\n      throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`);\n    }\n\n    if (this.opts.dek.iterationCount < NIST.minIterationCount) {\n      throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`);\n    } // Create the derived encrypting key\n\n\n    const dek = crypto.pbkdf2(this.opts.passPhrase, this.opts.dek.salt, this.opts.dek.iterationCount, this.opts.dek.keyLength, this.opts.dek.hash);\n    Object.defineProperty(this, '_', {\n      value: () => dek\n    });\n  }\n  /**\n   * Gets an object that can encrypt/decrypt protected data\n   * using the Cryptographic Message Syntax (CMS).\n   *\n   * CMS describes an encapsulation syntax for data protection. It\n   * is used to digitally sign, digest, authenticate, or encrypt\n   * arbitrary message content.\n   *\n   * @returns {CMS}\n   */\n\n\n  get cms() {\n    return new CMS(this);\n  }\n  /**\n   * Generates the options for a keychain.  A random salt is produced.\n   *\n   * @returns {object}\n   */\n\n\n  static generateOptions() {\n    const options = Object.assign({}, defaultOptions);\n    const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3; // no base64 padding\n\n    options.dek.salt = crypto.randomBytes(saltLength).toString('base64');\n    return options;\n  }\n  /**\n   * Gets an object that can encrypt/decrypt protected data.\n   * The default options for a keychain.\n   *\n   * @returns {object}\n   */\n\n\n  static get options() {\n    return defaultOptions;\n  }\n  /**\n   * Create a new key.\n   *\n   * @param {string} name - The local key name; cannot already exist.\n   * @param {string} type - One of the key types; 'rsa'.\n   * @param {int} size - The key size in bits.\n    * @returns {KeyInfo}\n   */\n\n\n  async createKey(name, type, size) {\n    const self = this;\n\n    if (!validateKeyName(name) || name === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'));\n    }\n\n    if (typeof type !== 'string') {\n      return throwDelayed(errcode(new Error(`Invalid key type '${type}'`), 'ERR_INVALID_KEY_TYPE'));\n    }\n\n    if (!Number.isSafeInteger(size)) {\n      return throwDelayed(errcode(new Error(`Invalid key size '${size}'`), 'ERR_INVALID_KEY_SIZE'));\n    }\n\n    const dsname = DsName(name);\n    const exists = await self.store.has(dsname);\n    if (exists) return throwDelayed(errcode(new Error(`Key '${name}' already exists`), 'ERR_KEY_ALREADY_EXISTS'));\n\n    switch (type.toLowerCase()) {\n      case 'rsa':\n        if (size < 2048) {\n          return throwDelayed(errcode(new Error(`Invalid RSA key size ${size}`), 'ERR_INVALID_KEY_SIZE'));\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    let keyInfo;\n\n    try {\n      const keypair = await crypto.keys.generateKeyPair(type, size);\n      const kid = await keypair.id();\n      const pem = await keypair.export(this._());\n      keyInfo = {\n        name: name,\n        id: kid\n      };\n      const batch = self.store.batch();\n      batch.put(dsname, pem);\n      batch.put(DsInfoName(name), JSON.stringify(keyInfo));\n      await batch.commit();\n    } catch (err) {\n      return throwDelayed(err);\n    }\n\n    return keyInfo;\n  }\n  /**\n   * List all the keys.\n   *\n    * @returns {KeyInfo[]}\n   */\n\n\n  async listKeys() {\n    const self = this;\n    const query = {\n      prefix: infoPrefix\n    };\n    const info = [];\n\n    for await (const value of self.store.query(query)) {\n      info.push(JSON.parse(value.value));\n    }\n\n    return info;\n  }\n  /**\n   * Find a key by it's id.\n   *\n   * @param {string} id - The universally unique key identifier.\n    * @returns {KeyInfo}\n   */\n\n\n  async findKeyById(id) {\n    try {\n      const keys = await this.listKeys();\n      return keys.find(k => k.id === id);\n    } catch (err) {\n      return throwDelayed(err);\n    }\n  }\n  /**\n   * Find a key by it's name.\n   *\n   * @param {string} name - The local key name.\n    * @returns {KeyInfo}\n   */\n\n\n  async findKeyByName(name) {\n    if (!validateKeyName(name)) {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'));\n    }\n\n    const dsname = DsInfoName(name);\n\n    try {\n      const res = await this.store.get(dsname);\n      return JSON.parse(res.toString());\n    } catch (err) {\n      return throwDelayed(errcode(new Error(`Key '${name}' does not exist. ${err.message}`), 'ERR_KEY_NOT_FOUND'));\n    }\n  }\n  /**\n   * Remove an existing key.\n   *\n   * @param {string} name - The local key name; must already exist.\n    * @returns {KeyInfo}\n   */\n\n\n  async removeKey(name) {\n    const self = this;\n\n    if (!validateKeyName(name) || name === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'));\n    }\n\n    const dsname = DsName(name);\n    const keyInfo = await self.findKeyByName(name);\n    const batch = self.store.batch();\n    batch.delete(dsname);\n    batch.delete(DsInfoName(name));\n    await batch.commit();\n    return keyInfo;\n  }\n  /**\n   * Rename a key\n   *\n   * @param {string} oldName - The old local key name; must already exist.\n   * @param {string} newName - The new local key name; must not already exist.\n    * @returns {KeyInfo}\n   */\n\n\n  async renameKey(oldName, newName) {\n    const self = this;\n\n    if (!validateKeyName(oldName) || oldName === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid old key name '${oldName}'`), 'ERR_OLD_KEY_NAME_INVALID'));\n    }\n\n    if (!validateKeyName(newName) || newName === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid new key name '${newName}'`), 'ERR_NEW_KEY_NAME_INVALID'));\n    }\n\n    const oldDsname = DsName(oldName);\n    const newDsname = DsName(newName);\n    const oldInfoName = DsInfoName(oldName);\n    const newInfoName = DsInfoName(newName);\n    const exists = await self.store.has(newDsname);\n    if (exists) return throwDelayed(errcode(new Error(`Key '${newName}' already exists`), 'ERR_KEY_ALREADY_EXISTS'));\n\n    try {\n      let res = await this.store.get(oldDsname);\n      const pem = res.toString();\n      res = await self.store.get(oldInfoName);\n      const keyInfo = JSON.parse(res.toString());\n      keyInfo.name = newName;\n      const batch = self.store.batch();\n      batch.put(newDsname, pem);\n      batch.put(newInfoName, JSON.stringify(keyInfo));\n      batch.delete(oldDsname);\n      batch.delete(oldInfoName);\n      await batch.commit();\n      return keyInfo;\n    } catch (err) {\n      return throwDelayed(err);\n    }\n  }\n  /**\n   * Export an existing key as a PEM encrypted PKCS #8 string\n   *\n   * @param {string} name - The local key name; must already exist.\n   * @param {string} password - The password\n    * @returns {string}\n   */\n\n\n  async exportKey(name, password) {\n    if (!validateKeyName(name)) {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'));\n    }\n\n    if (!password) {\n      return throwDelayed(errcode(new Error('Password is required'), 'ERR_PASSWORD_REQUIRED'));\n    }\n\n    const dsname = DsName(name);\n\n    try {\n      const res = await this.store.get(dsname);\n      const pem = res.toString();\n      const privateKey = await crypto.keys.import(pem, this._());\n      return privateKey.export(password);\n    } catch (err) {\n      return throwDelayed(err);\n    }\n  }\n  /**\n   * Import a new key from a PEM encoded PKCS #8 string\n   *\n   * @param {string} name - The local key name; must not already exist.\n   * @param {string} pem - The PEM encoded PKCS #8 string\n   * @param {string} password - The password.\n    * @returns {KeyInfo}\n   */\n\n\n  async importKey(name, pem, password) {\n    const self = this;\n\n    if (!validateKeyName(name) || name === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'));\n    }\n\n    if (!pem) {\n      return throwDelayed(errcode(new Error('PEM encoded key is required'), 'ERR_PEM_REQUIRED'));\n    }\n\n    const dsname = DsName(name);\n    const exists = await self.store.has(dsname);\n    if (exists) return throwDelayed(errcode(new Error(`Key '${name}' already exists`), 'ERR_KEY_ALREADY_EXISTS'));\n    let privateKey;\n\n    try {\n      privateKey = await crypto.keys.import(pem, password);\n    } catch (err) {\n      return throwDelayed(errcode(new Error('Cannot read the key, most likely the password is wrong'), 'ERR_CANNOT_READ_KEY'));\n    }\n\n    let kid;\n\n    try {\n      kid = await privateKey.id();\n      pem = await privateKey.export(this._());\n    } catch (err) {\n      return throwDelayed(err);\n    }\n\n    const keyInfo = {\n      name: name,\n      id: kid\n    };\n    const batch = self.store.batch();\n    batch.put(dsname, pem);\n    batch.put(DsInfoName(name), JSON.stringify(keyInfo));\n    await batch.commit();\n    return keyInfo;\n  }\n\n  async importPeer(name, peer) {\n    const self = this;\n\n    if (!validateKeyName(name)) {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'));\n    }\n\n    if (!peer || !peer.privKey) {\n      return throwDelayed(errcode(new Error('Peer.privKey is required'), 'ERR_MISSING_PRIVATE_KEY'));\n    }\n\n    const privateKey = peer.privKey;\n    const dsname = DsName(name);\n    const exists = await self.store.has(dsname);\n    if (exists) return throwDelayed(errcode(new Error(`Key '${name}' already exists`), 'ERR_KEY_ALREADY_EXISTS'));\n\n    try {\n      const kid = await privateKey.id();\n      const pem = await privateKey.export(this._());\n      const keyInfo = {\n        name: name,\n        id: kid\n      };\n      const batch = self.store.batch();\n      batch.put(dsname, pem);\n      batch.put(DsInfoName(name), JSON.stringify(keyInfo));\n      await batch.commit();\n      return keyInfo;\n    } catch (err) {\n      return throwDelayed(err);\n    }\n  }\n  /**\n   * Gets the private key as PEM encoded PKCS #8 string.\n   *\n   * @param {string} name\n    * @returns {string}\n   * @private\n   */\n\n\n  async _getPrivateKey(name) {\n    if (!validateKeyName(name)) {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'));\n    }\n\n    try {\n      const dsname = DsName(name);\n      const res = await this.store.get(dsname);\n      return res.toString();\n    } catch (err) {\n      return throwDelayed(errcode(new Error(`Key '${name}' does not exist. ${err.message}`), 'ERR_KEY_NOT_FOUND'));\n    }\n  }\n\n}\n\nmodule.exports = Keychain;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/keychain/index.js"],"names":["sanitize","require","mergeOptions","crypto","DS","CMS","errcode","keyPrefix","infoPrefix","NIST","minKeyLength","minSaltLength","minIterationCount","defaultOptions","dek","keyLength","iterationCount","salt","hash","validateKeyName","name","trim","throwDelayed","err","min","max","delay","Math","random","Promise","resolve","setTimeout","DsName","Key","DsInfoName","Keychain","constructor","store","options","Error","opts","passPhrase","length","pbkdf2","Object","defineProperty","value","cms","generateOptions","assign","saltLength","ceil","randomBytes","toString","createKey","type","size","self","Number","isSafeInteger","dsname","exists","has","toLowerCase","keyInfo","keypair","keys","generateKeyPair","kid","id","pem","export","_","batch","put","JSON","stringify","commit","listKeys","query","prefix","info","push","parse","findKeyById","find","k","findKeyByName","res","get","message","removeKey","delete","renameKey","oldName","newName","oldDsname","newDsname","oldInfoName","newInfoName","exportKey","password","privateKey","import","importKey","importPeer","peer","privKey","_getPrivateKey","module","exports"],"mappings":"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","sourcesContent":["/* eslint max-nested-callbacks: [\"error\", 5] */\n'use strict'\n\nconst sanitize = require('sanitize-filename')\nconst mergeOptions = require('merge-options')\nconst crypto = require('libp2p-crypto')\nconst DS = require('interface-datastore')\nconst CMS = require('./cms')\nconst errcode = require('err-code')\n\nconst keyPrefix = '/pkcs8/'\nconst infoPrefix = '/info/'\n\n// NIST SP 800-132\nconst NIST = {\n  minKeyLength: 112 / 8,\n  minSaltLength: 128 / 8,\n  minIterationCount: 1000\n}\n\nconst defaultOptions = {\n  // See https://cryptosense.com/parametesr-choice-for-pbkdf2/\n  dek: {\n    keyLength: 512 / 8,\n    iterationCount: 10000,\n    salt: 'you should override this value with a crypto secure random number',\n    hash: 'sha2-512'\n  }\n}\n\nfunction validateKeyName (name) {\n  if (!name) return false\n  if (typeof name !== 'string') return false\n  return name === sanitize(name.trim())\n}\n\n/**\n * Throws an error after a delay\n *\n * This assumes than an error indicates that the keychain is under attack. Delay returning an\n * error to make brute force attacks harder.\n *\n * @param {string | Error} err - The error\n * @private\n */\nasync function throwDelayed (err) {\n  const min = 200\n  const max = 1000\n  const delay = Math.random() * (max - min) + min\n\n  await new Promise(resolve => setTimeout(resolve, delay))\n  throw err\n}\n\n/**\n * Converts a key name into a datastore name.\n *\n * @param {string} name\n * @returns {DS.Key}\n * @private\n */\nfunction DsName (name) {\n  return new DS.Key(keyPrefix + name)\n}\n\n/**\n * Converts a key name into a datastore info name.\n *\n * @param {string} name\n * @returns {DS.Key}\n * @private\n */\nfunction DsInfoName (name) {\n  return new DS.Key(infoPrefix + name)\n}\n\n/**\n * Information about a key.\n *\n * @typedef {Object} KeyInfo\n *\n * @property {string} id - The universally unique key id.\n * @property {string} name - The local key name.\n */\n\n/**\n * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.\n *\n * A key in the store has two entries\n * - '/info/*key-name*', contains the KeyInfo for the key\n * - '/pkcs8/*key-name*', contains the PKCS #8 for the key\n *\n */\nclass Keychain {\n  /**\n   * Creates a new instance of a key chain.\n   *\n   * @param {DS} store - where the key are.\n   * @param {object} options - ???\n   */\n  constructor (store, options) {\n    if (!store) {\n      throw new Error('store is required')\n    }\n    this.store = store\n\n    this.opts = mergeOptions(defaultOptions, options)\n\n    // Enforce NIST SP 800-132\n    if (!this.opts.passPhrase || this.opts.passPhrase.length < 20) {\n      throw new Error('passPhrase must be least 20 characters')\n    }\n    if (this.opts.dek.keyLength < NIST.minKeyLength) {\n      throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`)\n    }\n    if (this.opts.dek.salt.length < NIST.minSaltLength) {\n      throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`)\n    }\n    if (this.opts.dek.iterationCount < NIST.minIterationCount) {\n      throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`)\n    }\n\n    // Create the derived encrypting key\n    const dek = crypto.pbkdf2(\n      this.opts.passPhrase,\n      this.opts.dek.salt,\n      this.opts.dek.iterationCount,\n      this.opts.dek.keyLength,\n      this.opts.dek.hash)\n    Object.defineProperty(this, '_', { value: () => dek })\n  }\n\n  /**\n   * Gets an object that can encrypt/decrypt protected data\n   * using the Cryptographic Message Syntax (CMS).\n   *\n   * CMS describes an encapsulation syntax for data protection. It\n   * is used to digitally sign, digest, authenticate, or encrypt\n   * arbitrary message content.\n   *\n   * @returns {CMS}\n   */\n  get cms () {\n    return new CMS(this)\n  }\n\n  /**\n   * Generates the options for a keychain.  A random salt is produced.\n   *\n   * @returns {object}\n   */\n  static generateOptions () {\n    const options = Object.assign({}, defaultOptions)\n    const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3 // no base64 padding\n    options.dek.salt = crypto.randomBytes(saltLength).toString('base64')\n    return options\n  }\n\n  /**\n   * Gets an object that can encrypt/decrypt protected data.\n   * The default options for a keychain.\n   *\n   * @returns {object}\n   */\n  static get options () {\n    return defaultOptions\n  }\n\n  /**\n   * Create a new key.\n   *\n   * @param {string} name - The local key name; cannot already exist.\n   * @param {string} type - One of the key types; 'rsa'.\n   * @param {int} size - The key size in bits.\n    * @returns {KeyInfo}\n   */\n  async createKey (name, type, size) {\n    const self = this\n\n    if (!validateKeyName(name) || name === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'))\n    }\n\n    if (typeof type !== 'string') {\n      return throwDelayed(errcode(new Error(`Invalid key type '${type}'`), 'ERR_INVALID_KEY_TYPE'))\n    }\n\n    if (!Number.isSafeInteger(size)) {\n      return throwDelayed(errcode(new Error(`Invalid key size '${size}'`), 'ERR_INVALID_KEY_SIZE'))\n    }\n\n    const dsname = DsName(name)\n    const exists = await self.store.has(dsname)\n    if (exists) return throwDelayed(errcode(new Error(`Key '${name}' already exists`), 'ERR_KEY_ALREADY_EXISTS'))\n\n    switch (type.toLowerCase()) {\n      case 'rsa':\n        if (size < 2048) {\n          return throwDelayed(errcode(new Error(`Invalid RSA key size ${size}`), 'ERR_INVALID_KEY_SIZE'))\n        }\n        break\n      default:\n        break\n    }\n\n    let keyInfo\n    try {\n      const keypair = await crypto.keys.generateKeyPair(type, size)\n      const kid = await keypair.id()\n      const pem = await keypair.export(this._())\n      keyInfo = {\n        name: name,\n        id: kid\n      }\n      const batch = self.store.batch()\n      batch.put(dsname, pem)\n      batch.put(DsInfoName(name), JSON.stringify(keyInfo))\n\n      await batch.commit()\n    } catch (err) {\n      return throwDelayed(err)\n    }\n\n    return keyInfo\n  }\n\n  /**\n   * List all the keys.\n   *\n    * @returns {KeyInfo[]}\n   */\n  async listKeys () {\n    const self = this\n    const query = {\n      prefix: infoPrefix\n    }\n\n    const info = []\n    for await (const value of self.store.query(query)) {\n      info.push(JSON.parse(value.value))\n    }\n\n    return info\n  }\n\n  /**\n   * Find a key by it's id.\n   *\n   * @param {string} id - The universally unique key identifier.\n    * @returns {KeyInfo}\n   */\n  async findKeyById (id) {\n    try {\n      const keys = await this.listKeys()\n      return keys.find((k) => k.id === id)\n    } catch (err) {\n      return throwDelayed(err)\n    }\n  }\n\n  /**\n   * Find a key by it's name.\n   *\n   * @param {string} name - The local key name.\n    * @returns {KeyInfo}\n   */\n  async findKeyByName (name) {\n    if (!validateKeyName(name)) {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'))\n    }\n\n    const dsname = DsInfoName(name)\n    try {\n      const res = await this.store.get(dsname)\n      return JSON.parse(res.toString())\n    } catch (err) {\n      return throwDelayed(errcode(new Error(`Key '${name}' does not exist. ${err.message}`), 'ERR_KEY_NOT_FOUND'))\n    }\n  }\n\n  /**\n   * Remove an existing key.\n   *\n   * @param {string} name - The local key name; must already exist.\n    * @returns {KeyInfo}\n   */\n  async removeKey (name) {\n    const self = this\n    if (!validateKeyName(name) || name === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'))\n    }\n    const dsname = DsName(name)\n    const keyInfo = await self.findKeyByName(name)\n    const batch = self.store.batch()\n    batch.delete(dsname)\n    batch.delete(DsInfoName(name))\n    await batch.commit()\n    return keyInfo\n  }\n\n  /**\n   * Rename a key\n   *\n   * @param {string} oldName - The old local key name; must already exist.\n   * @param {string} newName - The new local key name; must not already exist.\n    * @returns {KeyInfo}\n   */\n  async renameKey (oldName, newName) {\n    const self = this\n    if (!validateKeyName(oldName) || oldName === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid old key name '${oldName}'`), 'ERR_OLD_KEY_NAME_INVALID'))\n    }\n    if (!validateKeyName(newName) || newName === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid new key name '${newName}'`), 'ERR_NEW_KEY_NAME_INVALID'))\n    }\n    const oldDsname = DsName(oldName)\n    const newDsname = DsName(newName)\n    const oldInfoName = DsInfoName(oldName)\n    const newInfoName = DsInfoName(newName)\n\n    const exists = await self.store.has(newDsname)\n    if (exists) return throwDelayed(errcode(new Error(`Key '${newName}' already exists`), 'ERR_KEY_ALREADY_EXISTS'))\n\n    try {\n      let res = await this.store.get(oldDsname)\n      const pem = res.toString()\n      res = await self.store.get(oldInfoName)\n\n      const keyInfo = JSON.parse(res.toString())\n      keyInfo.name = newName\n      const batch = self.store.batch()\n      batch.put(newDsname, pem)\n      batch.put(newInfoName, JSON.stringify(keyInfo))\n      batch.delete(oldDsname)\n      batch.delete(oldInfoName)\n      await batch.commit()\n      return keyInfo\n    } catch (err) {\n      return throwDelayed(err)\n    }\n  }\n\n  /**\n   * Export an existing key as a PEM encrypted PKCS #8 string\n   *\n   * @param {string} name - The local key name; must already exist.\n   * @param {string} password - The password\n    * @returns {string}\n   */\n  async exportKey (name, password) {\n    if (!validateKeyName(name)) {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'))\n    }\n    if (!password) {\n      return throwDelayed(errcode(new Error('Password is required'), 'ERR_PASSWORD_REQUIRED'))\n    }\n\n    const dsname = DsName(name)\n    try {\n      const res = await this.store.get(dsname)\n      const pem = res.toString()\n      const privateKey = await crypto.keys.import(pem, this._())\n      return privateKey.export(password)\n    } catch (err) {\n      return throwDelayed(err)\n    }\n  }\n\n  /**\n   * Import a new key from a PEM encoded PKCS #8 string\n   *\n   * @param {string} name - The local key name; must not already exist.\n   * @param {string} pem - The PEM encoded PKCS #8 string\n   * @param {string} password - The password.\n    * @returns {KeyInfo}\n   */\n  async importKey (name, pem, password) {\n    const self = this\n    if (!validateKeyName(name) || name === 'self') {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'))\n    }\n    if (!pem) {\n      return throwDelayed(errcode(new Error('PEM encoded key is required'), 'ERR_PEM_REQUIRED'))\n    }\n    const dsname = DsName(name)\n    const exists = await self.store.has(dsname)\n    if (exists) return throwDelayed(errcode(new Error(`Key '${name}' already exists`), 'ERR_KEY_ALREADY_EXISTS'))\n\n    let privateKey\n    try {\n      privateKey = await crypto.keys.import(pem, password)\n    } catch (err) {\n      return throwDelayed(errcode(new Error('Cannot read the key, most likely the password is wrong'), 'ERR_CANNOT_READ_KEY'))\n    }\n\n    let kid\n    try {\n      kid = await privateKey.id()\n      pem = await privateKey.export(this._())\n    } catch (err) {\n      return throwDelayed(err)\n    }\n\n    const keyInfo = {\n      name: name,\n      id: kid\n    }\n    const batch = self.store.batch()\n    batch.put(dsname, pem)\n    batch.put(DsInfoName(name), JSON.stringify(keyInfo))\n    await batch.commit()\n\n    return keyInfo\n  }\n\n  async importPeer (name, peer) {\n    const self = this\n    if (!validateKeyName(name)) {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'))\n    }\n    if (!peer || !peer.privKey) {\n      return throwDelayed(errcode(new Error('Peer.privKey is required'), 'ERR_MISSING_PRIVATE_KEY'))\n    }\n\n    const privateKey = peer.privKey\n    const dsname = DsName(name)\n    const exists = await self.store.has(dsname)\n    if (exists) return throwDelayed(errcode(new Error(`Key '${name}' already exists`), 'ERR_KEY_ALREADY_EXISTS'))\n\n    try {\n      const kid = await privateKey.id()\n      const pem = await privateKey.export(this._())\n      const keyInfo = {\n        name: name,\n        id: kid\n      }\n      const batch = self.store.batch()\n      batch.put(dsname, pem)\n      batch.put(DsInfoName(name), JSON.stringify(keyInfo))\n      await batch.commit()\n      return keyInfo\n    } catch (err) {\n      return throwDelayed(err)\n    }\n  }\n\n  /**\n   * Gets the private key as PEM encoded PKCS #8 string.\n   *\n   * @param {string} name\n    * @returns {string}\n   * @private\n   */\n  async _getPrivateKey (name) {\n    if (!validateKeyName(name)) {\n      return throwDelayed(errcode(new Error(`Invalid key name '${name}'`), 'ERR_INVALID_KEY_NAME'))\n    }\n\n    try {\n      const dsname = DsName(name)\n      const res = await this.store.get(dsname)\n      return res.toString()\n    } catch (err) {\n      return throwDelayed(errcode(new Error(`Key '${name}' does not exist. ${err.message}`), 'ERR_KEY_NOT_FOUND'))\n    }\n  }\n}\n\nmodule.exports = Keychain\n"]},"metadata":{},"sourceType":"script"}