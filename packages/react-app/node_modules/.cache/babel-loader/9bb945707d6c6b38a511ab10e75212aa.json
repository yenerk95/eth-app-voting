{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGNode = dagPB.DAGNode;\n\nconst multicodec = require('multicodec');\n\nconst Unixfs = require('ipfs-unixfs');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nconst {\n  Buffer\n} = require('buffer');\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  return withTimeoutOption(async function _new(template, options) {\n    options = options || {}; // allow options in the template position\n\n    if (template && typeof template !== 'string') {\n      options = template;\n      template = null;\n    }\n\n    let data;\n\n    if (template) {\n      if (template === 'unixfs-dir') {\n        data = new Unixfs('directory').marshal();\n      } else {\n        throw new Error('unknown template');\n      }\n    } else {\n      data = Buffer.alloc(0);\n    }\n\n    const node = new DAGNode(data);\n    const cid = await ipld.put(node, multicodec.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: multicodec.SHA2_256\n    });\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return cid;\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/object/new.js"],"names":["dagPB","require","DAGNode","multicodec","Unixfs","withTimeoutOption","Buffer","module","exports","ipld","preload","_new","template","options","data","marshal","Error","alloc","node","cid","put","DAG_PB","cidVersion","hashAlg","SHA2_256"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACE,OAAtB;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAwBJ,OAAO,CAAC,aAAD,CAArC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAaL,OAAO,CAAC,QAAD,CAA1B;;AAEAM,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC,SAAOL,iBAAiB,CAAC,eAAeM,IAAf,CAAqBC,QAArB,EAA+BC,OAA/B,EAAwC;AAC/DA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAD+D,CAG/D;;AACA,QAAID,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAApC,EAA8C;AAC5CC,MAAAA,OAAO,GAAGD,QAAV;AACAA,MAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,QAAIE,IAAJ;;AAEA,QAAIF,QAAJ,EAAc;AACZ,UAAIA,QAAQ,KAAK,YAAjB,EAA+B;AAC7BE,QAAAA,IAAI,GAAI,IAAIV,MAAJ,CAAW,WAAX,CAAD,CAA0BW,OAA1B,EAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;AACF,KAND,MAMO;AACLF,MAAAA,IAAI,GAAGR,MAAM,CAACW,KAAP,CAAa,CAAb,CAAP;AACD;;AAED,UAAMC,IAAI,GAAG,IAAIhB,OAAJ,CAAYY,IAAZ,CAAb;AAEA,UAAMK,GAAG,GAAG,MAAMV,IAAI,CAACW,GAAL,CAASF,IAAT,EAAef,UAAU,CAACkB,MAA1B,EAAkC;AAClDC,MAAAA,UAAU,EAAE,CADsC;AAElDC,MAAAA,OAAO,EAAEpB,UAAU,CAACqB;AAF8B,KAAlC,CAAlB;;AAKA,QAAIX,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACS,GAAD,CAAP;AACD;;AAED,WAAOA,GAAP;AACD,GAjCuB,CAAxB;AAkCD,CAnCD","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst multicodec = require('multicodec')\nconst Unixfs = require('ipfs-unixfs')\nconst { withTimeoutOption } = require('../../utils')\nconst { Buffer } = require('buffer')\n\nmodule.exports = ({ ipld, preload }) => {\n  return withTimeoutOption(async function _new (template, options) {\n    options = options || {}\n\n    // allow options in the template position\n    if (template && typeof template !== 'string') {\n      options = template\n      template = null\n    }\n\n    let data\n\n    if (template) {\n      if (template === 'unixfs-dir') {\n        data = (new Unixfs('directory')).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    } else {\n      data = Buffer.alloc(0)\n    }\n\n    const node = new DAGNode(data)\n\n    const cid = await ipld.put(node, multicodec.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: multicodec.SHA2_256\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  })\n}\n"]},"metadata":{},"sourceType":"script"}