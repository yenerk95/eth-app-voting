{"ast":null,"code":"'use strict';\n\nconst {\n  withTimeoutOption\n} = require('../utils');\n\nconst errCode = require('err-code');\n\nmodule.exports = ({\n  libp2p\n}) => {\n  return {\n    subscribe: withTimeoutOption((...args) => libp2p.pubsub.subscribe(...args)),\n    unsubscribe: withTimeoutOption((...args) => libp2p.pubsub.unsubscribe(...args)),\n    publish: withTimeoutOption(async (topic, data, options) => {\n      if (!data) {\n        throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED');\n      }\n\n      await libp2p.pubsub.publish(topic, data);\n    }),\n    ls: withTimeoutOption((...args) => libp2p.pubsub.getTopics(...args)),\n    peers: withTimeoutOption((...args) => libp2p.pubsub.getSubscribers(...args))\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/pubsub.js"],"names":["withTimeoutOption","require","errCode","module","exports","libp2p","subscribe","args","pubsub","unsubscribe","publish","topic","data","options","Error","ls","getTopics","peers","getSubscribers"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAwBC,OAAO,CAAC,UAAD,CAArC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC/B,SAAO;AACLC,IAAAA,SAAS,EAAEN,iBAAiB,CAAC,CAAC,GAAGO,IAAJ,KAAaF,MAAM,CAACG,MAAP,CAAcF,SAAd,CAAwB,GAAGC,IAA3B,CAAd,CADvB;AAELE,IAAAA,WAAW,EAAET,iBAAiB,CAAC,CAAC,GAAGO,IAAJ,KAAaF,MAAM,CAACG,MAAP,CAAcC,WAAd,CAA0B,GAAGF,IAA7B,CAAd,CAFzB;AAGLG,IAAAA,OAAO,EAAEV,iBAAiB,CAAC,OAAOW,KAAP,EAAcC,IAAd,EAAoBC,OAApB,KAAgC;AACzD,UAAI,CAACD,IAAL,EAAW;AACT,cAAMV,OAAO,CAAC,IAAIY,KAAJ,CAAU,6BAAV,CAAD,EAA2C,kBAA3C,CAAb;AACD;;AACD,YAAMT,MAAM,CAACG,MAAP,CAAcE,OAAd,CAAsBC,KAAtB,EAA6BC,IAA7B,CAAN;AACD,KALyB,CAHrB;AASLG,IAAAA,EAAE,EAAEf,iBAAiB,CAAC,CAAC,GAAGO,IAAJ,KAAaF,MAAM,CAACG,MAAP,CAAcQ,SAAd,CAAwB,GAAGT,IAA3B,CAAd,CAThB;AAULU,IAAAA,KAAK,EAAEjB,iBAAiB,CAAC,CAAC,GAAGO,IAAJ,KAAaF,MAAM,CAACG,MAAP,CAAcU,cAAd,CAA6B,GAAGX,IAAhC,CAAd;AAVnB,GAAP;AAYD,CAbD","sourcesContent":["'use strict'\n\nconst { withTimeoutOption } = require('../utils')\nconst errCode = require('err-code')\n\nmodule.exports = ({ libp2p }) => {\n  return {\n    subscribe: withTimeoutOption((...args) => libp2p.pubsub.subscribe(...args)),\n    unsubscribe: withTimeoutOption((...args) => libp2p.pubsub.unsubscribe(...args)),\n    publish: withTimeoutOption(async (topic, data, options) => {\n      if (!data) {\n        throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED')\n      }\n      await libp2p.pubsub.publish(topic, data)\n    }),\n    ls: withTimeoutOption((...args) => libp2p.pubsub.getTopics(...args)),\n    peers: withTimeoutOption((...args) => libp2p.pubsub.getSubscribers(...args))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}