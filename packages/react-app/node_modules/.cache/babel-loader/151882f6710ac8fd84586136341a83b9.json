{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar defaultConfig = require('../../runtime/config-nodejs.js');\n\nvar _require = require('./utils'),\n    isValidMultiaddr = _require.isValidMultiaddr;\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(multiaddr, options) {\n      var config;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n\n              if (!(multiaddr && !isValidMultiaddr(multiaddr))) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error(\"\".concat(multiaddr, \" is not a valid Multiaddr\"));\n\n            case 3:\n              _context.next = 5;\n              return repo.config.getAll();\n\n            case 5:\n              config = _context.sent;\n\n              if (options.default) {\n                config.Bootstrap = defaultConfig().Bootstrap;\n              } else if (multiaddr && config.Bootstrap.indexOf(multiaddr) === -1) {\n                config.Bootstrap.push(multiaddr);\n              }\n\n              _context.next = 9;\n              return repo.config.set(config);\n\n            case 9:\n              return _context.abrupt(\"return\", {\n                Peers: options.default ? defaultConfig().Bootstrap : [multiaddr]\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function add(_x, _x2) {\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/bootstrap/add.js"],"names":["defaultConfig","require","isValidMultiaddr","withTimeoutOption","module","exports","repo","multiaddr","options","Error","config","getAll","default","Bootstrap","indexOf","push","set","Peers","add"],"mappings":"AAAA;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,gCAAD,CAA7B;;eAC6BA,OAAO,CAAC,SAAD,C;IAA5BC,gB,YAAAA,gB;;gBACsBD,OAAO,CAAC,aAAD,C;IAA7BE,iB,aAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC7B,SAAOH,iBAAiB;AAAA,wEAAC,iBAAoBI,SAApB,EAA+BC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AADuB,oBAGnBD,SAAS,IAAI,CAACL,gBAAgB,CAACK,SAAD,CAHX;AAAA;AAAA;AAAA;;AAAA,oBAIf,IAAIE,KAAJ,WAAaF,SAAb,+BAJe;;AAAA;AAAA;AAAA,qBAOFD,IAAI,CAACI,MAAL,CAAYC,MAAZ,EAPE;;AAAA;AAOjBD,cAAAA,MAPiB;;AAQvB,kBAAIF,OAAO,CAACI,OAAZ,EAAqB;AACnBF,gBAAAA,MAAM,CAACG,SAAP,GAAmBb,aAAa,GAAGa,SAAnC;AACD,eAFD,MAEO,IAAIN,SAAS,IAAIG,MAAM,CAACG,SAAP,CAAiBC,OAAjB,CAAyBP,SAAzB,MAAwC,CAAC,CAA1D,EAA6D;AAClEG,gBAAAA,MAAM,CAACG,SAAP,CAAiBE,IAAjB,CAAsBR,SAAtB;AACD;;AAZsB;AAAA,qBAajBD,IAAI,CAACI,MAAL,CAAYM,GAAZ,CAAgBN,MAAhB,CAbiB;;AAAA;AAAA,+CAehB;AACLO,gBAAAA,KAAK,EAAET,OAAO,CAACI,OAAR,GAAkBZ,aAAa,GAAGa,SAAlC,GAA8C,CAACN,SAAD;AADhD,eAfgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBW,GAAhB;AAAA;AAAA;;AAAA,WAAgBA,GAAhB;AAAA,MAAxB;AAmBD,CApBD","sourcesContent":["'use strict'\n\nconst defaultConfig = require('../../runtime/config-nodejs.js')\nconst { isValidMultiaddr } = require('./utils')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ repo }) => {\n  return withTimeoutOption(async function add (multiaddr, options) {\n    options = options || {}\n\n    if (multiaddr && !isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll()\n    if (options.default) {\n      config.Bootstrap = defaultConfig().Bootstrap\n    } else if (multiaddr && config.Bootstrap.indexOf(multiaddr) === -1) {\n      config.Bootstrap.push(multiaddr)\n    }\n    await repo.config.set(config)\n\n    return {\n      Peers: options.default ? defaultConfig().Bootstrap : [multiaddr]\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}