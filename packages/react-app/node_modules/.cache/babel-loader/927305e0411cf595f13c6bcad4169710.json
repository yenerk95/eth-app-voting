{"ast":null,"code":"'use strict';\n\nconst BufferList = require('bl/BufferList');\n\nmodule.exports = async function* fixedSizeChunker(source, options) {\n  let bl = new BufferList();\n  let currentLength = 0;\n  let emitted = false;\n  const maxChunkSize = options.maxChunkSize;\n\n  for await (const buffer of source) {\n    bl.append(buffer);\n    currentLength += buffer.length;\n\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize);\n      emitted = true; // throw away consumed bytes\n\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList();\n        currentLength = 0;\n      } else {\n        const newBl = new BufferList();\n        newBl.append(bl.shallowSlice(maxChunkSize));\n        bl = newBl; // update our offset\n\n        currentLength -= maxChunkSize;\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    // return any remaining bytes or an empty buffer\n    yield bl.slice(0, currentLength);\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/chunker/fixed-size.js"],"names":["BufferList","require","module","exports","fixedSizeChunker","source","options","bl","currentLength","emitted","maxChunkSize","buffer","append","length","slice","newBl","shallowSlice"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,gBAAiBC,gBAAjB,CAAmCC,MAAnC,EAA2CC,OAA3C,EAAoD;AACnE,MAAIC,EAAE,GAAG,IAAIP,UAAJ,EAAT;AACA,MAAIQ,aAAa,GAAG,CAApB;AACA,MAAIC,OAAO,GAAG,KAAd;AACA,QAAMC,YAAY,GAAGJ,OAAO,CAACI,YAA7B;;AAEA,aAAW,MAAMC,MAAjB,IAA2BN,MAA3B,EAAmC;AACjCE,IAAAA,EAAE,CAACK,MAAH,CAAUD,MAAV;AAEAH,IAAAA,aAAa,IAAIG,MAAM,CAACE,MAAxB;;AAEA,WAAOL,aAAa,IAAIE,YAAxB,EAAsC;AACpC,YAAMH,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYJ,YAAZ,CAAN;AACAD,MAAAA,OAAO,GAAG,IAAV,CAFoC,CAIpC;;AACA,UAAIC,YAAY,KAAKH,EAAE,CAACM,MAAxB,EAAgC;AAC9BN,QAAAA,EAAE,GAAG,IAAIP,UAAJ,EAAL;AACAQ,QAAAA,aAAa,GAAG,CAAhB;AACD,OAHD,MAGO;AACL,cAAMO,KAAK,GAAG,IAAIf,UAAJ,EAAd;AACAe,QAAAA,KAAK,CAACH,MAAN,CAAaL,EAAE,CAACS,YAAH,CAAgBN,YAAhB,CAAb;AACAH,QAAAA,EAAE,GAAGQ,KAAL,CAHK,CAKL;;AACAP,QAAAA,aAAa,IAAIE,YAAjB;AACD;AACF;AACF;;AAED,MAAI,CAACD,OAAD,IAAYD,aAAhB,EAA+B;AAC7B;AACA,UAAMD,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYN,aAAZ,CAAN;AACD;AACF,CAlCD","sourcesContent":["'use strict'\n\nconst BufferList = require('bl/BufferList')\n\nmodule.exports = async function * fixedSizeChunker (source, options) {\n  let bl = new BufferList()\n  let currentLength = 0\n  let emitted = false\n  const maxChunkSize = options.maxChunkSize\n\n  for await (const buffer of source) {\n    bl.append(buffer)\n\n    currentLength += buffer.length\n\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize)\n      emitted = true\n\n      // throw away consumed bytes\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList()\n        currentLength = 0\n      } else {\n        const newBl = new BufferList()\n        newBl.append(bl.shallowSlice(maxChunkSize))\n        bl = newBl\n\n        // update our offset\n        currentLength -= maxChunkSize\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    // return any remaining bytes or an empty buffer\n    yield bl.slice(0, currentLength)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}