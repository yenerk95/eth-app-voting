{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nmodule.exports = (options = {}, defaults) => {\n  if (Array.isArray(options)) {\n    options = options.filter(arg => typeof arg === 'object').pop() || {};\n  }\n\n  const output = {};\n\n  for (const key in defaults) {\n    if (options[key] !== null && options[key] !== undefined) {\n      output[key] = options[key];\n    } else {\n      output[key] = defaults[key];\n    }\n  } // support legacy go arguments\n\n\n  if (options.count !== undefined) {\n    output.length = options.count;\n  }\n\n  if (options.p !== undefined) {\n    output.parents = options.p;\n  }\n\n  if (options.l !== undefined) {\n    output.long = options.l;\n  }\n\n  if (!output.length && output.length !== 0) {\n    output.length = Infinity;\n  }\n\n  if (output.offset < 0) {\n    throw errCode(new Error('cannot have negative write offset'), 'ERR_INVALID_PARAMS');\n  }\n\n  if (output.length < 0) {\n    throw errCode(new Error('cannot have negative byte count'), 'ERR_INVALID_PARAMS');\n  }\n\n  return output;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/utils/apply-default-options.js"],"names":["errCode","require","module","exports","options","defaults","Array","isArray","filter","arg","pop","output","key","undefined","count","length","p","parents","l","long","Infinity","offset","Error"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,OAAO,GAAG,EAAX,EAAeC,QAAf,KAA4B;AAC3C,MAAIC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AAC1BA,IAAAA,OAAO,GAAGA,OAAO,CAACI,MAAR,CAAeC,GAAG,IAAI,OAAOA,GAAP,KAAe,QAArC,EAA+CC,GAA/C,MAAwD,EAAlE;AACD;;AAED,QAAMC,MAAM,GAAG,EAAf;;AAEA,OAAK,MAAMC,GAAX,IAAkBP,QAAlB,EAA4B;AAC1B,QAAID,OAAO,CAACQ,GAAD,CAAP,KAAiB,IAAjB,IAAyBR,OAAO,CAACQ,GAAD,CAAP,KAAiBC,SAA9C,EAAyD;AACvDF,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcR,OAAO,CAACQ,GAAD,CAArB;AACD,KAFD,MAEO;AACLD,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcP,QAAQ,CAACO,GAAD,CAAtB;AACD;AACF,GAb0C,CAe3C;;;AACA,MAAIR,OAAO,CAACU,KAAR,KAAkBD,SAAtB,EAAiC;AAC/BF,IAAAA,MAAM,CAACI,MAAP,GAAgBX,OAAO,CAACU,KAAxB;AACD;;AAED,MAAIV,OAAO,CAACY,CAAR,KAAcH,SAAlB,EAA6B;AAC3BF,IAAAA,MAAM,CAACM,OAAP,GAAiBb,OAAO,CAACY,CAAzB;AACD;;AAED,MAAIZ,OAAO,CAACc,CAAR,KAAcL,SAAlB,EAA6B;AAC3BF,IAAAA,MAAM,CAACQ,IAAP,GAAcf,OAAO,CAACc,CAAtB;AACD;;AAED,MAAI,CAACP,MAAM,CAACI,MAAR,IAAkBJ,MAAM,CAACI,MAAP,KAAkB,CAAxC,EAA2C;AACzCJ,IAAAA,MAAM,CAACI,MAAP,GAAgBK,QAAhB;AACD;;AAED,MAAIT,MAAM,CAACU,MAAP,GAAgB,CAApB,EAAuB;AACrB,UAAMrB,OAAO,CAAC,IAAIsB,KAAJ,CAAU,mCAAV,CAAD,EAAiD,oBAAjD,CAAb;AACD;;AAED,MAAIX,MAAM,CAACI,MAAP,GAAgB,CAApB,EAAuB;AACrB,UAAMf,OAAO,CAAC,IAAIsB,KAAJ,CAAU,iCAAV,CAAD,EAA+C,oBAA/C,CAAb;AACD;;AAED,SAAOX,MAAP;AACD,CAzCD","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\n\nmodule.exports = (options = {}, defaults) => {\n  if (Array.isArray(options)) {\n    options = options.filter(arg => typeof arg === 'object').pop() || {}\n  }\n\n  const output = {}\n\n  for (const key in defaults) {\n    if (options[key] !== null && options[key] !== undefined) {\n      output[key] = options[key]\n    } else {\n      output[key] = defaults[key]\n    }\n  }\n\n  // support legacy go arguments\n  if (options.count !== undefined) {\n    output.length = options.count\n  }\n\n  if (options.p !== undefined) {\n    output.parents = options.p\n  }\n\n  if (options.l !== undefined) {\n    output.long = options.l\n  }\n\n  if (!output.length && output.length !== 0) {\n    output.length = Infinity\n  }\n\n  if (output.offset < 0) {\n    throw errCode(new Error('cannot have negative write offset'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (output.length < 0) {\n    throw errCode(new Error('cannot have negative byte count'), 'ERR_INVALID_PARAMS')\n  }\n\n  return output\n}\n"]},"metadata":{},"sourceType":"script"}