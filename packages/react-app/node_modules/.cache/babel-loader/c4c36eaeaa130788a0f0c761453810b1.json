{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar varint = require('varint');\n\nvar BufferList = require('bl/BufferList'); // Decode a chunk and yield an _array_ of decoded messages\n\n\nmodule.exports = function (source) {\n  return function () {\n    var _decode = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var decoder, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, msgs;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              decoder = new Decoder();\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(source);\n\n            case 5:\n              _context.next = 7;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 7:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 11;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 11:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 21;\n                break;\n              }\n\n              chunk = _value;\n              msgs = decoder.write(chunk);\n\n              if (!msgs.length) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 18;\n              return msgs;\n\n            case 18:\n              _iteratorNormalCompletion = true;\n              _context.next = 5;\n              break;\n\n            case 21:\n              _context.next = 27;\n              break;\n\n            case 23:\n              _context.prev = 23;\n              _context.t0 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 27:\n              _context.prev = 27;\n              _context.prev = 28;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 32;\n                break;\n              }\n\n              _context.next = 32;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 32:\n              _context.prev = 32;\n\n              if (!_didIteratorError) {\n                _context.next = 35;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 35:\n              return _context.finish(32);\n\n            case 36:\n              return _context.finish(27);\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 23, 27, 37], [28,, 32, 36]]);\n    }));\n\n    function decode() {\n      return _decode.apply(this, arguments);\n    }\n\n    return decode;\n  }()();\n};\n\nvar Decoder = /*#__PURE__*/function () {\n  function Decoder() {\n    var _this = this;\n\n    _classCallCheck(this, Decoder);\n\n    this._buffer = new BufferList(); // optimization to allow varint to take a BufferList (well a proxy to)\n\n    this._bufferProxy = new Proxy({}, {\n      get: function get(_, prop) {\n        return prop[0] === 'l' ? _this._buffer[prop] : _this._buffer.get(parseInt(prop));\n      }\n    });\n    this._headerInfo = null;\n  }\n  /**\n   * @param {Buffer|BufferList} chunk\n   * @returns {object[]} An array of message objects\n   */\n\n\n  _createClass(Decoder, [{\n    key: \"write\",\n    value: function write(chunk) {\n      if (!chunk || !chunk.length) return [];\n\n      this._buffer.append(chunk);\n\n      var msgs = [];\n\n      while (true) {\n        if (!this._headerInfo) {\n          try {\n            this._headerInfo = this._decodeHeader(this._bufferProxy);\n          } catch (_) {\n            break; // We haven't received enough data yet\n          }\n        }\n\n        var _this$_headerInfo = this._headerInfo,\n            id = _this$_headerInfo.id,\n            type = _this$_headerInfo.type,\n            length = _this$_headerInfo.length,\n            offset = _this$_headerInfo.offset;\n        var bufferedDataLength = this._buffer.length - offset;\n        if (bufferedDataLength < length) break; // not enough data yet\n\n        msgs.push({\n          id: id,\n          type: type,\n          data: this._buffer.shallowSlice(offset, offset + length)\n        });\n\n        this._buffer.consume(offset + length);\n\n        this._headerInfo = null;\n      }\n\n      return msgs;\n    }\n    /**\n     * Attempts to decode the message header from the buffer\n     * @private\n     * @param {Buffer} data\n     * @returns {*} message header (id, type, offset, length)\n     */\n\n  }, {\n    key: \"_decodeHeader\",\n    value: function _decodeHeader(data) {\n      var h = varint.decode(data);\n      var offset = varint.decode.bytes;\n      var length = varint.decode(data, offset);\n      offset += varint.decode.bytes;\n      return {\n        id: h >> 3,\n        type: h & 7,\n        offset: offset,\n        length: length\n      };\n    }\n  }]);\n\n  return Decoder;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-mplex/src/coder/decode.js"],"names":["varint","require","BufferList","module","exports","source","decoder","Decoder","chunk","msgs","write","length","decode","_buffer","_bufferProxy","Proxy","get","_","prop","parseInt","_headerInfo","append","_decodeHeader","id","type","offset","bufferedDataLength","push","data","shallowSlice","consume","h","bytes"],"mappings":"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","sourcesContent":["'use strict'\n\nconst varint = require('varint')\nconst BufferList = require('bl/BufferList')\n\n// Decode a chunk and yield an _array_ of decoded messages\nmodule.exports = source => (async function * decode () {\n  const decoder = new Decoder()\n  for await (const chunk of source) {\n    const msgs = decoder.write(chunk)\n    if (msgs.length) yield msgs\n  }\n})()\n\nclass Decoder {\n  constructor () {\n    this._buffer = new BufferList()\n    // optimization to allow varint to take a BufferList (well a proxy to)\n    this._bufferProxy = new Proxy({}, {\n      get: (_, prop) => prop[0] === 'l' ? this._buffer[prop] : this._buffer.get(parseInt(prop))\n    })\n    this._headerInfo = null\n  }\n\n  /**\n   * @param {Buffer|BufferList} chunk\n   * @returns {object[]} An array of message objects\n   */\n  write (chunk) {\n    if (!chunk || !chunk.length) return []\n\n    this._buffer.append(chunk)\n    const msgs = []\n\n    while (true) {\n      if (!this._headerInfo) {\n        try {\n          this._headerInfo = this._decodeHeader(this._bufferProxy)\n        } catch (_) {\n          break // We haven't received enough data yet\n        }\n      }\n\n      const { id, type, length, offset } = this._headerInfo\n      const bufferedDataLength = this._buffer.length - offset\n\n      if (bufferedDataLength < length) break // not enough data yet\n\n      msgs.push({ id, type, data: this._buffer.shallowSlice(offset, offset + length) })\n\n      this._buffer.consume(offset + length)\n      this._headerInfo = null\n    }\n\n    return msgs\n  }\n\n  /**\n   * Attempts to decode the message header from the buffer\n   * @private\n   * @param {Buffer} data\n   * @returns {*} message header (id, type, offset, length)\n   */\n  _decodeHeader (data) {\n    const h = varint.decode(data)\n    let offset = varint.decode.bytes\n    const length = varint.decode(data, offset)\n    offset += varint.decode.bytes\n    return { id: h >> 3, type: h & 7, offset, length }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}