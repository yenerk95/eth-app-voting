{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst EventEmitter = require(\"eventemitter3\");\n\nconst p_timeout_1 = require(\"p-timeout\");\n\nconst priority_queue_1 = require(\"./priority-queue\"); // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\nconst empty = () => {};\n\nconst timeoutError = new p_timeout_1.TimeoutError();\n/**\nPromise queue with concurrency control.\n*/\n\nclass PQueue extends EventEmitter {\n  constructor(options) {\n    var _a, _b, _c, _d;\n\n    super();\n    this._intervalCount = 0;\n    this._intervalEnd = 0;\n    this._pendingCount = 0;\n    this._resolveEmpty = empty;\n    this._resolveIdle = empty; // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\n    options = Object.assign({\n      carryoverConcurrencyCount: false,\n      intervalCap: Infinity,\n      interval: 0,\n      concurrency: Infinity,\n      autoStart: true,\n      queueClass: priority_queue_1.default\n    }, options);\n\n    if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {\n      throw new TypeError(`Expected \\`intervalCap\\` to be a number from 1 and up, got \\`${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\\` (${typeof options.intervalCap})`);\n    }\n\n    if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {\n      throw new TypeError(`Expected \\`interval\\` to be a finite number >= 0, got \\`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}\\` (${typeof options.interval})`);\n    }\n\n    this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;\n    this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;\n    this._intervalCap = options.intervalCap;\n    this._interval = options.interval;\n    this._queue = new options.queueClass();\n    this._queueClass = options.queueClass;\n    this.concurrency = options.concurrency;\n    this._timeout = options.timeout;\n    this._throwOnTimeout = options.throwOnTimeout === true;\n    this._isPaused = options.autoStart === false;\n  }\n\n  get _doesIntervalAllowAnother() {\n    return this._isIntervalIgnored || this._intervalCount < this._intervalCap;\n  }\n\n  get _doesConcurrentAllowAnother() {\n    return this._pendingCount < this._concurrency;\n  }\n\n  _next() {\n    this._pendingCount--;\n\n    this._tryToStartAnother();\n  }\n\n  _resolvePromises() {\n    this._resolveEmpty();\n\n    this._resolveEmpty = empty;\n\n    if (this._pendingCount === 0) {\n      this._resolveIdle();\n\n      this._resolveIdle = empty;\n      this.emit('idle');\n    }\n  }\n\n  _onResumeInterval() {\n    this._onInterval();\n\n    this._initializeIntervalIfNeeded();\n\n    this._timeoutId = undefined;\n  }\n\n  _isIntervalPaused() {\n    const now = Date.now();\n\n    if (this._intervalId === undefined) {\n      const delay = this._intervalEnd - now;\n\n      if (delay < 0) {\n        // Act as the interval was done\n        // We don't need to resume it here because it will be resumed on line 160\n        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;\n      } else {\n        // Act as the interval is pending\n        if (this._timeoutId === undefined) {\n          this._timeoutId = setTimeout(() => {\n            this._onResumeInterval();\n          }, delay);\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _tryToStartAnother() {\n    if (this._queue.size === 0) {\n      // We can clear the interval (\"pause\")\n      // Because we can redo it later (\"resume\")\n      if (this._intervalId) {\n        clearInterval(this._intervalId);\n      }\n\n      this._intervalId = undefined;\n\n      this._resolvePromises();\n\n      return false;\n    }\n\n    if (!this._isPaused) {\n      const canInitializeInterval = !this._isIntervalPaused();\n\n      if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {\n        this.emit('active');\n\n        this._queue.dequeue()();\n\n        if (canInitializeInterval) {\n          this._initializeIntervalIfNeeded();\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _initializeIntervalIfNeeded() {\n    if (this._isIntervalIgnored || this._intervalId !== undefined) {\n      return;\n    }\n\n    this._intervalId = setInterval(() => {\n      this._onInterval();\n    }, this._interval);\n    this._intervalEnd = Date.now() + this._interval;\n  }\n\n  _onInterval() {\n    if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {\n      clearInterval(this._intervalId);\n      this._intervalId = undefined;\n    }\n\n    this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;\n\n    this._processQueue();\n  }\n  /**\n  Executes all queued functions until it reaches the limit.\n  */\n\n\n  _processQueue() {\n    // eslint-disable-next-line no-empty\n    while (this._tryToStartAnother()) {}\n  }\n\n  get concurrency() {\n    return this._concurrency;\n  }\n\n  set concurrency(newConcurrency) {\n    if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {\n      throw new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${newConcurrency}\\` (${typeof newConcurrency})`);\n    }\n\n    this._concurrency = newConcurrency;\n\n    this._processQueue();\n  }\n  /**\n  Adds a sync or async task to the queue. Always returns a promise.\n  */\n\n\n  async add(fn, options = {}) {\n    return new Promise((resolve, reject) => {\n      const run = async () => {\n        this._pendingCount++;\n        this._intervalCount++;\n\n        try {\n          const operation = this._timeout === undefined && options.timeout === undefined ? fn() : p_timeout_1.default(Promise.resolve(fn()), options.timeout === undefined ? this._timeout : options.timeout, () => {\n            if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {\n              reject(timeoutError);\n            }\n\n            return undefined;\n          });\n          resolve(await operation);\n        } catch (error) {\n          reject(error);\n        }\n\n        this._next();\n      };\n\n      this._queue.enqueue(run, options);\n\n      this._tryToStartAnother();\n    });\n  }\n  /**\n  Same as `.add()`, but accepts an array of sync or async functions.\n   @returns A promise that resolves when all functions are resolved.\n  */\n\n\n  async addAll(functions, options) {\n    return Promise.all(functions.map(async function_ => this.add(function_, options)));\n  }\n  /**\n  Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)\n  */\n\n\n  start() {\n    if (!this._isPaused) {\n      return this;\n    }\n\n    this._isPaused = false;\n\n    this._processQueue();\n\n    return this;\n  }\n  /**\n  Put queue execution on hold.\n  */\n\n\n  pause() {\n    this._isPaused = true;\n  }\n  /**\n  Clear the queue.\n  */\n\n\n  clear() {\n    this._queue = new this._queueClass();\n  }\n  /**\n  Can be called multiple times. Useful if you for example add additional items at a later time.\n   @returns A promise that settles when the queue becomes empty.\n  */\n\n\n  async onEmpty() {\n    // Instantly resolve if the queue is empty\n    if (this._queue.size === 0) {\n      return;\n    }\n\n    return new Promise(resolve => {\n      const existingResolve = this._resolveEmpty;\n\n      this._resolveEmpty = () => {\n        existingResolve();\n        resolve();\n      };\n    });\n  }\n  /**\n  The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.\n   @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.\n  */\n\n\n  async onIdle() {\n    // Instantly resolve if none pending and if nothing else is queued\n    if (this._pendingCount === 0 && this._queue.size === 0) {\n      return;\n    }\n\n    return new Promise(resolve => {\n      const existingResolve = this._resolveIdle;\n\n      this._resolveIdle = () => {\n        existingResolve();\n        resolve();\n      };\n    });\n  }\n  /**\n  Size of the queue.\n  */\n\n\n  get size() {\n    return this._queue.size;\n  }\n  /**\n  Size of the queue, filtered by the given options.\n   For example, this can be used to find the number of items remaining in the queue with a specific priority level.\n  */\n\n\n  sizeBy(options) {\n    // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n    return this._queue.filter(options).length;\n  }\n  /**\n  Number of pending promises.\n  */\n\n\n  get pending() {\n    return this._pendingCount;\n  }\n  /**\n  Whether the queue is currently paused.\n  */\n\n\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  get timeout() {\n    return this._timeout;\n  }\n  /**\n  Set the timeout for future operations.\n  */\n\n\n  set timeout(milliseconds) {\n    this._timeout = milliseconds;\n  }\n\n}\n\nexports.default = PQueue;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/p-queue/dist/index.js"],"names":["Object","defineProperty","exports","value","EventEmitter","require","p_timeout_1","priority_queue_1","empty","timeoutError","TimeoutError","PQueue","constructor","options","_a","_b","_c","_d","_intervalCount","_intervalEnd","_pendingCount","_resolveEmpty","_resolveIdle","assign","carryoverConcurrencyCount","intervalCap","Infinity","interval","concurrency","autoStart","queueClass","default","TypeError","toString","undefined","Number","isFinite","_carryoverConcurrencyCount","_isIntervalIgnored","_intervalCap","_interval","_queue","_queueClass","_timeout","timeout","_throwOnTimeout","throwOnTimeout","_isPaused","_doesIntervalAllowAnother","_doesConcurrentAllowAnother","_concurrency","_next","_tryToStartAnother","_resolvePromises","emit","_onResumeInterval","_onInterval","_initializeIntervalIfNeeded","_timeoutId","_isIntervalPaused","now","Date","_intervalId","delay","setTimeout","size","clearInterval","canInitializeInterval","dequeue","setInterval","_processQueue","newConcurrency","add","fn","Promise","resolve","reject","run","operation","error","enqueue","addAll","functions","all","map","function_","start","pause","clear","onEmpty","existingResolve","onIdle","sizeBy","filter","length","pending","isPaused","milliseconds"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst EventEmitter = require(\"eventemitter3\");\nconst p_timeout_1 = require(\"p-timeout\");\nconst priority_queue_1 = require(\"./priority-queue\");\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst empty = () => { };\nconst timeoutError = new p_timeout_1.TimeoutError();\n/**\nPromise queue with concurrency control.\n*/\nclass PQueue extends EventEmitter {\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super();\n        this._intervalCount = 0;\n        this._intervalEnd = 0;\n        this._pendingCount = 0;\n        this._resolveEmpty = empty;\n        this._resolveIdle = empty;\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        options = Object.assign({ carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priority_queue_1.default }, options);\n        if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {\n            throw new TypeError(`Expected \\`intervalCap\\` to be a number from 1 and up, got \\`${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\\` (${typeof options.intervalCap})`);\n        }\n        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {\n            throw new TypeError(`Expected \\`interval\\` to be a finite number >= 0, got \\`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}\\` (${typeof options.interval})`);\n        }\n        this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;\n        this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;\n        this._intervalCap = options.intervalCap;\n        this._interval = options.interval;\n        this._queue = new options.queueClass();\n        this._queueClass = options.queueClass;\n        this.concurrency = options.concurrency;\n        this._timeout = options.timeout;\n        this._throwOnTimeout = options.throwOnTimeout === true;\n        this._isPaused = options.autoStart === false;\n    }\n    get _doesIntervalAllowAnother() {\n        return this._isIntervalIgnored || this._intervalCount < this._intervalCap;\n    }\n    get _doesConcurrentAllowAnother() {\n        return this._pendingCount < this._concurrency;\n    }\n    _next() {\n        this._pendingCount--;\n        this._tryToStartAnother();\n    }\n    _resolvePromises() {\n        this._resolveEmpty();\n        this._resolveEmpty = empty;\n        if (this._pendingCount === 0) {\n            this._resolveIdle();\n            this._resolveIdle = empty;\n            this.emit('idle');\n        }\n    }\n    _onResumeInterval() {\n        this._onInterval();\n        this._initializeIntervalIfNeeded();\n        this._timeoutId = undefined;\n    }\n    _isIntervalPaused() {\n        const now = Date.now();\n        if (this._intervalId === undefined) {\n            const delay = this._intervalEnd - now;\n            if (delay < 0) {\n                // Act as the interval was done\n                // We don't need to resume it here because it will be resumed on line 160\n                this._intervalCount = (this._carryoverConcurrencyCount) ? this._pendingCount : 0;\n            }\n            else {\n                // Act as the interval is pending\n                if (this._timeoutId === undefined) {\n                    this._timeoutId = setTimeout(() => {\n                        this._onResumeInterval();\n                    }, delay);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    _tryToStartAnother() {\n        if (this._queue.size === 0) {\n            // We can clear the interval (\"pause\")\n            // Because we can redo it later (\"resume\")\n            if (this._intervalId) {\n                clearInterval(this._intervalId);\n            }\n            this._intervalId = undefined;\n            this._resolvePromises();\n            return false;\n        }\n        if (!this._isPaused) {\n            const canInitializeInterval = !this._isIntervalPaused();\n            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {\n                this.emit('active');\n                this._queue.dequeue()();\n                if (canInitializeInterval) {\n                    this._initializeIntervalIfNeeded();\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    _initializeIntervalIfNeeded() {\n        if (this._isIntervalIgnored || this._intervalId !== undefined) {\n            return;\n        }\n        this._intervalId = setInterval(() => {\n            this._onInterval();\n        }, this._interval);\n        this._intervalEnd = Date.now() + this._interval;\n    }\n    _onInterval() {\n        if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {\n            clearInterval(this._intervalId);\n            this._intervalId = undefined;\n        }\n        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;\n        this._processQueue();\n    }\n    /**\n    Executes all queued functions until it reaches the limit.\n    */\n    _processQueue() {\n        // eslint-disable-next-line no-empty\n        while (this._tryToStartAnother()) { }\n    }\n    get concurrency() {\n        return this._concurrency;\n    }\n    set concurrency(newConcurrency) {\n        if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {\n            throw new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${newConcurrency}\\` (${typeof newConcurrency})`);\n        }\n        this._concurrency = newConcurrency;\n        this._processQueue();\n    }\n    /**\n    Adds a sync or async task to the queue. Always returns a promise.\n    */\n    async add(fn, options = {}) {\n        return new Promise((resolve, reject) => {\n            const run = async () => {\n                this._pendingCount++;\n                this._intervalCount++;\n                try {\n                    const operation = (this._timeout === undefined && options.timeout === undefined) ? fn() : p_timeout_1.default(Promise.resolve(fn()), (options.timeout === undefined ? this._timeout : options.timeout), () => {\n                        if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {\n                            reject(timeoutError);\n                        }\n                        return undefined;\n                    });\n                    resolve(await operation);\n                }\n                catch (error) {\n                    reject(error);\n                }\n                this._next();\n            };\n            this._queue.enqueue(run, options);\n            this._tryToStartAnother();\n        });\n    }\n    /**\n    Same as `.add()`, but accepts an array of sync or async functions.\n\n    @returns A promise that resolves when all functions are resolved.\n    */\n    async addAll(functions, options) {\n        return Promise.all(functions.map(async (function_) => this.add(function_, options)));\n    }\n    /**\n    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)\n    */\n    start() {\n        if (!this._isPaused) {\n            return this;\n        }\n        this._isPaused = false;\n        this._processQueue();\n        return this;\n    }\n    /**\n    Put queue execution on hold.\n    */\n    pause() {\n        this._isPaused = true;\n    }\n    /**\n    Clear the queue.\n    */\n    clear() {\n        this._queue = new this._queueClass();\n    }\n    /**\n    Can be called multiple times. Useful if you for example add additional items at a later time.\n\n    @returns A promise that settles when the queue becomes empty.\n    */\n    async onEmpty() {\n        // Instantly resolve if the queue is empty\n        if (this._queue.size === 0) {\n            return;\n        }\n        return new Promise(resolve => {\n            const existingResolve = this._resolveEmpty;\n            this._resolveEmpty = () => {\n                existingResolve();\n                resolve();\n            };\n        });\n    }\n    /**\n    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.\n\n    @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.\n    */\n    async onIdle() {\n        // Instantly resolve if none pending and if nothing else is queued\n        if (this._pendingCount === 0 && this._queue.size === 0) {\n            return;\n        }\n        return new Promise(resolve => {\n            const existingResolve = this._resolveIdle;\n            this._resolveIdle = () => {\n                existingResolve();\n                resolve();\n            };\n        });\n    }\n    /**\n    Size of the queue.\n    */\n    get size() {\n        return this._queue.size;\n    }\n    /**\n    Size of the queue, filtered by the given options.\n\n    For example, this can be used to find the number of items remaining in the queue with a specific priority level.\n    */\n    sizeBy(options) {\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        return this._queue.filter(options).length;\n    }\n    /**\n    Number of pending promises.\n    */\n    get pending() {\n        return this._pendingCount;\n    }\n    /**\n    Whether the queue is currently paused.\n    */\n    get isPaused() {\n        return this._isPaused;\n    }\n    get timeout() {\n        return this._timeout;\n    }\n    /**\n    Set the timeout for future operations.\n    */\n    set timeout(milliseconds) {\n        this._timeout = milliseconds;\n    }\n}\nexports.default = PQueue;\n"]},"metadata":{},"sourceType":"script"}