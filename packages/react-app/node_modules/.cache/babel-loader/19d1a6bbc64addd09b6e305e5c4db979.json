{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar crypto = require('./crypto');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error'); // step 2. Exchange\n// -- exchange (signed) ephemeral keys. verify signatures.\n\nmodule.exports = /*#__PURE__*/function () {\n  var _exchange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(state, wrapped) {\n    var ex, msg;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            log('2. exchange - start');\n            log('2. exchange - writing exchange');\n            _context.next = 4;\n            return crypto.createExchange(state);\n\n          case 4:\n            ex = _context.sent;\n            _context.next = 7;\n            return wrapped.writeLP(ex);\n\n          case 7:\n            _context.next = 9;\n            return wrapped.readLP();\n\n          case 9:\n            msg = _context.sent;\n            log('2. exchange - reading exchange');\n            _context.next = 13;\n            return crypto.verify(state, msg.slice());\n\n          case 13:\n            _context.next = 15;\n            return crypto.generateKeys(state);\n\n          case 15:\n            log('2. exchange - finish');\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function exchange(_x, _x2) {\n    return _exchange.apply(this, arguments);\n  }\n\n  return exchange;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-secio/src/handshake/exchange.js"],"names":["crypto","require","debug","log","error","module","exports","state","wrapped","createExchange","ex","writeLP","readLP","msg","verify","slice","generateKeys","exchange"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,GAAG,GAAGD,KAAK,CAAC,cAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,oBAAD,CAAjB,C,CAEA;AACA;;AACAG,MAAM,CAACC,OAAP;AAAA,2EAAiB,iBAAyBC,KAAzB,EAAgCC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACfL,YAAAA,GAAG,CAAC,qBAAD,CAAH;AAEAA,YAAAA,GAAG,CAAC,gCAAD,CAAH;AAHe;AAAA,mBAIEH,MAAM,CAACS,cAAP,CAAsBF,KAAtB,CAJF;;AAAA;AAITG,YAAAA,EAJS;AAAA;AAAA,mBAMTF,OAAO,CAACG,OAAR,CAAgBD,EAAhB,CANS;;AAAA;AAAA;AAAA,mBAOGF,OAAO,CAACI,MAAR,EAPH;;AAAA;AAOTC,YAAAA,GAPS;AASfV,YAAAA,GAAG,CAAC,gCAAD,CAAH;AATe;AAAA,mBAUTH,MAAM,CAACc,MAAP,CAAcP,KAAd,EAAqBM,GAAG,CAACE,KAAJ,EAArB,CAVS;;AAAA;AAAA;AAAA,mBAYTf,MAAM,CAACgB,YAAP,CAAoBT,KAApB,CAZS;;AAAA;AAafJ,YAAAA,GAAG,CAAC,sBAAD,CAAH;;AAbe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAgCc,QAAhC;AAAA;AAAA;;AAAA,SAAgCA,QAAhC;AAAA","sourcesContent":["'use strict'\n\nconst crypto = require('./crypto')\n\nconst debug = require('debug')\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\n// step 2. Exchange\n// -- exchange (signed) ephemeral keys. verify signatures.\nmodule.exports = async function exchange (state, wrapped) {\n  log('2. exchange - start')\n\n  log('2. exchange - writing exchange')\n  const ex = await crypto.createExchange(state)\n\n  await wrapped.writeLP(ex)\n  const msg = await wrapped.readLP()\n\n  log('2. exchange - reading exchange')\n  await crypto.verify(state, msg.slice())\n\n  await crypto.generateKeys(state)\n  log('2. exchange - finish')\n}\n"]},"metadata":{},"sourceType":"script"}