{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst BufferList = require('bl/BufferList');\n\nmodule.exports = async function* (source) {\n  for await (const b of source) {\n    if (Buffer.isBuffer(b)) {\n      yield b;\n    } else if (BufferList.isBufferList(b)) {\n      yield b.slice();\n    } else {\n      yield Buffer.from(b);\n    }\n  }\n};\n\nmodule.exports.toBuffer = module.exports;\n\nmodule.exports.toList = async function* (source) {\n  for await (const b of source) {\n    if (Buffer.isBuffer(b)) {\n      yield new BufferList().append(b);\n    } else if (BufferList.isBufferList(b)) {\n      yield b;\n    } else {\n      yield new BufferList().append(Buffer.from(b));\n    }\n  }\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-buffer/index.js"],"names":["Buffer","require","BufferList","module","exports","source","b","isBuffer","isBufferList","slice","from","toBuffer","toList","append"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,iBAAkBC,MAAlB,EAA0B;AACzC,aAAW,MAAMC,CAAjB,IAAsBD,MAAtB,EAA8B;AAC5B,QAAIL,MAAM,CAACO,QAAP,CAAgBD,CAAhB,CAAJ,EAAwB;AACtB,YAAMA,CAAN;AACD,KAFD,MAEO,IAAIJ,UAAU,CAACM,YAAX,CAAwBF,CAAxB,CAAJ,EAAgC;AACrC,YAAMA,CAAC,CAACG,KAAF,EAAN;AACD,KAFM,MAEA;AACL,YAAMT,MAAM,CAACU,IAAP,CAAYJ,CAAZ,CAAN;AACD;AACF;AACF,CAVD;;AAYAH,MAAM,CAACC,OAAP,CAAeO,QAAf,GAA0BR,MAAM,CAACC,OAAjC;;AAEAD,MAAM,CAACC,OAAP,CAAeQ,MAAf,GAAwB,iBAAkBP,MAAlB,EAA0B;AAChD,aAAW,MAAMC,CAAjB,IAAsBD,MAAtB,EAA8B;AAC5B,QAAIL,MAAM,CAACO,QAAP,CAAgBD,CAAhB,CAAJ,EAAwB;AACtB,YAAM,IAAIJ,UAAJ,GAAiBW,MAAjB,CAAwBP,CAAxB,CAAN;AACD,KAFD,MAEO,IAAIJ,UAAU,CAACM,YAAX,CAAwBF,CAAxB,CAAJ,EAAgC;AACrC,YAAMA,CAAN;AACD,KAFM,MAEA;AACL,YAAM,IAAIJ,UAAJ,GAAiBW,MAAjB,CAAwBb,MAAM,CAACU,IAAP,CAAYJ,CAAZ,CAAxB,CAAN;AACD;AACF;AACF,CAVD","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst BufferList = require('bl/BufferList')\n\nmodule.exports = async function * (source) {\n  for await (const b of source) {\n    if (Buffer.isBuffer(b)) {\n      yield b\n    } else if (BufferList.isBufferList(b)) {\n      yield b.slice()\n    } else {\n      yield Buffer.from(b)\n    }\n  }\n}\n\nmodule.exports.toBuffer = module.exports\n\nmodule.exports.toList = async function * (source) {\n  for await (const b of source) {\n    if (Buffer.isBuffer(b)) {\n      yield new BufferList().append(b)\n    } else if (BufferList.isBufferList(b)) {\n      yield b\n    } else {\n      yield new BufferList().append(Buffer.from(b))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}