{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('mss:select');\n\nconst errCode = require('err-code');\n\nconst multistream = require('./multistream');\n\nconst handshake = require('it-handshake');\n\nmodule.exports = async (stream, protocols, protocolId) => {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols];\n  const {\n    reader,\n    writer,\n    rest,\n    stream: shakeStream\n  } = handshake(stream);\n  const protocol = protocols.shift();\n\n  if (protocolId) {\n    log('select: write [\"%s\", \"%s\"]', protocolId, protocol);\n    multistream.writeAll(writer, [protocolId, protocol]);\n  } else {\n    log('select: write \"%s\"', protocol);\n    multistream.write(writer, protocol);\n  }\n\n  let response = (await multistream.read(reader)).toString();\n  log('select: read \"%s\"', response); // Read the protocol response if we got the protocolId in return\n\n  if (response === protocolId) {\n    response = (await multistream.read(reader)).toString();\n    log('select: read \"%s\"', response);\n  } // We're done\n\n\n  if (response === protocol) {\n    rest();\n    return {\n      stream: shakeStream,\n      protocol\n    };\n  } // We haven't gotten a valid ack, try the other protocols\n\n\n  for (const protocol of protocols) {\n    log('select: write \"%s\"', protocol);\n    multistream.write(writer, protocol);\n    const response = (await multistream.read(reader)).toString();\n    log('select: read \"%s\" for \"%s\"', response, protocol);\n\n    if (response === protocol) {\n      rest(); // End our writer so others can start writing to stream\n\n      return {\n        stream: shakeStream,\n        protocol\n      };\n    }\n  }\n\n  rest();\n  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL');\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/multistream-select/src/select.js"],"names":["log","require","errCode","multistream","handshake","module","exports","stream","protocols","protocolId","Array","isArray","reader","writer","rest","shakeStream","protocol","shift","writeAll","write","response","read","toString","Error"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAZ;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,OAAOC,MAAP,EAAeC,SAAf,EAA0BC,UAA1B,KAAyC;AACxDD,EAAAA,SAAS,GAAGE,KAAK,CAACC,OAAN,CAAcH,SAAd,IAA2B,CAAC,GAAGA,SAAJ,CAA3B,GAA4C,CAACA,SAAD,CAAxD;AACA,QAAM;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA,IAAlB;AAAwBP,IAAAA,MAAM,EAAEQ;AAAhC,MAAgDX,SAAS,CAACG,MAAD,CAA/D;AAEA,QAAMS,QAAQ,GAAGR,SAAS,CAACS,KAAV,EAAjB;;AACA,MAAIR,UAAJ,EAAgB;AACdT,IAAAA,GAAG,CAAC,4BAAD,EAA+BS,UAA/B,EAA2CO,QAA3C,CAAH;AACAb,IAAAA,WAAW,CAACe,QAAZ,CAAqBL,MAArB,EAA6B,CAACJ,UAAD,EAAaO,QAAb,CAA7B;AACD,GAHD,MAGO;AACLhB,IAAAA,GAAG,CAAC,oBAAD,EAAuBgB,QAAvB,CAAH;AACAb,IAAAA,WAAW,CAACgB,KAAZ,CAAkBN,MAAlB,EAA0BG,QAA1B;AACD;;AAED,MAAII,QAAQ,GAAG,CAAC,MAAMjB,WAAW,CAACkB,IAAZ,CAAiBT,MAAjB,CAAP,EAAiCU,QAAjC,EAAf;AACAtB,EAAAA,GAAG,CAAC,mBAAD,EAAsBoB,QAAtB,CAAH,CAdwD,CAgBxD;;AACA,MAAIA,QAAQ,KAAKX,UAAjB,EAA6B;AAC3BW,IAAAA,QAAQ,GAAG,CAAC,MAAMjB,WAAW,CAACkB,IAAZ,CAAiBT,MAAjB,CAAP,EAAiCU,QAAjC,EAAX;AACAtB,IAAAA,GAAG,CAAC,mBAAD,EAAsBoB,QAAtB,CAAH;AACD,GApBuD,CAsBxD;;;AACA,MAAIA,QAAQ,KAAKJ,QAAjB,EAA2B;AACzBF,IAAAA,IAAI;AACJ,WAAO;AAAEP,MAAAA,MAAM,EAAEQ,WAAV;AAAuBC,MAAAA;AAAvB,KAAP;AACD,GA1BuD,CA4BxD;;;AACA,OAAK,MAAMA,QAAX,IAAuBR,SAAvB,EAAkC;AAChCR,IAAAA,GAAG,CAAC,oBAAD,EAAuBgB,QAAvB,CAAH;AACAb,IAAAA,WAAW,CAACgB,KAAZ,CAAkBN,MAAlB,EAA0BG,QAA1B;AACA,UAAMI,QAAQ,GAAG,CAAC,MAAMjB,WAAW,CAACkB,IAAZ,CAAiBT,MAAjB,CAAP,EAAiCU,QAAjC,EAAjB;AACAtB,IAAAA,GAAG,CAAC,4BAAD,EAA+BoB,QAA/B,EAAyCJ,QAAzC,CAAH;;AAEA,QAAII,QAAQ,KAAKJ,QAAjB,EAA2B;AACzBF,MAAAA,IAAI,GADqB,CAClB;;AACP,aAAO;AAAEP,QAAAA,MAAM,EAAEQ,WAAV;AAAuBC,QAAAA;AAAvB,OAAP;AACD;AACF;;AAEDF,EAAAA,IAAI;AACJ,QAAMZ,OAAO,CAAC,IAAIqB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,0BAAzC,CAAb;AACD,CA3CD","sourcesContent":["'use strict'\n\nconst log = require('debug')('mss:select')\nconst errCode = require('err-code')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\n\nmodule.exports = async (stream, protocols, protocolId) => {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols]\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  const protocol = protocols.shift()\n  if (protocolId) {\n    log('select: write [\"%s\", \"%s\"]', protocolId, protocol)\n    multistream.writeAll(writer, [protocolId, protocol])\n  } else {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n  }\n\n  let response = (await multistream.read(reader)).toString()\n  log('select: read \"%s\"', response)\n\n  // Read the protocol response if we got the protocolId in return\n  if (response === protocolId) {\n    response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\"', response)\n  }\n\n  // We're done\n  if (response === protocol) {\n    rest()\n    return { stream: shakeStream, protocol }\n  }\n\n  // We haven't gotten a valid ack, try the other protocols\n  for (const protocol of protocols) {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n    const response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\" for \"%s\"', response, protocol)\n\n    if (response === protocol) {\n      rest() // End our writer so others can start writing to stream\n      return { stream: shakeStream, protocol }\n    }\n  }\n\n  rest()\n  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL')\n}\n"]},"metadata":{},"sourceType":"script"}