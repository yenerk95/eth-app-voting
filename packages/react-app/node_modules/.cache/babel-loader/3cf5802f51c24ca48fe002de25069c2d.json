{"ast":null,"code":"import HKDF from 'bcrypto/lib/hkdf';\nimport x25519 from 'bcrypto/lib/js/x25519';\nimport SHA256 from 'bcrypto/lib/js/sha256';\nimport { Buffer } from \"buffer\";\nimport PeerId from \"peer-id\";\nimport { keys } from 'libp2p-crypto';\nimport { pb } from \"./proto/payload\";\nconst NoiseHandshakePayloadProto = pb.NoiseHandshakePayload;\nexport function generateKeypair() {\n  const privateKey = x25519.privateKeyGenerate();\n  const publicKey = x25519.publicKeyCreate(privateKey);\n  return {\n    publicKey,\n    privateKey\n  };\n}\nexport async function getPayload(localPeer, staticPublicKey, earlyData) {\n  const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n  const earlyDataPayload = earlyData || Buffer.alloc(0);\n  return await createHandshakePayload(localPeer.marshalPubKey(), signedPayload, earlyDataPayload);\n}\nexport async function createHandshakePayload(libp2pPublicKey, signedPayload, earlyData) {\n  const payloadInit = NoiseHandshakePayloadProto.create({\n    identityKey: libp2pPublicKey,\n    identitySig: signedPayload,\n    data: earlyData || null\n  });\n  return Buffer.from(NoiseHandshakePayloadProto.encode(payloadInit).finish());\n}\nexport async function signPayload(peerId, payload) {\n  return peerId.privKey.sign(payload);\n}\nexport async function getPeerIdFromPayload(payload) {\n  return await PeerId.createFromPubKey(Buffer.from(payload.identityKey));\n}\nexport async function decodePayload(payload) {\n  return NoiseHandshakePayloadProto.toObject(NoiseHandshakePayloadProto.decode(Buffer.from(payload)));\n}\nexport function getHandshakePayload(publicKey) {\n  return Buffer.concat([Buffer.from(\"noise-libp2p-static-key:\"), publicKey]);\n}\n\nasync function isValidPeerId(peerId, publicKeyProtobuf) {\n  const generatedPeerId = await PeerId.createFromPubKey(publicKeyProtobuf);\n  return generatedPeerId.id.equals(peerId);\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\n\n\nexport async function verifySignedPayload(noiseStaticKey, payload, remotePeer) {\n  const identityKey = Buffer.from(payload.identityKey);\n\n  if (!(await isValidPeerId(remotePeer.id, identityKey))) {\n    throw new Error(\"Peer ID doesn't match libp2p public key.\");\n  }\n\n  const generatedPayload = getHandshakePayload(noiseStaticKey); // Unmarshaling from PublicKey protobuf\n\n  const publicKey = keys.unmarshalPublicKey(identityKey);\n\n  if (!payload.identitySig || !publicKey.verify(generatedPayload, Buffer.from(payload.identitySig))) {\n    throw new Error(\"Static key doesn't match to peer that signed payload!\");\n  }\n\n  return PeerId.createFromPubKey(identityKey);\n}\nexport function getHkdf(ck, ikm) {\n  const info = Buffer.alloc(0);\n  const prk = HKDF.extract(SHA256, ikm, ck);\n  const okm = HKDF.expand(SHA256, prk, info, 96);\n  const k1 = okm.slice(0, 32);\n  const k2 = okm.slice(32, 64);\n  const k3 = okm.slice(64, 96);\n  return [k1, k2, k3];\n}\nexport function isValidPublicKey(pk) {\n  return x25519.publicKeyVerify(pk.slice(0, 32));\n}","map":{"version":3,"sources":["../src/utils.ts"],"names":["NoiseHandshakePayloadProto","pb","privateKey","x25519","publicKey","signedPayload","signPayload","getHandshakePayload","earlyDataPayload","earlyData","Buffer","createHandshakePayload","localPeer","payloadInit","identityKey","identitySig","data","peerId","PeerId","payload","generatedPeerId","isValidPeerId","remotePeer","generatedPayload","keys","info","prk","HKDF","okm","k1","k2","k3","pk"],"mappings":"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","sourcesContent":["import HKDF from 'bcrypto/lib/hkdf';\nimport x25519 from 'bcrypto/lib/js/x25519';\nimport SHA256 from 'bcrypto/lib/js/sha256';\nimport {Buffer} from \"buffer\";\nimport PeerId from \"peer-id\";\nimport {keys} from 'libp2p-crypto';\nimport {KeyPair} from \"./@types/libp2p\";\nimport {bytes, bytes32} from \"./@types/basic\";\nimport {Hkdf, INoisePayload} from \"./@types/handshake\";\nimport {pb} from \"./proto/payload\";\n\nconst NoiseHandshakePayloadProto = pb.NoiseHandshakePayload;\n\nexport function generateKeypair(): KeyPair {\n  const privateKey = x25519.privateKeyGenerate();\n  const publicKey = x25519.publicKeyCreate(privateKey);\n\n  return {\n    publicKey,\n    privateKey,\n  }\n}\n\nexport async function getPayload(\n  localPeer: PeerId,\n  staticPublicKey: bytes,\n  earlyData?: bytes,\n): Promise<bytes> {\n  const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n  const earlyDataPayload = earlyData || Buffer.alloc(0);\n\n  return await createHandshakePayload(\n    localPeer.marshalPubKey(),\n    signedPayload,\n    earlyDataPayload\n  );\n}\n\nexport async function createHandshakePayload(\n  libp2pPublicKey: bytes,\n  signedPayload: bytes,\n  earlyData?: bytes,\n): Promise<bytes> {\n\n  const payloadInit = NoiseHandshakePayloadProto.create({\n    identityKey: libp2pPublicKey,\n    identitySig: signedPayload,\n    data: earlyData || null,\n  });\n\n  return Buffer.from(NoiseHandshakePayloadProto.encode(payloadInit).finish());\n}\n\n\nexport async function signPayload(peerId: PeerId, payload: bytes): Promise<bytes> {\n  return peerId.privKey.sign(payload);\n}\n\nexport async function getPeerIdFromPayload(payload: pb.INoiseHandshakePayload): Promise<PeerId> {\n  return await PeerId.createFromPubKey(Buffer.from(payload.identityKey as Uint8Array));\n}\n\nexport async function decodePayload(payload: bytes|Uint8Array): Promise<pb.INoiseHandshakePayload> {\n  return NoiseHandshakePayloadProto.toObject(\n    NoiseHandshakePayloadProto.decode(Buffer.from(payload))\n  ) as INoisePayload;\n}\n\nexport function getHandshakePayload(publicKey: bytes): bytes {\n  return Buffer.concat([Buffer.from(\"noise-libp2p-static-key:\"), publicKey]);\n}\n\nasync function isValidPeerId(peerId: bytes, publicKeyProtobuf: bytes) {\n  const generatedPeerId = await PeerId.createFromPubKey(publicKeyProtobuf);\n  return generatedPeerId.id.equals(peerId);\n}\n\n/**\n * Verifies signed payload, throws on any irregularities.\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\nexport async function verifySignedPayload(\n  noiseStaticKey: bytes,\n  payload: pb.INoiseHandshakePayload,\n  remotePeer: PeerId\n): Promise<PeerId> {\n  const identityKey = Buffer.from(payload.identityKey as Uint8Array);\n  if (!(await isValidPeerId(remotePeer.id, identityKey))) {\n    throw new Error(\"Peer ID doesn't match libp2p public key.\");\n  }\n  const generatedPayload = getHandshakePayload(noiseStaticKey);\n  // Unmarshaling from PublicKey protobuf\n  const publicKey = keys.unmarshalPublicKey(identityKey);\n  if (!payload.identitySig || !publicKey.verify(generatedPayload, Buffer.from(payload.identitySig))) {\n    throw new Error(\"Static key doesn't match to peer that signed payload!\");\n  }\n  return PeerId.createFromPubKey(identityKey);\n}\n\nexport function getHkdf(ck: bytes32, ikm: bytes): Hkdf {\n  const info = Buffer.alloc(0);\n  const prk = HKDF.extract(SHA256, ikm, ck);\n  const okm = HKDF.expand(SHA256, prk, info, 96);\n\n  const k1 = okm.slice(0, 32);\n  const k2 = okm.slice(32, 64);\n  const k3 = okm.slice(64, 96);\n\n  return [k1, k2, k3];\n}\n\nexport function isValidPublicKey(pk: bytes): boolean {\n  return x25519.publicKeyVerify(pk.slice(0, 32));\n}\n"]},"metadata":{},"sourceType":"module"}