{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst UnixFs = require('ipfs-unixfs');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nconst mc = require('multicodec');\n\nconst mh = require('multihashing-async').multihash;\n\nconst errCode = require('err-code');\n\nconst {\n  MFS_ROOT_KEY\n} = require('../../../utils');\n\nconst loadMfsRoot = async (context, options) => {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n      name: 'Aborted'\n    });\n  } // Open the repo if it's been closed\n\n\n  await context.repo.datastore.open(); // Load the MFS root CID\n\n  let cid;\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY);\n    cid = new CID(buf);\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n\n    log('Creating new MFS root');\n    const node = new DAGNode(new UnixFs({\n      type: 'directory'\n    }).marshal());\n    cid = await context.ipld.put(node, mc.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n\n    });\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n        name: 'Aborted'\n      });\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`);\n  return cid;\n};\n\nmodule.exports = loadMfsRoot;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/utils/with-mfs-root.js"],"names":["CID","require","UnixFs","DAGNode","log","mc","mh","multihash","errCode","MFS_ROOT_KEY","loadMfsRoot","context","options","signal","aborted","Error","name","repo","datastore","open","cid","buf","get","err","code","node","type","marshal","ipld","put","DAG_PB","cidVersion","hashAlg","names","buffer","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAM;AACJE,EAAAA;AADI,IAEFF,OAAO,CAAC,aAAD,CAFX;;AAGA,MAAMG,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,YAAD,CAAlB;;AACA,MAAMK,EAAE,GAAGL,OAAO,CAAC,oBAAD,CAAP,CAA8BM,SAAzC;;AACA,MAAMC,OAAO,GAAGP,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAM;AACJQ,EAAAA;AADI,IAEFR,OAAO,CAAC,gBAAD,CAFX;;AAIA,MAAMS,WAAW,GAAG,OAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AAC9C,MAAIA,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAAhD,EAAyD;AACvD,UAAMN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA9C,CAAb;AACD,GAH6C,CAK9C;;;AACA,QAAML,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBC,IAAvB,EAAN,CAN8C,CAQ9C;;AACA,MAAIC,GAAJ;;AAEA,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBI,GAAvB,CAA2Bb,YAA3B,CAAlB;AAEAW,IAAAA,GAAG,GAAG,IAAIpB,GAAJ,CAAQqB,GAAR,CAAN;AACD,GAJD,CAIE,OAAOE,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACC,IAAJ,KAAa,eAAjB,EAAkC;AAChC,YAAMD,GAAN;AACD;;AAEDnB,IAAAA,GAAG,CAAC,uBAAD,CAAH;AACA,UAAMqB,IAAI,GAAG,IAAItB,OAAJ,CAAY,IAAID,MAAJ,CAAW;AAAEwB,MAAAA,IAAI,EAAE;AAAR,KAAX,EAAkCC,OAAlC,EAAZ,CAAb;AACAP,IAAAA,GAAG,GAAG,MAAMT,OAAO,CAACiB,IAAR,CAAaC,GAAb,CAAiBJ,IAAjB,EAAuBpB,EAAE,CAACyB,MAA1B,EAAkC;AAC5CC,MAAAA,UAAU,EAAE,CADgC;AAE5CC,MAAAA,OAAO,EAAE1B,EAAE,CAAC2B,KAAH,CAAS,UAAT,CAFmC,CAEd;;AAFc,KAAlC,CAAZ;;AAKA,QAAIrB,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAAhD,EAAyD;AACvD,YAAMN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAA9C,CAAb;AACD;;AAED,UAAML,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBW,GAAvB,CAA2BpB,YAA3B,EAAyCW,GAAG,CAACc,MAA7C,CAAN;AACD;;AAED9B,EAAAA,GAAG,CAAE,yBAAwBgB,GAAI,EAA9B,CAAH;AAEA,SAAOA,GAAP;AACD,CArCD;;AAuCAe,MAAM,CAACC,OAAP,GAAiB1B,WAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst UnixFs = require('ipfs-unixfs')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root')\nconst mc = require('multicodec')\nconst mh = require('multihashing-async').multihash\nconst errCode = require('err-code')\n\nconst {\n  MFS_ROOT_KEY\n} = require('../../../utils')\n\nconst loadMfsRoot = async (context, options) => {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = new CID(buf)\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const node = new DAGNode(new UnixFs({ type: 'directory' }).marshal())\n    cid = await context.ipld.put(node, mc.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n    })\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n\nmodule.exports = loadMfsRoot\n"]},"metadata":{},"sourceType":"script"}