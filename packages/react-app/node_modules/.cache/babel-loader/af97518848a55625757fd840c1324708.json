{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar errCode = require('err-code');\n\nmodule.exports = function (_ref) {\n  var libp2p = _ref.libp2p;\n  return {\n    subscribe: withTimeoutOption(function () {\n      var _libp2p$pubsub;\n\n      return (_libp2p$pubsub = libp2p.pubsub).subscribe.apply(_libp2p$pubsub, arguments);\n    }),\n    unsubscribe: withTimeoutOption(function () {\n      var _libp2p$pubsub2;\n\n      return (_libp2p$pubsub2 = libp2p.pubsub).unsubscribe.apply(_libp2p$pubsub2, arguments);\n    }),\n    publish: withTimeoutOption( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(topic, data, options) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (data) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED');\n\n              case 2:\n                _context.next = 4;\n                return libp2p.pubsub.publish(topic, data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()),\n    ls: withTimeoutOption(function () {\n      var _libp2p$pubsub3;\n\n      return (_libp2p$pubsub3 = libp2p.pubsub).getTopics.apply(_libp2p$pubsub3, arguments);\n    }),\n    peers: withTimeoutOption(function () {\n      var _libp2p$pubsub4;\n\n      return (_libp2p$pubsub4 = libp2p.pubsub).getSubscribers.apply(_libp2p$pubsub4, arguments);\n    })\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/pubsub.js"],"names":["require","withTimeoutOption","errCode","module","exports","libp2p","subscribe","pubsub","unsubscribe","publish","topic","data","options","Error","ls","getTopics","peers","getSubscribers"],"mappings":"AAAA;;;;;;eAE8BA,OAAO,CAAC,UAAD,C;IAA7BC,iB,YAAAA,iB;;AACR,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAC/B,SAAO;AACLC,IAAAA,SAAS,EAAEL,iBAAiB,CAAC;AAAA;;AAAA,aAAa,kBAAAI,MAAM,CAACE,MAAP,EAAcD,SAAd,iCAAb;AAAA,KAAD,CADvB;AAELE,IAAAA,WAAW,EAAEP,iBAAiB,CAAC;AAAA;;AAAA,aAAa,mBAAAI,MAAM,CAACE,MAAP,EAAcC,WAAd,kCAAb;AAAA,KAAD,CAFzB;AAGLC,IAAAA,OAAO,EAAER,iBAAiB;AAAA,2EAAC,iBAAOS,KAAP,EAAcC,IAAd,EAAoBC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA,oBACpBD,IADoB;AAAA;AAAA;AAAA;;AAAA,sBAEjBT,OAAO,CAAC,IAAIW,KAAJ,CAAU,6BAAV,CAAD,EAA2C,kBAA3C,CAFU;;AAAA;AAAA;AAAA,uBAInBR,MAAM,CAACE,MAAP,CAAcE,OAAd,CAAsBC,KAAtB,EAA6BC,IAA7B,CAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAAA;AAAA;AAAA;AAAA,QAHrB;AASLG,IAAAA,EAAE,EAAEb,iBAAiB,CAAC;AAAA;;AAAA,aAAa,mBAAAI,MAAM,CAACE,MAAP,EAAcQ,SAAd,kCAAb;AAAA,KAAD,CAThB;AAULC,IAAAA,KAAK,EAAEf,iBAAiB,CAAC;AAAA;;AAAA,aAAa,mBAAAI,MAAM,CAACE,MAAP,EAAcU,cAAd,kCAAb;AAAA,KAAD;AAVnB,GAAP;AAYD,CAbD","sourcesContent":["'use strict'\n\nconst { withTimeoutOption } = require('../utils')\nconst errCode = require('err-code')\n\nmodule.exports = ({ libp2p }) => {\n  return {\n    subscribe: withTimeoutOption((...args) => libp2p.pubsub.subscribe(...args)),\n    unsubscribe: withTimeoutOption((...args) => libp2p.pubsub.unsubscribe(...args)),\n    publish: withTimeoutOption(async (topic, data, options) => {\n      if (!data) {\n        throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED')\n      }\n      await libp2p.pubsub.publish(topic, data)\n    }),\n    ls: withTimeoutOption((...args) => libp2p.pubsub.getTopics(...args)),\n    peers: withTimeoutOption((...args) => libp2p.pubsub.getSubscribers(...args))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}