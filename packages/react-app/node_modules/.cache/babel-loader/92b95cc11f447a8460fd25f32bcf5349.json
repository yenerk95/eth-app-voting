{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Buffer } from \"buffer\";\nimport { XX } from \"./handshakes/xx\";\nimport { decodePayload, getPeerIdFromPayload, verifySignedPayload } from \"./utils\";\nimport { logger, logLocalStaticKeys, logLocalEphemeralKeys, logRemoteEphemeralKey, logRemoteStaticKey, logCipherState } from \"./logger\";\nimport { decode0, decode1, decode2, encode0, encode1, encode2 } from \"./encoder\";\nexport class XXHandshake {\n  constructor(isInitiator, payload, prologue, staticKeypair, connection, remotePeer, handshake) {\n    _defineProperty(this, \"isInitiator\", void 0);\n\n    _defineProperty(this, \"session\", void 0);\n\n    _defineProperty(this, \"remotePeer\", void 0);\n\n    _defineProperty(this, \"remoteEarlyData\", void 0);\n\n    _defineProperty(this, \"payload\", void 0);\n\n    _defineProperty(this, \"connection\", void 0);\n\n    _defineProperty(this, \"xx\", void 0);\n\n    _defineProperty(this, \"staticKeypair\", void 0);\n\n    _defineProperty(this, \"prologue\", void 0);\n\n    this.isInitiator = isInitiator;\n    this.payload = payload;\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n\n    if (remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n\n    this.xx = handshake || new XX();\n    this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);\n    this.remoteEarlyData = Buffer.alloc(0);\n  } // stage 0\n\n\n  async propose() {\n    logLocalStaticKeys(this.session.hs.s);\n\n    if (this.isInitiator) {\n      logger(\"Stage 0 - Initiator starting to send first message.\");\n      const messageBuffer = this.xx.sendMessage(this.session, Buffer.alloc(0));\n      this.connection.writeLP(encode0(messageBuffer));\n      logger(\"Stage 0 - Initiator finished sending first message.\");\n      logLocalEphemeralKeys(this.session.hs.e);\n    } else {\n      logger(\"Stage 0 - Responder waiting to receive first message...\");\n      const receivedMessageBuffer = decode0((await this.connection.readLP()).slice());\n      const {\n        valid\n      } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n\n      if (!valid) {\n        throw new Error(\"xx handshake stage 0 validation fail\");\n      }\n\n      logger(\"Stage 0 - Responder received first message.\");\n      logRemoteEphemeralKey(this.session.hs.re);\n    }\n  } // stage 1\n\n\n  async exchange() {\n    if (this.isInitiator) {\n      logger('Stage 1 - Initiator waiting to receive first message from responder...');\n      const receivedMessageBuffer = decode1((await this.connection.readLP()).slice());\n      const {\n        plaintext,\n        valid\n      } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n\n      if (!valid) {\n        throw new Error(\"xx handshake stage 1 validation fail\");\n      }\n\n      logger('Stage 1 - Initiator received the message.');\n      logRemoteEphemeralKey(this.session.hs.re);\n      logRemoteStaticKey(this.session.hs.rs);\n      logger(\"Initiator going to check remote's signature...\");\n\n      try {\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await getPeerIdFromPayload(decodedPayload));\n        this.remotePeer = await verifySignedPayload(receivedMessageBuffer.ns, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n      } catch (e) {\n        throw new Error(\"Error occurred while verifying signed payload: \".concat(e.message));\n      }\n\n      logger(\"All good with the signature!\");\n    } else {\n      logger('Stage 1 - Responder sending out first message with signed payload and static key.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode1(messageBuffer));\n      logger('Stage 1 - Responder sent the second handshake message with signed payload.');\n      logLocalEphemeralKeys(this.session.hs.e);\n    }\n  } // stage 2\n\n\n  async finish() {\n    if (this.isInitiator) {\n      logger('Stage 2 - Initiator sending third handshake message.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode2(messageBuffer));\n      logger('Stage 2 - Initiator sent message with signed payload.');\n    } else {\n      logger('Stage 2 - Responder waiting for third handshake message...');\n      const receivedMessageBuffer = decode2((await this.connection.readLP()).slice());\n      const {\n        plaintext,\n        valid\n      } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n\n      if (!valid) {\n        throw new Error(\"xx handshake stage 2 validation fail\");\n      }\n\n      logger('Stage 2 - Responder received the message, finished handshake.');\n\n      try {\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await getPeerIdFromPayload(decodedPayload));\n        await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n      } catch (e) {\n        throw new Error(\"Error occurred while verifying signed payload: \".concat(e.message));\n      }\n    }\n\n    logCipherState(this.session);\n  }\n\n  encrypt(plaintext, session) {\n    const cs = this.getCS(session);\n    return this.xx.encryptWithAd(cs, Buffer.alloc(0), plaintext);\n  }\n\n  decrypt(ciphertext, session) {\n    const cs = this.getCS(session, false);\n    return this.xx.decryptWithAd(cs, Buffer.alloc(0), ciphertext);\n  }\n\n  getRemoteStaticKey() {\n    return this.session.hs.rs;\n  }\n\n  getCS(session, encryption = true) {\n    if (!session.cs1 || !session.cs2) {\n      throw new Error(\"Handshake not completed properly, cipher state does not exist.\");\n    }\n\n    if (this.isInitiator) {\n      return encryption ? session.cs1 : session.cs2;\n    } else {\n      return encryption ? session.cs2 : session.cs1;\n    }\n  }\n\n  setRemoteEarlyData(data) {\n    if (data) {\n      this.remoteEarlyData = Buffer.from(data.buffer, data.byteOffset, data.length);\n    }\n  }\n\n}","map":{"version":3,"sources":["../src/handshake-xx.ts"],"names":["constructor","handshake","Buffer","logLocalStaticKeys","logger","messageBuffer","encode0","logLocalEphemeralKeys","receivedMessageBuffer","decode0","valid","logRemoteEphemeralKey","decode1","logRemoteStaticKey","decodedPayload","decodePayload","getPeerIdFromPayload","verifySignedPayload","e","encode1","encode2","decode2","logCipherState","encrypt","cs","decrypt","getRemoteStaticKey","getCS","encryption","session","setRemoteEarlyData","data"],"mappings":"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","sourcesContent":["import { Buffer } from \"buffer\";\n\nimport { XX } from \"./handshakes/xx\";\nimport { KeyPair } from \"./@types/libp2p\";\nimport { bytes, bytes32 } from \"./@types/basic\";\nimport { NoiseSession } from \"./@types/handshake\";\nimport {IHandshake} from \"./@types/handshake-interface\";\nimport {\n  decodePayload,\n  getPeerIdFromPayload,\n  verifySignedPayload,\n} from \"./utils\";\nimport {\n  logger, \n  logLocalStaticKeys, \n  logLocalEphemeralKeys, \n  logRemoteEphemeralKey, \n  logRemoteStaticKey, \n  logCipherState, \n} from \"./logger\";\nimport {decode0, decode1, decode2, encode0, encode1, encode2} from \"./encoder\";\nimport { WrappedConnection } from \"./noise\";\nimport PeerId from \"peer-id\";\n\nexport class XXHandshake implements IHandshake {\n  public isInitiator: boolean;\n  public session: NoiseSession;\n  public remotePeer!: PeerId;\n  public remoteEarlyData: Buffer;\n\n  protected payload: bytes;\n  protected connection: WrappedConnection;\n  protected xx: XX;\n  protected staticKeypair: KeyPair;\n\n  private prologue: bytes32;\n\n  constructor(\n    isInitiator: boolean,\n    payload: bytes,\n    prologue: bytes32,\n    staticKeypair: KeyPair,\n    connection: WrappedConnection,\n    remotePeer?: PeerId,\n    handshake?: XX,\n  ) {\n    this.isInitiator = isInitiator;\n    this.payload = payload;\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n    if(remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n    this.xx = handshake || new XX();\n    this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);\n    this.remoteEarlyData = Buffer.alloc(0)\n  }\n\n  // stage 0\n  public async propose(): Promise<void> {\n    logLocalStaticKeys(this.session.hs.s)\n    if (this.isInitiator) {\n      logger(\"Stage 0 - Initiator starting to send first message.\");\n      const messageBuffer = this.xx.sendMessage(this.session, Buffer.alloc(0));\n      this.connection.writeLP(encode0(messageBuffer));\n      logger(\"Stage 0 - Initiator finished sending first message.\");\n      logLocalEphemeralKeys(this.session.hs.e)\n    } else {\n      logger(\"Stage 0 - Responder waiting to receive first message...\");\n      const receivedMessageBuffer = decode0((await this.connection.readLP()).slice());\n      const {valid} = this.xx.recvMessage(this.session, receivedMessageBuffer);\n      if(!valid) {\n        throw new Error(\"xx handshake stage 0 validation fail\");\n      }\n      logger(\"Stage 0 - Responder received first message.\");\n      logRemoteEphemeralKey(this.session.hs.re)\n    }\n  }\n\n  // stage 1\n  public async exchange(): Promise<void> {\n    if (this.isInitiator) {\n      logger('Stage 1 - Initiator waiting to receive first message from responder...');\n      const receivedMessageBuffer = decode1((await this.connection.readLP()).slice());\n      const {plaintext, valid} = this.xx.recvMessage(this.session, receivedMessageBuffer);\n      if(!valid) {\n        throw new Error(\"xx handshake stage 1 validation fail\");\n      }\n      logger('Stage 1 - Initiator received the message.');\n      logRemoteEphemeralKey(this.session.hs.re)\n      logRemoteStaticKey(this.session.hs.rs)\n\n      logger(\"Initiator going to check remote's signature...\");\n      try {\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);\n        this.remotePeer = await verifySignedPayload(receivedMessageBuffer.ns, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data)\n      } catch (e) {\n        throw new Error(`Error occurred while verifying signed payload: ${e.message}`);\n      }\n      logger(\"All good with the signature!\");\n    } else {\n      logger('Stage 1 - Responder sending out first message with signed payload and static key.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode1(messageBuffer));\n      logger('Stage 1 - Responder sent the second handshake message with signed payload.')\n      logLocalEphemeralKeys(this.session.hs.e)\n    }\n  }\n\n  // stage 2\n  public async finish(): Promise<void> {\n    if (this.isInitiator) {\n      logger('Stage 2 - Initiator sending third handshake message.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode2(messageBuffer));\n      logger('Stage 2 - Initiator sent message with signed payload.');\n    } else {\n      logger('Stage 2 - Responder waiting for third handshake message...');\n      const receivedMessageBuffer = decode2((await this.connection.readLP()).slice());\n      const {plaintext, valid} = this.xx.recvMessage(this.session, receivedMessageBuffer);\n      if(!valid) {\n        throw new Error(\"xx handshake stage 2 validation fail\");\n      }\n      logger('Stage 2 - Responder received the message, finished handshake.');\n\n      try {\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);\n        await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data)\n      } catch (e) {\n        throw new Error(`Error occurred while verifying signed payload: ${e.message}`);\n      }\n    }\n    logCipherState(this.session)\n  }\n\n  public encrypt(plaintext: bytes, session: NoiseSession): bytes {\n    const cs = this.getCS(session);\n\n    return this.xx.encryptWithAd(cs, Buffer.alloc(0), plaintext);\n  }\n\n  public decrypt(ciphertext: bytes, session: NoiseSession): {plaintext: bytes; valid: boolean} {\n    const cs = this.getCS(session, false);\n    return this.xx.decryptWithAd(cs, Buffer.alloc(0), ciphertext);\n  }\n\n  public getRemoteStaticKey(): bytes {\n    return this.session.hs.rs;\n  }\n\n  private getCS(session: NoiseSession, encryption = true) {\n    if (!session.cs1 || !session.cs2) {\n      throw new Error(\"Handshake not completed properly, cipher state does not exist.\");\n    }\n\n    if (this.isInitiator) {\n      return encryption ? session.cs1 : session.cs2;\n    } else {\n      return encryption ? session.cs2 : session.cs1;\n    }\n  }\n\n  protected setRemoteEarlyData(data: Uint8Array|null|undefined): void {\n    if(data){\n      this.remoteEarlyData = Buffer.from(data.buffer, data.byteOffset, data.length);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}