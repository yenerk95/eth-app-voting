{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nfunction batch(_x, _x2) {\n  return _batch.apply(this, arguments);\n}\n\nfunction _batch() {\n  _batch = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, size) {\n    var things, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, thing;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            size = parseInt(size);\n\n            if (isNaN(size) || size < 1) {\n              size = 1;\n            }\n\n            things = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 5;\n            _iterator = _asyncIterator(source);\n\n          case 7:\n            _context.next = 9;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 9:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 13;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 13:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 26;\n              break;\n            }\n\n            thing = _value;\n            things.push(thing);\n\n          case 17:\n            if (!(things.length >= size)) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 20;\n            return things.slice(0, size);\n\n          case 20:\n            things = things.slice(size);\n            _context.next = 17;\n            break;\n\n          case 23:\n            _iteratorNormalCompletion = true;\n            _context.next = 7;\n            break;\n\n          case 26:\n            _context.next = 32;\n            break;\n\n          case 28:\n            _context.prev = 28;\n            _context.t0 = _context[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 32:\n            _context.prev = 32;\n            _context.prev = 33;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 37;\n              break;\n            }\n\n            _context.next = 37;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 37:\n            _context.prev = 37;\n\n            if (!_didIteratorError) {\n              _context.next = 40;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 40:\n            return _context.finish(37);\n\n          case 41:\n            return _context.finish(32);\n\n          case 42:\n            if (!things.length) {\n              _context.next = 48;\n              break;\n            }\n\n            _context.next = 45;\n            return things.slice(0, size);\n\n          case 45:\n            things = things.slice(size);\n            _context.next = 42;\n            break;\n\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 28, 32, 42], [33,, 37, 41]]);\n  }));\n  return _batch.apply(this, arguments);\n}\n\nmodule.exports = batch;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-batch/index.js"],"names":["batch","source","size","parseInt","isNaN","things","thing","push","length","slice","module","exports"],"mappings":"AAAA;;;;;;;;;;SAEiBA,K;;;;;sEAAjB,iBAAwBC,MAAxB,EAAgCC,IAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEA,YAAAA,IAAI,GAAGC,QAAQ,CAACD,IAAD,CAAf;;AAEA,gBAAIE,KAAK,CAACF,IAAD,CAAL,IAAeA,IAAI,GAAG,CAA1B,EAA6B;AAC3BA,cAAAA,IAAI,GAAG,CAAP;AACD;;AAEGG,YAAAA,MAPN,GAOe,EAPf;AAAA;AAAA;AAAA;AAAA,uCAS4BJ,MAT5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AASmBK,YAAAA,KATnB;AAUID,YAAAA,MAAM,CAACE,IAAP,CAAYD,KAAZ;;AAVJ;AAAA,kBAYWD,MAAM,CAACG,MAAP,IAAiBN,IAZ5B;AAAA;AAAA;AAAA;;AAAA;AAaM,mBAAMG,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBP,IAAhB,CAAN;;AAbN;AAeMG,YAAAA,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAaP,IAAb,CAAT;AAfN;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,iBAmBSG,MAAM,CAACG,MAnBhB;AAAA;AAAA;AAAA;;AAAA;AAoBI,mBAAMH,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBP,IAAhB,CAAN;;AApBJ;AAsBIG,YAAAA,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAaP,IAAb,CAAT;AAtBJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA0BAQ,MAAM,CAACC,OAAP,GAAiBX,KAAjB","sourcesContent":["'use strict'\n\nasync function * batch (source, size) {\n  size = parseInt(size)\n\n  if (isNaN(size) || size < 1) {\n    size = 1\n  }\n\n  let things = []\n\n  for await (const thing of source) {\n    things.push(thing)\n\n    while (things.length >= size) {\n      yield things.slice(0, size)\n\n      things = things.slice(size)\n    }\n  }\n\n  while (things.length) {\n    yield things.slice(0, size)\n\n    things = things.slice(size)\n  }\n}\n\nmodule.exports = batch\n"]},"metadata":{},"sourceType":"script"}