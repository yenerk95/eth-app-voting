{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar mafmt = require('mafmt');\n\nvar multiaddr = require('multiaddr');\n\nvar PeerId = require('peer-id');\n\nvar withIs = require('class-is');\n\nvar _require = require('./protocol'),\n    CircuitPB = _require.CircuitRelay;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:circuit');\nlog.error = debug('libp2p:circuit:error');\n\nvar toConnection = require('libp2p-utils/src/stream-to-ma-conn');\n\nvar _require2 = require('./multicodec'),\n    multicodec = _require2.relay;\n\nvar _createListener = require('./listener');\n\nvar _require3 = require('./circuit/hop'),\n    handleCanHop = _require3.handleCanHop,\n    handleHop = _require3.handleHop,\n    hop = _require3.hop;\n\nvar _require4 = require('./circuit/stop'),\n    handleStop = _require4.handleStop;\n\nvar StreamHandler = require('./circuit/stream-handler');\n\nvar Circuit = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of Circuit.\n   *\n   * @constructor\n   * @param {object} options\n   * @param {Libp2p} options.libp2p\n   * @param {Upgrader} options.upgrader\n   */\n  function Circuit(_ref) {\n    var libp2p = _ref.libp2p,\n        upgrader = _ref.upgrader;\n\n    _classCallCheck(this, Circuit);\n\n    this._dialer = libp2p.dialer;\n    this._registrar = libp2p.registrar;\n    this._connectionManager = libp2p.connectionManager;\n    this._upgrader = upgrader;\n    this._options = libp2p._config.relay;\n    this._libp2p = libp2p;\n    this.peerId = libp2p.peerId;\n\n    this._registrar.handle(multicodec, this._onProtocol.bind(this));\n  }\n\n  _createClass(Circuit, [{\n    key: \"_onProtocol\",\n    value: function () {\n      var _onProtocol2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var connection, stream, protocol, streamHandler, request, circuit, virtualConnection, remoteAddr, localAddr, maConn, type, conn;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                connection = _ref2.connection, stream = _ref2.stream, protocol = _ref2.protocol;\n                streamHandler = new StreamHandler({\n                  stream: stream\n                });\n                _context.next = 4;\n                return streamHandler.read();\n\n              case 4:\n                request = _context.sent;\n                circuit = this;\n                _context.t0 = request.type;\n                _context.next = _context.t0 === CircuitPB.Type.CAN_HOP ? 9 : _context.t0 === CircuitPB.Type.HOP ? 13 : _context.t0 === CircuitPB.Type.STOP ? 18 : 23;\n                break;\n\n              case 9:\n                log('received CAN_HOP request from %s', connection.remotePeer.toB58String());\n                _context.next = 12;\n                return handleCanHop({\n                  circuit: circuit,\n                  connection: connection,\n                  streamHandler: streamHandler\n                });\n\n              case 12:\n                return _context.abrupt(\"break\", 24);\n\n              case 13:\n                log('received HOP request from %s', connection.remotePeer.toB58String());\n                _context.next = 16;\n                return handleHop({\n                  connection: connection,\n                  request: request,\n                  streamHandler: streamHandler,\n                  circuit: circuit\n                });\n\n              case 16:\n                virtualConnection = _context.sent;\n                return _context.abrupt(\"break\", 24);\n\n              case 18:\n                log('received STOP request from %s', connection.remotePeer.toB58String());\n                _context.next = 21;\n                return handleStop({\n                  connection: connection,\n                  request: request,\n                  streamHandler: streamHandler,\n                  circuit: circuit\n                });\n\n              case 21:\n                virtualConnection = _context.sent;\n                return _context.abrupt(\"break\", 24);\n\n              case 23:\n                log('Request of type %s not supported', request.type);\n\n              case 24:\n                if (!virtualConnection) {\n                  _context.next = 35;\n                  break;\n                }\n\n                remoteAddr = multiaddr(request.dstPeer.addrs[0]);\n                localAddr = multiaddr(request.srcPeer.addrs[0]);\n                maConn = toConnection({\n                  stream: virtualConnection,\n                  remoteAddr: remoteAddr,\n                  localAddr: localAddr\n                });\n                type = CircuitPB.Type === CircuitPB.Type.HOP ? 'relay' : 'inbound';\n                log('new %s connection %s', type, maConn.remoteAddr);\n                _context.next = 32;\n                return this._upgrader.upgradeInbound(maConn);\n\n              case 32:\n                conn = _context.sent;\n                log('%s connection %s upgraded', type, maConn.remoteAddr);\n                this.handler && this.handler(conn);\n\n              case 35:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _onProtocol(_x) {\n        return _onProtocol2.apply(this, arguments);\n      }\n\n      return _onProtocol;\n    }()\n    /**\n     * Dial a peer over a relay\n     *\n     * @param {multiaddr} ma - the multiaddr of the peer to dial\n     * @param {Object} options - dial options\n     * @param {AbortSignal} [options.signal] - An optional abort signal\n     * @returns {Connection} - the connection\n     */\n\n  }, {\n    key: \"dial\",\n    value: function () {\n      var _dial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ma, options) {\n        var addrs, relayAddr, destinationAddr, relayPeer, destinationPeer, disconnectOnFailure, relayConnection, virtualConnection, localAddr, maConn;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Check the multiaddr to see if it contains a relay and a destination peer\n                addrs = ma.toString().split('/p2p-circuit');\n                relayAddr = multiaddr(addrs[0]);\n                destinationAddr = multiaddr(addrs[addrs.length - 1]);\n                relayPeer = PeerId.createFromCID(relayAddr.getPeerId());\n                destinationPeer = PeerId.createFromCID(destinationAddr.getPeerId());\n                disconnectOnFailure = false;\n                relayConnection = this._connectionManager.get(relayPeer);\n\n                if (relayConnection) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 10;\n                return this._dialer.connectToPeer(relayAddr, options);\n\n              case 10:\n                relayConnection = _context2.sent;\n                disconnectOnFailure = true;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.next = 15;\n                return hop({\n                  connection: relayConnection,\n                  circuit: this,\n                  request: {\n                    type: CircuitPB.Type.HOP,\n                    srcPeer: {\n                      id: this.peerId.toBytes(),\n                      addrs: this._libp2p.multiaddrs.map(function (addr) {\n                        return addr.buffer;\n                      })\n                    },\n                    dstPeer: {\n                      id: destinationPeer.toBytes(),\n                      addrs: [multiaddr(destinationAddr).buffer]\n                    }\n                  }\n                });\n\n              case 15:\n                virtualConnection = _context2.sent;\n                localAddr = relayAddr.encapsulate(\"/p2p-circuit/p2p/\".concat(this.peerId.toB58String()));\n                maConn = toConnection({\n                  stream: virtualConnection,\n                  remoteAddr: ma,\n                  localAddr: localAddr\n                });\n                log('new outbound connection %s', maConn.remoteAddr);\n                return _context2.abrupt(\"return\", this._upgrader.upgradeOutbound(maConn));\n\n              case 22:\n                _context2.prev = 22;\n                _context2.t0 = _context2[\"catch\"](12);\n                log.error('Circuit relay dial failed', _context2.t0);\n                _context2.t1 = disconnectOnFailure;\n\n                if (!_context2.t1) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                _context2.next = 29;\n                return relayConnection.close();\n\n              case 29:\n                throw _context2.t0;\n\n              case 30:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[12, 22]]);\n      }));\n\n      function dial(_x2, _x3) {\n        return _dial.apply(this, arguments);\n      }\n\n      return dial;\n    }()\n    /**\n     * Create a listener\n     *\n     * @param {any} options\n     * @param {Function} handler\n     * @return {listener}\n     */\n\n  }, {\n    key: \"createListener\",\n    value: function createListener(options, handler) {\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      } // Called on successful HOP and STOP requests\n\n\n      this.handler = handler;\n      return _createListener(this, options);\n    }\n    /**\n     * Filter check for all Multiaddrs that this transport can dial on\n     *\n     * @param {Array<Multiaddr>} multiaddrs\n     * @returns {Array<Multiaddr>}\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(multiaddrs) {\n      multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n      return multiaddrs.filter(function (ma) {\n        return mafmt.Circuit.matches(ma);\n      });\n    }\n  }]);\n\n  return Circuit;\n}();\n/**\n * @type {Circuit}\n */\n\n\nmodule.exports = withIs(Circuit, {\n  className: 'Circuit',\n  symbolName: '@libp2p/js-libp2p-circuit/circuit'\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/circuit/index.js"],"names":["mafmt","require","multiaddr","PeerId","withIs","CircuitPB","CircuitRelay","debug","log","error","toConnection","multicodec","relay","createListener","handleCanHop","handleHop","hop","handleStop","StreamHandler","Circuit","libp2p","upgrader","_dialer","dialer","_registrar","registrar","_connectionManager","connectionManager","_upgrader","_options","_config","_libp2p","peerId","handle","_onProtocol","bind","connection","stream","protocol","streamHandler","read","request","circuit","type","Type","CAN_HOP","HOP","STOP","remotePeer","toB58String","virtualConnection","remoteAddr","dstPeer","addrs","localAddr","srcPeer","maConn","upgradeInbound","conn","handler","ma","options","toString","split","relayAddr","destinationAddr","length","relayPeer","createFromCID","getPeerId","destinationPeer","disconnectOnFailure","relayConnection","get","connectToPeer","id","toBytes","multiaddrs","map","addr","buffer","encapsulate","upgradeOutbound","close","Array","isArray","filter","matches","module","exports","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst mafmt = require('mafmt')\nconst multiaddr = require('multiaddr')\nconst PeerId = require('peer-id')\nconst withIs = require('class-is')\nconst { CircuitRelay: CircuitPB } = require('./protocol')\n\nconst debug = require('debug')\nconst log = debug('libp2p:circuit')\nlog.error = debug('libp2p:circuit:error')\nconst toConnection = require('libp2p-utils/src/stream-to-ma-conn')\n\nconst { relay: multicodec } = require('./multicodec')\nconst createListener = require('./listener')\nconst { handleCanHop, handleHop, hop } = require('./circuit/hop')\nconst { handleStop } = require('./circuit/stop')\nconst StreamHandler = require('./circuit/stream-handler')\n\nclass Circuit {\n  /**\n   * Creates an instance of Circuit.\n   *\n   * @constructor\n   * @param {object} options\n   * @param {Libp2p} options.libp2p\n   * @param {Upgrader} options.upgrader\n   */\n  constructor ({ libp2p, upgrader }) {\n    this._dialer = libp2p.dialer\n    this._registrar = libp2p.registrar\n    this._connectionManager = libp2p.connectionManager\n    this._upgrader = upgrader\n    this._options = libp2p._config.relay\n    this._libp2p = libp2p\n    this.peerId = libp2p.peerId\n    this._registrar.handle(multicodec, this._onProtocol.bind(this))\n  }\n\n  async _onProtocol ({ connection, stream, protocol }) {\n    const streamHandler = new StreamHandler({ stream })\n    const request = await streamHandler.read()\n    const circuit = this\n    let virtualConnection\n\n    switch (request.type) {\n      case CircuitPB.Type.CAN_HOP: {\n        log('received CAN_HOP request from %s', connection.remotePeer.toB58String())\n        await handleCanHop({ circuit, connection, streamHandler })\n        break\n      }\n      case CircuitPB.Type.HOP: {\n        log('received HOP request from %s', connection.remotePeer.toB58String())\n        virtualConnection = await handleHop({\n          connection,\n          request,\n          streamHandler,\n          circuit\n        })\n        break\n      }\n      case CircuitPB.Type.STOP: {\n        log('received STOP request from %s', connection.remotePeer.toB58String())\n        virtualConnection = await handleStop({\n          connection,\n          request,\n          streamHandler,\n          circuit\n        })\n        break\n      }\n      default: {\n        log('Request of type %s not supported', request.type)\n      }\n    }\n\n    if (virtualConnection) {\n      const remoteAddr = multiaddr(request.dstPeer.addrs[0])\n      const localAddr = multiaddr(request.srcPeer.addrs[0])\n      const maConn = toConnection({\n        stream: virtualConnection,\n        remoteAddr,\n        localAddr\n      })\n      const type = CircuitPB.Type === CircuitPB.Type.HOP ? 'relay' : 'inbound'\n      log('new %s connection %s', type, maConn.remoteAddr)\n\n      const conn = await this._upgrader.upgradeInbound(maConn)\n      log('%s connection %s upgraded', type, maConn.remoteAddr)\n      this.handler && this.handler(conn)\n    }\n  }\n\n  /**\n   * Dial a peer over a relay\n   *\n   * @param {multiaddr} ma - the multiaddr of the peer to dial\n   * @param {Object} options - dial options\n   * @param {AbortSignal} [options.signal] - An optional abort signal\n   * @returns {Connection} - the connection\n   */\n  async dial (ma, options) {\n    // Check the multiaddr to see if it contains a relay and a destination peer\n    const addrs = ma.toString().split('/p2p-circuit')\n    const relayAddr = multiaddr(addrs[0])\n    const destinationAddr = multiaddr(addrs[addrs.length - 1])\n    const relayPeer = PeerId.createFromCID(relayAddr.getPeerId())\n    const destinationPeer = PeerId.createFromCID(destinationAddr.getPeerId())\n\n    let disconnectOnFailure = false\n    let relayConnection = this._connectionManager.get(relayPeer)\n    if (!relayConnection) {\n      relayConnection = await this._dialer.connectToPeer(relayAddr, options)\n      disconnectOnFailure = true\n    }\n\n    try {\n      const virtualConnection = await hop({\n        connection: relayConnection,\n        circuit: this,\n        request: {\n          type: CircuitPB.Type.HOP,\n          srcPeer: {\n            id: this.peerId.toBytes(),\n            addrs: this._libp2p.multiaddrs.map(addr => addr.buffer)\n          },\n          dstPeer: {\n            id: destinationPeer.toBytes(),\n            addrs: [multiaddr(destinationAddr).buffer]\n          }\n        }\n      })\n\n      const localAddr = relayAddr.encapsulate(`/p2p-circuit/p2p/${this.peerId.toB58String()}`)\n      const maConn = toConnection({\n        stream: virtualConnection,\n        remoteAddr: ma,\n        localAddr\n      })\n      log('new outbound connection %s', maConn.remoteAddr)\n\n      return this._upgrader.upgradeOutbound(maConn)\n    } catch (err) {\n      log.error('Circuit relay dial failed', err)\n      disconnectOnFailure && await relayConnection.close()\n      throw err\n    }\n  }\n\n  /**\n   * Create a listener\n   *\n   * @param {any} options\n   * @param {Function} handler\n   * @return {listener}\n   */\n  createListener (options, handler) {\n    if (typeof options === 'function') {\n      handler = options\n      options = {}\n    }\n\n    // Called on successful HOP and STOP requests\n    this.handler = handler\n\n    return createListener(this, options)\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can dial on\n   *\n   * @param {Array<Multiaddr>} multiaddrs\n   * @returns {Array<Multiaddr>}\n   */\n  filter (multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs]\n\n    return multiaddrs.filter((ma) => {\n      return mafmt.Circuit.matches(ma)\n    })\n  }\n}\n\n/**\n * @type {Circuit}\n */\nmodule.exports = withIs(Circuit, { className: 'Circuit', symbolName: '@libp2p/js-libp2p-circuit/circuit' })\n"]},"metadata":{},"sourceType":"script"}