{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar debug = require('debug');\n\nvar multihashing = require('multihashing-async');\n\nvar mh = multihashing.multihash;\n\nvar _require = require('interface-datastore'),\n    Key = _require.Key;\n\nvar base32 = require('base32.js');\n\nvar distance = require('xor-distance');\n\nvar pMap = require('p-map');\n\nvar _require2 = require('libp2p-record'),\n    Record = _require2.Record;\n\nvar PeerId = require('peer-id');\n\nvar errcode = require('err-code');\n\nvar _require3 = require('buffer'),\n    Buffer = _require3.Buffer;\n/**\n * Creates a DHT ID by hashing a given buffer.\n *\n * @param {Buffer} buf\n * @returns {Promise<Buffer>}\n */\n\n\nexports.convertBuffer = function (buf) {\n  return multihashing.digest(buf, 'sha2-256');\n};\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Buffer>}\n */\n\n\nexports.convertPeerId = function (peer) {\n  return multihashing.digest(peer.id, 'sha2-256');\n};\n/**\n * Convert a buffer to their SHA2-256 hash.\n *\n * @param {Buffer} buf\n * @returns {Key}\n */\n\n\nexports.bufferToKey = function (buf) {\n  return new Key('/' + exports.encodeBase32(buf), false);\n};\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Buffer}\n */\n\n\nexports.keyForPublicKey = function (peer) {\n  return Buffer.concat([Buffer.from('/pk/'), peer.id]);\n};\n\nexports.isPublicKeyKey = function (key) {\n  return key.slice(0, 4).toString() === '/pk/';\n};\n\nexports.fromPublicKeyKey = function (key) {\n  return new PeerId(key.slice(4));\n};\n/**\n * Get the current time as timestamp.\n *\n * @returns {number}\n */\n\n\nexports.now = function () {\n  return Date.now();\n};\n/**\n * Encode a given buffer into a base32 string.\n * @param {Buffer} buf\n * @returns {string}\n */\n\n\nexports.encodeBase32 = function (buf) {\n  var enc = new base32.Encoder();\n  return enc.write(buf).finalize();\n};\n/**\n * Decode a given base32 string into a buffer.\n * @param {string} raw\n * @returns {Buffer}\n */\n\n\nexports.decodeBase32 = function (raw) {\n  var dec = new base32.Decoder();\n  return Buffer.from(dec.write(raw).finalize());\n};\n/**\n * Sort peers by distance to the given `target`.\n *\n * @param {Array<PeerId>} peers\n * @param {Buffer} target\n * @returns {Array<PeerId>}\n */\n\n\nexports.sortClosestPeers = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(peers, target) {\n    var distances;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return pMap(peers, /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peer) {\n                var id;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return exports.convertPeerId(peer);\n\n                      case 2:\n                        id = _context.sent;\n                        return _context.abrupt(\"return\", {\n                          peer: peer,\n                          distance: distance(id, target)\n                        });\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 2:\n            distances = _context2.sent;\n            return _context2.abrupt(\"return\", distances.sort(exports.xorCompare).map(function (d) {\n              return d.peer;\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.\n *\n * @param {Object} a\n * @param {Object} b\n * @returns {number}\n */\n\n\nexports.xorCompare = function (a, b) {\n  return distance.compare(a.distance, b.distance);\n};\n/**\n * Computes how many results to collect on each disjoint path, rounding up.\n * This ensures that we look for at least one result per path.\n *\n * @param {number} resultsWanted\n * @param {number} numPaths - total number of paths\n * @returns {number}\n */\n\n\nexports.pathSize = function (resultsWanted, numPaths) {\n  return Math.ceil(resultsWanted / numPaths);\n};\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Buffer} key\n * @param {Buffer} value\n * @returns {Buffer}\n */\n\n\nexports.createPutRecord = function (key, value) {\n  var timeReceived = new Date();\n  var rec = new Record(key, value, timeReceived);\n  return rec.serialize();\n};\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n * @returns {debug}\n *\n * @private\n */\n\n\nexports.logger = function (id, subsystem) {\n  var name = ['libp2p', 'dht'];\n\n  if (subsystem) {\n    name.push(subsystem);\n  }\n\n  if (id) {\n    name.push(\"\".concat(id.toB58String().slice(0, 8)));\n  } // Add a formatter for converting to a base58 string\n\n\n  debug.formatters.b = function (v) {\n    return mh.toB58String(v);\n  };\n\n  var logger = debug(name.join(':'));\n  logger.error = debug(name.concat(['error']).join(':'));\n  return logger;\n};\n\nexports.TimeoutError = /*#__PURE__*/function (_Error) {\n  _inherits(TimeoutError, _Error);\n\n  var _super = _createSuper(TimeoutError);\n\n  function TimeoutError() {\n    _classCallCheck(this, TimeoutError);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TimeoutError, [{\n    key: \"code\",\n    get: function get() {\n      return 'ETIMEDOUT';\n    }\n  }]);\n\n  return TimeoutError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Creates an async function that calls the given `asyncFn` and Errors\n * if it does not resolve within `time` ms\n *\n * @param {Function} [asyncFn]\n * @param {Number} [time]\n * @returns {Function}\n *\n * @private\n */\n\n\nexports.withTimeout = function (asyncFn, time) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", Promise.race([asyncFn.apply(void 0, _args3), new Promise(function (resolve, reject) {\n              setTimeout(function () {\n                reject(errcode(new Error('Async function did not complete before timeout'), 'ETIMEDOUT'));\n              }, time);\n            })]));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n};\n/**\n * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.\n * Returns a promise that resolves when all items of the `asyncIterator` have been passed\n * through `asyncFn`.\n *\n * @param {AsyncIterable} [asyncIterator]\n * @param {Function} [asyncFn]\n * @returns {Array}\n *\n * @private\n */\n\n\nexports.mapParallel = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(asyncIterator, asyncFn) {\n    var tasks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, item;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            tasks = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context4.prev = 3;\n            _iterator = _asyncIterator(asyncIterator);\n\n          case 5:\n            _context4.next = 7;\n            return _iterator.next();\n\n          case 7:\n            _step = _context4.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context4.next = 11;\n            return _step.value;\n\n          case 11:\n            _value = _context4.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context4.next = 18;\n              break;\n            }\n\n            item = _value;\n            tasks.push(asyncFn(item));\n\n          case 15:\n            _iteratorNormalCompletion = true;\n            _context4.next = 5;\n            break;\n\n          case 18:\n            _context4.next = 24;\n            break;\n\n          case 20:\n            _context4.prev = 20;\n            _context4.t0 = _context4[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context4.t0;\n\n          case 24:\n            _context4.prev = 24;\n            _context4.prev = 25;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context4.next = 29;\n              break;\n            }\n\n            _context4.next = 29;\n            return _iterator.return();\n\n          case 29:\n            _context4.prev = 29;\n\n            if (!_didIteratorError) {\n              _context4.next = 32;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 32:\n            return _context4.finish(29);\n\n          case 33:\n            return _context4.finish(24);\n\n          case 34:\n            return _context4.abrupt(\"return\", Promise.all(tasks));\n\n          case 35:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[3, 20, 24, 34], [25,, 29, 33]]);\n  }));\n\n  return function (_x4, _x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/utils.js"],"names":["debug","require","multihashing","mh","multihash","Key","base32","distance","pMap","Record","PeerId","errcode","Buffer","exports","convertBuffer","buf","digest","convertPeerId","peer","id","bufferToKey","encodeBase32","keyForPublicKey","concat","from","isPublicKeyKey","key","slice","toString","fromPublicKeyKey","now","Date","enc","Encoder","write","finalize","decodeBase32","raw","dec","Decoder","sortClosestPeers","peers","target","distances","sort","xorCompare","map","d","a","b","compare","pathSize","resultsWanted","numPaths","Math","ceil","createPutRecord","value","timeReceived","rec","serialize","logger","subsystem","name","push","toB58String","formatters","v","join","error","TimeoutError","Error","withTimeout","asyncFn","time","Promise","race","resolve","reject","setTimeout","mapParallel","asyncIterator","tasks","item","all"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst multihashing = require('multihashing-async')\nconst mh = multihashing.multihash\nconst { Key } = require('interface-datastore')\nconst base32 = require('base32.js')\nconst distance = require('xor-distance')\nconst pMap = require('p-map')\nconst { Record } = require('libp2p-record')\nconst PeerId = require('peer-id')\nconst errcode = require('err-code')\nconst { Buffer } = require('buffer')\n\n/**\n * Creates a DHT ID by hashing a given buffer.\n *\n * @param {Buffer} buf\n * @returns {Promise<Buffer>}\n */\nexports.convertBuffer = (buf) => {\n  return multihashing.digest(buf, 'sha2-256')\n}\n\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Buffer>}\n */\nexports.convertPeerId = (peer) => {\n  return multihashing.digest(peer.id, 'sha2-256')\n}\n\n/**\n * Convert a buffer to their SHA2-256 hash.\n *\n * @param {Buffer} buf\n * @returns {Key}\n */\nexports.bufferToKey = (buf) => {\n  return new Key('/' + exports.encodeBase32(buf), false)\n}\n\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Buffer}\n */\nexports.keyForPublicKey = (peer) => {\n  return Buffer.concat([\n    Buffer.from('/pk/'),\n    peer.id\n  ])\n}\n\nexports.isPublicKeyKey = (key) => {\n  return key.slice(0, 4).toString() === '/pk/'\n}\n\nexports.fromPublicKeyKey = (key) => {\n  return new PeerId(key.slice(4))\n}\n\n/**\n * Get the current time as timestamp.\n *\n * @returns {number}\n */\nexports.now = () => {\n  return Date.now()\n}\n\n/**\n * Encode a given buffer into a base32 string.\n * @param {Buffer} buf\n * @returns {string}\n */\nexports.encodeBase32 = (buf) => {\n  const enc = new base32.Encoder()\n  return enc.write(buf).finalize()\n}\n\n/**\n * Decode a given base32 string into a buffer.\n * @param {string} raw\n * @returns {Buffer}\n */\nexports.decodeBase32 = (raw) => {\n  const dec = new base32.Decoder()\n  return Buffer.from(dec.write(raw).finalize())\n}\n\n/**\n * Sort peers by distance to the given `target`.\n *\n * @param {Array<PeerId>} peers\n * @param {Buffer} target\n * @returns {Array<PeerId>}\n */\nexports.sortClosestPeers = async (peers, target) => {\n  const distances = await pMap(peers, async (peer) => {\n    const id = await exports.convertPeerId(peer)\n\n    return {\n      peer: peer,\n      distance: distance(id, target)\n    }\n  })\n\n  return distances.sort(exports.xorCompare).map((d) => d.peer)\n}\n\n/**\n * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.\n *\n * @param {Object} a\n * @param {Object} b\n * @returns {number}\n */\nexports.xorCompare = (a, b) => {\n  return distance.compare(a.distance, b.distance)\n}\n\n/**\n * Computes how many results to collect on each disjoint path, rounding up.\n * This ensures that we look for at least one result per path.\n *\n * @param {number} resultsWanted\n * @param {number} numPaths - total number of paths\n * @returns {number}\n */\nexports.pathSize = (resultsWanted, numPaths) => {\n  return Math.ceil(resultsWanted / numPaths)\n}\n\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Buffer} key\n * @param {Buffer} value\n * @returns {Buffer}\n */\nexports.createPutRecord = (key, value) => {\n  const timeReceived = new Date()\n  const rec = new Record(key, value, timeReceived)\n\n  return rec.serialize()\n}\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n * @returns {debug}\n *\n * @private\n */\nexports.logger = (id, subsystem) => {\n  const name = ['libp2p', 'dht']\n  if (subsystem) {\n    name.push(subsystem)\n  }\n  if (id) {\n    name.push(`${id.toB58String().slice(0, 8)}`)\n  }\n\n  // Add a formatter for converting to a base58 string\n  debug.formatters.b = (v) => {\n    return mh.toB58String(v)\n  }\n\n  const logger = debug(name.join(':'))\n  logger.error = debug(name.concat(['error']).join(':'))\n\n  return logger\n}\n\nexports.TimeoutError = class TimeoutError extends Error {\n  get code () {\n    return 'ETIMEDOUT'\n  }\n}\n\n/**\n * Creates an async function that calls the given `asyncFn` and Errors\n * if it does not resolve within `time` ms\n *\n * @param {Function} [asyncFn]\n * @param {Number} [time]\n * @returns {Function}\n *\n * @private\n */\nexports.withTimeout = (asyncFn, time) => {\n  return async (...args) => { // eslint-disable-line require-await\n    return Promise.race([\n      asyncFn(...args),\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          reject(errcode(new Error('Async function did not complete before timeout'), 'ETIMEDOUT'))\n        }, time)\n      })\n    ])\n  }\n}\n\n/**\n * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.\n * Returns a promise that resolves when all items of the `asyncIterator` have been passed\n * through `asyncFn`.\n *\n * @param {AsyncIterable} [asyncIterator]\n * @param {Function} [asyncFn]\n * @returns {Array}\n *\n * @private\n */\nexports.mapParallel = async function (asyncIterator, asyncFn) {\n  const tasks = []\n  for await (const item of asyncIterator) {\n    tasks.push(asyncFn(item))\n  }\n  return Promise.all(tasks)\n}\n"]},"metadata":{},"sourceType":"script"}