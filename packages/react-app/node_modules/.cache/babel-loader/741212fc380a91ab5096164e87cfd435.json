{"ast":null,"code":"import { Buffer } from \"buffer\";\nimport { generateKeypair, isValidPublicKey } from \"../utils\";\nimport { AbstractHandshake } from \"./abstract-handshake\";\nexport class IK extends AbstractHandshake {\n  initSession(initiator, prologue, s, rs) {\n    const psk = this.createEmptyKey();\n    let hs;\n\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk);\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk);\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0\n    };\n  }\n\n  sendMessage(session, message) {\n    let messageBuffer;\n\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message);\n    } else if (session.mc === 1) {\n      const {\n        messageBuffer: mb,\n        h,\n        cs1,\n        cs2\n      } = this.writeMessageB(session.hs, message);\n      messageBuffer = mb;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    } else if (session.mc > 1) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error(\"CS1 (cipher state) is not defined\");\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message);\n      } else {\n        if (!session.cs2) {\n          throw new Error(\"CS2 (cipher state) is not defined\");\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message);\n      }\n    } else {\n      throw new Error(\"Session invalid.\");\n    }\n\n    session.mc++;\n    return messageBuffer;\n  }\n\n  recvMessage(session, message) {\n    let plaintext = Buffer.alloc(0),\n        valid = false;\n\n    if (session.mc === 0) {\n      ({\n        plaintext,\n        valid\n      } = this.readMessageA(session.hs, message));\n    }\n\n    if (session.mc === 1) {\n      const {\n        plaintext: pt,\n        valid: v,\n        h,\n        cs1,\n        cs2\n      } = this.readMessageB(session.hs, message);\n      plaintext = pt;\n      valid = v;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    }\n\n    session.mc++;\n    return {\n      plaintext,\n      valid\n    };\n  }\n\n  writeMessageA(hs, payload) {\n    hs.e = generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const spk = Buffer.from(hs.s.publicKey);\n    const ns = this.encryptAndHash(hs.ss, spk);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    return {\n      ne,\n      ns,\n      ciphertext\n    };\n  }\n\n  writeMessageB(hs, payload) {\n    hs.e = generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    const ns = this.createEmptyKey();\n    const messageBuffer = {\n      ne,\n      ns,\n      ciphertext\n    };\n    const {\n      cs1,\n      cs2\n    } = this.split(hs.ss);\n    return {\n      messageBuffer,\n      cs1,\n      cs2,\n      h: hs.ss.h\n    };\n  }\n\n  readMessageA(hs, message) {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {\n      plaintext: ns,\n      valid: valid1\n    } = this.decryptAndHash(hs.ss, message.ns);\n\n    if (valid1 && ns.length === 32 && isValidPublicKey(ns)) {\n      hs.rs = ns;\n    }\n\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const {\n      plaintext,\n      valid: valid2\n    } = this.decryptAndHash(hs.ss, message.ciphertext);\n    return {\n      plaintext,\n      valid: valid1 && valid2\n    };\n  }\n\n  readMessageB(hs, message) {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n\n    if (!hs.e) {\n      throw new Error(\"Handshake state should contain ephemeral key by now.\");\n    }\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {\n      plaintext,\n      valid\n    } = this.decryptAndHash(hs.ss, message.ciphertext);\n    const {\n      cs1,\n      cs2\n    } = this.split(hs.ss);\n    return {\n      h: hs.ss.h,\n      valid,\n      plaintext,\n      cs1,\n      cs2\n    };\n  }\n\n  initializeInitiator(prologue, s, rs, psk) {\n    const name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, rs);\n    const re = Buffer.alloc(32);\n    return {\n      ss,\n      s,\n      rs,\n      re,\n      psk\n    };\n  }\n\n  initializeResponder(prologue, s, rs, psk) {\n    const name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, s.publicKey);\n    const re = Buffer.alloc(32);\n    return {\n      ss,\n      s,\n      rs,\n      re,\n      psk\n    };\n  }\n\n}","map":{"version":3,"sources":["../../src/handshakes/ik.ts"],"names":["initSession","psk","hs","i","mc","sendMessage","session","messageBuffer","cs2","recvMessage","plaintext","Buffer","valid","writeMessageA","generateKeypair","ne","spk","ns","ciphertext","writeMessageB","h","readMessageA","isValidPublicKey","message","valid1","valid2","readMessageB","initializeInitiator","name","ss","re","initializeResponder","s"],"mappings":"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","sourcesContent":["import {Buffer} from \"buffer\";\nimport {CipherState, HandshakeState, MessageBuffer, NoiseSession} from \"../@types/handshake\";\nimport {bytes, bytes32} from \"../@types/basic\";\nimport {generateKeypair, isValidPublicKey} from \"../utils\";\nimport {AbstractHandshake} from \"./abstract-handshake\";\nimport {KeyPair} from \"../@types/libp2p\";\n\n\nexport class IK extends AbstractHandshake {\n  public initSession(initiator: boolean, prologue: bytes32, s: KeyPair, rs: bytes32): NoiseSession {\n    const psk = this.createEmptyKey();\n\n    let hs;\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk);\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk);\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0,\n    };\n  }\n\n  public sendMessage(session: NoiseSession, message: bytes): MessageBuffer {\n    let messageBuffer: MessageBuffer;\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message);\n    } else if (session.mc === 1) {\n      const { messageBuffer: mb, h, cs1, cs2 } = this.writeMessageB(session.hs, message);\n      messageBuffer = mb;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    } else if (session.mc > 1) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error(\"CS1 (cipher state) is not defined\")\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message);\n      } else {\n        if (!session.cs2) {\n          throw new Error(\"CS2 (cipher state) is not defined\")\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message);\n      }\n    } else {\n      throw new Error(\"Session invalid.\")\n    }\n\n    session.mc++;\n    return messageBuffer;\n  }\n\n  public recvMessage(session: NoiseSession, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    let plaintext = Buffer.alloc(0), valid = false;\n    if (session.mc === 0) {\n      ({plaintext, valid} = this.readMessageA(session.hs, message));\n    }\n    if (session.mc === 1) {\n      const { plaintext: pt, valid: v, h, cs1, cs2 } = this.readMessageB(session.hs, message);\n      plaintext = pt;\n      valid = v;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    }\n    session.mc++;\n    return {plaintext, valid};\n  }\n\n  private writeMessageA(hs: HandshakeState, payload: bytes): MessageBuffer {\n    hs.e = generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const spk = Buffer.from(hs.s.publicKey);\n    const ns = this.encryptAndHash(hs.ss, spk);\n\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n\n    return { ne, ns, ciphertext };\n  }\n\n  private writeMessageB(hs: HandshakeState, payload: bytes) {\n    hs.e = generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    const ns = this.createEmptyKey();\n    const messageBuffer: MessageBuffer = {ne, ns, ciphertext};\n    const { cs1, cs2 } = this.split(hs.ss);\n\n    return { messageBuffer, cs1, cs2, h: hs.ss.h }\n  }\n\n  private readMessageA(hs: HandshakeState, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {plaintext: ns, valid: valid1} = this.decryptAndHash(hs.ss, message.ns);\n    if (valid1 && ns.length === 32 && isValidPublicKey(ns)) {\n      hs.rs = ns;\n    }\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const {plaintext, valid: valid2} = this.decryptAndHash(hs.ss, message.ciphertext);\n    return {plaintext, valid: (valid1 && valid2)};\n  }\n\n  private readMessageB(hs: HandshakeState, message: MessageBuffer): {h: bytes; plaintext: bytes; valid: boolean; cs1: CipherState; cs2: CipherState} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    if (!hs.e) {\n      throw new Error(\"Handshake state should contain ephemeral key by now.\");\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {plaintext, valid} = this.decryptAndHash(hs.ss, message.ciphertext);\n    const { cs1, cs2 } = this.split(hs.ss);\n\n    return { h: hs.ss.h, valid, plaintext, cs1, cs2 };\n  }\n\n  private initializeInitiator(prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, rs);\n    const re = Buffer.alloc(32);\n\n    return { ss, s, rs, re, psk };\n  }\n\n  private initializeResponder(prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = \"Noise_IK_25519_ChaChaPoly_SHA256\";\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, s.publicKey);\n    const re = Buffer.alloc(32);\n\n    return { ss, s, rs, re, psk };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}