{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar CID = require('cids');\n\nvar withIs = require('class-is');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer; // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nvar DAGLink = /*#__PURE__*/function () {\n  function DAGLink(name, size, cid) {\n    _classCallCheck(this, DAGLink);\n\n    if (!cid) {\n      throw new Error('A link requires a cid to point to');\n    } // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n\n    this._name = name || '';\n    this._nameBuf = null;\n    this._size = size;\n    this._cid = new CID(cid);\n  }\n\n  _createClass(DAGLink, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"DAGLink <\".concat(this._cid.toBaseEncodedString(), \" - name: \\\"\").concat(this.Name, \"\\\", size: \").concat(this.Tsize, \">\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this._json) {\n        this._json = Object.freeze({\n          name: this.Name,\n          size: this.Tsize,\n          cid: this.Hash.toBaseEncodedString()\n        });\n      }\n\n      return Object.assign({}, this._json);\n    }\n  }, {\n    key: \"Name\",\n    get: function get() {\n      return this._name;\n    } // Memoize the Buffer representation of name\n    // We need this to sort the links, otherwise\n    // we will reallocate new buffers every time\n    ,\n    set: function set(name) {\n      throw new Error(\"Can't set property: 'name' is immutable\");\n    }\n  }, {\n    key: \"nameAsBuffer\",\n    get: function get() {\n      if (this._nameBuf !== null) {\n        return this._nameBuf;\n      }\n\n      this._nameBuf = Buffer.from(this._name);\n      return this._nameBuf;\n    }\n  }, {\n    key: \"Tsize\",\n    get: function get() {\n      return this._size;\n    },\n    set: function set(size) {\n      throw new Error(\"Can't set property: 'size' is immutable\");\n    }\n  }, {\n    key: \"Hash\",\n    get: function get() {\n      return this._cid;\n    },\n    set: function set(cid) {\n      throw new Error(\"Can't set property: 'cid' is immutable\");\n    }\n  }]);\n\n  return DAGLink;\n}();\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipld-dag-pb/src/dag-link/dagLink.js"],"names":["CID","require","withIs","Buffer","DAGLink","name","size","cid","Error","_name","_nameBuf","_size","_cid","toBaseEncodedString","Name","Tsize","_json","Object","freeze","Hash","assign","from","exports","module","className","symbolName"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;eACmBA,OAAO,CAAC,QAAD,C;IAAlBE,M,YAAAA,M,EAER;;;IACMC,O;AACJ,mBAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8B;AAAA;;AAC5B,QAAI,CAACA,GAAL,EAAU;AACR,YAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD,KAH2B,CAK5B;AACA;AACA;;;AAEA,SAAKC,KAAL,GAAaJ,IAAI,IAAI,EAArB;AACA,SAAKK,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL,GAAaL,IAAb;AACA,SAAKM,IAAL,GAAY,IAAIZ,GAAJ,CAAQO,GAAR,CAAZ;AACD;;;;+BAEW;AACV,gCAAmB,KAAKK,IAAL,CAAUC,mBAAV,EAAnB,wBAA+D,KAAKC,IAApE,uBAAoF,KAAKC,KAAzF;AACD;;;6BAES;AACR,UAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,aAAKA,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc;AACzBb,UAAAA,IAAI,EAAE,KAAKS,IADc;AAEzBR,UAAAA,IAAI,EAAE,KAAKS,KAFc;AAGzBR,UAAAA,GAAG,EAAE,KAAKY,IAAL,CAAUN,mBAAV;AAHoB,SAAd,CAAb;AAKD;;AAED,aAAOI,MAAM,CAACG,MAAP,CAAc,EAAd,EAAkB,KAAKJ,KAAvB,CAAP;AACD;;;wBAEW;AACV,aAAO,KAAKP,KAAZ;AACD,K,CAED;AACA;AACA;;sBAUUJ,I,EAAM;AACd,YAAM,IAAIG,KAAJ,CAAU,yCAAV,CAAN;AACD;;;wBAXmB;AAClB,UAAI,KAAKE,QAAL,KAAkB,IAAtB,EAA4B;AAC1B,eAAO,KAAKA,QAAZ;AACD;;AAED,WAAKA,QAAL,GAAgBP,MAAM,CAACkB,IAAP,CAAY,KAAKZ,KAAjB,CAAhB;AACA,aAAO,KAAKC,QAAZ;AACD;;;wBAMY;AACX,aAAO,KAAKC,KAAZ;AACD,K;sBAEUL,I,EAAM;AACf,YAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;;wBAEW;AACV,aAAO,KAAKI,IAAZ;AACD,K;sBAESL,G,EAAK;AACb,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;;;;;AAGHc,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBpB,MAAM,CAACE,OAAD,EAAU;AAAEoB,EAAAA,SAAS,EAAE,SAAb;AAAwBC,EAAAA,UAAU,EAAE;AAApC,CAAV,CAAjC","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst withIs = require('class-is')\nconst { Buffer } = require('buffer')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, cid) {\n    if (!cid) {\n      throw new Error('A link requires a cid to point to')\n    }\n\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || ''\n    this._nameBuf = null\n    this._size = size\n    this._cid = new CID(cid)\n  }\n\n  toString () {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  get Name () {\n    return this._name\n  }\n\n  // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n  get nameAsBuffer () {\n    if (this._nameBuf !== null) {\n      return this._nameBuf\n    }\n\n    this._nameBuf = Buffer.from(this._name)\n    return this._nameBuf\n  }\n\n  set Name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get Tsize () {\n    return this._size\n  }\n\n  set Tsize (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get Hash () {\n    return this._cid\n  }\n\n  set Hash (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\n"]},"metadata":{},"sourceType":"script"}