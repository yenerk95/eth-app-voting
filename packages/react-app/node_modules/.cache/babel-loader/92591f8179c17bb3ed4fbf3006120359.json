{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst Key = require('interface-datastore').Key;\n\nconst debug = require('debug');\n\nconst log = debug('repo:version');\nconst versionKey = new Key('version');\n\nmodule.exports = store => {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     * @returns {Promise<bool>}\n     */\n    async exists() {\n      // eslint-disable-line require-await\n      return store.has(versionKey);\n    },\n\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<Integer>}\n     */\n    async get() {\n      const buf = await store.get(versionKey);\n      return parseInt(buf.toString().trim(), 10);\n    },\n\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    async set(version) {\n      // eslint-disable-line require-await\n      return store.put(versionKey, Buffer.from(String(version)));\n    },\n\n    /**\n     * Check the current version, and returns true if versions matches\n     * @param {number} expected\n     * @returns {boolean}\n     */\n    async check(expected) {\n      const version = await this.get();\n      log('comparing version: %s and %s', version, expected); // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n\n      const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;\n      return version === expected || compatibleVersion;\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo/src/version.js"],"names":["Buffer","require","Key","debug","log","versionKey","module","exports","store","exists","has","get","buf","parseInt","toString","trim","set","version","put","from","String","check","expected","compatibleVersion"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,qBAAD,CAAP,CAA+BC,GAA3C;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,GAAG,GAAGD,KAAK,CAAC,cAAD,CAAjB;AAEA,MAAME,UAAU,GAAG,IAAIH,GAAJ,CAAQ,SAAR,CAAnB;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,KAAD,IAAW;AAC1B,SAAO;AACL;;;;;AAKA,UAAMC,MAAN,GAAgB;AAAE;AAChB,aAAOD,KAAK,CAACE,GAAN,CAAUL,UAAV,CAAP;AACD,KARI;;AASL;;;;;AAKA,UAAMM,GAAN,GAAa;AACX,YAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACG,GAAN,CAAUN,UAAV,CAAlB;AACA,aAAOQ,QAAQ,CAACD,GAAG,CAACE,QAAJ,GAAeC,IAAf,EAAD,EAAwB,EAAxB,CAAf;AACD,KAjBI;;AAkBL;;;;;;AAMA,UAAMC,GAAN,CAAWC,OAAX,EAAoB;AAAE;AACpB,aAAOT,KAAK,CAACU,GAAN,CAAUb,UAAV,EAAsBL,MAAM,CAACmB,IAAP,CAAYC,MAAM,CAACH,OAAD,CAAlB,CAAtB,CAAP;AACD,KA1BI;;AA2BL;;;;;AAKA,UAAMI,KAAN,CAAaC,QAAb,EAAuB;AACrB,YAAML,OAAO,GAAG,MAAM,KAAKN,GAAL,EAAtB;AACAP,MAAAA,GAAG,CAAC,8BAAD,EAAiCa,OAAjC,EAA0CK,QAA1C,CAAH,CAFqB,CAGrB;AACA;;AACA,YAAMC,iBAAiB,GAAIN,OAAO,KAAK,CAAZ,IAAiBK,QAAQ,KAAK,CAA/B,IAAsCA,QAAQ,KAAK,CAAb,IAAkBL,OAAO,KAAK,CAA9F;AAEA,aAAOA,OAAO,KAAKK,QAAZ,IAAwBC,iBAA/B;AACD;;AAxCI,GAAP;AA0CD,CA3CD","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst Key = require('interface-datastore').Key\nconst debug = require('debug')\nconst log = debug('repo:version')\n\nconst versionKey = new Key('version')\n\nmodule.exports = (store) => {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     * @returns {Promise<bool>}\n     */\n    async exists () { // eslint-disable-line require-await\n      return store.has(versionKey)\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<Integer>}\n     */\n    async get () {\n      const buf = await store.get(versionKey)\n      return parseInt(buf.toString().trim(), 10)\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    async set (version) { // eslint-disable-line require-await\n      return store.put(versionKey, Buffer.from(String(version)))\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     * @param {number} expected\n     * @returns {boolean}\n     */\n    async check (expected) {\n      const version = await this.get()\n      log('comparing version: %s and %s', version, expected)\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n      return version === expected || compatibleVersion\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}