{"ast":null,"code":"'use strict';\n\nconst multihashing = require('multihashing-async');\n\nconst errcode = require('err-code');\n\nconst {\n  Buffer\n} = require('buffer');\n/**\n * Validator for publick key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Buffer} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Buffer} publicKey - The public key to validate against (protobuf encoded).\n * @returns {Promise}\n */\n\n\nconst validatePublicKeyRecord = async (key, publicKey) => {\n  if (!Buffer.isBuffer(key)) {\n    throw errcode(new Error('\"key\" must be a Buffer'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n  }\n\n  if (key.length < 5) {\n    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n  }\n\n  const prefix = key.slice(0, 4).toString();\n\n  if (prefix !== '/pk/') {\n    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n  }\n\n  const keyhash = key.slice(4);\n  const publicKeyHash = await multihashing(publicKey, 'sha2-256');\n\n  if (!keyhash.equals(publicKeyHash)) {\n    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH');\n  }\n};\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-record/src/validators/public-key.js"],"names":["multihashing","require","errcode","Buffer","validatePublicKeyRecord","key","publicKey","isBuffer","Error","length","prefix","slice","toString","keyhash","publicKeyHash","equals","module","exports","func","sign"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,QAAD,CAA1B;AACA;;;;;;;;;;;;AAUA,MAAMG,uBAAuB,GAAG,OAAOC,GAAP,EAAYC,SAAZ,KAA0B;AACxD,MAAI,CAACH,MAAM,CAACI,QAAP,CAAgBF,GAAhB,CAAL,EAA2B;AACzB,UAAMH,OAAO,CAAC,IAAIM,KAAJ,CAAU,wBAAV,CAAD,EAAsC,mCAAtC,CAAb;AACD;;AAED,MAAIH,GAAG,CAACI,MAAJ,GAAa,CAAjB,EAAoB;AAClB,UAAMP,OAAO,CAAC,IAAIM,KAAJ,CAAU,2BAAV,CAAD,EAAyC,kCAAzC,CAAb;AACD;;AAED,QAAME,MAAM,GAAGL,GAAG,CAACM,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgBC,QAAhB,EAAf;;AAEA,MAAIF,MAAM,KAAK,MAAf,EAAuB;AACrB,UAAMR,OAAO,CAAC,IAAIM,KAAJ,CAAU,gCAAV,CAAD,EAA8C,mCAA9C,CAAb;AACD;;AAED,QAAMK,OAAO,GAAGR,GAAG,CAACM,KAAJ,CAAU,CAAV,CAAhB;AAEA,QAAMG,aAAa,GAAG,MAAMd,YAAY,CAACM,SAAD,EAAY,UAAZ,CAAxC;;AAEA,MAAI,CAACO,OAAO,CAACE,MAAR,CAAeD,aAAf,CAAL,EAAoC;AAClC,UAAMZ,OAAO,CAAC,IAAIM,KAAJ,CAAU,yCAAV,CAAD,EAAuD,kCAAvD,CAAb;AACD;AACF,CAtBD;;AAwBAQ,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAEd,uBADS;AAEfe,EAAAA,IAAI,EAAE;AAFS,CAAjB","sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst errcode = require('err-code')\nconst { Buffer } = require('buffer')\n/**\n * Validator for publick key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Buffer} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Buffer} publicKey - The public key to validate against (protobuf encoded).\n * @returns {Promise}\n */\nconst validatePublicKeyRecord = async (key, publicKey) => {\n  if (!Buffer.isBuffer(key)) {\n    throw errcode(new Error('\"key\" must be a Buffer'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER')\n  }\n\n  if (key.length < 5) {\n    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT')\n  }\n\n  const prefix = key.slice(0, 4).toString()\n\n  if (prefix !== '/pk/') {\n    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX')\n  }\n\n  const keyhash = key.slice(4)\n\n  const publicKeyHash = await multihashing(publicKey, 'sha2-256')\n\n  if (!keyhash.equals(publicKeyHash)) {\n    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH')\n  }\n}\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n}\n"]},"metadata":{},"sourceType":"script"}