{"ast":null,"code":"'use strict';\n\nconst PeerDistanceList = require('../peer-list/peer-distance-list');\n\nconst EventEmitter = require('events');\n\nconst Path = require('./path');\n\nconst WorkerQueue = require('./workerQueue');\n\nconst utils = require('../utils');\n/**\n * Manages a single run of the query.\n */\n\n\nclass Run extends EventEmitter {\n  /**\n   * Creates a Run.\n   *\n   * @param {Query} query\n   */\n  constructor(query) {\n    super();\n    this.query = query;\n    this.running = false;\n    this.workers = []; // The peers that have been queried (including error responses)\n\n    this.peersSeen = new Set(); // The errors received when querying peers\n\n    this.errors = []; // The closest K peers that have been queried successfully\n    // (this member is initialized when the worker queues start)\n\n    this.peersQueried = null;\n  }\n  /**\n   * Stop all the workers\n   */\n\n\n  stop() {\n    if (!this.running) {\n      return;\n    }\n\n    this.running = false;\n\n    for (const worker of this.workers) {\n      worker.stop();\n    }\n  }\n  /**\n   * Execute the run with the given initial set of peers.\n   *\n   * @param {Array<PeerId>} peers\n   * @returns {Promise}\n   */\n\n\n  async execute(peers) {\n    const paths = []; // array of states per disjoint path\n    // Create disjoint paths\n\n    const numPaths = Math.min(this.query.dht.disjointPaths, peers.length);\n\n    for (let i = 0; i < numPaths; i++) {\n      paths.push(new Path(this, this.query.makePath(i, numPaths)));\n    } // Assign peers to paths round-robin style\n\n\n    peers.forEach((peer, i) => {\n      paths[i % numPaths].addInitialPeer(peer);\n    }); // Execute the query along each disjoint path\n\n    await this.executePaths(paths);\n    const res = {\n      // The closest K peers we were able to query successfully\n      finalSet: new Set(this.peersQueried.peers),\n      paths: []\n    }; // Collect the results from each completed path\n\n    for (const path of paths) {\n      if (path.res && (path.res.pathComplete || path.res.queryComplete)) {\n        path.res.success = true;\n        res.paths.push(path.res);\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Execute all paths through the DHT.\n   *\n   * @param {Array<Path>} paths\n   * @returns {Promise<void>}\n   */\n\n\n  async executePaths(paths) {\n    this.running = true;\n    this.emit('start');\n\n    try {\n      await Promise.all(paths.map(path => path.execute()));\n    } finally {\n      // Ensure all workers are stopped\n      this.stop(); // Completed the Run\n\n      this.emit('complete');\n    } // If all queries errored out, something is seriously wrong, so callback\n    // with an error\n\n\n    if (this.errors.length === this.peersSeen.size) {\n      throw this.errors[0];\n    }\n  }\n  /**\n   * Initialize the list of queried peers, then start a worker queue for the\n   * given path.\n   *\n   * @param {Path} path\n   * @returns {Promise<void>}\n   */\n\n\n  async workerQueue(path) {\n    await this.init();\n    await this.startWorker(path);\n  }\n  /**\n   * Create and start a worker queue for a particular path.\n   *\n   * @param {Path} path\n   * @returns {Promise<void>}\n   */\n\n\n  async startWorker(path) {\n    const worker = new WorkerQueue(this.query.dht, this, path, this.query._log);\n    this.workers.push(worker);\n    await worker.execute();\n  }\n  /**\n   * Initialize the list of closest peers we've queried - this is shared by all\n   * paths in the run.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  async init() {\n    if (this.peersQueried) {\n      return;\n    } // We only want to initialize the PeerDistanceList once for the run\n\n\n    if (this.peersQueriedPromise) {\n      await this.peersQueriedPromise;\n      return;\n    } // This promise is temporarily stored so that others may await its completion\n\n\n    this.peersQueriedPromise = (async () => {\n      const dhtKey = await utils.convertBuffer(this.query.key);\n      this.peersQueried = new PeerDistanceList(dhtKey, this.query.dht.kBucketSize);\n    })(); // After PeerDistanceList is initialized, clean up\n\n\n    await this.peersQueriedPromise;\n    delete this.peersQueriedPromise;\n  }\n  /**\n   * If we've queried K peers, and the remaining peers in the given `worker`'s queue\n   * are all further from the key than the peers we've already queried, then we should\n   * stop querying on that `worker`.\n   *\n   * @param {WorkerQueue} worker\n   * @returns {Promise<Boolean>}\n   */\n\n\n  async continueQuerying(worker) {\n    // If we haven't queried K peers yet, keep going\n    if (this.peersQueried.length < this.peersQueried.capacity) {\n      return true;\n    } // Get all the peers that are currently being queried.\n    // Note that this function gets called right after a peer has been popped\n    // off the head of the closest peers queue so it will include that peer.\n\n\n    const running = worker.queue.workersList().map(i => i.data); // Check if any of the peers that are currently being queried are closer\n    // to the key than the peers we've already queried\n\n    const someCloser = await this.peersQueried.anyCloser(running); // Some are closer, the worker should keep going\n\n    if (someCloser) {\n      return true;\n    } // None are closer, the worker can stop\n\n\n    return false;\n  }\n\n}\n\nmodule.exports = Run;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/query/run.js"],"names":["PeerDistanceList","require","EventEmitter","Path","WorkerQueue","utils","Run","constructor","query","running","workers","peersSeen","Set","errors","peersQueried","stop","worker","execute","peers","paths","numPaths","Math","min","dht","disjointPaths","length","i","push","makePath","forEach","peer","addInitialPeer","executePaths","res","finalSet","path","pathComplete","queryComplete","success","emit","Promise","all","map","size","workerQueue","init","startWorker","_log","peersQueriedPromise","dhtKey","convertBuffer","key","kBucketSize","continueQuerying","capacity","queue","workersList","data","someCloser","anyCloser","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst PeerDistanceList = require('../peer-list/peer-distance-list')\nconst EventEmitter = require('events')\n\nconst Path = require('./path')\nconst WorkerQueue = require('./workerQueue')\nconst utils = require('../utils')\n\n/**\n * Manages a single run of the query.\n */\nclass Run extends EventEmitter {\n  /**\n   * Creates a Run.\n   *\n   * @param {Query} query\n   */\n  constructor (query) {\n    super()\n\n    this.query = query\n\n    this.running = false\n    this.workers = []\n\n    // The peers that have been queried (including error responses)\n    this.peersSeen = new Set()\n    // The errors received when querying peers\n    this.errors = []\n    // The closest K peers that have been queried successfully\n    // (this member is initialized when the worker queues start)\n    this.peersQueried = null\n  }\n\n  /**\n   * Stop all the workers\n   */\n  stop () {\n    if (!this.running) {\n      return\n    }\n\n    this.running = false\n    for (const worker of this.workers) {\n      worker.stop()\n    }\n  }\n\n  /**\n   * Execute the run with the given initial set of peers.\n   *\n   * @param {Array<PeerId>} peers\n   * @returns {Promise}\n   */\n\n  async execute (peers) {\n    const paths = [] // array of states per disjoint path\n\n    // Create disjoint paths\n    const numPaths = Math.min(this.query.dht.disjointPaths, peers.length)\n    for (let i = 0; i < numPaths; i++) {\n      paths.push(new Path(this, this.query.makePath(i, numPaths)))\n    }\n\n    // Assign peers to paths round-robin style\n    peers.forEach((peer, i) => {\n      paths[i % numPaths].addInitialPeer(peer)\n    })\n\n    // Execute the query along each disjoint path\n    await this.executePaths(paths)\n\n    const res = {\n      // The closest K peers we were able to query successfully\n      finalSet: new Set(this.peersQueried.peers),\n      paths: []\n    }\n\n    // Collect the results from each completed path\n    for (const path of paths) {\n      if (path.res && (path.res.pathComplete || path.res.queryComplete)) {\n        path.res.success = true\n        res.paths.push(path.res)\n      }\n    }\n\n    return res\n  }\n\n  /**\n   * Execute all paths through the DHT.\n   *\n   * @param {Array<Path>} paths\n   * @returns {Promise<void>}\n   */\n  async executePaths (paths) {\n    this.running = true\n\n    this.emit('start')\n    try {\n      await Promise.all(paths.map(path => path.execute()))\n    } finally {\n      // Ensure all workers are stopped\n      this.stop()\n      // Completed the Run\n      this.emit('complete')\n    }\n\n    // If all queries errored out, something is seriously wrong, so callback\n    // with an error\n    if (this.errors.length === this.peersSeen.size) {\n      throw this.errors[0]\n    }\n  }\n\n  /**\n   * Initialize the list of queried peers, then start a worker queue for the\n   * given path.\n   *\n   * @param {Path} path\n   * @returns {Promise<void>}\n   */\n  async workerQueue (path) {\n    await this.init()\n    await this.startWorker(path)\n  }\n\n  /**\n   * Create and start a worker queue for a particular path.\n   *\n   * @param {Path} path\n   * @returns {Promise<void>}\n   */\n  async startWorker (path) {\n    const worker = new WorkerQueue(this.query.dht, this, path, this.query._log)\n    this.workers.push(worker)\n    await worker.execute()\n  }\n\n  /**\n   * Initialize the list of closest peers we've queried - this is shared by all\n   * paths in the run.\n   *\n   * @returns {Promise<void>}\n   */\n  async init () {\n    if (this.peersQueried) {\n      return\n    }\n\n    // We only want to initialize the PeerDistanceList once for the run\n    if (this.peersQueriedPromise) {\n      await this.peersQueriedPromise\n      return\n    }\n\n    // This promise is temporarily stored so that others may await its completion\n    this.peersQueriedPromise = (async () => {\n      const dhtKey = await utils.convertBuffer(this.query.key)\n      this.peersQueried = new PeerDistanceList(dhtKey, this.query.dht.kBucketSize)\n    })()\n\n    // After PeerDistanceList is initialized, clean up\n    await this.peersQueriedPromise\n    delete this.peersQueriedPromise\n  }\n\n  /**\n   * If we've queried K peers, and the remaining peers in the given `worker`'s queue\n   * are all further from the key than the peers we've already queried, then we should\n   * stop querying on that `worker`.\n   *\n   * @param {WorkerQueue} worker\n   * @returns {Promise<Boolean>}\n   */\n  async continueQuerying (worker) {\n    // If we haven't queried K peers yet, keep going\n    if (this.peersQueried.length < this.peersQueried.capacity) {\n      return true\n    }\n\n    // Get all the peers that are currently being queried.\n    // Note that this function gets called right after a peer has been popped\n    // off the head of the closest peers queue so it will include that peer.\n    const running = worker.queue.workersList().map(i => i.data)\n\n    // Check if any of the peers that are currently being queried are closer\n    // to the key than the peers we've already queried\n    const someCloser = await this.peersQueried.anyCloser(running)\n\n    // Some are closer, the worker should keep going\n    if (someCloser) {\n      return true\n    }\n\n    // None are closer, the worker can stop\n    return false\n  }\n}\n\nmodule.exports = Run\n"]},"metadata":{},"sourceType":"script"}