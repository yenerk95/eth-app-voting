{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error');\n\nvar handshake = require('./handshake');\n\nvar State = require('./state');\n\nvar Wrap = require('it-pb-rpc');\n\nvar _require = require('it-length-prefixed'),\n    int32BEDecode = _require.int32BEDecode,\n    int32BEEncode = _require.int32BEEncode;\n\nfunction secure(_x, _x2, _x3) {\n  return _secure.apply(this, arguments);\n}\n\nfunction _secure() {\n  _secure = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(localPeer, duplex, remotePeer) {\n    var state, wrapped;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (localPeer) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('no local private key provided');\n\n          case 2:\n            if (duplex) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error('no connection for the handshake provided');\n\n          case 4:\n            state = new State(localPeer, remotePeer);\n            wrapped = Wrap(duplex, {\n              lengthDecoder: int32BEDecode,\n              lengthEncoder: int32BEEncode\n            });\n            _context.next = 8;\n            return handshake(state, wrapped);\n\n          case 8:\n            return _context.abrupt(\"return\", {\n              conn: state.secure,\n              remotePeer: state.id.remote\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _secure.apply(this, arguments);\n}\n\nmodule.exports = {\n  protocol: '/secio/1.0.0',\n  // since SECIO is symetric, we only need one function here\n  secureInbound: secure,\n  secureOutbound: secure\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-secio/src/index.js"],"names":["debug","require","log","error","handshake","State","Wrap","int32BEDecode","int32BEEncode","secure","localPeer","duplex","remotePeer","Error","state","wrapped","lengthDecoder","lengthEncoder","conn","id","remote","module","exports","protocol","secureInbound","secureOutbound"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGF,KAAK,CAAC,cAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,oBAAD,CAAjB;;AAEA,IAAMI,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAArB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,WAAD,CAApB;;eACyCA,OAAO,CAAC,oBAAD,C;IAAxCM,a,YAAAA,a;IAAeC,a,YAAAA,a;;SAERC,M;;;;;qEAAf,iBAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CC,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACOF,SADP;AAAA;AAAA;AAAA;;AAAA,kBAEU,IAAIG,KAAJ,CAAU,+BAAV,CAFV;;AAAA;AAAA,gBAIOF,MAJP;AAAA;AAAA;AAAA;;AAAA,kBAKU,IAAIE,KAAJ,CAAU,0CAAV,CALV;;AAAA;AAQQC,YAAAA,KARR,GAQgB,IAAIT,KAAJ,CAAUK,SAAV,EAAqBE,UAArB,CARhB;AASQG,YAAAA,OATR,GASkBT,IAAI,CAACK,MAAD,EAAS;AAAEK,cAAAA,aAAa,EAAET,aAAjB;AAAgCU,cAAAA,aAAa,EAAET;AAA/C,aAAT,CATtB;AAAA;AAAA,mBAUQJ,SAAS,CAACU,KAAD,EAAQC,OAAR,CAVjB;;AAAA;AAAA,6CAYS;AACLG,cAAAA,IAAI,EAAEJ,KAAK,CAACL,MADP;AAELG,cAAAA,UAAU,EAAEE,KAAK,CAACK,EAAN,CAASC;AAFhB,aAZT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,QAAQ,EAAE,cADK;AAGf;AACAC,EAAAA,aAAa,EAAEf,MAJA;AAKfgB,EAAAA,cAAc,EAAEhB;AALD,CAAjB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\nconst handshake = require('./handshake')\nconst State = require('./state')\nconst Wrap = require('it-pb-rpc')\nconst { int32BEDecode, int32BEEncode } = require('it-length-prefixed')\n\nasync function secure (localPeer, duplex, remotePeer) { // returns duplex\n  if (!localPeer) {\n    throw new Error('no local private key provided')\n  }\n  if (!duplex) {\n    throw new Error('no connection for the handshake provided')\n  }\n\n  const state = new State(localPeer, remotePeer)\n  const wrapped = Wrap(duplex, { lengthDecoder: int32BEDecode, lengthEncoder: int32BEEncode })\n  await handshake(state, wrapped)\n\n  return {\n    conn: state.secure,\n    remotePeer: state.id.remote\n  }\n}\n\nmodule.exports = {\n  protocol: '/secio/1.0.0',\n\n  // since SECIO is symetric, we only need one function here\n  secureInbound: secure,\n  secureOutbound: secure\n}\n"]},"metadata":{},"sourceType":"script"}