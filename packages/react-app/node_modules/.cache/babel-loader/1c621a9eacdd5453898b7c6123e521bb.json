{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar CID = require('cids');\n\nvar errCode = require('err-code');\n\nvar _require = require('streaming-iterables'),\n    parallelMap = _require.parallelMap,\n    filter = _require.filter;\n\nvar pipe = require('it-pipe');\n\nvar _require2 = require('../pin/pin-manager'),\n    PinTypes = _require2.PinTypes;\n\nvar _require3 = require('./utils'),\n    cleanCid = _require3.cleanCid;\n\nvar _require4 = require('../../utils'),\n    withTimeoutOption = _require4.withTimeoutOption;\n\nvar BLOCK_RM_CONCURRENCY = 8;\n\nmodule.exports = function (_ref) {\n  var blockService = _ref.blockService,\n      gcLock = _ref.gcLock,\n      pinManager = _ref.pinManager;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _rm = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cids, options) {\n      var release;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = options || {};\n\n              if (!Array.isArray(cids)) {\n                cids = [cids];\n              } // We need to take a write lock here to ensure that adding and removing\n              // blocks are exclusive operations\n\n\n              _context2.next = 4;\n              return _awaitAsyncGenerator(gcLock.writeLock());\n\n            case 4:\n              release = _context2.sent;\n              _context2.prev = 5;\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pipe(cids, parallelMap(BLOCK_RM_CONCURRENCY, /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n                  var result, pinResult, has;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          cid = cleanCid(cid);\n                          result = {\n                            cid: cid\n                          };\n                          _context.prev = 2;\n                          _context.next = 5;\n                          return pinManager.isPinnedWithType(cid, PinTypes.all);\n\n                        case 5:\n                          pinResult = _context.sent;\n\n                          if (!pinResult.pinned) {\n                            _context.next = 10;\n                            break;\n                          }\n\n                          if (!CID.isCID(pinResult.reason)) {\n                            _context.next = 9;\n                            break;\n                          }\n\n                          throw errCode(new Error(\"pinned via \".concat(pinResult.reason)));\n\n                        case 9:\n                          throw errCode(new Error(\"pinned: \".concat(pinResult.reason)));\n\n                        case 10:\n                          _context.next = 12;\n                          return blockService._repo.blocks.has(cid);\n\n                        case 12:\n                          has = _context.sent;\n\n                          if (has) {\n                            _context.next = 15;\n                            break;\n                          }\n\n                          throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');\n\n                        case 15:\n                          _context.next = 17;\n                          return blockService.delete(cid);\n\n                        case 17:\n                          _context.next = 22;\n                          break;\n\n                        case 19:\n                          _context.prev = 19;\n                          _context.t0 = _context[\"catch\"](2);\n\n                          if (!options.force) {\n                            _context.t0.message = \"cannot remove \".concat(cid, \": \").concat(_context.t0.message);\n                            result.error = _context.t0;\n                          }\n\n                        case 22:\n                          return _context.abrupt(\"return\", result);\n\n                        case 23:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 19]]);\n                }));\n\n                return function (_x3) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()), filter(function () {\n                return !options.quiet;\n              }))), _awaitAsyncGenerator), \"t0\", 7);\n\n            case 7:\n              _context2.prev = 7;\n              release();\n              return _context2.finish(7);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[5,, 7, 10]]);\n    }));\n\n    function rm(_x, _x2) {\n      return _rm.apply(this, arguments);\n    }\n\n    return rm;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/block/rm.js"],"names":["CID","require","errCode","parallelMap","filter","pipe","PinTypes","cleanCid","withTimeoutOption","BLOCK_RM_CONCURRENCY","module","exports","blockService","gcLock","pinManager","cids","options","Array","isArray","writeLock","release","cid","result","isPinnedWithType","all","pinResult","pinned","isCID","reason","Error","_repo","blocks","has","delete","force","message","error","quiet","rm"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst errCode = require('err-code')\nconst { parallelMap, filter } = require('streaming-iterables')\nconst pipe = require('it-pipe')\nconst { PinTypes } = require('../pin/pin-manager')\nconst { cleanCid } = require('./utils')\nconst { withTimeoutOption } = require('../../utils')\n\nconst BLOCK_RM_CONCURRENCY = 8\n\nmodule.exports = ({ blockService, gcLock, pinManager }) => {\n  return withTimeoutOption(async function * rm (cids, options) {\n    options = options || {}\n\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    // We need to take a write lock here to ensure that adding and removing\n    // blocks are exclusive operations\n    const release = await gcLock.writeLock()\n\n    try {\n      yield * pipe(\n        cids,\n        parallelMap(BLOCK_RM_CONCURRENCY, async cid => {\n          cid = cleanCid(cid)\n\n          const result = { cid }\n\n          try {\n            const pinResult = await pinManager.isPinnedWithType(cid, PinTypes.all)\n\n            if (pinResult.pinned) {\n              if (CID.isCID(pinResult.reason)) { // eslint-disable-line max-depth\n                throw errCode(new Error(`pinned via ${pinResult.reason}`))\n              }\n\n              throw errCode(new Error(`pinned: ${pinResult.reason}`))\n            }\n\n            // remove has check when https://github.com/ipfs/js-ipfs-block-service/pull/88 is merged\n            const has = await blockService._repo.blocks.has(cid)\n\n            if (!has) {\n              throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND')\n            }\n\n            await blockService.delete(cid)\n          } catch (err) {\n            if (!options.force) {\n              err.message = `cannot remove ${cid}: ${err.message}`\n              result.error = err\n            }\n          }\n\n          return result\n        }),\n        filter(() => !options.quiet)\n      )\n    } finally {\n      release()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}