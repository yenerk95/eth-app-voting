{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageCache = void 0;\n\nvar MessageCache = /*#__PURE__*/function () {\n  /**\n   * @param {Number} gossip\n   * @param {Number} history\n   * @param {msgIdFn} msgIdFn a function that returns message id from a message\n   *\n   * @constructor\n   */\n  function MessageCache(gossip, history, msgIdFn) {\n    _classCallCheck(this, MessageCache);\n\n    /**\n     * @type {Map<string, RPC.Message>}\n     */\n    this.msgs = new Map();\n    /**\n     * @type {Array<Array<CacheEntry>>}\n     */\n\n    this.history = [];\n\n    for (var i = 0; i < history; i++) {\n      this.history[i] = [];\n    }\n    /**\n     * @type {Number}\n     */\n\n\n    this.gossip = gossip;\n    /**\n     * @type {Function}\n     */\n\n    this.msgIdFn = msgIdFn;\n  }\n  /**\n   * Adds a message to the current window and the cache\n   *\n   * @param {RPC.Message} msg\n   * @returns {void}\n   */\n\n\n  _createClass(MessageCache, [{\n    key: \"put\",\n    value: function put(msg) {\n      var msgID = this.getMsgId(msg);\n      this.msgs.set(msgID, msg);\n      this.history[0].push({\n        msgID: msgID,\n        topics: msg.topicIDs\n      });\n    }\n    /**\n     * Get message id of message.\n     * @param {RPC.Message} msg\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getMsgId\",\n    value: function getMsgId(msg) {\n      return this.msgIdFn(msg);\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     *\n     * @param {String} msgID\n     * @returns {Message}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(msgID) {\n      return this.msgs.get(msgID);\n    }\n    /**\n     * Retrieves a list of message IDs for a given topic\n     *\n     * @param {String} topic\n     *\n     * @returns {Array<String>}\n     */\n\n  }, {\n    key: \"getGossipIDs\",\n    value: function getGossipIDs(topic) {\n      var msgIDs = [];\n\n      for (var i = 0; i < this.gossip; i++) {\n        this.history[i].forEach(function (entry) {\n          var _iterator = _createForOfIteratorHelper(entry.topics),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var t = _step.value;\n\n              if (t === topic) {\n                msgIDs.push(entry.msgID);\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n\n      return msgIDs;\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      var _this = this;\n\n      var last = this.history[this.history.length - 1];\n      last.forEach(function (entry) {\n        _this.msgs.delete(entry.msgID);\n      });\n      this.history.pop();\n      this.history.unshift([]);\n    }\n  }]);\n\n  return MessageCache;\n}();\n\nexports.MessageCache = MessageCache;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-gossipsub/src/messageCache.js"],"names":["Object","defineProperty","exports","value","MessageCache","gossip","history","msgIdFn","msgs","Map","i","msg","msgID","getMsgId","set","push","topics","topicIDs","get","topic","msgIDs","forEach","entry","t","last","length","delete","pop","unshift"],"mappings":"AAAA;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;IACMA,Y;AACF;;;;;;;AAOA,wBAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,OAA7B,EAAsC;AAAA;;AAClC;;;AAGA,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACA;;;;AAGA,SAAKH,OAAL,GAAe,EAAf;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAApB,EAA6BI,CAAC,EAA9B,EAAkC;AAC9B,WAAKJ,OAAL,CAAaI,CAAb,IAAkB,EAAlB;AACH;AACD;;;;;AAGA,SAAKL,MAAL,GAAcA,MAAd;AACA;;;;AAGA,SAAKE,OAAL,GAAeA,OAAf;AACH;AACD;;;;;;;;;;wBAMII,G,EAAK;AACL,UAAMC,KAAK,GAAG,KAAKC,QAAL,CAAcF,GAAd,CAAd;AACA,WAAKH,IAAL,CAAUM,GAAV,CAAcF,KAAd,EAAqBD,GAArB;AACA,WAAKL,OAAL,CAAa,CAAb,EAAgBS,IAAhB,CAAqB;AAAEH,QAAAA,KAAK,EAALA,KAAF;AAASI,QAAAA,MAAM,EAAEL,GAAG,CAACM;AAArB,OAArB;AACH;AACD;;;;;;;;6BAKSN,G,EAAK;AACV,aAAO,KAAKJ,OAAL,CAAaI,GAAb,CAAP;AACH;AACD;;;;;;;;;wBAMIC,K,EAAO;AACP,aAAO,KAAKJ,IAAL,CAAUU,GAAV,CAAcN,KAAd,CAAP;AACH;AACD;;;;;;;;;;iCAOaO,K,EAAO;AAChB,UAAMC,MAAM,GAAG,EAAf;;AACA,WAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AAClC,aAAKJ,OAAL,CAAaI,CAAb,EAAgBW,OAAhB,CAAwB,UAACC,KAAD,EAAW;AAAA,qDACfA,KAAK,CAACN,MADS;AAAA;;AAAA;AAC/B,gEAA8B;AAAA,kBAAnBO,CAAmB;;AAC1B,kBAAIA,CAAC,KAAKJ,KAAV,EAAiB;AACbC,gBAAAA,MAAM,CAACL,IAAP,CAAYO,KAAK,CAACV,KAAlB;AACA;AACH;AACJ;AAN8B;AAAA;AAAA;AAAA;AAAA;AAOlC,SAPD;AAQH;;AACD,aAAOQ,MAAP;AACH;AACD;;;;;;;;4BAKQ;AAAA;;AACJ,UAAMI,IAAI,GAAG,KAAKlB,OAAL,CAAa,KAAKA,OAAL,CAAamB,MAAb,GAAsB,CAAnC,CAAb;AACAD,MAAAA,IAAI,CAACH,OAAL,CAAa,UAACC,KAAD,EAAW;AACpB,QAAA,KAAI,CAACd,IAAL,CAAUkB,MAAV,CAAiBJ,KAAK,CAACV,KAAvB;AACH,OAFD;AAGA,WAAKN,OAAL,CAAaqB,GAAb;AACA,WAAKrB,OAAL,CAAasB,OAAb,CAAqB,EAArB;AACH;;;;;;AAEL1B,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageCache = void 0;\nclass MessageCache {\n    /**\n     * @param {Number} gossip\n     * @param {Number} history\n     * @param {msgIdFn} msgIdFn a function that returns message id from a message\n     *\n     * @constructor\n     */\n    constructor(gossip, history, msgIdFn) {\n        /**\n         * @type {Map<string, RPC.Message>}\n         */\n        this.msgs = new Map();\n        /**\n         * @type {Array<Array<CacheEntry>>}\n         */\n        this.history = [];\n        for (let i = 0; i < history; i++) {\n            this.history[i] = [];\n        }\n        /**\n         * @type {Number}\n         */\n        this.gossip = gossip;\n        /**\n         * @type {Function}\n         */\n        this.msgIdFn = msgIdFn;\n    }\n    /**\n     * Adds a message to the current window and the cache\n     *\n     * @param {RPC.Message} msg\n     * @returns {void}\n     */\n    put(msg) {\n        const msgID = this.getMsgId(msg);\n        this.msgs.set(msgID, msg);\n        this.history[0].push({ msgID, topics: msg.topicIDs });\n    }\n    /**\n     * Get message id of message.\n     * @param {RPC.Message} msg\n     * @returns {string}\n     */\n    getMsgId(msg) {\n        return this.msgIdFn(msg);\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     *\n     * @param {String} msgID\n     * @returns {Message}\n     */\n    get(msgID) {\n        return this.msgs.get(msgID);\n    }\n    /**\n     * Retrieves a list of message IDs for a given topic\n     *\n     * @param {String} topic\n     *\n     * @returns {Array<String>}\n     */\n    getGossipIDs(topic) {\n        const msgIDs = [];\n        for (let i = 0; i < this.gossip; i++) {\n            this.history[i].forEach((entry) => {\n                for (const t of entry.topics) {\n                    if (t === topic) {\n                        msgIDs.push(entry.msgID);\n                        break;\n                    }\n                }\n            });\n        }\n        return msgIDs;\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     *\n     * @returns {void}\n     */\n    shift() {\n        const last = this.history[this.history.length - 1];\n        last.forEach((entry) => {\n            this.msgs.delete(entry.msgID);\n        });\n        this.history.pop();\n        this.history.unshift([]);\n    }\n}\nexports.MessageCache = MessageCache;\n"]},"metadata":{},"sourceType":"script"}