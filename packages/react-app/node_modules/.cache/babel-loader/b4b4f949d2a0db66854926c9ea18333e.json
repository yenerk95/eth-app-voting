{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('./utils'),\n    parseArgs = _require.parseArgs;\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, path, options) {\n      var _parseArgs, _parseArgs2, value, result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _parseArgs = parseArgs(cid, path, options);\n              _parseArgs2 = _slicedToArray(_parseArgs, 3);\n              cid = _parseArgs2[0];\n              path = _parseArgs2[1];\n              options = _parseArgs2[2];\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              if (!(path == null || path === '/')) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 9;\n              return ipld.get(cid, options);\n\n            case 9:\n              value = _context.sent;\n              return _context.abrupt(\"return\", {\n                value: value,\n                remainderPath: ''\n              });\n\n            case 13:\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 15;\n              _iterator = _asyncIterator(ipld.resolve(cid, path));\n\n            case 17:\n              _context.next = 19;\n              return _iterator.next();\n\n            case 19:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 23;\n              return _step.value;\n\n            case 23:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 32;\n                break;\n              }\n\n              entry = _value;\n\n              if (!options.localResolve) {\n                _context.next = 28;\n                break;\n              }\n\n              return _context.abrupt(\"return\", entry);\n\n            case 28:\n              result = entry;\n\n            case 29:\n              _iteratorNormalCompletion = true;\n              _context.next = 17;\n              break;\n\n            case 32:\n              _context.next = 38;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](15);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 38:\n              _context.prev = 38;\n              _context.prev = 39;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 43;\n                break;\n              }\n\n              _context.next = 43;\n              return _iterator.return();\n\n            case 43:\n              _context.prev = 43;\n\n              if (!_didIteratorError) {\n                _context.next = 46;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 46:\n              return _context.finish(43);\n\n            case 47:\n              return _context.finish(38);\n\n            case 48:\n              return _context.abrupt(\"return\", result);\n\n            case 49:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[15, 34, 38, 48], [39,, 43, 47]]);\n    }));\n\n    function get(_x, _x2, _x3) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/dag/get.js"],"names":["require","parseArgs","withTimeoutOption","module","exports","ipld","preload","cid","path","options","get","value","remainderPath","resolve","entry","localResolve","result"],"mappings":"AAAA;;;;;;;;;;eAEsBA,OAAO,CAAC,SAAD,C;IAArBC,S,YAAAA,S;;gBACsBD,OAAO,CAAC,aAAD,C;IAA7BE,iB,aAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAuB;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AACtC,SAAOJ,iBAAiB;AAAA,wEAAC,iBAAoBK,GAApB,EAAyBC,IAAzB,EAA+BC,OAA/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BACAR,SAAS,CAACM,GAAD,EAAMC,IAAN,EAAYC,OAAZ,CADT;AAAA;AACtBF,cAAAA,GADsB;AACjBC,cAAAA,IADiB;AACXC,cAAAA,OADW;;AAGvB,kBAAIA,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,gBAAAA,OAAO,CAACC,GAAD,CAAP;AACD;;AALsB,oBAOnBC,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAK,GAPN;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQDH,IAAI,CAACK,GAAL,CAASH,GAAT,EAAcE,OAAd,CARC;;AAAA;AAQfE,cAAAA,KARe;AAAA,+CAUd;AACLA,gBAAAA,KAAK,EAALA,KADK;AAELC,gBAAAA,aAAa,EAAE;AAFV,eAVc;;AAAA;AAAA;AAAA;AAAA;AAAA,yCAiBKP,IAAI,CAACQ,OAAL,CAAaN,GAAb,EAAkBC,IAAlB,CAjBL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAiBJM,cAAAA,KAjBI;;AAAA,mBAkBfL,OAAO,CAACM,YAlBO;AAAA;AAAA;AAAA;;AAAA,+CAmBVD,KAnBU;;AAAA;AAsBnBE,cAAAA,MAAM,GAAGF,KAAT;;AAtBmB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,+CAyBdE,MAzBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBN,GAAhB;AAAA;AAAA;;AAAA,WAAgBA,GAAhB;AAAA,MAAxB;AA4BD,CA7BD","sourcesContent":["'use strict'\n\nconst { parseArgs } = require('./utils')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ ipld, preload }) => {\n  return withTimeoutOption(async function get (cid, path, options) {\n    [cid, path, options] = parseArgs(cid, path, options)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (path == null || path === '/') {\n      const value = await ipld.get(cid, options)\n\n      return {\n        value,\n        remainderPath: ''\n      }\n    } else {\n      let result\n\n      for await (const entry of ipld.resolve(cid, path)) {\n        if (options.localResolve) {\n          return entry\n        }\n\n        result = entry\n      }\n\n      return result\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}