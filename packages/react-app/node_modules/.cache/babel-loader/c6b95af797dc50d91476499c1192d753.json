{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar DirSharded = require('./dir-sharded');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _flatToShard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(child, dir, threshold, options) {\n    var newDir, parent;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            newDir = dir;\n\n            if (!(dir.flat && dir.directChildrenCount() >= threshold)) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return convertToShard(dir, options);\n\n          case 4:\n            newDir = _context.sent;\n\n          case 5:\n            parent = newDir.parent;\n\n            if (!parent) {\n              _context.next = 12;\n              break;\n            }\n\n            if (!(newDir !== dir)) {\n              _context.next = 11;\n              break;\n            }\n\n            if (child) {\n              child.parent = newDir;\n            }\n\n            _context.next = 11;\n            return parent.put(newDir.parentKey, newDir);\n\n          case 11:\n            return _context.abrupt(\"return\", flatToShard(newDir, parent, threshold, options));\n\n          case 12:\n            return _context.abrupt(\"return\", newDir);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function flatToShard(_x, _x2, _x3, _x4) {\n    return _flatToShard.apply(this, arguments);\n  }\n\n  return flatToShard;\n}();\n\nfunction convertToShard(_x5, _x6) {\n  return _convertToShard.apply(this, arguments);\n}\n\nfunction _convertToShard() {\n  _convertToShard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(oldDir, options) {\n    var newDir, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, key, child;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newDir = new DirSharded({\n              root: oldDir.root,\n              dir: true,\n              parent: oldDir.parent,\n              parentKey: oldDir.parentKey,\n              path: oldDir.path,\n              dirty: oldDir.dirty,\n              flat: false,\n              mtime: oldDir.mtime,\n              mode: oldDir.mode\n            }, options);\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(oldDir.eachChildSeries());\n\n          case 5:\n            _context2.next = 7;\n            return _iterator.next();\n\n          case 7:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 11;\n            return _step.value;\n\n          case 11:\n            _value = _context2.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context2.next = 19;\n              break;\n            }\n\n            _value2 = _value, key = _value2.key, child = _value2.child;\n            _context2.next = 16;\n            return newDir.put(key, child);\n\n          case 16:\n            _iteratorNormalCompletion = true;\n            _context2.next = 5;\n            break;\n\n          case 19:\n            _context2.next = 25;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 25:\n            _context2.prev = 25;\n            _context2.prev = 26;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context2.next = 30;\n              break;\n            }\n\n            _context2.next = 30;\n            return _iterator.return();\n\n          case 30:\n            _context2.prev = 30;\n\n            if (!_didIteratorError) {\n              _context2.next = 33;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 33:\n            return _context2.finish(30);\n\n          case 34:\n            return _context2.finish(25);\n\n          case 35:\n            return _context2.abrupt(\"return\", newDir);\n\n          case 36:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 21, 25, 35], [26,, 30, 34]]);\n  }));\n  return _convertToShard.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/flat-to-shard.js"],"names":["DirSharded","require","module","exports","child","dir","threshold","options","newDir","flat","directChildrenCount","convertToShard","parent","put","parentKey","flatToShard","oldDir","root","path","dirty","mtime","mode","eachChildSeries","key"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP;AAAA,8EAAiB,iBAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,SAAxC,EAAmDC,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,MADW,GACFH,GADE;;AAAA,kBAGXA,GAAG,CAACI,IAAJ,IAAYJ,GAAG,CAACK,mBAAJ,MAA6BJ,SAH9B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIEK,cAAc,CAACN,GAAD,EAAME,OAAN,CAJhB;;AAAA;AAIbC,YAAAA,MAJa;;AAAA;AAOTI,YAAAA,MAPS,GAOAJ,MAAM,CAACI,MAPP;;AAAA,iBASXA,MATW;AAAA;AAAA;AAAA;;AAAA,kBAUTJ,MAAM,KAAKH,GAVF;AAAA;AAAA;AAAA;;AAWX,gBAAID,KAAJ,EAAW;AACTA,cAAAA,KAAK,CAACQ,MAAN,GAAeJ,MAAf;AACD;;AAbU;AAAA,mBAeLI,MAAM,CAACC,GAAP,CAAWL,MAAM,CAACM,SAAlB,EAA6BN,MAA7B,CAfK;;AAAA;AAAA,6CAkBNO,WAAW,CAACP,MAAD,EAASI,MAAT,EAAiBN,SAAjB,EAA4BC,OAA5B,CAlBL;;AAAA;AAAA,6CAqBRC,MArBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAgCO,WAAhC;AAAA;AAAA;;AAAA,SAAgCA,WAAhC;AAAA;;SAwBeJ,c;;;;;6EAAf,kBAA+BK,MAA/B,EAAuCT,OAAvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,MADR,GACiB,IAAIR,UAAJ,CAAe;AAC5BiB,cAAAA,IAAI,EAAED,MAAM,CAACC,IADe;AAE5BZ,cAAAA,GAAG,EAAE,IAFuB;AAG5BO,cAAAA,MAAM,EAAEI,MAAM,CAACJ,MAHa;AAI5BE,cAAAA,SAAS,EAAEE,MAAM,CAACF,SAJU;AAK5BI,cAAAA,IAAI,EAAEF,MAAM,CAACE,IALe;AAM5BC,cAAAA,KAAK,EAAEH,MAAM,CAACG,KANc;AAO5BV,cAAAA,IAAI,EAAE,KAPsB;AAQ5BW,cAAAA,KAAK,EAAEJ,MAAM,CAACI,KARc;AAS5BC,cAAAA,IAAI,EAAEL,MAAM,CAACK;AATe,aAAf,EAUZd,OAVY,CADjB;AAAA;AAAA;AAAA;AAAA,uCAaqCS,MAAM,CAACM,eAAP,EAbrC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,8BAaqBC,GAbrB,WAaqBA,GAbrB,EAa0BnB,KAb1B,WAa0BA,KAb1B;AAAA;AAAA,mBAcUI,MAAM,CAACK,GAAP,CAAWU,GAAX,EAAgBnB,KAAhB,CAdV;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAiBSI,MAjBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["'use strict'\n\nconst DirSharded = require('./dir-sharded')\n\nmodule.exports = async function flatToShard (child, dir, threshold, options) {\n  let newDir = dir\n\n  if (dir.flat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options)\n  }\n\n  const parent = newDir.parent\n\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir\n      }\n\n      await parent.put(newDir.parentKey, newDir)\n    }\n\n    return flatToShard(newDir, parent, threshold, options)\n  }\n\n  return newDir\n}\n\nasync function convertToShard (oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options)\n\n  for await (const { key, child } of oldDir.eachChildSeries()) {\n    await newDir.put(key, child)\n  }\n\n  return newDir\n}\n"]},"metadata":{},"sourceType":"script"}