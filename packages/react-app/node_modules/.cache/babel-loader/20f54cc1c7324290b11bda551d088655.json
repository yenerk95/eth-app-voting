{"ast":null,"code":"/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n  /**\n   * Creates an instance of Rabin.\n   * @param { import(\"./../dist/rabin-wasm\") } asModule\n   * @param {number} [bits=12]\n   * @param {number} [min=8 * 1024]\n   * @param {number} [max=32 * 1024]\n   * @param {number} polynomial\n   * @memberof Rabin\n   */\n  constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {\n    this.bits = bits;\n    this.min = min;\n    this.max = max;\n    this.asModule = asModule;\n    this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial);\n    this.polynomial = polynomial;\n  }\n  /**\n   * Fingerprints the buffer\n   *\n   * @param {Uint8Array} buf\n   * @returns {Array<number>}\n   * @memberof Rabin\n   */\n\n\n  fingerprint(buf) {\n    const {\n      __retain,\n      __release,\n      __allocArray,\n      __getInt32Array,\n      Int32Array_ID,\n      Uint8Array_ID\n    } = this.asModule;\n    const lengths = new Int32Array(Math.ceil(buf.length / this.min));\n\n    const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths));\n\n    const pointer = __retain(__allocArray(Uint8Array_ID, buf));\n\n    const out = this.rabin.fingerprint(pointer, lengthsPtr);\n\n    const processed = __getInt32Array(out);\n\n    __release(pointer);\n\n    __release(lengthsPtr);\n\n    const cleanArr = [];\n\n    for (let i = 0; i < processed.length; i++) {\n      if (processed[i] === 0) break;\n      cleanArr[i] = processed[i];\n    }\n\n    return cleanArr;\n  }\n\n}\n\nmodule.exports = Rabin;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/rabin-wasm/src/rabin.js"],"names":["Rabin","constructor","asModule","bits","min","max","windowSize","polynomial","rabin","fingerprint","buf","__retain","__release","__allocArray","__getInt32Array","Int32Array_ID","Uint8Array_ID","lengths","Int32Array","Math","ceil","length","lengthsPtr","pointer","out","processed","cleanArr","i","module","exports"],"mappings":"AAAA;;;;;AAKA,MAAMA,KAAN,CAAY;AACR;;;;;;;;;AASAC,EAAAA,WAAW,CAACC,QAAD,EAAWC,IAAI,GAAG,EAAlB,EAAsBC,GAAG,GAAG,IAAI,IAAhC,EAAsCC,GAAG,GAAG,KAAK,IAAjD,EAAuDC,UAAU,GAAG,EAApE,EAAwEC,UAAxE,EAAoF;AAC3F,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKM,KAAL,GAAa,IAAIN,QAAQ,CAACF,KAAb,CAAmBG,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,UAAnC,EAA+CC,UAA/C,CAAb;AACA,SAAKA,UAAL,GAAkBA,UAAlB;AACH;AAED;;;;;;;;;AAOAE,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,UAAM;AACFC,MAAAA,QADE;AAEFC,MAAAA,SAFE;AAGFC,MAAAA,YAHE;AAIFC,MAAAA,eAJE;AAKFC,MAAAA,aALE;AAMFC,MAAAA;AANE,QAOF,KAAKd,QAPT;AASA,UAAMe,OAAO,GAAG,IAAIC,UAAJ,CAAeC,IAAI,CAACC,IAAL,CAAUV,GAAG,CAACW,MAAJ,GAAW,KAAKjB,GAA1B,CAAf,CAAhB;;AACA,UAAMkB,UAAU,GAAGX,QAAQ,CAACE,YAAY,CAACE,aAAD,EAAgBE,OAAhB,CAAb,CAA3B;;AACA,UAAMM,OAAO,GAAGZ,QAAQ,CAACE,YAAY,CAACG,aAAD,EAAgBN,GAAhB,CAAb,CAAxB;;AAEA,UAAMc,GAAG,GAAG,KAAKhB,KAAL,CAAWC,WAAX,CAAuBc,OAAvB,EAAgCD,UAAhC,CAAZ;;AACA,UAAMG,SAAS,GAAGX,eAAe,CAACU,GAAD,CAAjC;;AAEAZ,IAAAA,SAAS,CAACW,OAAD,CAAT;;AACAX,IAAAA,SAAS,CAACU,UAAD,CAAT;;AAEA,UAAMI,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACJ,MAA9B,EAAsCM,CAAC,EAAvC,EAA2C;AACvC,UAAGF,SAAS,CAACE,CAAD,CAAT,KAAiB,CAApB,EAAuB;AACvBD,MAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcF,SAAS,CAACE,CAAD,CAAvB;AACH;;AAED,WAAOD,QAAP;AACH;;AArDO;;AAwDZE,MAAM,CAACC,OAAP,GAAiB7B,KAAjB","sourcesContent":["/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n    /**\n     * Creates an instance of Rabin.\n     * @param { import(\"./../dist/rabin-wasm\") } asModule\n     * @param {number} [bits=12]\n     * @param {number} [min=8 * 1024]\n     * @param {number} [max=32 * 1024]\n     * @param {number} polynomial\n     * @memberof Rabin\n     */\n    constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {\n        this.bits = bits\n        this.min = min\n        this.max = max\n        this.asModule = asModule\n        this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial)\n        this.polynomial = polynomial\n    }\n\n    /**\n     * Fingerprints the buffer\n     *\n     * @param {Uint8Array} buf\n     * @returns {Array<number>}\n     * @memberof Rabin\n     */\n    fingerprint(buf) {\n        const { \n            __retain,\n            __release,\n            __allocArray, \n            __getInt32Array, \n            Int32Array_ID, \n            Uint8Array_ID \n        } = this.asModule\n\n        const lengths = new Int32Array(Math.ceil(buf.length/this.min))\n        const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths))\n        const pointer = __retain(__allocArray(Uint8Array_ID, buf))\n\n        const out = this.rabin.fingerprint(pointer, lengthsPtr)\n        const processed = __getInt32Array(out)\n\n        __release(pointer)\n        __release(lengthsPtr)\n\n        const cleanArr = []\t\n        for (let i = 0; i < processed.length; i++) {\t\n            if(processed[i] === 0) break\t\n            cleanArr[i] = processed[i];\t\n        }\t\n\n        return cleanArr\n    }\n}\n\nmodule.exports = Rabin"]},"metadata":{},"sourceType":"script"}