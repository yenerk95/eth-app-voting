{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Heap = require('heap');\n\nvar distance = require('xor-distance');\n\nvar debug = require('debug');\n\nvar utils = require('../utils');\n\nvar log = debug('libp2p:dht:peer-queue');\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\n\nvar PeerQueue = /*#__PURE__*/function () {\n  _createClass(PeerQueue, null, [{\n    key: \"fromPeerId\",\n\n    /**\n     * Create from a given peer id.\n     *\n     * @param {PeerId} id\n     * @returns {Promise<PeerQueue>}\n     */\n    value: function () {\n      var _fromPeerId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return utils.convertPeerId(id);\n\n              case 2:\n                key = _context.sent;\n                return _context.abrupt(\"return\", new PeerQueue(key));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function fromPeerId(_x) {\n        return _fromPeerId.apply(this, arguments);\n      }\n\n      return fromPeerId;\n    }()\n    /**\n     * Create from a given buffer.\n     *\n     * @param {Buffer} keyBuffer\n     * @returns {Promise<PeerQueue>}\n     */\n\n  }, {\n    key: \"fromKey\",\n    value: function () {\n      var _fromKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(keyBuffer) {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return utils.convertBuffer(keyBuffer);\n\n              case 2:\n                key = _context2.sent;\n                return _context2.abrupt(\"return\", new PeerQueue(key));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fromKey(_x2) {\n        return _fromKey.apply(this, arguments);\n      }\n\n      return fromKey;\n    }()\n    /**\n     * Create a new PeerQueue.\n     *\n     * @param {Buffer} from - The sha2-256 encoded peer id\n     */\n\n  }]);\n\n  function PeerQueue(from) {\n    _classCallCheck(this, PeerQueue);\n\n    log('create: %b', from);\n    this.from = from;\n    this.heap = new Heap(utils.xorCompare);\n  }\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   * @returns {Promise}\n   */\n\n\n  _createClass(PeerQueue, [{\n    key: \"enqueue\",\n    value: function () {\n      var _enqueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        var key, el;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                log('enqueue %s', id.toB58String());\n                _context3.next = 3;\n                return utils.convertPeerId(id);\n\n              case 3:\n                key = _context3.sent;\n                el = {\n                  id: id,\n                  distance: distance(this.from, key)\n                };\n                this.heap.push(el);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function enqueue(_x3) {\n        return _enqueue.apply(this, arguments);\n      }\n\n      return enqueue;\n    }()\n    /**\n     * Returns the closest peer to the `from` peer.\n     *\n     * @returns {PeerId}\n     */\n\n  }, {\n    key: \"dequeue\",\n    value: function dequeue() {\n      var el = this.heap.pop();\n      log('dequeue %s', el.id.toB58String());\n      return el.id;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.heap.size();\n    }\n  }]);\n\n  return PeerQueue;\n}();\n\nmodule.exports = PeerQueue;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/peer-list/peer-queue.js"],"names":["Heap","require","distance","debug","utils","log","PeerQueue","id","convertPeerId","key","keyBuffer","convertBuffer","from","heap","xorCompare","toB58String","el","push","pop","size","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMG,KAAK,GAAGH,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAMI,GAAG,GAAGF,KAAK,CAAC,uBAAD,CAAjB;AAEA;;;;;IAIMG,S;;;;AACJ;;;;;;;kGAMyBC,E;;;;;;;uBACLH,KAAK,CAACI,aAAN,CAAoBD,EAApB,C;;;AAAZE,gBAAAA,G;iDAEC,IAAIH,SAAJ,CAAcG,GAAd,C;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;gGAMsBC,S;;;;;;;uBACFN,KAAK,CAACO,aAAN,CAAoBD,SAApB,C;;;AAAZD,gBAAAA,G;kDAEC,IAAIH,SAAJ,CAAcG,GAAd,C;;;;;;;;;;;;;;;;AAGT;;;;;;;;AAKA,qBAAaG,IAAb,EAAmB;AAAA;;AACjBP,IAAAA,GAAG,CAAC,YAAD,EAAeO,IAAf,CAAH;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAIb,IAAJ,CAASI,KAAK,CAACU,UAAf,CAAZ;AACD;AAED;;;;;;;;;;;gGAMeP,E;;;;;;AACbF,gBAAAA,GAAG,CAAC,YAAD,EAAeE,EAAE,CAACQ,WAAH,EAAf,CAAH;;uBACkBX,KAAK,CAACI,aAAN,CAAoBD,EAApB,C;;;AAAZE,gBAAAA,G;AAEAO,gBAAAA,E,GAAK;AACTT,kBAAAA,EAAE,EAAEA,EADK;AAETL,kBAAAA,QAAQ,EAAEA,QAAQ,CAAC,KAAKU,IAAN,EAAYH,GAAZ;AAFT,iB;AAKX,qBAAKI,IAAL,CAAUI,IAAV,CAAeD,EAAf;;;;;;;;;;;;;;;;AAGF;;;;;;;;8BAKW;AACT,UAAMA,EAAE,GAAG,KAAKH,IAAL,CAAUK,GAAV,EAAX;AACAb,MAAAA,GAAG,CAAC,YAAD,EAAeW,EAAE,CAACT,EAAH,CAAMQ,WAAN,EAAf,CAAH;AACA,aAAOC,EAAE,CAACT,EAAV;AACD;;;wBAEa;AACZ,aAAO,KAAKM,IAAL,CAAUM,IAAV,EAAP;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBf,SAAjB","sourcesContent":["'use strict'\n\nconst Heap = require('heap')\nconst distance = require('xor-distance')\nconst debug = require('debug')\n\nconst utils = require('../utils')\n\nconst log = debug('libp2p:dht:peer-queue')\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromPeerId (id) {\n    const key = await utils.convertPeerId(id)\n\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create from a given buffer.\n   *\n   * @param {Buffer} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromKey (keyBuffer) {\n    const key = await utils.convertBuffer(keyBuffer)\n\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Buffer} from - The sha2-256 encoded peer id\n   */\n  constructor (from) {\n    log('create: %b', from)\n    this.from = from\n    this.heap = new Heap(utils.xorCompare)\n  }\n\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   * @returns {Promise}\n   */\n  async enqueue (id) {\n    log('enqueue %s', id.toB58String())\n    const key = await utils.convertPeerId(id)\n\n    const el = {\n      id: id,\n      distance: distance(this.from, key)\n    }\n\n    this.heap.push(el)\n  }\n\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n  dequeue () {\n    const el = this.heap.pop()\n    log('dequeue %s', el.id.toB58String())\n    return el.id\n  }\n\n  get length () {\n    return this.heap.size()\n  }\n}\n\nmodule.exports = PeerQueue\n"]},"metadata":{},"sourceType":"script"}