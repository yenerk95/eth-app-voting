{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nrequire('node-forge/lib/ed25519');\n\nvar forge = require('node-forge/lib/forge');\n\nexports.publicKeyLength = forge.pki.ed25519.constants.PUBLIC_KEY_BYTE_LENGTH;\nexports.privateKeyLength = forge.pki.ed25519.constants.PRIVATE_KEY_BYTE_LENGTH;\nexports.generateKey = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", forge.pki.ed25519.generateKeyPair());\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})); // seed should be a 32 byte uint8array\n\nexports.generateKeyFromSeed = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(seed) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", forge.pki.ed25519.generateKeyPair({\n              seed: seed\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.hashAndSign = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key, msg) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", forge.pki.ed25519.sign({\n              message: msg,\n              privateKey: key\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.hashAndVerify = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key, sig, msg) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", forge.pki.ed25519.verify({\n              signature: sig,\n              message: msg,\n              publicKey: key\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function (_x4, _x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/keys/ed25519.js"],"names":["require","forge","exports","publicKeyLength","pki","ed25519","constants","PUBLIC_KEY_BYTE_LENGTH","privateKeyLength","PRIVATE_KEY_BYTE_LENGTH","generateKey","generateKeyPair","generateKeyFromSeed","seed","hashAndSign","key","msg","sign","message","privateKey","hashAndVerify","sig","verify","signature","publicKey"],"mappings":"AAAA;;;;;;AAEAA,OAAO,CAAC,wBAAD,CAAP;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACAE,OAAO,CAACC,eAAR,GAA0BF,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BC,sBAAtD;AACAL,OAAO,CAACM,gBAAR,GAA2BP,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BG,uBAAvD;AAEAP,OAAO,CAACQ,WAAR,yEAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,2CACbT,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBM,eAAlB,EADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB,G,CAIA;;AACAT,OAAO,CAACU,mBAAR;AAAA,uEAA8B,kBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,8CACrBZ,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBM,eAAlB,CAAkC;AAAEE,cAAAA,IAAI,EAAJA;AAAF,aAAlC,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;;AAIAX,OAAO,CAACY,WAAR;AAAA,uEAAsB,kBAAgBC,GAAhB,EAAqBC,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA,8CACbf,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBY,IAAlB,CAAuB;AAAEC,cAAAA,OAAO,EAAEF,GAAX;AAAgBG,cAAAA,UAAU,EAAEJ;AAA5B,aAAvB,CADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AAKAb,OAAO,CAACkB,aAAR;AAAA,uEAAwB,kBAAgBL,GAAhB,EAAqBM,GAArB,EAA0BL,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,8CACff,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBiB,MAAlB,CAAyB;AAAEC,cAAAA,SAAS,EAAEF,GAAb;AAAkBH,cAAAA,OAAO,EAAEF,GAA3B;AAAgCQ,cAAAA,SAAS,EAAET;AAA3C,aAAzB,CADe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nrequire('node-forge/lib/ed25519')\nconst forge = require('node-forge/lib/forge')\nexports.publicKeyLength = forge.pki.ed25519.constants.PUBLIC_KEY_BYTE_LENGTH\nexports.privateKeyLength = forge.pki.ed25519.constants.PRIVATE_KEY_BYTE_LENGTH\n\nexports.generateKey = async function () { // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair()\n}\n\n// seed should be a 32 byte uint8array\nexports.generateKeyFromSeed = async function (seed) { // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair({ seed })\n}\n\nexports.hashAndSign = async function (key, msg) { // eslint-disable-line require-await\n  return forge.pki.ed25519.sign({ message: msg, privateKey: key })\n  // return Buffer.from(nacl.sign.detached(msg, key))\n}\n\nexports.hashAndVerify = async function (key, sig, msg) { // eslint-disable-line require-await\n  return forge.pki.ed25519.verify({ signature: sig, message: msg, publicKey: key })\n}\n"]},"metadata":{},"sourceType":"script"}