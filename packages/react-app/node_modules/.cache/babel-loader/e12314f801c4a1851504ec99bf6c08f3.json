{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar extractDataFromBlock = require('../../../utils/extract-data-from-block');\n\nvar validateOffsetAndLength = require('../../../utils/validate-offset-and-length');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar errCode = require('err-code');\n\nfunction emitBytes(_x, _x2, _x3, _x4) {\n  return _emitBytes.apply(this, arguments);\n}\n\nfunction _emitBytes() {\n  _emitBytes = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipld, node, start, end) {\n    var streamPosition,\n        options,\n        buf,\n        file,\n        nodeHasData,\n        _buf,\n        childStart,\n        i,\n        childLink,\n        childEnd,\n        child,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _value,\n        _buf2,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            streamPosition = _args.length > 4 && _args[4] !== undefined ? _args[4] : 0;\n            options = _args.length > 5 ? _args[5] : undefined;\n\n            if (!Buffer.isBuffer(node)) {\n              _context.next = 9;\n              break;\n            }\n\n            buf = extractDataFromBlock(node, streamPosition, start, end);\n\n            if (!buf.length) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 7;\n            return buf;\n\n          case 7:\n            streamPosition += buf.length;\n            return _context.abrupt(\"return\", streamPosition);\n\n          case 9:\n            _context.prev = 9;\n            file = UnixFS.unmarshal(node.Data);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](9);\n            throw errCode(_context.t0, 'ERR_NOT_UNIXFS');\n\n          case 16:\n            // might be a unixfs `raw` node or have data on intermediate nodes\n            nodeHasData = Boolean(file.data && file.data.length);\n\n            if (!nodeHasData) {\n              _context.next = 23;\n              break;\n            }\n\n            _buf = extractDataFromBlock(file.data, streamPosition, start, end);\n\n            if (!_buf.length) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 22;\n            return _buf;\n\n          case 22:\n            streamPosition += file.data.length;\n\n          case 23:\n            childStart = streamPosition; // work out which child nodes contain the requested data\n\n            i = 0;\n\n          case 25:\n            if (!(i < node.Links.length)) {\n              _context.next = 72;\n              break;\n            }\n\n            childLink = node.Links[i];\n            childEnd = streamPosition + file.blockSizes[i];\n\n            if (!(start >= childStart && start < childEnd || // child has offset byte\n            end > childStart && end <= childEnd || // child has end byte\n            start < childStart && end > childEnd)) {\n              _context.next = 67;\n              break;\n            }\n\n            _context.next = 31;\n            return _awaitAsyncGenerator(ipld.get(childLink.Hash, options));\n\n          case 31:\n            child = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 34;\n            _iterator = _asyncIterator(emitBytes(ipld, child, start, end, streamPosition, options));\n\n          case 36:\n            _context.next = 38;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 38:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 42;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 42:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 51;\n              break;\n            }\n\n            _buf2 = _value;\n            streamPosition += _buf2.length;\n            _context.next = 48;\n            return _buf2;\n\n          case 48:\n            _iteratorNormalCompletion = true;\n            _context.next = 36;\n            break;\n\n          case 51:\n            _context.next = 57;\n            break;\n\n          case 53:\n            _context.prev = 53;\n            _context.t1 = _context[\"catch\"](34);\n            _didIteratorError = true;\n            _iteratorError = _context.t1;\n\n          case 57:\n            _context.prev = 57;\n            _context.prev = 58;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 62;\n              break;\n            }\n\n            _context.next = 62;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 62:\n            _context.prev = 62;\n\n            if (!_didIteratorError) {\n              _context.next = 65;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 65:\n            return _context.finish(62);\n\n          case 66:\n            return _context.finish(57);\n\n          case 67:\n            streamPosition = childEnd;\n            childStart = childEnd + 1;\n\n          case 69:\n            i++;\n            _context.next = 25;\n            break;\n\n          case 72:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 13], [34, 53, 57, 67], [58,, 62, 66]]);\n  }));\n  return _emitBytes.apply(this, arguments);\n}\n\nvar fileContent = function fileContent(cid, node, unixfs, path, resolve, depth, ipld) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var fileSize = unixfs.fileSize();\n\n    var _validateOffsetAndLen = validateOffsetAndLength(fileSize, options.offset, options.length),\n        offset = _validateOffsetAndLen.offset,\n        length = _validateOffsetAndLen.length;\n\n    var start = offset;\n    var end = offset + length;\n    return emitBytes(ipld, node, start, end, 0, options);\n  };\n};\n\nmodule.exports = fileContent;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/file.js"],"names":["require","Buffer","extractDataFromBlock","validateOffsetAndLength","UnixFS","errCode","emitBytes","ipld","node","start","end","streamPosition","options","isBuffer","buf","length","file","unmarshal","Data","nodeHasData","Boolean","data","childStart","i","Links","childLink","childEnd","blockSizes","get","Hash","child","fileContent","cid","unixfs","path","resolve","depth","fileSize","offset","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst extractDataFromBlock = require('../../../utils/extract-data-from-block')\nconst validateOffsetAndLength = require('../../../utils/validate-offset-and-length')\nconst UnixFS = require('ipfs-unixfs')\nconst errCode = require('err-code')\n\nasync function * emitBytes (ipld, node, start, end, streamPosition = 0, options) {\n  // a `raw` node\n  if (Buffer.isBuffer(node)) {\n    const buf = extractDataFromBlock(node, streamPosition, start, end)\n\n    if (buf.length) {\n      yield buf\n    }\n\n    streamPosition += buf.length\n\n    return streamPosition\n  }\n\n  let file\n\n  try {\n    file = UnixFS.unmarshal(node.Data)\n  } catch (err) {\n    throw errCode(err, 'ERR_NOT_UNIXFS')\n  }\n\n  // might be a unixfs `raw` node or have data on intermediate nodes\n  const nodeHasData = Boolean(file.data && file.data.length)\n\n  if (nodeHasData) {\n    const buf = extractDataFromBlock(file.data, streamPosition, start, end)\n\n    if (buf.length) {\n      yield buf\n    }\n\n    streamPosition += file.data.length\n  }\n\n  let childStart = streamPosition\n\n  // work out which child nodes contain the requested data\n  for (let i = 0; i < node.Links.length; i++) {\n    const childLink = node.Links[i]\n    const childEnd = streamPosition + file.blockSizes[i]\n\n    if ((start >= childStart && start < childEnd) || // child has offset byte\n        (end > childStart && end <= childEnd) || // child has end byte\n        (start < childStart && end > childEnd)) { // child is between offset and end bytes\n      const child = await ipld.get(childLink.Hash, options)\n\n      for await (const buf of emitBytes(ipld, child, start, end, streamPosition, options)) {\n        streamPosition += buf.length\n\n        yield buf\n      }\n    }\n\n    streamPosition = childEnd\n    childStart = childEnd + 1\n  }\n}\n\nconst fileContent = (cid, node, unixfs, path, resolve, depth, ipld) => {\n  return (options = {}) => {\n    const fileSize = unixfs.fileSize()\n\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(fileSize, options.offset, options.length)\n\n    const start = offset\n    const end = offset + length\n\n    return emitBytes(ipld, node, start, end, 0, options)\n  }\n}\n\nmodule.exports = fileContent\n"]},"metadata":{},"sourceType":"script"}