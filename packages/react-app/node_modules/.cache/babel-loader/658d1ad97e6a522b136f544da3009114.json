{"ast":null,"code":"'use strict';\n\nconst crypto = require('./crypto');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error'); // step 2. Exchange\n// -- exchange (signed) ephemeral keys. verify signatures.\n\nmodule.exports = async function exchange(state, wrapped) {\n  log('2. exchange - start');\n  log('2. exchange - writing exchange');\n  const ex = await crypto.createExchange(state);\n  await wrapped.writeLP(ex);\n  const msg = await wrapped.readLP();\n  log('2. exchange - reading exchange');\n  await crypto.verify(state, msg.slice());\n  await crypto.generateKeys(state);\n  log('2. exchange - finish');\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-secio/src/handshake/exchange.js"],"names":["crypto","require","debug","log","error","module","exports","exchange","state","wrapped","ex","createExchange","writeLP","msg","readLP","verify","slice","generateKeys"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,GAAG,GAAGD,KAAK,CAAC,cAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,oBAAD,CAAjB,C,CAEA;AACA;;AACAG,MAAM,CAACC,OAAP,GAAiB,eAAeC,QAAf,CAAyBC,KAAzB,EAAgCC,OAAhC,EAAyC;AACxDN,EAAAA,GAAG,CAAC,qBAAD,CAAH;AAEAA,EAAAA,GAAG,CAAC,gCAAD,CAAH;AACA,QAAMO,EAAE,GAAG,MAAMV,MAAM,CAACW,cAAP,CAAsBH,KAAtB,CAAjB;AAEA,QAAMC,OAAO,CAACG,OAAR,CAAgBF,EAAhB,CAAN;AACA,QAAMG,GAAG,GAAG,MAAMJ,OAAO,CAACK,MAAR,EAAlB;AAEAX,EAAAA,GAAG,CAAC,gCAAD,CAAH;AACA,QAAMH,MAAM,CAACe,MAAP,CAAcP,KAAd,EAAqBK,GAAG,CAACG,KAAJ,EAArB,CAAN;AAEA,QAAMhB,MAAM,CAACiB,YAAP,CAAoBT,KAApB,CAAN;AACAL,EAAAA,GAAG,CAAC,sBAAD,CAAH;AACD,CAdD","sourcesContent":["'use strict'\n\nconst crypto = require('./crypto')\n\nconst debug = require('debug')\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\n// step 2. Exchange\n// -- exchange (signed) ephemeral keys. verify signatures.\nmodule.exports = async function exchange (state, wrapped) {\n  log('2. exchange - start')\n\n  log('2. exchange - writing exchange')\n  const ex = await crypto.createExchange(state)\n\n  await wrapped.writeLP(ex)\n  const msg = await wrapped.readLP()\n\n  log('2. exchange - reading exchange')\n  await crypto.verify(state, msg.slice())\n\n  await crypto.generateKeys(state)\n  log('2. exchange - finish')\n}\n"]},"metadata":{},"sourceType":"script"}