{"ast":null,"code":"'use strict';\n\nconst Big = require('bignumber.js');\n\nconst parseDuration = require('parse-duration');\n\nconst errCode = require('err-code');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nfunction getBandwidthStats(libp2p, opts) {\n  let stats;\n\n  if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer);\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto);\n  } else {\n    stats = libp2p.metrics.global;\n  }\n\n  if (!stats) {\n    return {\n      totalIn: new Big(0),\n      totalOut: new Big(0),\n      rateIn: new Big(0),\n      rateOut: new Big(0)\n    };\n  }\n\n  const {\n    movingAverages,\n    snapshot\n  } = stats;\n  return {\n    totalIn: snapshot.dataReceived,\n    totalOut: snapshot.dataSent,\n    rateIn: new Big(movingAverages.dataReceived[60000].movingAverage() / 60),\n    rateOut: new Big(movingAverages.dataSent[60000].movingAverage() / 60)\n  };\n}\n\nmodule.exports = ({\n  libp2p\n}) => {\n  return withTimeoutOption(async function* (options) {\n    options = options || {};\n\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options);\n      return;\n    }\n\n    let interval = options.interval || 1000;\n\n    try {\n      interval = typeof interval === 'string' ? parseDuration(interval) : interval;\n      if (!interval || interval < 0) throw new Error('invalid poll interval');\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_POLL_INTERVAL');\n    }\n\n    let timeoutId;\n\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options); // eslint-disable-next-line no-loop-func\n\n        await new Promise(resolve => {\n          timeoutId = setTimeout(resolve, interval);\n        });\n      }\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/stats/bw.js"],"names":["Big","require","parseDuration","errCode","withTimeoutOption","getBandwidthStats","libp2p","opts","stats","peer","metrics","forPeer","proto","forProtocol","global","totalIn","totalOut","rateIn","rateOut","movingAverages","snapshot","dataReceived","dataSent","movingAverage","module","exports","options","poll","interval","Error","err","timeoutId","Promise","resolve","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Big = require('bignumber.js')\nconst parseDuration = require('parse-duration')\nconst errCode = require('err-code')\nconst { withTimeoutOption } = require('../../utils')\n\nfunction getBandwidthStats (libp2p, opts) {\n  let stats\n\n  if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer)\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto)\n  } else {\n    stats = libp2p.metrics.global\n  }\n\n  if (!stats) {\n    return {\n      totalIn: new Big(0),\n      totalOut: new Big(0),\n      rateIn: new Big(0),\n      rateOut: new Big(0)\n    }\n  }\n\n  const { movingAverages, snapshot } = stats\n\n  return {\n    totalIn: snapshot.dataReceived,\n    totalOut: snapshot.dataSent,\n    rateIn: new Big(movingAverages.dataReceived[60000].movingAverage() / 60),\n    rateOut: new Big(movingAverages.dataSent[60000].movingAverage() / 60)\n  }\n}\n\nmodule.exports = ({ libp2p }) => {\n  return withTimeoutOption(async function * (options) {\n    options = options || {}\n\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options)\n      return\n    }\n\n    let interval = options.interval || 1000\n    try {\n      interval = typeof interval === 'string' ? parseDuration(interval) : interval\n      if (!interval || interval < 0) throw new Error('invalid poll interval')\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_POLL_INTERVAL')\n    }\n\n    let timeoutId\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options)\n        // eslint-disable-next-line no-loop-func\n        await new Promise(resolve => { timeoutId = setTimeout(resolve, interval) })\n      }\n    } finally {\n      clearTimeout(timeoutId)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}