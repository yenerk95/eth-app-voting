{"ast":null,"code":"'use strict';\n\nconst pSettle = require('p-settle');\n\nconst {\n  codes\n} = require('./errors');\n\nconst errCode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:transports');\nlog.error = debug('libp2p:transports:error');\n\nclass TransportManager {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Libp2p} options.libp2p The Libp2p instance. It will be passed to the transports.\n   * @param {Upgrader} options.upgrader The upgrader to provide to the transports\n   * @param {boolean} [options.faultTolerance = FAULT_TOLERANCE.FATAL_ALL] Address listen error tolerance.\n   */\n  constructor({\n    libp2p,\n    upgrader,\n    faultTolerance = FAULT_TOLERANCE.FATAL_ALL\n  }) {\n    this.libp2p = libp2p;\n    this.upgrader = upgrader;\n    this._transports = new Map();\n    this._listeners = new Map();\n    this.faultTolerance = faultTolerance;\n  }\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {String} key\n   * @param {Transport} Transport\n   * @param {*} transportOptions Additional options to pass to the transport\n   * @returns {void}\n   */\n\n\n  add(key, Transport, transportOptions = {}) {\n    log('adding %s', key);\n\n    if (!key) {\n      throw errCode(new Error(`Transport must have a valid key, was given '${key}'`), codes.ERR_INVALID_KEY);\n    }\n\n    if (this._transports.has(key)) {\n      throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT);\n    }\n\n    const transport = new Transport({ ...transportOptions,\n      libp2p: this.libp2p,\n      upgrader: this.upgrader\n    });\n\n    this._transports.set(key, transport);\n\n    if (!this._listeners.has(key)) {\n      this._listeners.set(key, []);\n    }\n  }\n  /**\n   * Stops all listeners\n   * @async\n   */\n\n\n  async close() {\n    const tasks = [];\n\n    for (const [key, listeners] of this._listeners) {\n      log('closing listeners for %s', key);\n\n      while (listeners.length) {\n        const listener = listeners.pop();\n        tasks.push(listener.close());\n      }\n    }\n\n    await Promise.all(tasks);\n    log('all listeners closed');\n\n    for (const key of this._listeners.keys()) {\n      this._listeners.set(key, []);\n    }\n  }\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   * @param {Multiaddr} ma\n   * @param {*} options\n   * @returns {Promise<Connection>}\n   */\n\n\n  async dial(ma, options) {\n    const transport = this.transportForMultiaddr(ma);\n\n    if (!transport) {\n      throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE);\n    }\n\n    try {\n      return await transport.dial(ma, options);\n    } catch (err) {\n      if (!err.code) err.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n      throw err;\n    }\n  }\n  /**\n   * Returns all Multiaddr's the listeners are using\n   * @returns {Multiaddr[]}\n   */\n\n\n  getAddrs() {\n    let addrs = [];\n\n    for (const listeners of this._listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()];\n      }\n    }\n\n    return addrs;\n  }\n  /**\n   * Returns all the transports instances.\n   * @returns {Iterator<Transport>}\n   */\n\n\n  getTransports() {\n    return this._transports.values();\n  }\n  /**\n   * Finds a transport that matches the given Multiaddr\n   * @param {Multiaddr} ma\n   * @returns {Transport|null}\n   */\n\n\n  transportForMultiaddr(ma) {\n    for (const transport of this._transports.values()) {\n      const addrs = transport.filter([ma]);\n      if (addrs.length) return transport;\n    }\n\n    return null;\n  }\n  /**\n   * Starts listeners for each listen Multiaddr.\n   * @async\n   */\n\n\n  async listen() {\n    const addrs = this.libp2p.addressManager.getListenAddrs();\n\n    if (addrs.length === 0) {\n      log('no addresses were provided for listening, this node is dial only');\n      return;\n    }\n\n    const couldNotListen = [];\n\n    for (const [key, transport] of this._transports.entries()) {\n      const supportedAddrs = transport.filter(addrs);\n      const tasks = []; // For each supported multiaddr, create a listener\n\n      for (const addr of supportedAddrs) {\n        log('creating listener for %s on %s', key, addr);\n        const listener = transport.createListener({}, this.onConnection);\n\n        this._listeners.get(key).push(listener); // We need to attempt to listen on everything\n\n\n        tasks.push(listener.listen(addr));\n      } // Keep track of transports we had no addresses for\n\n\n      if (tasks.length === 0) {\n        couldNotListen.push(key);\n        continue;\n      }\n\n      const results = await pSettle(tasks); // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n\n      const isListening = results.find(r => r.isFulfilled === true);\n\n      if (!isListening) {\n        throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES);\n      }\n    } // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n\n\n    if (couldNotListen.length === this._transports.size) {\n      const message = `no valid addresses were provided for transports [${couldNotListen}]`;\n\n      if (this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL) {\n        throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES);\n      }\n\n      log(`libp2p in dial mode only: ${message}`);\n    }\n  }\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   *\n   * @async\n   * @param {string} key\n   */\n\n\n  async remove(key) {\n    log('removing %s', key);\n\n    if (this._listeners.has(key)) {\n      // Close any running listeners\n      for (const listener of this._listeners.get(key)) {\n        await listener.close();\n      }\n    }\n\n    this._transports.delete(key);\n\n    this._listeners.delete(key);\n  }\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   * @async\n   */\n\n\n  async removeAll() {\n    const tasks = [];\n\n    for (const key of this._transports.keys()) {\n      tasks.push(this.remove(key));\n    }\n\n    await Promise.all(tasks);\n  }\n\n}\n/**\n * Enum Transport Manager Fault Tolerance values.\n * FATAL_ALL should be used for failing in any listen circumstance.\n * NO_FATAL should be used for not failing when not listening.\n * @readonly\n * @enum {number}\n */\n\n\nconst FAULT_TOLERANCE = {\n  FATAL_ALL: 0,\n  NO_FATAL: 1\n};\nTransportManager.FaultTolerance = FAULT_TOLERANCE;\nmodule.exports = TransportManager;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/transport-manager.js"],"names":["pSettle","require","codes","errCode","debug","log","error","TransportManager","constructor","libp2p","upgrader","faultTolerance","FAULT_TOLERANCE","FATAL_ALL","_transports","Map","_listeners","add","key","Transport","transportOptions","Error","ERR_INVALID_KEY","has","ERR_DUPLICATE_TRANSPORT","transport","set","close","tasks","listeners","length","listener","pop","push","Promise","all","keys","dial","ma","options","transportForMultiaddr","String","ERR_TRANSPORT_UNAVAILABLE","err","code","ERR_TRANSPORT_DIAL_FAILED","getAddrs","addrs","values","getTransports","filter","listen","addressManager","getListenAddrs","couldNotListen","entries","supportedAddrs","addr","createListener","onConnection","get","results","isListening","find","r","isFulfilled","ERR_NO_VALID_ADDRESSES","size","message","remove","delete","removeAll","NO_FATAL","FaultTolerance","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst pSettle = require('p-settle')\nconst { codes } = require('./errors')\nconst errCode = require('err-code')\nconst debug = require('debug')\nconst log = debug('libp2p:transports')\nlog.error = debug('libp2p:transports:error')\n\nclass TransportManager {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Libp2p} options.libp2p The Libp2p instance. It will be passed to the transports.\n   * @param {Upgrader} options.upgrader The upgrader to provide to the transports\n   * @param {boolean} [options.faultTolerance = FAULT_TOLERANCE.FATAL_ALL] Address listen error tolerance.\n   */\n  constructor ({ libp2p, upgrader, faultTolerance = FAULT_TOLERANCE.FATAL_ALL }) {\n    this.libp2p = libp2p\n    this.upgrader = upgrader\n    this._transports = new Map()\n    this._listeners = new Map()\n    this.faultTolerance = faultTolerance\n  }\n\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {String} key\n   * @param {Transport} Transport\n   * @param {*} transportOptions Additional options to pass to the transport\n   * @returns {void}\n   */\n  add (key, Transport, transportOptions = {}) {\n    log('adding %s', key)\n    if (!key) {\n      throw errCode(new Error(`Transport must have a valid key, was given '${key}'`), codes.ERR_INVALID_KEY)\n    }\n    if (this._transports.has(key)) {\n      throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT)\n    }\n\n    const transport = new Transport({\n      ...transportOptions,\n      libp2p: this.libp2p,\n      upgrader: this.upgrader\n    })\n\n    this._transports.set(key, transport)\n    if (!this._listeners.has(key)) {\n      this._listeners.set(key, [])\n    }\n  }\n\n  /**\n   * Stops all listeners\n   * @async\n   */\n  async close () {\n    const tasks = []\n    for (const [key, listeners] of this._listeners) {\n      log('closing listeners for %s', key)\n      while (listeners.length) {\n        const listener = listeners.pop()\n        tasks.push(listener.close())\n      }\n    }\n\n    await Promise.all(tasks)\n    log('all listeners closed')\n    for (const key of this._listeners.keys()) {\n      this._listeners.set(key, [])\n    }\n  }\n\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   * @param {Multiaddr} ma\n   * @param {*} options\n   * @returns {Promise<Connection>}\n   */\n  async dial (ma, options) {\n    const transport = this.transportForMultiaddr(ma)\n    if (!transport) {\n      throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE)\n    }\n\n    try {\n      return await transport.dial(ma, options)\n    } catch (err) {\n      if (!err.code) err.code = codes.ERR_TRANSPORT_DIAL_FAILED\n      throw err\n    }\n  }\n\n  /**\n   * Returns all Multiaddr's the listeners are using\n   * @returns {Multiaddr[]}\n   */\n  getAddrs () {\n    let addrs = []\n    for (const listeners of this._listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()]\n      }\n    }\n    return addrs\n  }\n\n  /**\n   * Returns all the transports instances.\n   * @returns {Iterator<Transport>}\n   */\n  getTransports () {\n    return this._transports.values()\n  }\n\n  /**\n   * Finds a transport that matches the given Multiaddr\n   * @param {Multiaddr} ma\n   * @returns {Transport|null}\n   */\n  transportForMultiaddr (ma) {\n    for (const transport of this._transports.values()) {\n      const addrs = transport.filter([ma])\n      if (addrs.length) return transport\n    }\n    return null\n  }\n\n  /**\n   * Starts listeners for each listen Multiaddr.\n   * @async\n   */\n  async listen () {\n    const addrs = this.libp2p.addressManager.getListenAddrs()\n\n    if (addrs.length === 0) {\n      log('no addresses were provided for listening, this node is dial only')\n      return\n    }\n\n    const couldNotListen = []\n    for (const [key, transport] of this._transports.entries()) {\n      const supportedAddrs = transport.filter(addrs)\n      const tasks = []\n\n      // For each supported multiaddr, create a listener\n      for (const addr of supportedAddrs) {\n        log('creating listener for %s on %s', key, addr)\n        const listener = transport.createListener({}, this.onConnection)\n        this._listeners.get(key).push(listener)\n\n        // We need to attempt to listen on everything\n        tasks.push(listener.listen(addr))\n      }\n\n      // Keep track of transports we had no addresses for\n      if (tasks.length === 0) {\n        couldNotListen.push(key)\n        continue\n      }\n\n      const results = await pSettle(tasks)\n      // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n      const isListening = results.find(r => r.isFulfilled === true)\n      if (!isListening) {\n        throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES)\n      }\n    }\n\n    // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n    if (couldNotListen.length === this._transports.size) {\n      const message = `no valid addresses were provided for transports [${couldNotListen}]`\n      if (this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL) {\n        throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES)\n      }\n      log(`libp2p in dial mode only: ${message}`)\n    }\n  }\n\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   *\n   * @async\n   * @param {string} key\n   */\n  async remove (key) {\n    log('removing %s', key)\n    if (this._listeners.has(key)) {\n      // Close any running listeners\n      for (const listener of this._listeners.get(key)) {\n        await listener.close()\n      }\n    }\n\n    this._transports.delete(key)\n    this._listeners.delete(key)\n  }\n\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   * @async\n   */\n  async removeAll () {\n    const tasks = []\n    for (const key of this._transports.keys()) {\n      tasks.push(this.remove(key))\n    }\n\n    await Promise.all(tasks)\n  }\n}\n\n/**\n * Enum Transport Manager Fault Tolerance values.\n * FATAL_ALL should be used for failing in any listen circumstance.\n * NO_FATAL should be used for not failing when not listening.\n * @readonly\n * @enum {number}\n */\nconst FAULT_TOLERANCE = {\n  FATAL_ALL: 0,\n  NO_FATAL: 1\n}\n\nTransportManager.FaultTolerance = FAULT_TOLERANCE\n\nmodule.exports = TransportManager\n"]},"metadata":{},"sourceType":"script"}