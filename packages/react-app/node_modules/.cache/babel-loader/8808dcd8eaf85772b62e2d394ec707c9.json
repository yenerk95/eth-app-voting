{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:addresses');\nlog.error = debug('libp2p:addresses:error');\n\nvar multiaddr = require('multiaddr');\n/**\n * Responsible for managing this peers addresses.\n * Peers can specify their listen, announce and noAnnounce addresses.\n * The listen addresses will be used by the libp2p transports to listen for new connections,\n * while the announce an noAnnounce addresses will be combined with the listen addresses for\n * address adverstising to other peers in the network.\n */\n\n\nvar AddressManager = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {object} [options]\n   * @param {Array<string>} [options.listen = []] list of multiaddrs string representation to listen.\n   * @param {Array<string>} [options.announce = []] list of multiaddrs string representation to announce.\n   * @param {Array<string>} [options.noAnnounce = []] list of multiaddrs string representation to not announce.\n   */\n  function AddressManager() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$listen = _ref.listen,\n        listen = _ref$listen === void 0 ? [] : _ref$listen,\n        _ref$announce = _ref.announce,\n        announce = _ref$announce === void 0 ? [] : _ref$announce,\n        _ref$noAnnounce = _ref.noAnnounce,\n        noAnnounce = _ref$noAnnounce === void 0 ? [] : _ref$noAnnounce;\n\n    _classCallCheck(this, AddressManager);\n\n    this.listen = new Set(listen);\n    this.announce = new Set(announce);\n    this.noAnnounce = new Set(noAnnounce);\n  }\n  /**\n   * Get peer listen multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n\n\n  _createClass(AddressManager, [{\n    key: \"getListenAddrs\",\n    value: function getListenAddrs() {\n      return Array.from(this.listen).map(function (a) {\n        return multiaddr(a);\n      });\n    }\n    /**\n     * Get peer announcing multiaddrs.\n     * @return {Array<Multiaddr>}\n     */\n\n  }, {\n    key: \"getAnnounceAddrs\",\n    value: function getAnnounceAddrs() {\n      return Array.from(this.announce).map(function (a) {\n        return multiaddr(a);\n      });\n    }\n    /**\n     * Get peer noAnnouncing multiaddrs.\n     * @return {Array<Multiaddr>}\n     */\n\n  }, {\n    key: \"getNoAnnounceAddrs\",\n    value: function getNoAnnounceAddrs() {\n      return Array.from(this.noAnnounce).map(function (a) {\n        return multiaddr(a);\n      });\n    }\n  }]);\n\n  return AddressManager;\n}();\n\nmodule.exports = AddressManager;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/address-manager/index.js"],"names":["debug","require","log","error","multiaddr","AddressManager","listen","announce","noAnnounce","Set","Array","from","map","a","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGF,KAAK,CAAC,kBAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,wBAAD,CAAjB;;AAEA,IAAMI,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;AAEA;;;;;;;;;IAOMI,c;AACJ;;;;;;;AAOA,4BAAmE;AAAA,mFAAJ,EAAI;AAAA,2BAApDC,MAAoD;AAAA,QAApDA,MAAoD,4BAA3C,EAA2C;AAAA,6BAAvCC,QAAuC;AAAA,QAAvCA,QAAuC,8BAA5B,EAA4B;AAAA,+BAAxBC,UAAwB;AAAA,QAAxBA,UAAwB,gCAAX,EAAW;;AAAA;;AACjE,SAAKF,MAAL,GAAc,IAAIG,GAAJ,CAAQH,MAAR,CAAd;AACA,SAAKC,QAAL,GAAgB,IAAIE,GAAJ,CAAQF,QAAR,CAAhB;AACA,SAAKC,UAAL,GAAkB,IAAIC,GAAJ,CAAQD,UAAR,CAAlB;AACD;AAED;;;;;;;;qCAIkB;AAChB,aAAOE,KAAK,CAACC,IAAN,CAAW,KAAKL,MAAhB,EAAwBM,GAAxB,CAA4B,UAACC,CAAD;AAAA,eAAOT,SAAS,CAACS,CAAD,CAAhB;AAAA,OAA5B,CAAP;AACD;AAED;;;;;;;uCAIoB;AAClB,aAAOH,KAAK,CAACC,IAAN,CAAW,KAAKJ,QAAhB,EAA0BK,GAA1B,CAA8B,UAACC,CAAD;AAAA,eAAOT,SAAS,CAACS,CAAD,CAAhB;AAAA,OAA9B,CAAP;AACD;AAED;;;;;;;yCAIsB;AACpB,aAAOH,KAAK,CAACC,IAAN,CAAW,KAAKH,UAAhB,EAA4BI,GAA5B,CAAgC,UAACC,CAAD;AAAA,eAAOT,SAAS,CAACS,CAAD,CAAhB;AAAA,OAAhC,CAAP;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBV,cAAjB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:addresses')\nlog.error = debug('libp2p:addresses:error')\n\nconst multiaddr = require('multiaddr')\n\n/**\n * Responsible for managing this peers addresses.\n * Peers can specify their listen, announce and noAnnounce addresses.\n * The listen addresses will be used by the libp2p transports to listen for new connections,\n * while the announce an noAnnounce addresses will be combined with the listen addresses for\n * address adverstising to other peers in the network.\n */\nclass AddressManager {\n  /**\n   * @constructor\n   * @param {object} [options]\n   * @param {Array<string>} [options.listen = []] list of multiaddrs string representation to listen.\n   * @param {Array<string>} [options.announce = []] list of multiaddrs string representation to announce.\n   * @param {Array<string>} [options.noAnnounce = []] list of multiaddrs string representation to not announce.\n   */\n  constructor ({ listen = [], announce = [], noAnnounce = [] } = {}) {\n    this.listen = new Set(listen)\n    this.announce = new Set(announce)\n    this.noAnnounce = new Set(noAnnounce)\n  }\n\n  /**\n   * Get peer listen multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n  getListenAddrs () {\n    return Array.from(this.listen).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer announcing multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n  getAnnounceAddrs () {\n    return Array.from(this.announce).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer noAnnouncing multiaddrs.\n   * @return {Array<Multiaddr>}\n   */\n  getNoAnnounceAddrs () {\n    return Array.from(this.noAnnounce).map((a) => multiaddr(a))\n  }\n}\n\nmodule.exports = AddressManager\n"]},"metadata":{},"sourceType":"script"}