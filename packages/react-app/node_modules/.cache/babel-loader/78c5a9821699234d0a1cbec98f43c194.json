{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst errCode = require('err-code');\n\nconst {\n  normalizeCidPath,\n  mapFile,\n  withTimeoutOption\n} = require('../utils');\n\nmodule.exports = function ({\n  ipld,\n  preload\n}) {\n  return withTimeoutOption(async function* get(ipfsPath, options) {\n    options = options || {};\n\n    if (options.preload !== false) {\n      let pathComponents;\n\n      try {\n        pathComponents = normalizeCidPath(ipfsPath).split('/');\n      } catch (err) {\n        throw errCode(err, 'ERR_INVALID_PATH');\n      }\n\n      preload(pathComponents[0]);\n    }\n\n    for await (const file of exporter.recursive(ipfsPath, ipld, options)) {\n      yield mapFile(file, { ...options,\n        includeContent: true\n      });\n    }\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/get.js"],"names":["exporter","require","errCode","normalizeCidPath","mapFile","withTimeoutOption","module","exports","ipld","preload","get","ipfsPath","options","pathComponents","split","err","file","recursive","includeContent"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,gBAAF;AAAoBC,EAAAA,OAApB;AAA6BC,EAAAA;AAA7B,IAAmDJ,OAAO,CAAC,UAAD,CAAhE;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAV,EAA6B;AAC5C,SAAOJ,iBAAiB,CAAC,gBAAiBK,GAAjB,CAAsBC,QAAtB,EAAgCC,OAAhC,EAAyC;AAChEA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAIA,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7B,UAAII,cAAJ;;AAEA,UAAI;AACFA,QAAAA,cAAc,GAAGV,gBAAgB,CAACQ,QAAD,CAAhB,CAA2BG,KAA3B,CAAiC,GAAjC,CAAjB;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,cAAMb,OAAO,CAACa,GAAD,EAAM,kBAAN,CAAb;AACD;;AAEDN,MAAAA,OAAO,CAACI,cAAc,CAAC,CAAD,CAAf,CAAP;AACD;;AAED,eAAW,MAAMG,IAAjB,IAAyBhB,QAAQ,CAACiB,SAAT,CAAmBN,QAAnB,EAA6BH,IAA7B,EAAmCI,OAAnC,CAAzB,EAAsE;AACpE,YAAMR,OAAO,CAACY,IAAD,EAAO,EAClB,GAAGJ,OADe;AAElBM,QAAAA,cAAc,EAAE;AAFE,OAAP,CAAb;AAID;AACF,GArBuB,CAAxB;AAsBD,CAvBD","sourcesContent":["'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { normalizeCidPath, mapFile, withTimeoutOption } = require('../utils')\n\nmodule.exports = function ({ ipld, preload }) {\n  return withTimeoutOption(async function * get (ipfsPath, options) {\n    options = options || {}\n\n    if (options.preload !== false) {\n      let pathComponents\n\n      try {\n        pathComponents = normalizeCidPath(ipfsPath).split('/')\n      } catch (err) {\n        throw errCode(err, 'ERR_INVALID_PATH')\n      }\n\n      preload(pathComponents[0])\n    }\n\n    for await (const file of exporter.recursive(ipfsPath, ipld, options)) {\n      yield mapFile(file, {\n        ...options,\n        includeContent: true\n      })\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}