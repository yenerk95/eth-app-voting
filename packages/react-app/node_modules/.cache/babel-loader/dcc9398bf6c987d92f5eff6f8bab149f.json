{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('../protocol'),\n    CircuitPB = _require.CircuitRelay;\n\nvar multicodec = require('../multicodec');\n\nvar StreamHandler = require('./stream-handler');\n\nvar _require2 = require('./utils'),\n    validateAddrs = _require2.validateAddrs;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:circuit:stop');\nlog.error = debug('libp2p:circuit:stop:error');\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<*>} Resolves a duplex iterable\n */\n\nmodule.exports.handleStop = function handleStop(_ref) {\n  var connection = _ref.connection,\n      request = _ref.request,\n      streamHandler = _ref.streamHandler;\n\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err);\n  } // The request is valid\n\n\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n};\n/**\n * Creates a STOP request\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<*>} Resolves a duplex iterable\n */\n\n\nmodule.exports.stop = /*#__PURE__*/function () {\n  var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var connection, request, _yield$connection$new, stream, streamHandler, response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connection = _ref2.connection, request = _ref2.request;\n            _context.next = 3;\n            return connection.newStream([multicodec.relay]);\n\n          case 3:\n            _yield$connection$new = _context.sent;\n            stream = _yield$connection$new.stream;\n            log('starting stop request to %s', connection.remotePeer.toB58String());\n            streamHandler = new StreamHandler({\n              stream: stream\n            });\n            streamHandler.write(request);\n            _context.next = 10;\n            return streamHandler.read();\n\n          case 10:\n            response = _context.sent;\n\n            if (!(response.code === CircuitPB.Status.SUCCESS)) {\n              _context.next = 14;\n              break;\n            }\n\n            log('stop request to %s was successful', connection.remotePeer.toB58String());\n            return _context.abrupt(\"return\", streamHandler.rest());\n\n          case 14:\n            log('stop request failed with code %d', response.code);\n            streamHandler.close();\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function stop(_x) {\n    return _stop.apply(this, arguments);\n  }\n\n  return stop;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/circuit/circuit/stop.js"],"names":["require","CircuitPB","CircuitRelay","multicodec","StreamHandler","validateAddrs","debug","log","error","module","exports","handleStop","connection","request","streamHandler","err","remotePeer","toB58String","write","type","Type","STATUS","code","Status","SUCCESS","rest","stop","newStream","relay","stream","read","response","close"],"mappings":"AAAA;;;;;;eAEoCA,OAAO,CAAC,aAAD,C;IAArBC,S,YAAdC,Y;;AACR,IAAMC,UAAU,GAAGH,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAMI,aAAa,GAAGJ,OAAO,CAAC,kBAAD,CAA7B;;gBAC0BA,OAAO,CAAC,SAAD,C;IAAzBK,a,aAAAA,a;;AAER,IAAMC,KAAK,GAAGN,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMO,GAAG,GAAGD,KAAK,CAAC,qBAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,2BAAD,CAAjB;AAEA;;;;;;;;;;;AAUAG,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B,SAASA,UAAT,OAIzB;AAAA,MAHDC,UAGC,QAHDA,UAGC;AAAA,MAFDC,OAEC,QAFDA,OAEC;AAAA,MADDC,aACC,QADDA,aACC;;AACD;AACA,MAAI;AACFT,IAAAA,aAAa,CAACQ,OAAD,EAAUC,aAAV,CAAb;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,WAAOR,GAAG,CAACC,KAAJ,CAAU,kCAAV,EAA8CI,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAA9C,EAAmFF,GAAnF,CAAP;AACD,GANA,CAQD;;;AACAR,EAAAA,GAAG,CAAC,uBAAD,CAAH;AACAO,EAAAA,aAAa,CAACI,KAAd,CAAoB;AAClBC,IAAAA,IAAI,EAAElB,SAAS,CAACmB,IAAV,CAAeC,MADH;AAElBC,IAAAA,IAAI,EAAErB,SAAS,CAACsB,MAAV,CAAiBC;AAFL,GAApB;AAIA,SAAOV,aAAa,CAACW,IAAd,EAAP;AACD,CAnBD;AAqBA;;;;;;;;;;AAQAhB,MAAM,CAACC,OAAP,CAAegB,IAAf;AAAA,uEAAsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpBd,YAAAA,UADoB,SACpBA,UADoB,EAEpBC,OAFoB,SAEpBA,OAFoB;AAAA;AAAA,mBAIKD,UAAU,CAACe,SAAX,CAAqB,CAACxB,UAAU,CAACyB,KAAZ,CAArB,CAJL;;AAAA;AAAA;AAIZC,YAAAA,MAJY,yBAIZA,MAJY;AAKpBtB,YAAAA,GAAG,CAAC,6BAAD,EAAgCK,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAhC,CAAH;AACMH,YAAAA,aANc,GAME,IAAIV,aAAJ,CAAkB;AAAEyB,cAAAA,MAAM,EAANA;AAAF,aAAlB,CANF;AAQpBf,YAAAA,aAAa,CAACI,KAAd,CAAoBL,OAApB;AARoB;AAAA,mBASGC,aAAa,CAACgB,IAAd,EATH;;AAAA;AASdC,YAAAA,QATc;;AAAA,kBAWhBA,QAAQ,CAACT,IAAT,KAAkBrB,SAAS,CAACsB,MAAV,CAAiBC,OAXnB;AAAA;AAAA;AAAA;;AAYlBjB,YAAAA,GAAG,CAAC,mCAAD,EAAsCK,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAtC,CAAH;AAZkB,6CAaXH,aAAa,CAACW,IAAd,EAbW;;AAAA;AAgBpBlB,YAAAA,GAAG,CAAC,kCAAD,EAAqCwB,QAAQ,CAACT,IAA9C,CAAH;AACAR,YAAAA,aAAa,CAACkB,KAAd;;AAjBoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA,WAAqCN,IAArC;AAAA;AAAA;;AAAA,SAAqCA,IAArC;AAAA","sourcesContent":["'use strict'\n\nconst { CircuitRelay: CircuitPB } = require('../protocol')\nconst multicodec = require('../multicodec')\nconst StreamHandler = require('./stream-handler')\nconst { validateAddrs } = require('./utils')\n\nconst debug = require('debug')\nconst log = debug('libp2p:circuit:stop')\nlog.error = debug('libp2p:circuit:stop:error')\n\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<*>} Resolves a duplex iterable\n */\nmodule.exports.handleStop = function handleStop ({\n  connection,\n  request,\n  streamHandler\n}) {\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err)\n  }\n\n  // The request is valid\n  log('stop request is valid')\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n  return streamHandler.rest()\n}\n\n/**\n * Creates a STOP request\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<*>} Resolves a duplex iterable\n */\nmodule.exports.stop = async function stop ({\n  connection,\n  request\n}) {\n  const { stream } = await connection.newStream([multicodec.relay])\n  log('starting stop request to %s', connection.remotePeer.toB58String())\n  const streamHandler = new StreamHandler({ stream })\n\n  streamHandler.write(request)\n  const response = await streamHandler.read()\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %s was successful', connection.remotePeer.toB58String())\n    return streamHandler.rest()\n  }\n\n  log('stop request failed with code %d', response.code)\n  streamHandler.close()\n}\n"]},"metadata":{},"sourceType":"script"}