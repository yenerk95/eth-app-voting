{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst Stat = require('./stat');\n\nconst defaultOptions = {\n  movingAverageIntervals: [60 * 1000, // 1 minute\n  5 * 60 * 1000, // 5 minutes\n  15 * 60 * 1000 // 15 minutes\n  ]\n};\n\nclass Stats extends EventEmitter {\n  constructor(initialCounters, _options) {\n    super();\n    const options = Object.assign({}, defaultOptions, _options);\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout');\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize');\n    }\n\n    this._initialCounters = initialCounters;\n    this._options = options;\n    this._enabled = this._options.enabled;\n    this._global = new Stat(initialCounters, options);\n\n    this._global.on('update', stats => this.emit('update', stats));\n\n    this._peers = new Map();\n  }\n\n  enable() {\n    this._enabled = true;\n    this._options.enabled = true;\n\n    this._global.enable();\n  }\n\n  disable() {\n    this._enabled = false;\n    this._options.enabled = false;\n\n    this._global.disable();\n  }\n\n  stop() {\n    this._enabled = false;\n\n    this._global.stop();\n\n    for (const peerStat of this._peers) {\n      peerStat[1].stop();\n    }\n  }\n\n  get snapshot() {\n    return this._global.snapshot;\n  }\n\n  get movingAverages() {\n    return this._global.movingAverages;\n  }\n\n  forPeer(peerId) {\n    if (peerId.toB58String) {\n      peerId = peerId.toB58String();\n    }\n\n    return this._peers.get(peerId);\n  }\n\n  push(peer, counter, inc) {\n    if (this._enabled) {\n      this._global.push(counter, inc);\n\n      if (peer) {\n        let peerStats = this._peers.get(peer);\n\n        if (!peerStats) {\n          peerStats = new Stat(this._initialCounters, this._options);\n\n          this._peers.set(peer, peerStats);\n        }\n\n        peerStats.push(counter, inc);\n      }\n    }\n  }\n\n  disconnected(peer) {\n    const peerId = peer.toB58String();\n\n    const peerStats = this._peers.get(peerId);\n\n    if (peerStats) {\n      peerStats.stop();\n\n      this._peers.delete(peerId);\n    }\n  }\n\n}\n\nmodule.exports = Stats;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/stats/index.js"],"names":["EventEmitter","require","Stat","defaultOptions","movingAverageIntervals","Stats","constructor","initialCounters","_options","options","Object","assign","computeThrottleTimeout","Error","computeThrottleMaxQueueSize","_initialCounters","_enabled","enabled","_global","on","stats","emit","_peers","Map","enable","disable","stop","peerStat","snapshot","movingAverages","forPeer","peerId","toB58String","get","push","peer","counter","inc","peerStats","set","disconnected","delete","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events')\nconst Stat = require('./stat')\n\nconst defaultOptions = {\n  movingAverageIntervals: [\n    60 * 1000, // 1 minute\n    5 * 60 * 1000, // 5 minutes\n    15 * 60 * 1000 // 15 minutes\n  ]\n}\n\nclass Stats extends EventEmitter {\n  constructor (initialCounters, _options) {\n    super()\n\n    const options = Object.assign({}, defaultOptions, _options)\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout')\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize')\n    }\n\n    this._initialCounters = initialCounters\n    this._options = options\n    this._enabled = this._options.enabled\n\n    this._global = new Stat(initialCounters, options)\n    this._global.on('update', (stats) => this.emit('update', stats))\n\n    this._peers = new Map()\n  }\n\n  enable () {\n    this._enabled = true\n    this._options.enabled = true\n    this._global.enable()\n  }\n\n  disable () {\n    this._enabled = false\n    this._options.enabled = false\n    this._global.disable()\n  }\n\n  stop () {\n    this._enabled = false\n    this._global.stop()\n    for (const peerStat of this._peers) {\n      peerStat[1].stop()\n    }\n  }\n\n  get snapshot () {\n    return this._global.snapshot\n  }\n\n  get movingAverages () {\n    return this._global.movingAverages\n  }\n\n  forPeer (peerId) {\n    if (peerId.toB58String) {\n      peerId = peerId.toB58String()\n    }\n\n    return this._peers.get(peerId)\n  }\n\n  push (peer, counter, inc) {\n    if (this._enabled) {\n      this._global.push(counter, inc)\n\n      if (peer) {\n        let peerStats = this._peers.get(peer)\n        if (!peerStats) {\n          peerStats = new Stat(this._initialCounters, this._options)\n          this._peers.set(peer, peerStats)\n        }\n\n        peerStats.push(counter, inc)\n      }\n    }\n  }\n\n  disconnected (peer) {\n    const peerId = peer.toB58String()\n    const peerStats = this._peers.get(peerId)\n    if (peerStats) {\n      peerStats.stop()\n      this._peers.delete(peerId)\n    }\n  }\n}\n\nmodule.exports = Stats\n"]},"metadata":{},"sourceType":"script"}