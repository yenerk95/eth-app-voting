{"ast":null,"code":"'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nrequire('node-forge/lib/util');\n\nrequire('node-forge/lib/jsbn');\n\nvar forge = require('node-forge/lib/forge');\n\nexports.bigIntegerToUintBase64url = function (num, len) {\n  // Call `.abs()` to convert to unsigned\n  var buf = Buffer.from(num.abs().toByteArray()); // toByteArray converts to big endian\n  // toByteArray() gives us back a signed array, which will include a leading 0\n  // byte if the most significant bit of the number is 1:\n  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n  // Our number will always be positive so we should remove the leading padding.\n\n  buf = buf[0] === 0 ? buf.slice(1) : buf;\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = Buffer.concat([Buffer.alloc(len - buf.length), buf]);\n  }\n\n  return exports.bufferToBase64url(buf);\n}; // Convert a Buffer to a base64 encoded string without padding\n// Adapted from https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#appendix-C\n\n\nexports.bufferToBase64url = function (buf) {\n  return buf.toString('base64').split('=')[0] // Remove any trailing '='s\n  .replace(/\\+/g, '-') // 62nd char of encoding\n  .replace(/\\//g, '_'); // 63rd char of encoding\n}; // Convert a base64url encoded string to a BigInteger\n\n\nexports.base64urlToBigInteger = function (str) {\n  var buf = exports.base64urlToBuffer(str);\n  return new forge.jsbn.BigInteger(buf.toString('hex'), 16);\n};\n\nexports.base64urlToBuffer = function (str, len) {\n  str = (str + '==='.slice((str.length + 3) % 4)).replace(/-/g, '+').replace(/_/g, '/');\n  var buf = Buffer.from(str, 'base64');\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = Buffer.concat([Buffer.alloc(len - buf.length), buf]);\n  }\n\n  return buf;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/util.js"],"names":["require","Buffer","forge","exports","bigIntegerToUintBase64url","num","len","buf","from","abs","toByteArray","slice","length","Error","concat","alloc","bufferToBase64url","toString","split","replace","base64urlToBigInteger","str","base64urlToBuffer","jsbn","BigInteger"],"mappings":"AAAA;;eAEmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACRD,OAAO,CAAC,qBAAD,CAAP;;AACAA,OAAO,CAAC,qBAAD,CAAP;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,sBAAD,CAArB;;AAEAG,OAAO,CAACC,yBAAR,GAAoC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChD;AACA,MAAIC,GAAG,GAAGN,MAAM,CAACO,IAAP,CAAYH,GAAG,CAACI,GAAJ,GAAUC,WAAV,EAAZ,CAAV,CAFgD,CAED;AAE/C;AACA;AACA;AACA;;AACAH,EAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAH,KAAW,CAAX,GAAeA,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAf,GAA8BJ,GAApC;;AAEA,MAAID,GAAG,IAAI,IAAX,EAAiB;AACf,QAAIC,GAAG,CAACK,MAAJ,GAAaN,GAAjB,EAAsB,MAAM,IAAIO,KAAJ,CAAU,uCAAV,CAAN;AACtBN,IAAAA,GAAG,GAAGN,MAAM,CAACa,MAAP,CAAc,CAACb,MAAM,CAACc,KAAP,CAAaT,GAAG,GAAGC,GAAG,CAACK,MAAvB,CAAD,EAAiCL,GAAjC,CAAd,CAAN;AACD;;AAED,SAAOJ,OAAO,CAACa,iBAAR,CAA0BT,GAA1B,CAAP;AACD,CAhBD,C,CAkBA;AACA;;;AACAJ,OAAO,CAACa,iBAAR,GAA4B,UAAAT,GAAG,EAAI;AACjC,SAAOA,GAAG,CACPU,QADI,CACK,QADL,EAEJC,KAFI,CAEE,GAFF,EAEO,CAFP,EAEU;AAFV,GAGJC,OAHI,CAGI,KAHJ,EAGW,GAHX,EAGgB;AAHhB,GAIJA,OAJI,CAII,KAJJ,EAIW,GAJX,CAAP,CADiC,CAKV;AACxB,CAND,C,CAQA;;;AACAhB,OAAO,CAACiB,qBAAR,GAAgC,UAAAC,GAAG,EAAI;AACrC,MAAMd,GAAG,GAAGJ,OAAO,CAACmB,iBAAR,CAA0BD,GAA1B,CAAZ;AACA,SAAO,IAAInB,KAAK,CAACqB,IAAN,CAAWC,UAAf,CAA0BjB,GAAG,CAACU,QAAJ,CAAa,KAAb,CAA1B,EAA+C,EAA/C,CAAP;AACD,CAHD;;AAKAd,OAAO,CAACmB,iBAAR,GAA4B,UAACD,GAAD,EAAMf,GAAN,EAAc;AACxCe,EAAAA,GAAG,GAAG,CAACA,GAAG,GAAG,MAAMV,KAAN,CAAY,CAACU,GAAG,CAACT,MAAJ,GAAa,CAAd,IAAmB,CAA/B,CAAP,EACHO,OADG,CACK,IADL,EACW,GADX,EAEHA,OAFG,CAEK,IAFL,EAEW,GAFX,CAAN;AAIA,MAAIZ,GAAG,GAAGN,MAAM,CAACO,IAAP,CAAYa,GAAZ,EAAiB,QAAjB,CAAV;;AAEA,MAAIf,GAAG,IAAI,IAAX,EAAiB;AACf,QAAIC,GAAG,CAACK,MAAJ,GAAaN,GAAjB,EAAsB,MAAM,IAAIO,KAAJ,CAAU,uCAAV,CAAN;AACtBN,IAAAA,GAAG,GAAGN,MAAM,CAACa,MAAP,CAAc,CAACb,MAAM,CAACc,KAAP,CAAaT,GAAG,GAAGC,GAAG,CAACK,MAAvB,CAAD,EAAiCL,GAAjC,CAAd,CAAN;AACD;;AAED,SAAOA,GAAP;AACD,CAbD","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nrequire('node-forge/lib/util')\nrequire('node-forge/lib/jsbn')\nconst forge = require('node-forge/lib/forge')\n\nexports.bigIntegerToUintBase64url = (num, len) => {\n  // Call `.abs()` to convert to unsigned\n  let buf = Buffer.from(num.abs().toByteArray()) // toByteArray converts to big endian\n\n  // toByteArray() gives us back a signed array, which will include a leading 0\n  // byte if the most significant bit of the number is 1:\n  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n  // Our number will always be positive so we should remove the leading padding.\n  buf = buf[0] === 0 ? buf.slice(1) : buf\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length')\n    buf = Buffer.concat([Buffer.alloc(len - buf.length), buf])\n  }\n\n  return exports.bufferToBase64url(buf)\n}\n\n// Convert a Buffer to a base64 encoded string without padding\n// Adapted from https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#appendix-C\nexports.bufferToBase64url = buf => {\n  return buf\n    .toString('base64')\n    .split('=')[0] // Remove any trailing '='s\n    .replace(/\\+/g, '-') // 62nd char of encoding\n    .replace(/\\//g, '_') // 63rd char of encoding\n}\n\n// Convert a base64url encoded string to a BigInteger\nexports.base64urlToBigInteger = str => {\n  const buf = exports.base64urlToBuffer(str)\n  return new forge.jsbn.BigInteger(buf.toString('hex'), 16)\n}\n\nexports.base64urlToBuffer = (str, len) => {\n  str = (str + '==='.slice((str.length + 3) % 4))\n    .replace(/-/g, '+')\n    .replace(/_/g, '/')\n\n  let buf = Buffer.from(str, 'base64')\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length')\n    buf = Buffer.concat([Buffer.alloc(len - buf.length), buf])\n  }\n\n  return buf\n}\n"]},"metadata":{},"sourceType":"script"}