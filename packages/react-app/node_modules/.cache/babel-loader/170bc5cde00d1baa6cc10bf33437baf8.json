{"ast":null,"code":"'use strict';\n\nconst crypto = require('./crypto');\n\nconst lp = require('it-length-prefixed');\n\nconst {\n  int32BEEncode\n} = lp;\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error'); // step 1. Propose\n// -- propose cipher suite + send pubkeys + nonce\n\nmodule.exports = async function propose(state, wrapped) {\n  log('1. propose - start');\n  const prop = crypto.createProposal(state);\n  log('1. propose - writing proposal', prop);\n  await wrapped.write(lp.encode.single(prop, {\n    lengthEncoder: int32BEEncode\n  }));\n  log('1. propose - reading proposal');\n  const msg = (await wrapped.readLP()).slice();\n  log('1. propose - read proposal', msg);\n  await crypto.identify(state, msg);\n  await crypto.selectProtocols(state);\n  log('1. propose - finish');\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-secio/src/handshake/propose.js"],"names":["crypto","require","lp","int32BEEncode","debug","log","error","module","exports","propose","state","wrapped","prop","createProposal","write","encode","single","lengthEncoder","msg","readLP","slice","identify","selectProtocols"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,oBAAD,CAAlB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAoBD,EAA1B;;AACA,MAAME,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMI,GAAG,GAAGD,KAAK,CAAC,cAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,oBAAD,CAAjB,C,CAEA;AACA;;AACAG,MAAM,CAACC,OAAP,GAAiB,eAAeC,OAAf,CAAwBC,KAAxB,EAA+BC,OAA/B,EAAwC;AACvDN,EAAAA,GAAG,CAAC,oBAAD,CAAH;AAEA,QAAMO,IAAI,GAAGZ,MAAM,CAACa,cAAP,CAAsBH,KAAtB,CAAb;AACAL,EAAAA,GAAG,CAAC,+BAAD,EAAkCO,IAAlC,CAAH;AAEA,QAAMD,OAAO,CAACG,KAAR,CAAcZ,EAAE,CAACa,MAAH,CAAUC,MAAV,CAAiBJ,IAAjB,EAAuB;AAAEK,IAAAA,aAAa,EAAEd;AAAjB,GAAvB,CAAd,CAAN;AAEAE,EAAAA,GAAG,CAAC,+BAAD,CAAH;AACA,QAAMa,GAAG,GAAG,CAAC,MAAMP,OAAO,CAACQ,MAAR,EAAP,EAAyBC,KAAzB,EAAZ;AACAf,EAAAA,GAAG,CAAC,4BAAD,EAA+Ba,GAA/B,CAAH;AAEA,QAAMlB,MAAM,CAACqB,QAAP,CAAgBX,KAAhB,EAAuBQ,GAAvB,CAAN;AACA,QAAMlB,MAAM,CAACsB,eAAP,CAAuBZ,KAAvB,CAAN;AAEAL,EAAAA,GAAG,CAAC,qBAAD,CAAH;AACD,CAhBD","sourcesContent":["'use strict'\n\nconst crypto = require('./crypto')\nconst lp = require('it-length-prefixed')\nconst { int32BEEncode } = lp\nconst debug = require('debug')\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\n// step 1. Propose\n// -- propose cipher suite + send pubkeys + nonce\nmodule.exports = async function propose (state, wrapped) {\n  log('1. propose - start')\n\n  const prop = crypto.createProposal(state)\n  log('1. propose - writing proposal', prop)\n\n  await wrapped.write(lp.encode.single(prop, { lengthEncoder: int32BEEncode }))\n\n  log('1. propose - reading proposal')\n  const msg = (await wrapped.readLP()).slice()\n  log('1. propose - read proposal', msg)\n\n  await crypto.identify(state, msg)\n  await crypto.selectProtocols(state)\n\n  log('1. propose - finish')\n}\n"]},"metadata":{},"sourceType":"script"}