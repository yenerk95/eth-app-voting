{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar mc = require('multicodec');\n\nvar mh = require('multihashing-async').multihash;\n\nvar createNode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, type, options) {\n    var hashAlg, metadata, node, cid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            hashAlg = mh.names[options.hashAlg];\n            metadata = new UnixFS({\n              type: type,\n              mode: options.mode,\n              mtime: options.mtime\n            });\n            node = new DAGNode(metadata.marshal());\n            _context.next = 5;\n            return context.ipld.put(node, mc.DAG_PB, {\n              cidVersion: options.cidVersion,\n              hashAlg: hashAlg,\n              onlyHash: !options.flush\n            });\n\n          case 5:\n            cid = _context.sent;\n            return _context.abrupt(\"return\", {\n              cid: cid,\n              node: node\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createNode(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = createNode;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/utils/create-node.js"],"names":["UnixFS","require","DAGNode","mc","mh","multihash","createNode","context","type","options","hashAlg","names","metadata","mode","mtime","node","marshal","ipld","put","DAG_PB","cidVersion","onlyHash","flush","cid","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAtB;;eAGIA,OAAO,CAAC,aAAD,C;IADTC,O,YAAAA,O;;AAEF,IAAMC,EAAE,GAAGF,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAMG,EAAE,GAAGH,OAAO,CAAC,oBAAD,CAAP,CAA8BI,SAAzC;;AAEA,IAAMC,UAAU;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,OADW,GACDN,EAAE,CAACO,KAAH,CAASF,OAAO,CAACC,OAAjB,CADC;AAEXE,YAAAA,QAFW,GAEA,IAAIZ,MAAJ,CAAW;AAC1BQ,cAAAA,IAAI,EAAJA,IAD0B;AAE1BK,cAAAA,IAAI,EAAEJ,OAAO,CAACI,IAFY;AAG1BC,cAAAA,KAAK,EAAEL,OAAO,CAACK;AAHW,aAAX,CAFA;AAQXC,YAAAA,IARW,GAQJ,IAAIb,OAAJ,CAAYU,QAAQ,CAACI,OAAT,EAAZ,CARI;AAAA;AAAA,mBASCT,OAAO,CAACU,IAAR,CAAaC,GAAb,CAAiBH,IAAjB,EAAuBZ,EAAE,CAACgB,MAA1B,EAAkC;AAClDC,cAAAA,UAAU,EAAEX,OAAO,CAACW,UAD8B;AAElDV,cAAAA,OAAO,EAAPA,OAFkD;AAGlDW,cAAAA,QAAQ,EAAE,CAACZ,OAAO,CAACa;AAH+B,aAAlC,CATD;;AAAA;AASXC,YAAAA,GATW;AAAA,6CAeV;AACLA,cAAAA,GAAG,EAAHA,GADK;AAELR,cAAAA,IAAI,EAAJA;AAFK,aAfU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVT,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAqBAkB,MAAM,CAACC,OAAP,GAAiBnB,UAAjB","sourcesContent":["'use strict'\n\nconst UnixFS = require('ipfs-unixfs')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\nconst mc = require('multicodec')\nconst mh = require('multihashing-async').multihash\n\nconst createNode = async (context, type, options) => {\n  const hashAlg = mh.names[options.hashAlg]\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    mtime: options.mtime\n  })\n\n  const node = new DAGNode(metadata.marshal())\n  const cid = await context.ipld.put(node, mc.DAG_PB, {\n    cidVersion: options.cidVersion,\n    hashAlg,\n    onlyHash: !options.flush\n  })\n\n  return {\n    cid,\n    node\n  }\n}\n\nmodule.exports = createNode\n"]},"metadata":{},"sourceType":"script"}