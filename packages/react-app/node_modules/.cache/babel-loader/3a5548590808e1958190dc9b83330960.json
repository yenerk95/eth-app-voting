{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar getDefaultConfig = require('../runtime/config-nodejs.js');\n\nvar _require = require('../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar log = require('debug')('ipfs:core:config');\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n  return {\n    getAll: withTimeoutOption(repo.config.getAll),\n    get: withTimeoutOption(function (key, options) {\n      if (!key) {\n        return Promise.reject(new Error('key argument is required'));\n      }\n\n      return repo.config.get(key, options);\n    }),\n    set: withTimeoutOption(repo.config.set),\n    replace: withTimeoutOption(repo.config.replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  };\n\n  function applyProfile(_x) {\n    return _applyProfile.apply(this, arguments);\n  }\n\n  function _applyProfile() {\n    _applyProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(profileName) {\n      var options,\n          dryRun,\n          profile,\n          oldCfg,\n          newCfg,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              dryRun = options.dryRun;\n              profile = profiles[profileName];\n\n              if (profile) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error(\"No profile with name '\".concat(profileName, \"' exists\"));\n\n            case 5:\n              _context.prev = 5;\n              _context.next = 8;\n              return repo.config.getAll(options);\n\n            case 8:\n              oldCfg = _context.sent;\n              newCfg = JSON.parse(JSON.stringify(oldCfg)); // clone\n\n              newCfg = profile.transform(newCfg);\n\n              if (dryRun) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 14;\n              return repo.config.replace(newCfg, options);\n\n            case 14:\n              // Scrub private key from output\n              delete oldCfg.Identity.PrivKey;\n              delete newCfg.Identity.PrivKey;\n              return _context.abrupt(\"return\", {\n                original: oldCfg,\n                updated: newCfg\n              });\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](5);\n              log(_context.t0);\n              throw new Error(\"Could not apply profile '\".concat(profileName, \"' to config: \").concat(_context.t0.message));\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 19]]);\n    }));\n    return _applyProfile.apply(this, arguments);\n  }\n};\n\nfunction listProfiles(_x2) {\n  return _listProfiles.apply(this, arguments);\n}\n\nfunction _listProfiles() {\n  _listProfiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", Object.keys(profiles).map(function (name) {\n              return {\n                name: name,\n                description: profiles[name].description\n              };\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _listProfiles.apply(this, arguments);\n}\n\nvar profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery in local networks.',\n    transform: function transform(config) {\n      config.Discovery.MDNS.Enabled = false;\n      config.Discovery.webRTCStar.Enabled = false;\n      return config;\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery in local networks.',\n    transform: function transform(config) {\n      config.Discovery.MDNS.Enabled = true;\n      config.Discovery.webRTCStar.Enabled = true;\n      return config;\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: function transform(config) {\n      var defaultConfig = getDefaultConfig();\n      config.Addresses.API = defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '';\n      config.Addresses.Gateway = defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '';\n      config.Addresses.Swarm = defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : [];\n      config.Bootstrap = [];\n      config.Discovery.MDNS.Enabled = false;\n      config.Discovery.webRTCStar.Enabled = false;\n      return config;\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: function transform(config) {\n      var defaultConfig = getDefaultConfig();\n      config.Addresses.API = defaultConfig.Addresses.API;\n      config.Addresses.Gateway = defaultConfig.Addresses.Gateway;\n      config.Addresses.Swarm = defaultConfig.Addresses.Swarm;\n      config.Bootstrap = defaultConfig.Bootstrap;\n      config.Discovery.MDNS.Enabled = defaultConfig.Discovery.MDNS.Enabled;\n      config.Discovery.webRTCStar.Enabled = defaultConfig.Discovery.webRTCStar.Enabled;\n      return config;\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: function transform(config) {\n      config.Swarm = config.Swarm || {};\n      config.Swarm.ConnMgr = config.Swarm.ConnMgr || {};\n      config.Swarm.ConnMgr.LowWater = 20;\n      config.Swarm.ConnMgr.HighWater = 40;\n      return config;\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: function transform(config) {\n      var defaultConfig = getDefaultConfig();\n      config.Swarm = defaultConfig.Swarm;\n      return config;\n    }\n  }\n};\nmodule.exports.profiles = profiles;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/config.js"],"names":["getDefaultConfig","require","withTimeoutOption","log","module","exports","repo","getAll","config","get","key","options","Promise","reject","Error","set","replace","profiles","apply","applyProfile","list","listProfiles","profileName","dryRun","profile","oldCfg","newCfg","JSON","parse","stringify","transform","Identity","PrivKey","original","updated","message","Object","keys","map","name","description","server","Discovery","MDNS","Enabled","webRTCStar","test","defaultConfig","Addresses","API","Gateway","Swarm","length","Bootstrap","lowpower","ConnMgr","LowWater","HighWater"],"mappings":"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","sourcesContent":["'use strict'\n\nconst getDefaultConfig = require('../runtime/config-nodejs.js')\nconst { withTimeoutOption } = require('../utils')\nconst log = require('debug')('ipfs:core:config')\n\nmodule.exports = ({ repo }) => {\n  return {\n    getAll: withTimeoutOption(repo.config.getAll),\n    get: withTimeoutOption((key, options) => {\n      if (!key) {\n        return Promise.reject(new Error('key argument is required'))\n      }\n\n      return repo.config.get(key, options)\n    }),\n    set: withTimeoutOption(repo.config.set),\n    replace: withTimeoutOption(repo.config.replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  }\n\n  async function applyProfile (profileName, options = {}) {\n    const { dryRun } = options\n\n    const profile = profiles[profileName]\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`)\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options)\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)) // clone\n      newCfg = profile.transform(newCfg)\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options)\n      }\n\n      // Scrub private key from output\n      delete oldCfg.Identity.PrivKey\n      delete newCfg.Identity.PrivKey\n\n      return { original: oldCfg, updated: newCfg }\n    } catch (err) {\n      log(err)\n\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`)\n    }\n  }\n}\n\nasync function listProfiles (options) { // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }))\n}\n\nconst profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery in local networks.',\n    transform: (config) => {\n      config.Discovery.MDNS.Enabled = false\n      config.Discovery.webRTCStar.Enabled = false\n\n      return config\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery in local networks.',\n    transform: (config) => {\n      config.Discovery.MDNS.Enabled = true\n      config.Discovery.webRTCStar.Enabled = true\n\n      return config\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      config.Addresses.API = defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : ''\n      config.Addresses.Gateway = defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : ''\n      config.Addresses.Swarm = defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : []\n      config.Bootstrap = []\n      config.Discovery.MDNS.Enabled = false\n      config.Discovery.webRTCStar.Enabled = false\n\n      return config\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      config.Addresses.API = defaultConfig.Addresses.API\n      config.Addresses.Gateway = defaultConfig.Addresses.Gateway\n      config.Addresses.Swarm = defaultConfig.Addresses.Swarm\n      config.Bootstrap = defaultConfig.Bootstrap\n      config.Discovery.MDNS.Enabled = defaultConfig.Discovery.MDNS.Enabled\n      config.Discovery.webRTCStar.Enabled = defaultConfig.Discovery.webRTCStar.Enabled\n\n      return config\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: (config) => {\n      config.Swarm = config.Swarm || {}\n      config.Swarm.ConnMgr = config.Swarm.ConnMgr || {}\n      config.Swarm.ConnMgr.LowWater = 20\n      config.Swarm.ConnMgr.HighWater = 40\n\n      return config\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      config.Swarm = defaultConfig.Swarm\n\n      return config\n    }\n  }\n\n}\n\nmodule.exports.profiles = profiles\n"]},"metadata":{},"sourceType":"script"}