{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:peer-store:key-book');\nlog.error = debug('libp2p:peer-store:key-book:error');\n\nconst PeerId = require('peer-id');\n\nconst Book = require('./book');\n\nconst {\n  codes: {\n    ERR_INVALID_PARAMETERS\n  }\n} = require('../errors');\n/**\n * The KeyBook is responsible for keeping the known public keys of a peer.\n */\n\n\nclass KeyBook extends Book {\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  constructor(peerStore) {\n    super({\n      peerStore,\n      eventName: 'change:pubkey',\n      eventProperty: 'pubkey',\n      eventTransformer: data => data.pubKey\n    });\n    /**\n     * Map known peers to their known Public Key.\n     * @type {Map<string, PeerId>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set the Peer public key.\n   * @override\n   * @param {PeerId} peerId\n   * @param {RsaPublicKey|Ed25519PublicKey|Secp256k1PublicKey} publicKey\n   * @return {KeyBook}\n  */\n\n\n  set(peerId, publicKey) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recPeerId = this.data.get(id); // If no record available, and this is valid\n\n    if (!recPeerId && publicKey) {\n      // This might be unecessary, but we want to store the PeerId\n      // to avoid an async operation when reconstructing the PeerId\n      peerId.pubKey = publicKey;\n\n      this._setData(peerId, peerId);\n\n      log(`stored provided public key for ${id}`);\n    }\n\n    return this;\n  }\n  /**\n   * Get Public key of the given PeerId, if stored.\n   * @override\n   * @param {PeerId} peerId\n   * @return {RsaPublicKey|Ed25519PublicKey|Secp256k1PublicKey}\n   */\n\n\n  get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String());\n    return rec ? rec.pubKey : undefined;\n  }\n\n}\n\nmodule.exports = KeyBook;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/peer-store/key-book.js"],"names":["errcode","require","debug","log","error","PeerId","Book","codes","ERR_INVALID_PARAMETERS","KeyBook","constructor","peerStore","eventName","eventProperty","eventTransformer","data","pubKey","Map","set","peerId","publicKey","isPeerId","Error","id","toB58String","recPeerId","get","_setData","rec","undefined","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,GAAG,GAAGD,KAAK,CAAC,4BAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,kCAAD,CAAjB;;AAEA,MAAMG,MAAM,GAAGJ,OAAO,CAAC,SAAD,CAAtB;;AAEA,MAAMK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAM;AACJM,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AADH,IAEFP,OAAO,CAAC,WAAD,CAFX;AAIA;;;;;AAGA,MAAMQ,OAAN,SAAsBH,IAAtB,CAA2B;AACzB;;;;AAIAI,EAAAA,WAAW,CAAEC,SAAF,EAAa;AACtB,UAAM;AACJA,MAAAA,SADI;AAEJC,MAAAA,SAAS,EAAE,eAFP;AAGJC,MAAAA,aAAa,EAAE,QAHX;AAIJC,MAAAA,gBAAgB,EAAGC,IAAD,IAAUA,IAAI,CAACC;AAJ7B,KAAN;AAOA;;;;;AAIA,SAAKD,IAAL,GAAY,IAAIE,GAAJ,EAAZ;AACD;AAED;;;;;;;;;AAOAC,EAAAA,GAAG,CAAEC,MAAF,EAAUC,SAAV,EAAqB;AACtB,QAAI,CAACf,MAAM,CAACgB,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;AAC5BhB,MAAAA,GAAG,CAACC,KAAJ,CAAU,qDAAV;AACA,YAAMJ,OAAO,CAAC,IAAIsB,KAAJ,CAAU,uCAAV,CAAD,EAAqDd,sBAArD,CAAb;AACD;;AAED,UAAMe,EAAE,GAAGJ,MAAM,CAACK,WAAP,EAAX;AACA,UAAMC,SAAS,GAAG,KAAKV,IAAL,CAAUW,GAAV,CAAcH,EAAd,CAAlB,CAPsB,CAStB;;AACA,QAAI,CAACE,SAAD,IAAcL,SAAlB,EAA6B;AAC3B;AACA;AACAD,MAAAA,MAAM,CAACH,MAAP,GAAgBI,SAAhB;;AAEA,WAAKO,QAAL,CAAcR,MAAd,EAAsBA,MAAtB;;AACAhB,MAAAA,GAAG,CAAE,kCAAiCoB,EAAG,EAAtC,CAAH;AACD;;AAED,WAAO,IAAP;AACD;AAED;;;;;;;;AAMAG,EAAAA,GAAG,CAAEP,MAAF,EAAU;AACX,QAAI,CAACd,MAAM,CAACgB,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;AAC5B,YAAMnB,OAAO,CAAC,IAAIsB,KAAJ,CAAU,uCAAV,CAAD,EAAqDd,sBAArD,CAAb;AACD;;AAED,UAAMoB,GAAG,GAAG,KAAKb,IAAL,CAAUW,GAAV,CAAcP,MAAM,CAACK,WAAP,EAAd,CAAZ;AAEA,WAAOI,GAAG,GAAGA,GAAG,CAACZ,MAAP,GAAgBa,SAA1B;AACD;;AA/DwB;;AAkE3BC,MAAM,CAACC,OAAP,GAAiBtB,OAAjB","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('libp2p:peer-store:key-book')\nlog.error = debug('libp2p:peer-store:key-book:error')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * The KeyBook is responsible for keeping the known public keys of a peer.\n */\nclass KeyBook extends Book {\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  constructor (peerStore) {\n    super({\n      peerStore,\n      eventName: 'change:pubkey',\n      eventProperty: 'pubkey',\n      eventTransformer: (data) => data.pubKey\n    })\n\n    /**\n     * Map known peers to their known Public Key.\n     * @type {Map<string, PeerId>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set the Peer public key.\n   * @override\n   * @param {PeerId} peerId\n   * @param {RsaPublicKey|Ed25519PublicKey|Secp256k1PublicKey} publicKey\n   * @return {KeyBook}\n  */\n  set (peerId, publicKey) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recPeerId = this.data.get(id)\n\n    // If no record available, and this is valid\n    if (!recPeerId && publicKey) {\n      // This might be unecessary, but we want to store the PeerId\n      // to avoid an async operation when reconstructing the PeerId\n      peerId.pubKey = publicKey\n\n      this._setData(peerId, peerId)\n      log(`stored provided public key for ${id}`)\n    }\n\n    return this\n  }\n\n  /**\n   * Get Public key of the given PeerId, if stored.\n   * @override\n   * @param {PeerId} peerId\n   * @return {RsaPublicKey|Ed25519PublicKey|Secp256k1PublicKey}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    return rec ? rec.pubKey : undefined\n  }\n}\n\nmodule.exports = KeyBook\n"]},"metadata":{},"sourceType":"script"}