{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(socket) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(socket.readyState >= 2)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('socket closed');\n\n          case 2:\n            if (!(socket.readyState === 1)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var remove = socket && (socket.removeEventListener || socket.removeListener);\n\n              function cleanup() {\n                if (typeof remove === 'function') {\n                  remove.call(socket, 'open', handleOpen);\n                  remove.call(socket, 'error', handleErr);\n                }\n              }\n\n              function handleOpen() {\n                cleanup();\n                resolve();\n              }\n\n              function handleErr(evt) {\n                cleanup();\n                reject(evt);\n              }\n\n              socket.addEventListener('open', handleOpen);\n              socket.addEventListener('error', handleErr);\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-ws/ready.js"],"names":["module","exports","socket","readyState","Error","Promise","resolve","reject","remove","removeEventListener","removeListener","cleanup","call","handleOpen","handleErr","evt","addEventListener"],"mappings":";;;;AAAAA,MAAM,CAACC,OAAP;AAAA,sEAAiB,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEXA,MAAM,CAACC,UAAP,IAAqB,CAFV;AAAA;AAAA;AAAA;;AAAA,kBAGP,IAAIC,KAAJ,CAAU,eAAV,CAHO;;AAAA;AAAA,kBAOXF,MAAM,CAACC,UAAP,KAAsB,CAPX;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,6CAWR,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAMC,MAAM,GAAGN,MAAM,KAAKA,MAAM,CAACO,mBAAP,IAA8BP,MAAM,CAACQ,cAA1C,CAArB;;AAEA,uBAASC,OAAT,GAAoB;AAClB,oBAAI,OAAOH,MAAP,KAAkB,UAAtB,EAAkC;AAChCA,kBAAAA,MAAM,CAACI,IAAP,CAAYV,MAAZ,EAAoB,MAApB,EAA4BW,UAA5B;AACAL,kBAAAA,MAAM,CAACI,IAAP,CAAYV,MAAZ,EAAoB,OAApB,EAA6BY,SAA7B;AACD;AACF;;AAED,uBAASD,UAAT,GAAuB;AACrBF,gBAAAA,OAAO;AAAIL,gBAAAA,OAAO;AACnB;;AAED,uBAASQ,SAAT,CAAoBC,GAApB,EAAyB;AACvBJ,gBAAAA,OAAO;AAAIJ,gBAAAA,MAAM,CAACQ,GAAD,CAAN;AACZ;;AAEDb,cAAAA,MAAM,CAACc,gBAAP,CAAwB,MAAxB,EAAgCH,UAAhC;AACAX,cAAAA,MAAM,CAACc,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC;AACD,aApBM,CAXQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["module.exports = async socket => {\n  // if the socket is closing or closed, return end\n  if (socket.readyState >= 2) {\n    throw new Error('socket closed')\n  }\n\n  // if open, return\n  if (socket.readyState === 1) {\n    return\n  }\n\n  return new Promise((resolve, reject) => {\n    const remove = socket && (socket.removeEventListener || socket.removeListener)\n\n    function cleanup () {\n      if (typeof remove === 'function') {\n        remove.call(socket, 'open', handleOpen)\n        remove.call(socket, 'error', handleErr)\n      }\n    }\n\n    function handleOpen () {\n      cleanup(); resolve()\n    }\n\n    function handleErr (evt) {\n      cleanup(); reject(evt)\n    }\n\n    socket.addEventListener('open', handleOpen)\n    socket.addEventListener('error', handleErr)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}