{"ast":null,"code":"'use strict';\n\nconst {\n  repoVersion\n} = require('ipfs-repo');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * If the repo has been initialized, report the current version.\n   * Otherwise report the version that would be initialized.\n   *\n   * @returns {number}\n   */\n  return withTimeoutOption(async function version(options) {\n    try {\n      await repo._checkInitialized(options);\n    } catch (err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(m => {\n        return m.test(err.message);\n      });\n\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion;\n      }\n\n      throw err;\n    }\n\n    return repo.version.get(options);\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/repo/version.js"],"names":["repoVersion","require","withTimeoutOption","module","exports","repo","version","options","_checkInitialized","err","match","some","m","test","message","get"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,WAAD,CAA/B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBD,OAAO,CAAC,aAAD,CAArC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B;;;;;;AAMA,SAAOH,iBAAiB,CAAC,eAAeI,OAAf,CAAwBC,OAAxB,EAAiC;AACxD,QAAI;AACF,YAAMF,IAAI,CAACG,iBAAL,CAAuBD,OAAvB,CAAN;AACD,KAFD,CAEE,OAAOE,GAAP,EAAY;AACZ;AACA,YAAMC,KAAK,GAAG,CACZ,yCADY,EAEZ,QAFY,EAGZ,6BAHY,EAIZC,IAJY,CAINC,CAAD,IAAO;AACZ,eAAOA,CAAC,CAACC,IAAF,CAAOJ,GAAG,CAACK,OAAX,CAAP;AACD,OANa,CAAd;;AAOA,UAAIJ,KAAJ,EAAW;AACT;AACA,eAAOV,WAAP;AACD;;AACD,YAAMS,GAAN;AACD;;AAED,WAAOJ,IAAI,CAACC,OAAL,CAAaS,GAAb,CAAiBR,OAAjB,CAAP;AACD,GApBuB,CAAxB;AAqBD,CA5BD","sourcesContent":["'use strict'\n\nconst { repoVersion } = require('ipfs-repo')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ repo }) => {\n  /**\n   * If the repo has been initialized, report the current version.\n   * Otherwise report the version that would be initialized.\n   *\n   * @returns {number}\n   */\n  return withTimeoutOption(async function version (options) {\n    try {\n      await repo._checkInitialized(options)\n    } catch (err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [\n        /Key not found in database \\[\\/version\\]/,\n        /ENOENT/,\n        /repo is not initialized yet/\n      ].some((m) => {\n        return m.test(err.message)\n      })\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion\n      }\n      throw err\n    }\n\n    return repo.version.get(options)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}