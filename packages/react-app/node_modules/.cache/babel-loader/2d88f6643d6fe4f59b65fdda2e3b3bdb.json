{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('ipld-dag-pb'),\n    DAGLink = _require.DAGLink,\n    DAGNode = _require.DAGNode;\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar Dir = require('./dir');\n\nvar persist = require('./utils/persist');\n\nvar DirFlat = /*#__PURE__*/function (_Dir) {\n  _inherits(DirFlat, _Dir);\n\n  var _super = _createSuper(DirFlat);\n\n  function DirFlat(props, options) {\n    var _this2;\n\n    _classCallCheck(this, DirFlat);\n\n    _this2 = _super.call(this, props, options);\n    _this2._children = {};\n    return _this2;\n  }\n\n  _createClass(DirFlat, [{\n    key: \"put\",\n    value: function put(name, value) {\n      this.cid = undefined;\n      this.size = undefined;\n      this._children[name] = value;\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return this._children[name];\n    }\n  }, {\n    key: \"childCount\",\n    value: function childCount() {\n      return Object.keys(this._children).length;\n    }\n  }, {\n    key: \"directChildrenCount\",\n    value: function directChildrenCount() {\n      return this.childCount();\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild() {\n      return this._children[Object.keys(this._children)[0]];\n    }\n  }, {\n    key: \"eachChildSeries\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function eachChildSeries() {\n      var keys, i, key;\n      return _regeneratorRuntime.wrap(function eachChildSeries$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              keys = Object.keys(this._children);\n              i = 0;\n\n            case 2:\n              if (!(i < keys.length)) {\n                _context.next = 9;\n                break;\n              }\n\n              key = keys[i];\n              _context.next = 6;\n              return {\n                key: key,\n                child: this._children[key]\n              };\n\n            case 6:\n              i++;\n              _context.next = 2;\n              break;\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, eachChildSeries, this);\n    })\n  }, {\n    key: \"flush\",\n    value: function flush(path, block) {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var children, links, i, child, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry, unixfs, node, buffer, cid, size;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                children = Object.keys(_this._children);\n                links = [];\n                i = 0;\n\n              case 3:\n                if (!(i < children.length)) {\n                  _context2.next = 45;\n                  break;\n                }\n\n                child = _this._children[children[i]];\n\n                if (!(typeof child.flush === 'function')) {\n                  _context2.next = 41;\n                  break;\n                }\n\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context2.prev = 8;\n                _iterator = _asyncIterator(child.flush(child.path, block));\n\n              case 10:\n                _context2.next = 12;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 12:\n                _step = _context2.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context2.next = 16;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 16:\n                _value = _context2.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                entry = _value;\n                child = entry;\n                _context2.next = 22;\n                return child;\n\n              case 22:\n                _iteratorNormalCompletion = true;\n                _context2.next = 10;\n                break;\n\n              case 25:\n                _context2.next = 31;\n                break;\n\n              case 27:\n                _context2.prev = 27;\n                _context2.t0 = _context2[\"catch\"](8);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n\n              case 31:\n                _context2.prev = 31;\n                _context2.prev = 32;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context2.next = 36;\n                  break;\n                }\n\n                _context2.next = 36;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 36:\n                _context2.prev = 36;\n\n                if (!_didIteratorError) {\n                  _context2.next = 39;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 39:\n                return _context2.finish(36);\n\n              case 40:\n                return _context2.finish(31);\n\n              case 41:\n                links.push(new DAGLink(children[i], child.size, child.cid));\n\n              case 42:\n                i++;\n                _context2.next = 3;\n                break;\n\n              case 45:\n                unixfs = new UnixFS({\n                  type: 'directory',\n                  mtime: _this.mtime,\n                  mode: _this.mode\n                });\n                node = new DAGNode(unixfs.marshal(), links);\n                buffer = node.serialize();\n                _context2.next = 50;\n                return _awaitAsyncGenerator(persist(buffer, block, _this.options));\n\n              case 50:\n                cid = _context2.sent;\n                size = buffer.length + node.Links.reduce(function (acc, curr) {\n                  return acc + curr.Tsize;\n                }, 0);\n                _this.cid = cid;\n                _this.size = size;\n                _context2.next = 56;\n                return {\n                  cid: cid,\n                  unixfs: unixfs,\n                  path: path,\n                  size: size\n                };\n\n              case 56:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, null, [[8, 27, 31, 41], [32,, 36, 40]]);\n      }))();\n    }\n  }]);\n\n  return DirFlat;\n}(Dir);\n\nmodule.exports = DirFlat;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/dir-flat.js"],"names":["require","DAGLink","DAGNode","UnixFS","Dir","persist","DirFlat","props","options","_children","name","value","cid","undefined","size","Object","keys","length","childCount","i","key","child","path","block","children","links","flush","entry","push","unixfs","type","mtime","mode","node","marshal","buffer","serialize","Links","reduce","acc","curr","Tsize","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst {\n  DAGLink,\n  DAGNode\n} = require('ipld-dag-pb')\nconst UnixFS = require('ipfs-unixfs')\nconst Dir = require('./dir')\nconst persist = require('./utils/persist')\n\nclass DirFlat extends Dir {\n  constructor (props, options) {\n    super(props, options)\n    this._children = {}\n  }\n\n  put (name, value) {\n    this.cid = undefined\n    this.size = undefined\n\n    this._children[name] = value\n  }\n\n  get (name) {\n    return this._children[name]\n  }\n\n  childCount () {\n    return Object.keys(this._children).length\n  }\n\n  directChildrenCount () {\n    return this.childCount()\n  }\n\n  onlyChild () {\n    return this._children[Object.keys(this._children)[0]]\n  }\n\n  * eachChildSeries () {\n    const keys = Object.keys(this._children)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n\n      yield {\n        key: key,\n        child: this._children[key]\n      }\n    }\n  }\n\n  async * flush (path, block) {\n    const children = Object.keys(this._children)\n    const links = []\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]]\n\n      if (typeof child.flush === 'function') {\n        for await (const entry of child.flush(child.path, block)) {\n          child = entry\n\n          yield child\n        }\n      }\n\n      links.push(new DAGLink(children[i], child.size, child.cid))\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    })\n\n    const node = new DAGNode(unixfs.marshal(), links)\n    const buffer = node.serialize()\n    const cid = await persist(buffer, block, this.options)\n    const size = buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n\n    this.cid = cid\n    this.size = size\n\n    yield {\n      cid,\n      unixfs,\n      path,\n      size\n    }\n  }\n}\n\nmodule.exports = DirFlat\n"]},"metadata":{},"sourceType":"script"}