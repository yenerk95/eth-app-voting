{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar BufferList = require('bl/BufferList');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _fixedSizeChunker = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, options) {\n    var bl, currentLength, emitted, maxChunkSize, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buffer, newBl;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            bl = new BufferList();\n            currentLength = 0;\n            emitted = false;\n            maxChunkSize = options.maxChunkSize;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(source);\n\n          case 8:\n            _context.next = 10;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 10:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 14;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 14:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 29;\n              break;\n            }\n\n            buffer = _value;\n            bl.append(buffer);\n            currentLength += buffer.length;\n\n          case 19:\n            if (!(currentLength >= maxChunkSize)) {\n              _context.next = 26;\n              break;\n            }\n\n            _context.next = 22;\n            return bl.slice(0, maxChunkSize);\n\n          case 22:\n            emitted = true; // throw away consumed bytes\n\n            if (maxChunkSize === bl.length) {\n              bl = new BufferList();\n              currentLength = 0;\n            } else {\n              newBl = new BufferList();\n              newBl.append(bl.shallowSlice(maxChunkSize));\n              bl = newBl; // update our offset\n\n              currentLength -= maxChunkSize;\n            }\n\n            _context.next = 19;\n            break;\n\n          case 26:\n            _iteratorNormalCompletion = true;\n            _context.next = 8;\n            break;\n\n          case 29:\n            _context.next = 35;\n            break;\n\n          case 31:\n            _context.prev = 31;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 35:\n            _context.prev = 35;\n            _context.prev = 36;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 40;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 40:\n            _context.prev = 40;\n\n            if (!_didIteratorError) {\n              _context.next = 43;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 43:\n            return _context.finish(40);\n\n          case 44:\n            return _context.finish(35);\n\n          case 45:\n            if (!(!emitted || currentLength)) {\n              _context.next = 48;\n              break;\n            }\n\n            _context.next = 48;\n            return bl.slice(0, currentLength);\n\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 31, 35, 45], [36,, 40, 44]]);\n  }));\n\n  function fixedSizeChunker(_x, _x2) {\n    return _fixedSizeChunker.apply(this, arguments);\n  }\n\n  return fixedSizeChunker;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/chunker/fixed-size.js"],"names":["BufferList","require","module","exports","source","options","bl","currentLength","emitted","maxChunkSize","buffer","append","length","slice","newBl","shallowSlice","fixedSizeChunker"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP;AAAA,qFAAiB,iBAAmCC,MAAnC,EAA2CC,OAA3C;AAAA;;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,EADW,GACN,IAAIN,UAAJ,EADM;AAEXO,YAAAA,aAFW,GAEK,CAFL;AAGXC,YAAAA,OAHW,GAGD,KAHC;AAITC,YAAAA,YAJS,GAIMJ,OAAO,CAACI,YAJd;AAAA;AAAA;AAAA;AAAA,uCAMYL,MANZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAMEM,YAAAA,MANF;AAObJ,YAAAA,EAAE,CAACK,MAAH,CAAUD,MAAV;AAEAH,YAAAA,aAAa,IAAIG,MAAM,CAACE,MAAxB;;AATa;AAAA,kBAWNL,aAAa,IAAIE,YAXX;AAAA;AAAA;AAAA;;AAAA;AAYX,mBAAMH,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYJ,YAAZ,CAAN;;AAZW;AAaXD,YAAAA,OAAO,GAAG,IAAV,CAbW,CAeX;;AACA,gBAAIC,YAAY,KAAKH,EAAE,CAACM,MAAxB,EAAgC;AAC9BN,cAAAA,EAAE,GAAG,IAAIN,UAAJ,EAAL;AACAO,cAAAA,aAAa,GAAG,CAAhB;AACD,aAHD,MAGO;AACCO,cAAAA,KADD,GACS,IAAId,UAAJ,EADT;AAELc,cAAAA,KAAK,CAACH,MAAN,CAAaL,EAAE,CAACS,YAAH,CAAgBN,YAAhB,CAAb;AACAH,cAAAA,EAAE,GAAGQ,KAAL,CAHK,CAKL;;AACAP,cAAAA,aAAa,IAAIE,YAAjB;AACD;;AA1BU;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,kBA8BX,CAACD,OAAD,IAAYD,aA9BD;AAAA;AAAA;AAAA;;AAAA;AAgCb,mBAAMD,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYN,aAAZ,CAAN;;AAhCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAkCS,gBAAlC;AAAA;AAAA;;AAAA,SAAkCA,gBAAlC;AAAA","sourcesContent":["'use strict'\n\nconst BufferList = require('bl/BufferList')\n\nmodule.exports = async function * fixedSizeChunker (source, options) {\n  let bl = new BufferList()\n  let currentLength = 0\n  let emitted = false\n  const maxChunkSize = options.maxChunkSize\n\n  for await (const buffer of source) {\n    bl.append(buffer)\n\n    currentLength += buffer.length\n\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize)\n      emitted = true\n\n      // throw away consumed bytes\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList()\n        currentLength = 0\n      } else {\n        const newBl = new BufferList()\n        newBl.append(bl.shallowSlice(maxChunkSize))\n        bl = newBl\n\n        // update our offset\n        currentLength -= maxChunkSize\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    // return any remaining bytes or an empty buffer\n    yield bl.slice(0, currentLength)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}