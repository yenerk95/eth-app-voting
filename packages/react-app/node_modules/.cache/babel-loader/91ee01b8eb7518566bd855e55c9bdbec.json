{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\n\nfunction lowerBound(array, value, comparator) {\n  var first = 0;\n  var count = array.length;\n\n  while (count > 0) {\n    var step = count / 2 | 0;\n    var it = first + step;\n\n    if (comparator(array[it], value) <= 0) {\n      first = ++it;\n      count -= step + 1;\n    } else {\n      count = step;\n    }\n  }\n\n  return first;\n}\n\nexports.default = lowerBound;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/p-queue/dist/lower-bound.js"],"names":["Object","defineProperty","exports","value","lowerBound","array","comparator","first","count","length","step","it","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CACA;AACA;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2BF,KAA3B,EAAkCG,UAAlC,EAA8C;AAC1C,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAGH,KAAK,CAACI,MAAlB;;AACA,SAAOD,KAAK,GAAG,CAAf,EAAkB;AACd,QAAME,IAAI,GAAIF,KAAK,GAAG,CAAT,GAAc,CAA3B;AACA,QAAIG,EAAE,GAAGJ,KAAK,GAAGG,IAAjB;;AACA,QAAIJ,UAAU,CAACD,KAAK,CAACM,EAAD,CAAN,EAAYR,KAAZ,CAAV,IAAgC,CAApC,EAAuC;AACnCI,MAAAA,KAAK,GAAG,EAAEI,EAAV;AACAH,MAAAA,KAAK,IAAIE,IAAI,GAAG,CAAhB;AACH,KAHD,MAIK;AACDF,MAAAA,KAAK,GAAGE,IAAR;AACH;AACJ;;AACD,SAAOH,KAAP;AACH;;AACDL,OAAO,CAACU,OAAR,GAAkBR,UAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\nfunction lowerBound(array, value, comparator) {\n    let first = 0;\n    let count = array.length;\n    while (count > 0) {\n        const step = (count / 2) | 0;\n        let it = first + step;\n        if (comparator(array[it], value) <= 0) {\n            first = ++it;\n            count -= step + 1;\n        }\n        else {\n            count = step;\n        }\n    }\n    return first;\n}\nexports.default = lowerBound;\n"]},"metadata":{},"sourceType":"script"}