{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar DAGNode = dagPB.DAGNode;\n\nvar multicodec = require('multicodec');\n\nvar Unixfs = require('ipfs-unixfs');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar _require2 = require('buffer'),\n    Buffer = _require2.Buffer;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _new2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(template, options) {\n      var data, node, cid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {}; // allow options in the template position\n\n              if (template && typeof template !== 'string') {\n                options = template;\n                template = null;\n              }\n\n              if (!template) {\n                _context.next = 10;\n                break;\n              }\n\n              if (!(template === 'unixfs-dir')) {\n                _context.next = 7;\n                break;\n              }\n\n              data = new Unixfs('directory').marshal();\n              _context.next = 8;\n              break;\n\n            case 7:\n              throw new Error('unknown template');\n\n            case 8:\n              _context.next = 11;\n              break;\n\n            case 10:\n              data = Buffer.alloc(0);\n\n            case 11:\n              node = new DAGNode(data);\n              _context.next = 14;\n              return ipld.put(node, multicodec.DAG_PB, {\n                cidVersion: 0,\n                hashAlg: multicodec.SHA2_256\n              });\n\n            case 14:\n              cid = _context.sent;\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", cid);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function _new(_x, _x2) {\n      return _new2.apply(this, arguments);\n    }\n\n    return _new;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/object/new.js"],"names":["dagPB","require","DAGNode","multicodec","Unixfs","withTimeoutOption","Buffer","module","exports","ipld","preload","template","options","data","marshal","Error","alloc","node","put","DAG_PB","cidVersion","hashAlg","SHA2_256","cid","_new"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMC,OAAO,GAAGF,KAAK,CAACE,OAAtB;;AACA,IAAMC,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,aAAD,CAAtB;;eAC8BA,OAAO,CAAC,aAAD,C;IAA7BI,iB,YAAAA,iB;;gBACWJ,OAAO,CAAC,QAAD,C;IAAlBK,M,aAAAA,M;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAuB;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AACtC,SAAOL,iBAAiB;AAAA,yEAAC,iBAAqBM,QAArB,EAA+BC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CADuB,CAGvB;;AACA,kBAAID,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAApC,EAA8C;AAC5CC,gBAAAA,OAAO,GAAGD,QAAV;AACAA,gBAAAA,QAAQ,GAAG,IAAX;AACD;;AAPsB,mBAWnBA,QAXmB;AAAA;AAAA;AAAA;;AAAA,oBAYjBA,QAAQ,KAAK,YAZI;AAAA;AAAA;AAAA;;AAanBE,cAAAA,IAAI,GAAI,IAAIT,MAAJ,CAAW,WAAX,CAAD,CAA0BU,OAA1B,EAAP;AAbmB;AAAA;;AAAA;AAAA,oBAeb,IAAIC,KAAJ,CAAU,kBAAV,CAfa;;AAAA;AAAA;AAAA;;AAAA;AAkBrBF,cAAAA,IAAI,GAAGP,MAAM,CAACU,KAAP,CAAa,CAAb,CAAP;;AAlBqB;AAqBjBC,cAAAA,IArBiB,GAqBV,IAAIf,OAAJ,CAAYW,IAAZ,CArBU;AAAA;AAAA,qBAuBLJ,IAAI,CAACS,GAAL,CAASD,IAAT,EAAed,UAAU,CAACgB,MAA1B,EAAkC;AAClDC,gBAAAA,UAAU,EAAE,CADsC;AAElDC,gBAAAA,OAAO,EAAElB,UAAU,CAACmB;AAF8B,eAAlC,CAvBK;;AAAA;AAuBjBC,cAAAA,GAvBiB;;AA4BvB,kBAAIX,OAAO,CAACF,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,gBAAAA,OAAO,CAACa,GAAD,CAAP;AACD;;AA9BsB,+CAgChBA,GAhCgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBC,IAAhB;AAAA;AAAA;;AAAA,WAAgBA,IAAhB;AAAA,MAAxB;AAkCD,CAnCD","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst multicodec = require('multicodec')\nconst Unixfs = require('ipfs-unixfs')\nconst { withTimeoutOption } = require('../../utils')\nconst { Buffer } = require('buffer')\n\nmodule.exports = ({ ipld, preload }) => {\n  return withTimeoutOption(async function _new (template, options) {\n    options = options || {}\n\n    // allow options in the template position\n    if (template && typeof template !== 'string') {\n      options = template\n      template = null\n    }\n\n    let data\n\n    if (template) {\n      if (template === 'unixfs-dir') {\n        data = (new Unixfs('directory')).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    } else {\n      data = Buffer.alloc(0)\n    }\n\n    const node = new DAGNode(data)\n\n    const cid = await ipld.put(node, multicodec.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: multicodec.SHA2_256\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  })\n}\n"]},"metadata":{},"sourceType":"script"}