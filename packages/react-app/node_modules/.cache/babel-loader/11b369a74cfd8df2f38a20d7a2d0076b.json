{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      preload = _ref.preload;\n\n  var get = require('./get')({\n    ipld: ipld,\n    preload: preload\n  });\n\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(multihash, options) {\n      var node, serialized, cid, blockSize, linkLength;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              _context.next = 3;\n              return get(multihash, options);\n\n            case 3:\n              node = _context.sent;\n              serialized = dagPB.util.serialize(node);\n              _context.next = 7;\n              return dagPB.util.cid(serialized, {\n                cidVersion: 0\n              });\n\n            case 7:\n              cid = _context.sent;\n              blockSize = serialized.length;\n              linkLength = node.Links.reduce(function (a, l) {\n                return a + l.Tsize;\n              }, 0);\n              return _context.abrupt(\"return\", {\n                Hash: cid.toBaseEncodedString(),\n                NumLinks: node.Links.length,\n                BlockSize: blockSize,\n                LinksSize: blockSize - node.Data.length,\n                DataSize: node.Data.length,\n                CumulativeSize: blockSize + linkLength\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function stat(_x, _x2) {\n      return _stat.apply(this, arguments);\n    }\n\n    return stat;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/object/stat.js"],"names":["dagPB","require","withTimeoutOption","module","exports","ipld","preload","get","multihash","options","node","serialized","util","serialize","cid","cidVersion","blockSize","length","linkLength","Links","reduce","a","l","Tsize","Hash","toBaseEncodedString","NumLinks","BlockSize","LinksSize","Data","DataSize","CumulativeSize","stat"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;eAC8BA,OAAO,CAAC,aAAD,C;IAA7BC,iB,YAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAuB;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AACtC,MAAMC,GAAG,GAAGN,OAAO,CAAC,OAAD,CAAP,CAAiB;AAAEI,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,OAAO,EAAPA;AAAR,GAAjB,CAAZ;;AACA,SAAOJ,iBAAiB;AAAA,yEAAC,iBAAqBM,SAArB,EAAgCC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AADuB;AAAA,qBAGJF,GAAG,CAACC,SAAD,EAAYC,OAAZ,CAHC;;AAAA;AAGjBC,cAAAA,IAHiB;AAIjBC,cAAAA,UAJiB,GAIJX,KAAK,CAACY,IAAN,CAAWC,SAAX,CAAqBH,IAArB,CAJI;AAAA;AAAA,qBAKLV,KAAK,CAACY,IAAN,CAAWE,GAAX,CAAeH,UAAf,EAA2B;AAC3CI,gBAAAA,UAAU,EAAE;AAD+B,eAA3B,CALK;;AAAA;AAKjBD,cAAAA,GALiB;AASjBE,cAAAA,SATiB,GASLL,UAAU,CAACM,MATN;AAUjBC,cAAAA,UAViB,GAUJR,IAAI,CAACS,KAAL,CAAWC,MAAX,CAAkB,UAACC,CAAD,EAAIC,CAAJ;AAAA,uBAAUD,CAAC,GAAGC,CAAC,CAACC,KAAhB;AAAA,eAAlB,EAAyC,CAAzC,CAVI;AAAA,+CAYhB;AACLC,gBAAAA,IAAI,EAAEV,GAAG,CAACW,mBAAJ,EADD;AAELC,gBAAAA,QAAQ,EAAEhB,IAAI,CAACS,KAAL,CAAWF,MAFhB;AAGLU,gBAAAA,SAAS,EAAEX,SAHN;AAILY,gBAAAA,SAAS,EAAEZ,SAAS,GAAGN,IAAI,CAACmB,IAAL,CAAUZ,MAJ5B;AAKLa,gBAAAA,QAAQ,EAAEpB,IAAI,CAACmB,IAAL,CAAUZ,MALf;AAMLc,gBAAAA,cAAc,EAAEf,SAAS,GAAGE;AANvB,eAZgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBc,IAAhB;AAAA;AAAA;;AAAA,WAAgBA,IAAhB;AAAA,MAAxB;AAqBD,CAvBD","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ ipld, preload }) => {\n  const get = require('./get')({ ipld, preload })\n  return withTimeoutOption(async function stat (multihash, options) {\n    options = options || {}\n\n    const node = await get(multihash, options)\n    const serialized = dagPB.util.serialize(node)\n    const cid = await dagPB.util.cid(serialized, {\n      cidVersion: 0\n    })\n\n    const blockSize = serialized.length\n    const linkLength = node.Links.reduce((a, l) => a + l.Tsize, 0)\n\n    return {\n      Hash: cid.toBaseEncodedString(),\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - node.Data.length,\n      DataSize: node.Data.length,\n      CumulativeSize: blockSize + linkLength\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}