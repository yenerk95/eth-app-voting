{"ast":null,"code":"'use strict';\n\nconst dirBuilder = require('./dir');\n\nconst fileBuilder = require('./file');\n\nasync function* dagBuilder(source, block, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true;\n      }\n\n      entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');\n    }\n\n    if (entry.content) {\n      let source = entry.content; // wrap in iterator if it is array-like or not an iterator\n\n      if (!source[Symbol.asyncIterator] && !source[Symbol.iterator] || source.length !== undefined) {\n        source = {\n          [Symbol.iterator]: function* () {\n            yield entry.content;\n          }\n        };\n      }\n\n      let chunker;\n\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker;\n      } else if (options.chunker === 'rabin') {\n        chunker = require('../chunker/rabin');\n      } else {\n        chunker = require('../chunker/fixed-size');\n      }\n\n      let chunkValidator;\n\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator;\n      } else {\n        chunkValidator = require('./validate-chunks');\n      } // item is a file\n\n\n      yield () => fileBuilder(entry, chunker(chunkValidator(source, options), options), block, options);\n    } else {\n      // item is a directory\n      yield () => dirBuilder(entry, block, options);\n    }\n  }\n}\n\nmodule.exports = dagBuilder;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-unixfs-importer/src/dag-builder/index.js"],"names":["dirBuilder","require","fileBuilder","dagBuilder","source","block","options","entry","path","substring","wrapWithDirectory","split","filter","join","content","Symbol","asyncIterator","iterator","length","undefined","chunker","chunkValidator","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,OAAD,CAA1B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,QAAD,CAA3B;;AAEA,gBAAiBE,UAAjB,CAA6BC,MAA7B,EAAqCC,KAArC,EAA4CC,OAA5C,EAAqD;AACnD,aAAW,MAAMC,KAAjB,IAA0BH,MAA1B,EAAkC;AAChC,QAAIG,KAAK,CAACC,IAAV,EAAgB;AACd,UAAID,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,IAAnC,EAAyC;AACvCH,QAAAA,OAAO,CAACI,iBAAR,GAA4B,IAA5B;AACD;;AAEDH,MAAAA,KAAK,CAACC,IAAN,GAAaD,KAAK,CAACC,IAAN,CACVG,KADU,CACJ,GADI,EAEVC,MAFU,CAEHJ,IAAI,IAAIA,IAAI,IAAIA,IAAI,KAAK,GAFtB,EAGVK,IAHU,CAGL,GAHK,CAAb;AAID;;AAED,QAAIN,KAAK,CAACO,OAAV,EAAmB;AACjB,UAAIV,MAAM,GAAGG,KAAK,CAACO,OAAnB,CADiB,CAGjB;;AACA,UAAK,CAACV,MAAM,CAACW,MAAM,CAACC,aAAR,CAAP,IAAiC,CAACZ,MAAM,CAACW,MAAM,CAACE,QAAR,CAAzC,IAA+Db,MAAM,CAACc,MAAP,KAAkBC,SAArF,EAAgG;AAC9Ff,QAAAA,MAAM,GAAG;AACP,WAACW,MAAM,CAACE,QAAR,GAAmB,aAAc;AAC/B,kBAAMV,KAAK,CAACO,OAAZ;AACD;AAHM,SAAT;AAKD;;AAED,UAAIM,OAAJ;;AAEA,UAAI,OAAOd,OAAO,CAACc,OAAf,KAA2B,UAA/B,EAA2C;AACzCA,QAAAA,OAAO,GAAGd,OAAO,CAACc,OAAlB;AACD,OAFD,MAEO,IAAId,OAAO,CAACc,OAAR,KAAoB,OAAxB,EAAiC;AACtCA,QAAAA,OAAO,GAAGnB,OAAO,CAAC,kBAAD,CAAjB;AACD,OAFM,MAEA;AACLmB,QAAAA,OAAO,GAAGnB,OAAO,CAAC,uBAAD,CAAjB;AACD;;AAED,UAAIoB,cAAJ;;AAEA,UAAI,OAAOf,OAAO,CAACe,cAAf,KAAkC,UAAtC,EAAkD;AAChDA,QAAAA,cAAc,GAAGf,OAAO,CAACe,cAAzB;AACD,OAFD,MAEO;AACLA,QAAAA,cAAc,GAAGpB,OAAO,CAAC,mBAAD,CAAxB;AACD,OA5BgB,CA8BjB;;;AACA,YAAM,MAAMC,WAAW,CAACK,KAAD,EAAQa,OAAO,CAACC,cAAc,CAACjB,MAAD,EAASE,OAAT,CAAf,EAAkCA,OAAlC,CAAf,EAA2DD,KAA3D,EAAkEC,OAAlE,CAAvB;AACD,KAhCD,MAgCO;AACL;AACA,YAAM,MAAMN,UAAU,CAACO,KAAD,EAAQF,KAAR,EAAeC,OAAf,CAAtB;AACD;AACF;AACF;;AAEDgB,MAAM,CAACC,OAAP,GAAiBpB,UAAjB","sourcesContent":["'use strict'\n\nconst dirBuilder = require('./dir')\nconst fileBuilder = require('./file')\n\nasync function * dagBuilder (source, block, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true\n      }\n\n      entry.path = entry.path\n        .split('/')\n        .filter(path => path && path !== '.')\n        .join('/')\n    }\n\n    if (entry.content) {\n      let source = entry.content\n\n      // wrap in iterator if it is array-like or not an iterator\n      if ((!source[Symbol.asyncIterator] && !source[Symbol.iterator]) || source.length !== undefined) {\n        source = {\n          [Symbol.iterator]: function * () {\n            yield entry.content\n          }\n        }\n      }\n\n      let chunker\n\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker\n      } else if (options.chunker === 'rabin') {\n        chunker = require('../chunker/rabin')\n      } else {\n        chunker = require('../chunker/fixed-size')\n      }\n\n      let chunkValidator\n\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator\n      } else {\n        chunkValidator = require('./validate-chunks')\n      }\n\n      // item is a file\n      yield () => fileBuilder(entry, chunker(chunkValidator(source, options), options), block, options)\n    } else {\n      // item is a directory\n      yield () => dirBuilder(entry, block, options)\n    }\n  }\n}\n\nmodule.exports = dagBuilder\n"]},"metadata":{},"sourceType":"script"}