{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar withIs = require('class-is');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar sortLinks = require('./sortLinks');\n\nvar DAGLink = require('../dag-link/dagLink');\n\nvar _require2 = require('../serialize.js'),\n    serializeDAGNode = _require2.serializeDAGNode;\n\nvar _toDAGLink = require('./toDagLink');\n\nvar _addLink = require('./addLink');\n\nvar _rmLink = require('./rmLink');\n\nvar DAGNode = /*#__PURE__*/function () {\n  function DAGNode(data) {\n    var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var serializedSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, DAGNode);\n\n    if (!data) {\n      data = Buffer.alloc(0);\n    }\n\n    if (typeof data === 'string') {\n      data = Buffer.from(data);\n    }\n\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Passed \\'data\\' is not a buffer or a string!');\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n\n    links = links.map(function (link) {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n    });\n    links = sortLinks(links);\n    this._data = data;\n    this._links = links;\n    this._serializedSize = serializedSize;\n    this._size = null;\n  }\n\n  _createClass(DAGNode, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this._json) {\n        this._json = Object.freeze({\n          data: this.Data,\n          links: this._links.map(function (l) {\n            return l.toJSON();\n          }),\n          size: this.size\n        });\n      }\n\n      return Object.assign({}, this._json);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"DAGNode <data: \\\"\".concat(this.Data.toString('base64'), \"\\\", links: \").concat(this.Links.length, \", size: \").concat(this.size, \">\");\n    }\n  }, {\n    key: \"_invalidateCached\",\n    value: function _invalidateCached() {\n      this._serializedSize = null;\n      this._size = null;\n    }\n  }, {\n    key: \"addLink\",\n    value: function addLink(link) {\n      this._invalidateCached();\n\n      return _addLink(this, link);\n    }\n  }, {\n    key: \"rmLink\",\n    value: function rmLink(link) {\n      this._invalidateCached();\n\n      return _rmLink(this, link);\n    } // @returns {Promise.<DAGLink>}\n\n  }, {\n    key: \"toDAGLink\",\n    value: function toDAGLink(options) {\n      return _toDAGLink(this, options);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return serializeDAGNode({\n        Data: this._data,\n        Links: this._links\n      });\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (this._size === null) {\n        if (this._serializedSize === null) {\n          this._serializedSize = this.serialize().length;\n        }\n\n        this._size = this._links.reduce(function (sum, l) {\n          return sum + l.Tsize;\n        }, this._serializedSize);\n      }\n\n      return this._size;\n    },\n    set: function set(size) {\n      throw new Error(\"Can't set property: 'size' is immutable\");\n    } // Getters for backwards compatible path resolving\n\n  }, {\n    key: \"Data\",\n    get: function get() {\n      return this._data;\n    },\n    set: function set(_) {\n      throw new Error(\"Can't set property: 'Data' is immutable\");\n    }\n  }, {\n    key: \"Links\",\n    get: function get() {\n      return this._links.map(function (link) {\n        return {\n          Name: link.Name,\n          Tsize: link.Tsize,\n          Hash: link.Hash\n        };\n      });\n    },\n    set: function set(_) {\n      throw new Error(\"Can't set property: 'Links' is immutable\");\n    }\n  }]);\n\n  return DAGNode;\n}();\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipld-dag-pb/src/dag-node/dagNode.js"],"names":["withIs","require","Buffer","sortLinks","DAGLink","serializeDAGNode","toDAGLink","addLink","rmLink","DAGNode","data","links","serializedSize","alloc","from","isBuffer","Error","map","link","isDAGLink","util","createDagLinkFromB58EncodedHash","_data","_links","_serializedSize","_size","_json","Object","freeze","Data","l","toJSON","size","assign","toString","Links","length","_invalidateCached","options","serialize","reduce","sum","Tsize","_","Name","Hash","exports","module","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst withIs = require('class-is')\nconst { Buffer } = require('buffer')\nconst sortLinks = require('./sortLinks')\nconst DAGLink = require('../dag-link/dagLink')\nconst { serializeDAGNode } = require('../serialize.js')\nconst toDAGLink = require('./toDagLink')\nconst addLink = require('./addLink')\nconst rmLink = require('./rmLink')\n\nclass DAGNode {\n  constructor (data, links = [], serializedSize = null) {\n    if (!data) {\n      data = Buffer.alloc(0)\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data)\n    }\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Passed \\'data\\' is not a buffer or a string!')\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!')\n    }\n\n    links = links.map((link) => {\n      return DAGLink.isDAGLink(link)\n        ? link\n        : DAGLink.util.createDagLinkFromB58EncodedHash(link)\n    })\n    links = sortLinks(links)\n\n    this._data = data\n    this._links = links\n    this._serializedSize = serializedSize\n    this._size = null\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this._links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${this.Data.toString('base64')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  _invalidateCached () {\n    this._serializedSize = null\n    this._size = null\n  }\n\n  addLink (link) {\n    this._invalidateCached()\n    return addLink(this, link)\n  }\n\n  rmLink (link) {\n    this._invalidateCached()\n    return rmLink(this, link)\n  }\n\n  // @returns {Promise.<DAGLink>}\n  toDAGLink (options) {\n    return toDAGLink(this, options)\n  }\n\n  serialize () {\n    return serializeDAGNode({\n      Data: this._data,\n      Links: this._links\n    })\n  }\n\n  get size () {\n    if (this._size === null) {\n      if (this._serializedSize === null) {\n        this._serializedSize = this.serialize().length\n      }\n      this._size = this._links.reduce((sum, l) => sum + l.Tsize, this._serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  // Getters for backwards compatible path resolving\n  get Data () {\n    return this._data\n  }\n\n  set Data (_) {\n    throw new Error(\"Can't set property: 'Data' is immutable\")\n  }\n\n  get Links () {\n    return this._links.map((link) => {\n      return {\n        Name: link.Name,\n        Tsize: link.Tsize,\n        Hash: link.Hash\n      }\n    })\n  }\n\n  set Links (_) {\n    throw new Error(\"Can't set property: 'Links' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\n"]},"metadata":{},"sourceType":"script"}