{"ast":null,"code":"'use strict';\n\nconst multicodec = require('multicodec');\n\nconst nameToCodec = name => multicodec[name.toUpperCase().replace(/-/g, '_')];\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  ipld,\n  pin,\n  gcLock,\n  preload\n}) => {\n  return withTimeoutOption(async function put(dagNode, options) {\n    options = options || {};\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hashAlg` options.');\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      throw new Error('Can\\'t put dag node. Please provide `format` AND `hashAlg` options.');\n    }\n\n    const optionDefaults = {\n      format: multicodec.DAG_CBOR,\n      hashAlg: multicodec.SHA2_256\n    }; // The IPLD expects the format and hashAlg as constants\n\n    if (options.format && typeof options.format === 'string') {\n      options.format = nameToCodec(options.format);\n    }\n\n    if (options.hashAlg && typeof options.hashAlg === 'string') {\n      options.hashAlg = nameToCodec(options.hashAlg);\n    }\n\n    options = options.cid ? options : Object.assign({}, optionDefaults, options); // js-ipld defaults to verion 1 CIDs. Hence set version 0 explicitly for\n    // dag-pb nodes\n\n    if (options.version === undefined) {\n      if (options.format === multicodec.DAG_PB && options.hashAlg === multicodec.SHA2_256) {\n        options.version = 0;\n      } else {\n        options.version = 1;\n      }\n    }\n\n    let release;\n\n    if (options.pin) {\n      release = await gcLock.readLock();\n    }\n\n    try {\n      const cid = await ipld.put(dagNode, options.format, {\n        hashAlg: options.hashAlg,\n        cidVersion: options.version,\n        signal: options.signal\n      });\n\n      if (options.pin) {\n        await pin.add(cid, {\n          lock: false\n        });\n      }\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return cid;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/dag/put.js"],"names":["multicodec","require","nameToCodec","name","toUpperCase","replace","withTimeoutOption","module","exports","ipld","pin","gcLock","preload","put","dagNode","options","cid","format","hashAlg","Error","optionDefaults","DAG_CBOR","SHA2_256","Object","assign","version","undefined","DAG_PB","release","readLock","cidVersion","signal","add","lock"],"mappings":"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","sourcesContent":["'use strict'\n\nconst multicodec = require('multicodec')\nconst nameToCodec = name => multicodec[name.toUpperCase().replace(/-/g, '_')]\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ ipld, pin, gcLock, preload }) => {\n  return withTimeoutOption(async function put (dagNode, options) {\n    options = options || {}\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hashAlg` options.')\n    } else if (((options.format && !options.hashAlg) || (!options.format && options.hashAlg))) {\n      throw new Error('Can\\'t put dag node. Please provide `format` AND `hashAlg` options.')\n    }\n\n    const optionDefaults = {\n      format: multicodec.DAG_CBOR,\n      hashAlg: multicodec.SHA2_256\n    }\n\n    // The IPLD expects the format and hashAlg as constants\n    if (options.format && typeof options.format === 'string') {\n      options.format = nameToCodec(options.format)\n    }\n    if (options.hashAlg && typeof options.hashAlg === 'string') {\n      options.hashAlg = nameToCodec(options.hashAlg)\n    }\n\n    options = options.cid ? options : Object.assign({}, optionDefaults, options)\n\n    // js-ipld defaults to verion 1 CIDs. Hence set version 0 explicitly for\n    // dag-pb nodes\n    if (options.version === undefined) {\n      if (options.format === multicodec.DAG_PB && options.hashAlg === multicodec.SHA2_256) {\n        options.version = 0\n      } else {\n        options.version = 1\n      }\n    }\n\n    let release\n\n    if (options.pin) {\n      release = await gcLock.readLock()\n    }\n\n    try {\n      const cid = await ipld.put(dagNode, options.format, {\n        hashAlg: options.hashAlg,\n        cidVersion: options.version,\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await pin.add(cid, {\n          lock: false\n        })\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}