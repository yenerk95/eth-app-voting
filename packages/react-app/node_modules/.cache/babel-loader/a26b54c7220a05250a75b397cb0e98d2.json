{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs');\n\nconst mergeOptions = require('merge-options');\n\nconst {\n  isTest\n} = require('ipfs-utils/src/env');\n\nconst globSource = require('ipfs-utils/src/files/glob-source');\n\nconst urlSource = require('ipfs-utils/src/files/url-source');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst PeerId = require('peer-id');\n\nconst crypto = require('libp2p-crypto');\n\nconst isIPFS = require('is-ipfs');\n\nconst multiaddr = require('multiaddr');\n\nconst multibase = require('multibase');\n\nconst multicodec = require('multicodec');\n\nconst multihashing = require('multihashing-async');\n\nconst multihash = multihashing.multihash;\n\nconst CID = require('cids');\n\nconst {\n  NotInitializedError\n} = require('./errors');\n\nconst Components = require('./components');\n\nconst ApiManager = require('./api-manager');\n\nconst getDefaultOptions = () => ({\n  init: true,\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest,\n    // preload by default, unless in test env\n    addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n  }\n});\n\nasync function create(options) {\n  options = mergeOptions(getDefaultOptions(), options); // eslint-disable-next-line no-console\n\n  const print = options.silent ? log : console.log;\n  const apiManager = new ApiManager();\n  const {\n    api\n  } = apiManager.update({\n    init: Components.init({\n      apiManager,\n      print,\n      options\n    }),\n    dns: Components.dns(),\n    isOnline: Components.isOnline({})\n  }, async () => {\n    throw new NotInitializedError();\n  }); // eslint-disable-line require-await\n\n  if (!options.init) {\n    return api;\n  }\n\n  await api.init();\n\n  if (!options.start) {\n    return api;\n  }\n\n  return api.start();\n}\n\nmodule.exports = {\n  create,\n  crypto,\n  isIPFS,\n  Buffer,\n  CID,\n  multiaddr,\n  multibase,\n  multihash,\n  multihashing,\n  multicodec,\n  PeerId,\n  globSource,\n  urlSource\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/index.js"],"names":["log","require","mergeOptions","isTest","globSource","urlSource","Buffer","PeerId","crypto","isIPFS","multiaddr","multibase","multicodec","multihashing","multihash","CID","NotInitializedError","Components","ApiManager","getDefaultOptions","init","start","EXPERIMENTAL","preload","enabled","addresses","create","options","print","silent","console","apiManager","api","update","dns","isOnline","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,MAAjB,CAAZ;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,kCAAD,CAA1B;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,iCAAD,CAAzB;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAaL,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMO,MAAM,GAAGP,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMS,SAAS,GAAGT,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMU,SAAS,GAAGV,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMW,UAAU,GAAGX,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMY,YAAY,GAAGZ,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMa,SAAS,GAAGD,YAAY,CAACC,SAA/B;;AACA,MAAMC,GAAG,GAAGd,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEe,EAAAA;AAAF,IAA0Bf,OAAO,CAAC,UAAD,CAAvC;;AACA,MAAMgB,UAAU,GAAGhB,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMiB,UAAU,GAAGjB,OAAO,CAAC,eAAD,CAA1B;;AAEA,MAAMkB,iBAAiB,GAAG,OAAO;AAC/BC,EAAAA,IAAI,EAAE,IADyB;AAE/BC,EAAAA,KAAK,EAAE,IAFwB;AAG/BC,EAAAA,YAAY,EAAE,EAHiB;AAI/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,CAACrB,MADH;AACW;AAClBsB,IAAAA,SAAS,EAAE,CACT,mCADS,EAET,mCAFS,EAGT,mCAHS,EAIT,mCAJS;AAFJ;AAJsB,CAAP,CAA1B;;AAeA,eAAeC,MAAf,CAAuBC,OAAvB,EAAgC;AAC9BA,EAAAA,OAAO,GAAGzB,YAAY,CAACiB,iBAAiB,EAAlB,EAAsBQ,OAAtB,CAAtB,CAD8B,CAG9B;;AACA,QAAMC,KAAK,GAAGD,OAAO,CAACE,MAAR,GAAiB7B,GAAjB,GAAuB8B,OAAO,CAAC9B,GAA7C;AAEA,QAAM+B,UAAU,GAAG,IAAIb,UAAJ,EAAnB;AAEA,QAAM;AAAEc,IAAAA;AAAF,MAAUD,UAAU,CAACE,MAAX,CAAkB;AAChCb,IAAAA,IAAI,EAAEH,UAAU,CAACG,IAAX,CAAgB;AAAEW,MAAAA,UAAF;AAAcH,MAAAA,KAAd;AAAqBD,MAAAA;AAArB,KAAhB,CAD0B;AAEhCO,IAAAA,GAAG,EAAEjB,UAAU,CAACiB,GAAX,EAF2B;AAGhCC,IAAAA,QAAQ,EAAElB,UAAU,CAACkB,QAAX,CAAoB,EAApB;AAHsB,GAAlB,EAIb,YAAY;AAAE,UAAM,IAAInB,mBAAJ,EAAN;AAAiC,GAJlC,CAAhB,CAR8B,CAYsB;;AAEpD,MAAI,CAACW,OAAO,CAACP,IAAb,EAAmB;AACjB,WAAOY,GAAP;AACD;;AAED,QAAMA,GAAG,CAACZ,IAAJ,EAAN;;AAEA,MAAI,CAACO,OAAO,CAACN,KAAb,EAAoB;AAClB,WAAOW,GAAP;AACD;;AAED,SAAOA,GAAG,CAACX,KAAJ,EAAP;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,MADe;AAEflB,EAAAA,MAFe;AAGfC,EAAAA,MAHe;AAIfH,EAAAA,MAJe;AAKfS,EAAAA,GALe;AAMfL,EAAAA,SANe;AAOfC,EAAAA,SAPe;AAQfG,EAAAA,SARe;AASfD,EAAAA,YATe;AAUfD,EAAAA,UAVe;AAWfL,EAAAA,MAXe;AAYfH,EAAAA,UAZe;AAafC,EAAAA;AAbe,CAAjB","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs')\nconst mergeOptions = require('merge-options')\nconst { isTest } = require('ipfs-utils/src/env')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\nconst { Buffer } = require('buffer')\nconst PeerId = require('peer-id')\nconst crypto = require('libp2p-crypto')\nconst isIPFS = require('is-ipfs')\nconst multiaddr = require('multiaddr')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst multihash = multihashing.multihash\nconst CID = require('cids')\nconst { NotInitializedError } = require('./errors')\nconst Components = require('./components')\nconst ApiManager = require('./api-manager')\n\nconst getDefaultOptions = () => ({\n  init: true,\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n\nasync function create (options) {\n  options = mergeOptions(getDefaultOptions(), options)\n\n  // eslint-disable-next-line no-console\n  const print = options.silent ? log : console.log\n\n  const apiManager = new ApiManager()\n\n  const { api } = apiManager.update({\n    init: Components.init({ apiManager, print, options }),\n    dns: Components.dns(),\n    isOnline: Components.isOnline({})\n  }, async () => { throw new NotInitializedError() }) // eslint-disable-line require-await\n\n  if (!options.init) {\n    return api\n  }\n\n  await api.init()\n\n  if (!options.start) {\n    return api\n  }\n\n  return api.start()\n}\n\nmodule.exports = {\n  create,\n  crypto,\n  isIPFS,\n  Buffer,\n  CID,\n  multiaddr,\n  multibase,\n  multihash,\n  multihashing,\n  multicodec,\n  PeerId,\n  globSource,\n  urlSource\n}\n"]},"metadata":{},"sourceType":"script"}