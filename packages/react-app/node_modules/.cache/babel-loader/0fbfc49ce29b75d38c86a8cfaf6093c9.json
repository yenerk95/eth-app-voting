{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events');\n\nvar lp = require('it-length-prefixed');\n\nvar pushable = require('it-pushable');\n\nvar pipe = require('it-pipe');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p-pubsub:peer');\nlog.error = debug('libp2p-pubsub:peer:error');\n\nvar _require = require('./message'),\n    RPC = _require.RPC;\n/**\n * The known state of a connected peer.\n */\n\n\nvar Peer = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Peer, _EventEmitter);\n\n  var _super = _createSuper(Peer);\n\n  /**\n   * @param {PeerId} id\n   * @param {Array<string>} protocols\n   */\n  function Peer(_ref) {\n    var _this;\n\n    var id = _ref.id,\n        protocols = _ref.protocols;\n\n    _classCallCheck(this, Peer);\n\n    _this = _super.call(this);\n    /**\n     * @type {PeerId}\n     */\n\n    _this.id = id;\n    /**\n     * @type {string}\n     */\n\n    _this.protocols = protocols;\n    /**\n     * @type {Connection}\n     */\n\n    _this.conn = null;\n    /**\n     * @type {Set}\n     */\n\n    _this.topics = new Set();\n    /**\n     * @type {Pushable}\n     */\n\n    _this.stream = null;\n    return _this;\n  }\n  /**\n   * Is the peer connected currently?\n   *\n   * @type {boolean}\n   */\n\n\n  _createClass(Peer, [{\n    key: \"write\",\n\n    /**\n     * Send a message to this peer.\n     * Throws if there is no `stream` to write to available.\n     *\n     * @param {Buffer} msg\n     * @returns {undefined}\n     */\n    value: function write(msg) {\n      if (!this.isWritable) {\n        var id = this.id.toB58String();\n        throw new Error('No writable connection to ' + id);\n      }\n\n      this.stream.push(msg);\n    }\n    /**\n     * Attach the peer to a connection and setup a write stream\n     *\n     * @param {Connection} conn\n     * @returns {void}\n     */\n\n  }, {\n    key: \"attachConnection\",\n    value: function () {\n      var _attachConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(conn) {\n        var _this2 = this;\n\n        var _prevStream;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _prevStream = this.stream;\n\n                if (!_prevStream) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return _prevStream.end(false);\n\n              case 4:\n                this.stream = pushable({\n                  onEnd: function onEnd(emit) {\n                    // close readable side of the stream\n                    _this2.conn.reset && _this2.conn.reset();\n                    _this2.conn = null;\n                    _this2.stream = null;\n\n                    if (emit !== false) {\n                      _this2.emit('close');\n                    }\n                  }\n                });\n                this.conn = conn;\n                pipe(this.stream, lp.encode(), conn).catch(function (err) {\n                  log.error(err);\n                }); // Only emit if the connection is new\n\n                if (!_prevStream) {\n                  this.emit('connection');\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function attachConnection(_x) {\n        return _attachConnection.apply(this, arguments);\n      }\n\n      return attachConnection;\n    }()\n  }, {\n    key: \"_sendRawSubscriptions\",\n    value: function _sendRawSubscriptions(topics, subscribe) {\n      if (topics.size === 0) {\n        return;\n      }\n\n      var subs = [];\n      topics.forEach(function (topic) {\n        subs.push({\n          subscribe: subscribe,\n          topicID: topic\n        });\n      });\n      this.write(RPC.encode({\n        subscriptions: subs\n      }));\n    }\n    /**\n     * Send the given subscriptions to this peer.\n     * @param {Set|Array} topics\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"sendSubscriptions\",\n    value: function sendSubscriptions(topics) {\n      this._sendRawSubscriptions(topics, true);\n    }\n    /**\n     * Send the given unsubscriptions to this peer.\n     * @param {Set|Array} topics\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"sendUnsubscriptions\",\n    value: function sendUnsubscriptions(topics) {\n      this._sendRawSubscriptions(topics, false);\n    }\n    /**\n     * Send messages to this peer.\n     *\n     * @param {Array<any>} msgs\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"sendMessages\",\n    value: function sendMessages(msgs) {\n      this.write(RPC.encode({\n        msgs: msgs\n      }));\n    }\n    /**\n     * Bulk process subscription updates.\n     *\n     * @param {Array} changes\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"updateSubscriptions\",\n    value: function updateSubscriptions(changes) {\n      var _this3 = this;\n\n      changes.forEach(function (subopt) {\n        if (subopt.subscribe) {\n          _this3.topics.add(subopt.topicID);\n        } else {\n          _this3.topics.delete(subopt.topicID);\n        }\n      });\n    }\n    /**\n     * Closes the open connection to peer\n     * @returns {void}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      // End the pushable\n      if (this.stream) {\n        this.stream.end();\n      }\n\n      this.conn = null;\n      this.stream = null;\n      this.emit('close');\n    }\n  }, {\n    key: \"isConnected\",\n    get: function get() {\n      return Boolean(this.conn);\n    }\n    /**\n     * Do we have a connection to write on?\n     *\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isWritable\",\n    get: function get() {\n      return Boolean(this.stream);\n    }\n  }]);\n\n  return Peer;\n}(EventEmitter);\n\nmodule.exports = Peer;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-pubsub/src/peer.js"],"names":["EventEmitter","require","lp","pushable","pipe","debug","log","error","RPC","Peer","id","protocols","conn","topics","Set","stream","msg","isWritable","toB58String","Error","push","_prevStream","end","onEnd","emit","reset","encode","catch","err","subscribe","size","subs","forEach","topic","topicID","write","subscriptions","_sendRawSubscriptions","msgs","changes","subopt","add","delete","Boolean","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events')\n\nconst lp = require('it-length-prefixed')\nconst pushable = require('it-pushable')\nconst pipe = require('it-pipe')\nconst debug = require('debug')\n\nconst log = debug('libp2p-pubsub:peer')\nlog.error = debug('libp2p-pubsub:peer:error')\n\nconst { RPC } = require('./message')\n\n/**\n * The known state of a connected peer.\n */\nclass Peer extends EventEmitter {\n  /**\n   * @param {PeerId} id\n   * @param {Array<string>} protocols\n   */\n  constructor ({ id, protocols }) {\n    super()\n\n    /**\n     * @type {PeerId}\n     */\n    this.id = id\n    /**\n     * @type {string}\n     */\n    this.protocols = protocols\n    /**\n     * @type {Connection}\n     */\n    this.conn = null\n    /**\n     * @type {Set}\n     */\n    this.topics = new Set()\n    /**\n     * @type {Pushable}\n     */\n    this.stream = null\n  }\n\n  /**\n   * Is the peer connected currently?\n   *\n   * @type {boolean}\n   */\n  get isConnected () {\n    return Boolean(this.conn)\n  }\n\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n  get isWritable () {\n    return Boolean(this.stream)\n  }\n\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Buffer} msg\n   * @returns {undefined}\n   */\n  write (msg) {\n    if (!this.isWritable) {\n      const id = this.id.toB58String()\n      throw new Error('No writable connection to ' + id)\n    }\n\n    this.stream.push(msg)\n  }\n\n  /**\n   * Attach the peer to a connection and setup a write stream\n   *\n   * @param {Connection} conn\n   * @returns {void}\n   */\n  async attachConnection (conn) {\n    const _prevStream = this.stream\n    if (_prevStream) {\n      // End the stream without emitting a close event\n      await _prevStream.end(false)\n    }\n\n    this.stream = pushable({\n      onEnd: (emit) => {\n        // close readable side of the stream\n        this.conn.reset && this.conn.reset()\n        this.conn = null\n        this.stream = null\n        if (emit !== false) {\n          this.emit('close')\n        }\n      }\n    })\n    this.conn = conn\n\n    pipe(\n      this.stream,\n      lp.encode(),\n      conn\n    ).catch(err => {\n      log.error(err)\n    })\n\n    // Only emit if the connection is new\n    if (!_prevStream) {\n      this.emit('connection')\n    }\n  }\n\n  _sendRawSubscriptions (topics, subscribe) {\n    if (topics.size === 0) {\n      return\n    }\n\n    const subs = []\n    topics.forEach((topic) => {\n      subs.push({\n        subscribe: subscribe,\n        topicID: topic\n      })\n    })\n\n    this.write(RPC.encode({\n      subscriptions: subs\n    }))\n  }\n\n  /**\n   * Send the given subscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n  sendSubscriptions (topics) {\n    this._sendRawSubscriptions(topics, true)\n  }\n\n  /**\n   * Send the given unsubscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n  sendUnsubscriptions (topics) {\n    this._sendRawSubscriptions(topics, false)\n  }\n\n  /**\n   * Send messages to this peer.\n   *\n   * @param {Array<any>} msgs\n   * @returns {undefined}\n   */\n  sendMessages (msgs) {\n    this.write(RPC.encode({\n      msgs: msgs\n    }))\n  }\n\n  /**\n   * Bulk process subscription updates.\n   *\n   * @param {Array} changes\n   * @returns {undefined}\n   */\n  updateSubscriptions (changes) {\n    changes.forEach((subopt) => {\n      if (subopt.subscribe) {\n        this.topics.add(subopt.topicID)\n      } else {\n        this.topics.delete(subopt.topicID)\n      }\n    })\n  }\n\n  /**\n   * Closes the open connection to peer\n   * @returns {void}\n   */\n  close () {\n    // End the pushable\n    if (this.stream) {\n      this.stream.end()\n    }\n\n    this.conn = null\n    this.stream = null\n    this.emit('close')\n  }\n}\n\nmodule.exports = Peer\n"]},"metadata":{},"sourceType":"script"}