{"ast":null,"code":"//normalize a ws url.\nvar URL = require('url');\n\nmodule.exports = function (url, location, protocolMap, defaultProtocol) {\n  protocolMap = protocolMap || {};\n  /*\n   https://nodejs.org/dist/latest-v6.x/docs/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost\n   I didn't know this, but url.parse takes a 3rd\n  argument which interprets \"//foo.com\" as the hostname,\n  but without the protocol. by default, // is interpreted\n  as the path.\n   that lets us do what the wsurl module does.\n  https://www.npmjs.com/package/wsurl\n   but most of the time, I want to write js\n  that will work on localhost, and will work\n  on a server...\n   so I want to just do createWebSocket('/')\n  and get \"ws://mydomain.com/\"\n   */\n\n  var url = URL.parse(url, false, true);\n  var proto;\n  if (url.protocol) proto = url.protocol;else {\n    proto = location.protocol ? location.protocol.replace(/:$/, '') : 'http';\n    proto = (protocolMap[proto] || defaultProtocol || proto) + ':';\n  } //handle quirk in url package\n\n  if (url.host && url.host[0] === ':') url.host = null; //useful for websockets\n\n  if (url.hostname) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      hostname: url.hostname,\n      port: url.port,\n      pathname: url.pathname,\n      search: url.search\n    });\n  } else url.host = location.host; //included for completeness. would you want to do this?\n\n\n  if (url.port) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      host: location.hostname + ':' + url.port,\n      port: url.port,\n      pathname: url.pathname,\n      search: url.search\n    });\n  } //definately useful for websockets\n\n\n  if (url.pathname) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      host: url.host,\n      pathname: url.pathname,\n      search: url.search\n    });\n  } else url.pathname = location.pathname; //included for completeness. would you want to do this?\n\n\n  if (url.search) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      host: url.host,\n      pathname: url.pathname,\n      search: url.search\n    });\n  } else url.search = location.search;\n\n  return url.format(url);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/relative-url/index.js"],"names":["URL","require","module","exports","url","location","protocolMap","defaultProtocol","parse","proto","protocol","replace","host","hostname","format","slashes","port","pathname","search"],"mappings":"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","sourcesContent":["\n//normalize a ws url.\nvar URL = require('url')\nmodule.exports = function (url, location, protocolMap, defaultProtocol) {\n  protocolMap = protocolMap ||{}\n  /*\n\n  https://nodejs.org/dist/latest-v6.x/docs/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost\n\n  I didn't know this, but url.parse takes a 3rd\n  argument which interprets \"//foo.com\" as the hostname,\n  but without the protocol. by default, // is interpreted\n  as the path.\n\n  that lets us do what the wsurl module does.\n  https://www.npmjs.com/package/wsurl\n\n  but most of the time, I want to write js\n  that will work on localhost, and will work\n  on a server...\n\n  so I want to just do createWebSocket('/')\n  and get \"ws://mydomain.com/\"\n\n  */\n\n  var url = URL.parse(url, false, true)\n\n  var proto\n  if(url.protocol) proto = url.protocol\n  else {\n    proto = location.protocol ? location.protocol.replace(/:$/,'') : 'http'\n    proto = ((protocolMap)[proto] || defaultProtocol || proto) + ':'\n  }\n\n  //handle quirk in url package\n  if(url.host && url.host[0] === ':')\n    url.host = null\n\n  //useful for websockets\n  if(url.hostname) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      hostname: url.hostname,\n      port: url.port,\n      pathname: url.pathname,\n      search: url.search\n    })\n  }\n  else url.host = location.host\n\n  //included for completeness. would you want to do this?\n  if(url.port) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      host: location.hostname + ':' + url.port,\n      port: url.port,\n      pathname: url.pathname,\n      search: url.search\n    })\n  }\n\n  //definately useful for websockets\n  if(url.pathname) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      host: url.host,\n      pathname: url.pathname,\n      search: url.search\n    })\n  }\n  else\n    url.pathname = location.pathname\n\n  //included for completeness. would you want to do this?\n  if(url.search) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      host: url.host,\n      pathname: url.pathname,\n      search: url.search\n    })\n  }\n  else url.search = location.search\n\n  return url.format(url)\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"script"}