{"ast":null,"code":"'use strict';\n\nconst PeerQueue = require('../peer-list/peer-queue');\n\nconst utils = require('../utils'); // TODO: Temporary until parallel dial in Switch have a proper\n// timeout. Requires async/await refactor of transports and\n// dial abort logic. This gives us 30s to complete the `queryFunc`.\n// This should help reduce the high end call times of queries\n\n\nconst QUERY_FUNC_TIMEOUT = 30e3;\n/**\n * Manages a single Path through the DHT.\n */\n\nclass Path {\n  /**\n   * Creates a Path.\n   *\n   * @param {Run} run\n   * @param {queryFunc} queryFunc\n   */\n  constructor(run, queryFunc) {\n    this.run = run;\n    this.queryFunc = utils.withTimeout(queryFunc, QUERY_FUNC_TIMEOUT);\n    if (!this.queryFunc) throw new Error('Path requires a `queryFn` to be specified');\n    if (typeof this.queryFunc !== 'function') throw new Error('Path expected `queryFn` to be a function. Got ' + typeof this.queryFunc);\n    /**\n     * @type {Array<PeerId>}\n     */\n\n    this.initialPeers = [];\n    /**\n     * @type {PeerQueue}\n     */\n\n    this.peersToQuery = null;\n  }\n  /**\n   * Add a peer to the set of peers that are used to intialize the path.\n   * @param {PeerId} peer\n   */\n\n\n  addInitialPeer(peer) {\n    this.initialPeers.push(peer);\n  }\n  /**\n   * Execute the path.\n   *\n   * @returns {Promise}\n   *\n   */\n\n\n  async execute() {\n    // Create a queue of peers ordered by distance from the key\n    const queue = await PeerQueue.fromKey(this.run.query.key); // Add initial peers to the queue\n\n    this.peersToQuery = queue;\n    await Promise.all(this.initialPeers.map(peer => this.addPeerToQuery(peer)));\n    await this.run.workerQueue(this);\n  }\n  /**\n   * Add a peer to the peers to be queried.\n   *\n   * @param {PeerId} peer\n   * @returns {Promise<void>}\n   */\n\n\n  async addPeerToQuery(peer) {\n    // Don't add self\n    if (this.run.query.dht._isSelf(peer)) {\n      return;\n    } // The paths must be disjoint, meaning that no two paths in the Query may\n    // traverse the same peer\n\n\n    if (this.run.peersSeen.has(peer.toB58String())) {\n      return;\n    }\n\n    await this.peersToQuery.enqueue(peer);\n  }\n\n}\n\nmodule.exports = Path;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/query/path.js"],"names":["PeerQueue","require","utils","QUERY_FUNC_TIMEOUT","Path","constructor","run","queryFunc","withTimeout","Error","initialPeers","peersToQuery","addInitialPeer","peer","push","execute","queue","fromKey","query","key","Promise","all","map","addPeerToQuery","workerQueue","dht","_isSelf","peersSeen","has","toB58String","enqueue","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,yBAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB,C,CAEA;AACA;AACA;AACA;;;AACA,MAAME,kBAAkB,GAAG,IAA3B;AAEA;;;;AAGA,MAAMC,IAAN,CAAW;AACT;;;;;;AAMAC,EAAAA,WAAW,CAAEC,GAAF,EAAOC,SAAP,EAAkB;AAC3B,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,SAAL,GAAiBL,KAAK,CAACM,WAAN,CAAkBD,SAAlB,EAA6BJ,kBAA7B,CAAjB;AACA,QAAI,CAAC,KAAKI,SAAV,EAAqB,MAAM,IAAIE,KAAJ,CAAU,2CAAV,CAAN;AACrB,QAAI,OAAO,KAAKF,SAAZ,KAA0B,UAA9B,EAA0C,MAAM,IAAIE,KAAJ,CAAU,mDAAmD,OAAO,KAAKF,SAAzE,CAAN;AAE1C;;;;AAGA,SAAKG,YAAL,GAAoB,EAApB;AAEA;;;;AAGA,SAAKC,YAAL,GAAoB,IAApB;AACD;AAED;;;;;;AAIAC,EAAAA,cAAc,CAAEC,IAAF,EAAQ;AACpB,SAAKH,YAAL,CAAkBI,IAAlB,CAAuBD,IAAvB;AACD;AAED;;;;;;;;AAMA,QAAME,OAAN,GAAiB;AACf;AACA,UAAMC,KAAK,GAAG,MAAMhB,SAAS,CAACiB,OAAV,CAAkB,KAAKX,GAAL,CAASY,KAAT,CAAeC,GAAjC,CAApB,CAFe,CAGf;;AACA,SAAKR,YAAL,GAAoBK,KAApB;AACA,UAAMI,OAAO,CAACC,GAAR,CAAY,KAAKX,YAAL,CAAkBY,GAAlB,CAAsBT,IAAI,IAAI,KAAKU,cAAL,CAAoBV,IAApB,CAA9B,CAAZ,CAAN;AACA,UAAM,KAAKP,GAAL,CAASkB,WAAT,CAAqB,IAArB,CAAN;AACD;AAED;;;;;;;;AAMA,QAAMD,cAAN,CAAsBV,IAAtB,EAA4B;AAC1B;AACA,QAAI,KAAKP,GAAL,CAASY,KAAT,CAAeO,GAAf,CAAmBC,OAAnB,CAA2Bb,IAA3B,CAAJ,EAAsC;AACpC;AACD,KAJyB,CAM1B;AACA;;;AACA,QAAI,KAAKP,GAAL,CAASqB,SAAT,CAAmBC,GAAnB,CAAuBf,IAAI,CAACgB,WAAL,EAAvB,CAAJ,EAAgD;AAC9C;AACD;;AAED,UAAM,KAAKlB,YAAL,CAAkBmB,OAAlB,CAA0BjB,IAA1B,CAAN;AACD;;AAlEQ;;AAqEXkB,MAAM,CAACC,OAAP,GAAiB5B,IAAjB","sourcesContent":["'use strict'\n\nconst PeerQueue = require('../peer-list/peer-queue')\nconst utils = require('../utils')\n\n// TODO: Temporary until parallel dial in Switch have a proper\n// timeout. Requires async/await refactor of transports and\n// dial abort logic. This gives us 30s to complete the `queryFunc`.\n// This should help reduce the high end call times of queries\nconst QUERY_FUNC_TIMEOUT = 30e3\n\n/**\n * Manages a single Path through the DHT.\n */\nclass Path {\n  /**\n   * Creates a Path.\n   *\n   * @param {Run} run\n   * @param {queryFunc} queryFunc\n   */\n  constructor (run, queryFunc) {\n    this.run = run\n    this.queryFunc = utils.withTimeout(queryFunc, QUERY_FUNC_TIMEOUT)\n    if (!this.queryFunc) throw new Error('Path requires a `queryFn` to be specified')\n    if (typeof this.queryFunc !== 'function') throw new Error('Path expected `queryFn` to be a function. Got ' + typeof this.queryFunc)\n\n    /**\n     * @type {Array<PeerId>}\n     */\n    this.initialPeers = []\n\n    /**\n     * @type {PeerQueue}\n     */\n    this.peersToQuery = null\n  }\n\n  /**\n   * Add a peer to the set of peers that are used to intialize the path.\n   * @param {PeerId} peer\n   */\n  addInitialPeer (peer) {\n    this.initialPeers.push(peer)\n  }\n\n  /**\n   * Execute the path.\n   *\n   * @returns {Promise}\n   *\n   */\n  async execute () {\n    // Create a queue of peers ordered by distance from the key\n    const queue = await PeerQueue.fromKey(this.run.query.key)\n    // Add initial peers to the queue\n    this.peersToQuery = queue\n    await Promise.all(this.initialPeers.map(peer => this.addPeerToQuery(peer)))\n    await this.run.workerQueue(this)\n  }\n\n  /**\n   * Add a peer to the peers to be queried.\n   *\n   * @param {PeerId} peer\n   * @returns {Promise<void>}\n   */\n  async addPeerToQuery (peer) {\n    // Don't add self\n    if (this.run.query.dht._isSelf(peer)) {\n      return\n    }\n\n    // The paths must be disjoint, meaning that no two paths in the Query may\n    // traverse the same peer\n    if (this.run.peersSeen.has(peer.toB58String())) {\n      return\n    }\n\n    await this.peersToQuery.enqueue(peer)\n  }\n}\n\nmodule.exports = Path\n"]},"metadata":{},"sourceType":"script"}