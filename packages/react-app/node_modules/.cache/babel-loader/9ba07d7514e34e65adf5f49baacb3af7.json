{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar log = require('debug')('ipfs:mfs:utils:update-mfs-root');\n\nvar _require = require('../../../utils'),\n    MFS_ROOT_KEY = _require.MFS_ROOT_KEY;\n\nvar errCode = require('err-code');\n\nvar updateMfsRoot = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, cid, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(options && options.signal && options.signal.aborted)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n              name: 'Aborted'\n            });\n\n          case 2:\n            log(\"New MFS root will be \".concat(cid));\n            _context.next = 5;\n            return context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);\n\n          case 5:\n            return _context.abrupt(\"return\", cid);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function updateMfsRoot(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = updateMfsRoot;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/files/utils/update-mfs-root.js"],"names":["log","require","MFS_ROOT_KEY","errCode","updateMfsRoot","context","cid","options","signal","aborted","Error","name","repo","datastore","put","buffer","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,gCAAjB,CAAZ;;eAGIA,OAAO,CAAC,gBAAD,C;IADTC,Y,YAAAA,Y;;AAEF,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAMG,aAAa;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,GAAhB,EAAqBC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAChBA,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAD5B;AAAA;AAAA;AAAA;;AAAA,kBAEZN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAA9C,CAFK;;AAAA;AAKpBX,YAAAA,GAAG,gCAAyBM,GAAzB,EAAH;AALoB;AAAA,mBAOdD,OAAO,CAACO,IAAR,CAAaC,SAAb,CAAuBC,GAAvB,CAA2BZ,YAA3B,EAAyCI,GAAG,CAACS,MAA7C,CAPc;;AAAA;AAAA,6CASbT,GATa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbF,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAYAY,MAAM,CAACC,OAAP,GAAiBb,aAAjB","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:mfs:utils:update-mfs-root')\nconst {\n  MFS_ROOT_KEY\n} = require('../../../utils')\nconst errCode = require('err-code')\n\nconst updateMfsRoot = async (context, cid, options) => {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  log(`New MFS root will be ${cid}`)\n\n  await context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer)\n\n  return cid\n}\n\nmodule.exports = updateMfsRoot\n"]},"metadata":{},"sourceType":"script"}