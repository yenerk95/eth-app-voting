{"ast":null,"code":"'use strict';\n\nconst Big = require('bignumber.js');\n\nconst CID = require('cids');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  bitswap\n}) => {\n  return withTimeoutOption(async function stat() {\n    // eslint-disable-line require-await\n    const snapshot = bitswap.stat().snapshot;\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: new Big(snapshot.blocksReceived),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers().map(id => new CID(id.toB58String())),\n      dupBlksReceived: new Big(snapshot.dupBlksReceived),\n      dupDataReceived: new Big(snapshot.dupDataReceived),\n      dataReceived: new Big(snapshot.dataReceived),\n      blocksSent: new Big(snapshot.blocksSent),\n      dataSent: new Big(snapshot.dataSent)\n    };\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/bitswap/stat.js"],"names":["Big","require","CID","withTimeoutOption","module","exports","bitswap","stat","snapshot","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","wantlist","Array","from","getWantlist","map","e","cid","peers","id","toB58String","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAwBF,OAAO,CAAC,aAAD,CAArC;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC,SAAOH,iBAAiB,CAAC,eAAeI,IAAf,GAAuB;AAAE;AAChD,UAAMC,QAAQ,GAAGF,OAAO,CAACC,IAAR,GAAeC,QAAhC;AAEA,WAAO;AACLC,MAAAA,aAAa,EAAEC,QAAQ,CAACF,QAAQ,CAACG,oBAAT,CAA8BC,QAA9B,EAAD,CADlB;AAELC,MAAAA,cAAc,EAAE,IAAIb,GAAJ,CAAQQ,QAAQ,CAACK,cAAjB,CAFX;AAGLC,MAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWV,OAAO,CAACW,WAAR,EAAX,EAAkCC,GAAlC,CAAsCC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAhD,CAHL;AAILC,MAAAA,KAAK,EAAEf,OAAO,CAACe,KAAR,GAAgBH,GAAhB,CAAoBI,EAAE,IAAI,IAAIpB,GAAJ,CAAQoB,EAAE,CAACC,WAAH,EAAR,CAA1B,CAJF;AAKLC,MAAAA,eAAe,EAAE,IAAIxB,GAAJ,CAAQQ,QAAQ,CAACgB,eAAjB,CALZ;AAMLC,MAAAA,eAAe,EAAE,IAAIzB,GAAJ,CAAQQ,QAAQ,CAACiB,eAAjB,CANZ;AAOLC,MAAAA,YAAY,EAAE,IAAI1B,GAAJ,CAAQQ,QAAQ,CAACkB,YAAjB,CAPT;AAQLC,MAAAA,UAAU,EAAE,IAAI3B,GAAJ,CAAQQ,QAAQ,CAACmB,UAAjB,CARP;AASLC,MAAAA,QAAQ,EAAE,IAAI5B,GAAJ,CAAQQ,QAAQ,CAACoB,QAAjB;AATL,KAAP;AAWD,GAduB,CAAxB;AAeD,CAhBD","sourcesContent":["'use strict'\n\nconst Big = require('bignumber.js')\nconst CID = require('cids')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ bitswap }) => {\n  return withTimeoutOption(async function stat () { // eslint-disable-line require-await\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: new Big(snapshot.blocksReceived),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers().map(id => new CID(id.toB58String())),\n      dupBlksReceived: new Big(snapshot.dupBlksReceived),\n      dupDataReceived: new Big(snapshot.dupDataReceived),\n      dataReceived: new Big(snapshot.dataReceived),\n      blocksSent: new Big(snapshot.blocksSent),\n      dataSent: new Big(snapshot.dataSent)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}