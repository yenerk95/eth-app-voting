{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:webrtc-star');\nlog.error = debug('libp2p:webrtc-star:error');\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar errcode = require('err-code');\n\nvar withIs = require('class-is');\n\nvar _require2 = require('abortable-iterator'),\n    AbortError = _require2.AbortError;\n\nvar SimplePeer = require('libp2p-webrtc-peer');\n\nvar _require3 = require('ipfs-utils/src/supports'),\n    webrtcSupport = _require3.supportsWebRTC;\n\nvar multiaddr = require('multiaddr');\n\nvar mafmt = require('mafmt');\n\nvar PeerId = require('peer-id');\n\nvar _require4 = require('./constants'),\n    CODE_CIRCUIT = _require4.CODE_CIRCUIT;\n\nvar _createListener = require('./listener');\n\nvar toConnection = require('./socket-to-conn');\n\nvar _require5 = require('./utils'),\n    cleanMultiaddr = _require5.cleanMultiaddr;\n\nfunction noop() {}\n/**\n * @class WebRTCStar\n */\n\n\nvar WebRTCStar = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Upgrader} options.upgrader\n   */\n  function WebRTCStar() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WebRTCStar);\n\n    if (!options.upgrader) {\n      throw new Error('An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.');\n    }\n\n    this._upgrader = options.upgrader;\n    this._signallingAddr = undefined;\n    this.sioOptions = {\n      transports: ['websocket'],\n      'force new connection': true\n    };\n\n    if (options.wrtc) {\n      this.wrtc = options.wrtc;\n    }\n\n    this.listenersRefs = {}; // Discovery\n\n    this.discovery = new EventEmitter();\n    this.discovery.tag = 'webRTCStar';\n    this.discovery._isStarted = false;\n\n    this.discovery.start = function () {\n      _this.discovery._isStarted = true;\n    };\n\n    this.discovery.stop = function () {\n      _this.discovery._isStarted = false;\n    };\n\n    this._peerDiscovered = this._peerDiscovered.bind(this);\n  }\n  /**\n   * @async\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Connection} An upgraded Connection\n   */\n\n\n  _createClass(WebRTCStar, [{\n    key: \"dial\",\n    value: function () {\n      var _dial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ma) {\n        var options,\n            rawConn,\n            maConn,\n            conn,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _context.next = 3;\n                return this._connect(ma, options);\n\n              case 3:\n                rawConn = _context.sent;\n                maConn = toConnection(rawConn, {\n                  remoteAddr: ma,\n                  signal: options.signal\n                });\n                log('new outbound connection %s', maConn.remoteAddr);\n                _context.next = 8;\n                return this._upgrader.upgradeOutbound(maConn);\n\n              case 8:\n                conn = _context.sent;\n                log('outbound connection %s upgraded', maConn.remoteAddr);\n                return _context.abrupt(\"return\", conn);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function dial(_x) {\n        return _dial.apply(this, arguments);\n      }\n\n      return dial;\n    }()\n    /**\n     * @private\n     * @param {Multiaddr} ma\n     * @param {object} options\n     * @param {AbortSignal} options.signal Used to abort dial requests\n     * @returns {Promise<SimplePeer>} Resolves a SimplePeer Webrtc channel\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(ma) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (options.signal && options.signal.aborted) {\n        throw new AbortError();\n      }\n\n      var spOptions = {\n        initiator: true,\n        trickle: false\n      }; // Use custom WebRTC implementation\n\n      if (this.wrtc) {\n        spOptions.wrtc = this.wrtc;\n      }\n\n      var cOpts = ma.toOptions();\n      var intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now();\n      var sioClient = this.listenersRefs[Object.keys(this.listenersRefs)[0]].io;\n      return new Promise(function (resolve, reject) {\n        var start = Date.now();\n        var connected;\n        log('dialing %s:%s', cOpts.host, cOpts.port);\n        var channel = new SimplePeer(spOptions);\n\n        var onError = function onError(err) {\n          if (!connected) {\n            var msg = \"connection error \".concat(cOpts.host, \":\").concat(cOpts.port, \": \").concat(err.message);\n            err.message = msg;\n            log.error(msg);\n            done(err);\n          }\n        };\n\n        var onTimeout = function onTimeout() {\n          log('connnection timeout %s:%s', cOpts.host, cOpts.port);\n          var err = errcode(new Error(\"connection timeout after \".concat(Date.now() - start, \"ms\")), 'ERR_CONNECT_TIMEOUT'); // Note: this will result in onError() being called\n\n          channel.emit('error', err);\n        };\n\n        var onConnect = function onConnect() {\n          connected = true;\n          log('connection opened %s:%s', cOpts.host, cOpts.port);\n          done(null);\n        };\n\n        var onAbort = function onAbort() {\n          log.error('connection aborted %s:%s', cOpts.host, cOpts.port);\n          channel.destroy();\n          done(new AbortError());\n        };\n\n        var done = function done(err) {\n          channel.removeListener('timeout', onTimeout);\n          channel.removeListener('connect', onConnect);\n          options.signal && options.signal.removeEventListener('abort', onAbort);\n          err ? reject(err) : resolve(channel);\n        };\n\n        channel.on('error', onError);\n        channel.once('timeout', onTimeout);\n        channel.once('connect', onConnect);\n        channel.on('close', function () {\n          channel.removeListener('error', onError);\n        });\n        options.signal && options.signal.addEventListener('abort', onAbort);\n        channel.on('signal', function (signal) {\n          sioClient.emit('ss-handshake', {\n            intentId: intentId,\n            srcMultiaddr: _this2._signallingAddr.toString(),\n            dstMultiaddr: ma.toString(),\n            signal: signal\n          });\n        }); // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we\n        // are clueless as to why.\n\n        sioClient.on('ws-handshake', function (offer) {\n          if (offer.intentId === intentId && offer.err) {\n            reject(errcode(offer.err instanceof Error ? offer.err : new Error(offer.err), 'ERR_SIGNALLING_FAILED'));\n          }\n\n          if (offer.intentId !== intentId || !offer.answer || channel.destroyed) {\n            return;\n          }\n\n          channel.signal(offer.signal);\n        });\n      });\n    }\n    /**\n     * Creates a WebrtcStar listener. The provided `handler` function will be called\n     * anytime a new incoming Connection has been successfully upgraded via\n     * `upgrader.upgradeInbound`.\n     * @param {object} [options] simple-peer options for listener\n     * @param {function (Connection)} handler\n     * @returns {Listener} A WebrtcStar listener\n     */\n\n  }, {\n    key: \"createListener\",\n    value: function createListener() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var handler = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (!webrtcSupport && !this.wrtc) {\n        throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT');\n      }\n\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      }\n\n      handler = handler || noop;\n      return _createListener({\n        handler: handler,\n        upgrader: this._upgrader\n      }, this, options);\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n     * @param {Multiaddr[]} multiaddrs\n     * @returns {Multiaddr[]} Valid TCP multiaddrs\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(multiaddrs) {\n      multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n      return multiaddrs.filter(function (ma) {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n          return false;\n        }\n\n        return mafmt.WebRTCStar.matches(ma);\n      });\n    }\n  }, {\n    key: \"_peerDiscovered\",\n    value: function _peerDiscovered(maStr) {\n      if (!this.discovery._isStarted) return;\n      log('Peer Discovered:', maStr);\n      maStr = cleanMultiaddr(maStr);\n      var ma = multiaddr(maStr);\n      var peerId = PeerId.createFromB58String(ma.getPeerId());\n      this.discovery.emit('peer', {\n        id: peerId,\n        multiaddrs: [ma]\n      });\n    }\n  }]);\n\n  return WebRTCStar;\n}();\n\nmodule.exports = withIs(WebRTCStar, {\n  className: 'WebRTCStar',\n  symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar'\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-webrtc-star/src/index.js"],"names":["debug","require","log","error","EventEmitter","errcode","withIs","AbortError","SimplePeer","webrtcSupport","supportsWebRTC","multiaddr","mafmt","PeerId","CODE_CIRCUIT","createListener","toConnection","cleanMultiaddr","noop","WebRTCStar","options","upgrader","Error","_upgrader","_signallingAddr","undefined","sioOptions","transports","wrtc","listenersRefs","discovery","tag","_isStarted","start","stop","_peerDiscovered","bind","ma","_connect","rawConn","maConn","remoteAddr","signal","upgradeOutbound","conn","aborted","spOptions","initiator","trickle","cOpts","toOptions","intentId","Math","random","toString","Date","now","sioClient","Object","keys","io","Promise","resolve","reject","connected","host","port","channel","onError","err","msg","message","done","onTimeout","emit","onConnect","onAbort","destroy","removeListener","removeEventListener","on","once","addEventListener","srcMultiaddr","dstMultiaddr","offer","answer","destroyed","handler","multiaddrs","Array","isArray","filter","protoCodes","includes","matches","maStr","peerId","createFromB58String","getPeerId","id","module","exports","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:webrtc-star')\nlog.error = debug('libp2p:webrtc-star:error')\n\nconst { EventEmitter } = require('events')\nconst errcode = require('err-code')\nconst withIs = require('class-is')\n\nconst { AbortError } = require('abortable-iterator')\nconst SimplePeer = require('libp2p-webrtc-peer')\nconst { supportsWebRTC: webrtcSupport } = require('ipfs-utils/src/supports')\n\nconst multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\nconst PeerId = require('peer-id')\n\nconst { CODE_CIRCUIT } = require('./constants')\nconst createListener = require('./listener')\nconst toConnection = require('./socket-to-conn')\nconst { cleanMultiaddr } = require('./utils')\n\nfunction noop () { }\n\n/**\n * @class WebRTCStar\n */\nclass WebRTCStar {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Upgrader} options.upgrader\n   */\n  constructor (options = {}) {\n    if (!options.upgrader) {\n      throw new Error('An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.')\n    }\n\n    this._upgrader = options.upgrader\n\n    this._signallingAddr = undefined\n\n    this.sioOptions = {\n      transports: ['websocket'],\n      'force new connection': true\n    }\n\n    if (options.wrtc) {\n      this.wrtc = options.wrtc\n    }\n\n    this.listenersRefs = {}\n\n    // Discovery\n    this.discovery = new EventEmitter()\n    this.discovery.tag = 'webRTCStar'\n    this.discovery._isStarted = false\n    this.discovery.start = () => {\n      this.discovery._isStarted = true\n    }\n    this.discovery.stop = () => {\n      this.discovery._isStarted = false\n    }\n    this._peerDiscovered = this._peerDiscovered.bind(this)\n  }\n\n  /**\n   * @async\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Connection} An upgraded Connection\n   */\n  async dial (ma, options = {}) {\n    const rawConn = await this._connect(ma, options)\n    const maConn = toConnection(rawConn, { remoteAddr: ma, signal: options.signal })\n    log('new outbound connection %s', maConn.remoteAddr)\n    const conn = await this._upgrader.upgradeOutbound(maConn)\n    log('outbound connection %s upgraded', maConn.remoteAddr)\n    return conn\n  }\n\n  /**\n   * @private\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Promise<SimplePeer>} Resolves a SimplePeer Webrtc channel\n   */\n  _connect (ma, options = {}) {\n    if (options.signal && options.signal.aborted) {\n      throw new AbortError()\n    }\n\n    const spOptions = {\n      initiator: true,\n      trickle: false\n    }\n\n    // Use custom WebRTC implementation\n    if (this.wrtc) { spOptions.wrtc = this.wrtc }\n\n    const cOpts = ma.toOptions()\n\n    const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now()\n    const sioClient = this\n      .listenersRefs[Object.keys(this.listenersRefs)[0]].io\n\n    return new Promise((resolve, reject) => {\n      const start = Date.now()\n      let connected\n\n      log('dialing %s:%s', cOpts.host, cOpts.port)\n      const channel = new SimplePeer(spOptions)\n\n      const onError = (err) => {\n        if (!connected) {\n          const msg = `connection error ${cOpts.host}:${cOpts.port}: ${err.message}`\n\n          err.message = msg\n          log.error(msg)\n          done(err)\n        }\n      }\n\n      const onTimeout = () => {\n        log('connnection timeout %s:%s', cOpts.host, cOpts.port)\n        const err = errcode(new Error(`connection timeout after ${Date.now() - start}ms`), 'ERR_CONNECT_TIMEOUT')\n        // Note: this will result in onError() being called\n        channel.emit('error', err)\n      }\n\n      const onConnect = () => {\n        connected = true\n\n        log('connection opened %s:%s', cOpts.host, cOpts.port)\n        done(null)\n      }\n\n      const onAbort = () => {\n        log.error('connection aborted %s:%s', cOpts.host, cOpts.port)\n        channel.destroy()\n        done(new AbortError())\n      }\n\n      const done = (err) => {\n        channel.removeListener('timeout', onTimeout)\n        channel.removeListener('connect', onConnect)\n        options.signal && options.signal.removeEventListener('abort', onAbort)\n\n        err ? reject(err) : resolve(channel)\n      }\n\n      channel.on('error', onError)\n      channel.once('timeout', onTimeout)\n      channel.once('connect', onConnect)\n      channel.on('close', () => {\n        channel.removeListener('error', onError)\n      })\n      options.signal && options.signal.addEventListener('abort', onAbort)\n\n      channel.on('signal', (signal) => {\n        sioClient.emit('ss-handshake', {\n          intentId: intentId,\n          srcMultiaddr: this._signallingAddr.toString(),\n          dstMultiaddr: ma.toString(),\n          signal: signal\n        })\n      })\n\n      // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we\n      // are clueless as to why.\n      sioClient.on('ws-handshake', (offer) => {\n        if (offer.intentId === intentId && offer.err) {\n          reject(errcode(offer.err instanceof Error ? offer.err : new Error(offer.err), 'ERR_SIGNALLING_FAILED'))\n        }\n\n        if (offer.intentId !== intentId || !offer.answer || channel.destroyed) {\n          return\n        }\n\n        channel.signal(offer.signal)\n      })\n    })\n  }\n\n  /**\n   * Creates a WebrtcStar listener. The provided `handler` function will be called\n   * anytime a new incoming Connection has been successfully upgraded via\n   * `upgrader.upgradeInbound`.\n   * @param {object} [options] simple-peer options for listener\n   * @param {function (Connection)} handler\n   * @returns {Listener} A WebrtcStar listener\n   */\n  createListener (options = {}, handler) {\n    if (!webrtcSupport && !this.wrtc) {\n      throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT')\n    }\n\n    if (typeof options === 'function') {\n      handler = options\n      options = {}\n    }\n\n    handler = handler || noop\n\n    return createListener({ handler, upgrader: this._upgrader }, this, options)\n  }\n\n  /**\n   * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n   * @param {Multiaddr[]} multiaddrs\n   * @returns {Multiaddr[]} Valid TCP multiaddrs\n   */\n  filter (multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs]\n\n    return multiaddrs.filter((ma) => {\n      if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n        return false\n      }\n\n      return mafmt.WebRTCStar.matches(ma)\n    })\n  }\n\n  _peerDiscovered (maStr) {\n    if (!this.discovery._isStarted) return\n\n    log('Peer Discovered:', maStr)\n    maStr = cleanMultiaddr(maStr)\n\n    const ma = multiaddr(maStr)\n    const peerId = PeerId.createFromB58String(ma.getPeerId())\n\n    this.discovery.emit('peer', {\n      id: peerId,\n      multiaddrs: [ma]\n    })\n  }\n}\n\nmodule.exports = withIs(WebRTCStar, { className: 'WebRTCStar', symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar' })\n"]},"metadata":{},"sourceType":"script"}