{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst Key = require('interface-datastore').Key;\n\nconst apiFile = new Key('api');\n\nmodule.exports = store => {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @returns {Promise<String>}\n     */\n    async get() {\n      const value = await store.get(apiFile);\n      return value && value.toString();\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {Object} value - the api address to be written\n     * @returns {Promise<?>}\n     */\n    async set(value) {\n      // eslint-disable-line require-await\n      return store.put(apiFile, Buffer.from(value.toString()));\n    },\n\n    /**\n     * Deletes api file\n     *\n     * @returns {Promise<void>}\n     */\n    async delete() {\n      // eslint-disable-line require-await\n      return store.delete(apiFile);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo/src/api-addr.js"],"names":["Buffer","require","Key","apiFile","module","exports","store","get","value","toString","set","put","from","delete"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,qBAAD,CAAP,CAA+BC,GAA3C;;AAEA,MAAMC,OAAO,GAAG,IAAID,GAAJ,CAAQ,KAAR,CAAhB;;AAEAE,MAAM,CAACC,OAAP,GAAkBC,KAAD,IAAW;AAC1B,SAAO;AACL;;;;;AAKA,UAAMC,GAAN,GAAa;AACX,YAAMC,KAAK,GAAG,MAAMF,KAAK,CAACC,GAAN,CAAUJ,OAAV,CAApB;AACA,aAAOK,KAAK,IAAIA,KAAK,CAACC,QAAN,EAAhB;AACD,KATI;;AAUL;;;;;;AAMA,UAAMC,GAAN,CAAWF,KAAX,EAAkB;AAAE;AAClB,aAAOF,KAAK,CAACK,GAAN,CAAUR,OAAV,EAAmBH,MAAM,CAACY,IAAP,CAAYJ,KAAK,CAACC,QAAN,EAAZ,CAAnB,CAAP;AACD,KAlBI;;AAmBL;;;;;AAKA,UAAMI,MAAN,GAAgB;AAAE;AAChB,aAAOP,KAAK,CAACO,MAAN,CAAaV,OAAb,CAAP;AACD;;AA1BI,GAAP;AA4BD,CA7BD","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst Key = require('interface-datastore').Key\n\nconst apiFile = new Key('api')\n\nmodule.exports = (store) => {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @returns {Promise<String>}\n     */\n    async get () {\n      const value = await store.get(apiFile)\n      return value && value.toString()\n    },\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {Object} value - the api address to be written\n     * @returns {Promise<?>}\n     */\n    async set (value) { // eslint-disable-line require-await\n      return store.put(apiFile, Buffer.from(value.toString()))\n    },\n    /**\n     * Deletes api file\n     *\n     * @returns {Promise<void>}\n     */\n    async delete () { // eslint-disable-line require-await\n      return store.delete(apiFile)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}