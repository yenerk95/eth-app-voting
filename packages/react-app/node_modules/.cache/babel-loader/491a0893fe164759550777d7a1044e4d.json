{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst util = require('./util');\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\n\n\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob);\n  const parts = path.split('/').filter(Boolean);\n\n  while (parts.length) {\n    const key = parts.shift();\n\n    if (node[key] === undefined) {\n      throw new Error(`Object has no property '${key}'`);\n    }\n\n    node = node[key];\n\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\n\nconst traverse = function* (node, path) {\n  // Traverse only objects and arrays\n  if (Buffer.isBuffer(node) || CID.isCID(node) || typeof node === 'string' || node === null) {\n    return;\n  }\n\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item;\n    yield nextpath;\n    yield* traverse(node[item], nextpath);\n  }\n};\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\n\n\nexports.tree = function* (binaryBlob) {\n  const node = util.deserialize(binaryBlob);\n  yield* traverse(node);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipld-dag-cbor/src/resolver.js"],"names":["CID","require","Buffer","util","exports","resolve","binaryBlob","path","node","deserialize","parts","split","filter","Boolean","length","key","shift","undefined","Error","isCID","value","remainderPath","join","traverse","isBuffer","item","Object","keys","nextpath","tree"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;AAEA;;;;;;;;;;;;;;;;AAcAG,OAAO,CAACC,OAAR,GAAkB,CAACC,UAAD,EAAaC,IAAb,KAAsB;AACtC,MAAIC,IAAI,GAAGL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CAAX;AAEA,QAAMI,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAd;;AACA,SAAOH,KAAK,CAACI,MAAb,EAAqB;AACnB,UAAMC,GAAG,GAAGL,KAAK,CAACM,KAAN,EAAZ;;AACA,QAAIR,IAAI,CAACO,GAAD,CAAJ,KAAcE,SAAlB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAW,2BAA0BH,GAAI,GAAzC,CAAN;AACD;;AAEDP,IAAAA,IAAI,GAAGA,IAAI,CAACO,GAAD,CAAX;;AACA,QAAIf,GAAG,CAACmB,KAAJ,CAAUX,IAAV,CAAJ,EAAqB;AACnB,aAAO;AACLY,QAAAA,KAAK,EAAEZ,IADF;AAELa,QAAAA,aAAa,EAAEX,KAAK,CAACY,IAAN,CAAW,GAAX;AAFV,OAAP;AAID;AACF;;AAED,SAAO;AACLF,IAAAA,KAAK,EAAEZ,IADF;AAELa,IAAAA,aAAa,EAAE;AAFV,GAAP;AAID,CAvBD;;AAyBA,MAAME,QAAQ,GAAG,WAAYf,IAAZ,EAAkBD,IAAlB,EAAwB;AACvC;AACA,MAAIL,MAAM,CAACsB,QAAP,CAAgBhB,IAAhB,KAAyBR,GAAG,CAACmB,KAAJ,CAAUX,IAAV,CAAzB,IAA4C,OAAOA,IAAP,KAAgB,QAA5D,IACAA,IAAI,KAAK,IADb,EACmB;AACjB;AACD;;AACD,OAAK,MAAMiB,IAAX,IAAmBC,MAAM,CAACC,IAAP,CAAYnB,IAAZ,CAAnB,EAAsC;AACpC,UAAMoB,QAAQ,GAAGrB,IAAI,KAAKU,SAAT,GAAqBQ,IAArB,GAA4BlB,IAAI,GAAG,GAAP,GAAakB,IAA1D;AACA,UAAMG,QAAN;AACA,WAAQL,QAAQ,CAACf,IAAI,CAACiB,IAAD,CAAL,EAAaG,QAAb,CAAhB;AACD;AACF,CAXD;AAaA;;;;;;;;;AAOAxB,OAAO,CAACyB,IAAR,GAAe,WAAYvB,UAAZ,EAAwB;AACrC,QAAME,IAAI,GAAGL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CAAb;AAEA,SAAQiB,QAAQ,CAACf,IAAD,CAAhB;AACD,CAJD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { Buffer } = require('buffer')\nconst util = require('./util')\n\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    if (node[key] === undefined) {\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\nconst traverse = function * (node, path) {\n  // Traverse only objects and arrays\n  if (Buffer.isBuffer(node) || CID.isCID(node) || typeof node === 'string' ||\n      node === null) {\n    return\n  }\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item\n    yield nextpath\n    yield * traverse(node[item], nextpath)\n  }\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  yield * traverse(node)\n}\n"]},"metadata":{},"sourceType":"script"}