{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events');\n\nvar Stat = require('./stat');\n\nvar defaultOptions = {\n  movingAverageIntervals: [60 * 1000, // 1 minute\n  5 * 60 * 1000, // 5 minutes\n  15 * 60 * 1000 // 15 minutes\n  ]\n};\n\nvar Stats = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Stats, _EventEmitter);\n\n  var _super = _createSuper(Stats);\n\n  function Stats(initialCounters, _options) {\n    var _this;\n\n    _classCallCheck(this, Stats);\n\n    _this = _super.call(this);\n    var options = Object.assign({}, defaultOptions, _options);\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout');\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize');\n    }\n\n    _this._initialCounters = initialCounters;\n    _this._options = options;\n    _this._enabled = _this._options.enabled;\n    _this._global = new Stat(initialCounters, options);\n\n    _this._global.on('update', function (stats) {\n      return _this.emit('update', stats);\n    });\n\n    _this._peers = new Map();\n    return _this;\n  }\n\n  _createClass(Stats, [{\n    key: \"enable\",\n    value: function enable() {\n      this._enabled = true;\n      this._options.enabled = true;\n\n      this._global.enable();\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this._enabled = false;\n      this._options.enabled = false;\n\n      this._global.disable();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._enabled = false;\n\n      this._global.stop();\n\n      var _iterator = _createForOfIteratorHelper(this._peers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var peerStat = _step.value;\n          peerStat[1].stop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"forPeer\",\n    value: function forPeer(peerId) {\n      if (peerId.toB58String) {\n        peerId = peerId.toB58String();\n      }\n\n      return this._peers.get(peerId);\n    }\n  }, {\n    key: \"push\",\n    value: function push(peer, counter, inc) {\n      if (this._enabled) {\n        this._global.push(counter, inc);\n\n        if (peer) {\n          var peerStats = this._peers.get(peer);\n\n          if (!peerStats) {\n            peerStats = new Stat(this._initialCounters, this._options);\n\n            this._peers.set(peer, peerStats);\n          }\n\n          peerStats.push(counter, inc);\n        }\n      }\n    }\n  }, {\n    key: \"disconnected\",\n    value: function disconnected(peer) {\n      var peerId = peer.toB58String();\n\n      var peerStats = this._peers.get(peerId);\n\n      if (peerStats) {\n        peerStats.stop();\n\n        this._peers.delete(peerId);\n      }\n    }\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      return this._global.snapshot;\n    }\n  }, {\n    key: \"movingAverages\",\n    get: function get() {\n      return this._global.movingAverages;\n    }\n  }]);\n\n  return Stats;\n}(EventEmitter);\n\nmodule.exports = Stats;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/stats/index.js"],"names":["EventEmitter","require","Stat","defaultOptions","movingAverageIntervals","Stats","initialCounters","_options","options","Object","assign","computeThrottleTimeout","Error","computeThrottleMaxQueueSize","_initialCounters","_enabled","enabled","_global","on","stats","emit","_peers","Map","enable","disable","stop","peerStat","peerId","toB58String","get","peer","counter","inc","push","peerStats","set","delete","snapshot","movingAverages","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events')\nconst Stat = require('./stat')\n\nconst defaultOptions = {\n  movingAverageIntervals: [\n    60 * 1000, // 1 minute\n    5 * 60 * 1000, // 5 minutes\n    15 * 60 * 1000 // 15 minutes\n  ]\n}\n\nclass Stats extends EventEmitter {\n  constructor (initialCounters, _options) {\n    super()\n\n    const options = Object.assign({}, defaultOptions, _options)\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout')\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize')\n    }\n\n    this._initialCounters = initialCounters\n    this._options = options\n    this._enabled = this._options.enabled\n\n    this._global = new Stat(initialCounters, options)\n    this._global.on('update', (stats) => this.emit('update', stats))\n\n    this._peers = new Map()\n  }\n\n  enable () {\n    this._enabled = true\n    this._options.enabled = true\n    this._global.enable()\n  }\n\n  disable () {\n    this._enabled = false\n    this._options.enabled = false\n    this._global.disable()\n  }\n\n  stop () {\n    this._enabled = false\n    this._global.stop()\n    for (const peerStat of this._peers) {\n      peerStat[1].stop()\n    }\n  }\n\n  get snapshot () {\n    return this._global.snapshot\n  }\n\n  get movingAverages () {\n    return this._global.movingAverages\n  }\n\n  forPeer (peerId) {\n    if (peerId.toB58String) {\n      peerId = peerId.toB58String()\n    }\n\n    return this._peers.get(peerId)\n  }\n\n  push (peer, counter, inc) {\n    if (this._enabled) {\n      this._global.push(counter, inc)\n\n      if (peer) {\n        let peerStats = this._peers.get(peer)\n        if (!peerStats) {\n          peerStats = new Stat(this._initialCounters, this._options)\n          this._peers.set(peer, peerStats)\n        }\n\n        peerStats.push(counter, inc)\n      }\n    }\n  }\n\n  disconnected (peer) {\n    const peerId = peer.toB58String()\n    const peerStats = this._peers.get(peerId)\n    if (peerStats) {\n      peerStats.stop()\n      this._peers.delete(peerId)\n    }\n  }\n}\n\nmodule.exports = Stats\n"]},"metadata":{},"sourceType":"script"}