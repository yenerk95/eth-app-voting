{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar debug = require('debug');\n\nvar log = debug('libp2p-ping');\nlog.error = debug('libp2p-ping:error');\n\nvar errCode = require('err-code');\n\nvar crypto = require('libp2p-crypto');\n\nvar pipe = require('it-pipe');\n\nvar _require = require('it-buffer'),\n    toBuffer = _require.toBuffer;\n\nvar _require2 = require('streaming-iterables'),\n    collect = _require2.collect,\n    take = _require2.take;\n\nvar _require3 = require('./constants'),\n    PROTOCOL = _require3.PROTOCOL,\n    PING_LENGTH = _require3.PING_LENGTH;\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n * @param {Libp2p} node\n * @param {PeerId} peer\n * @returns {Promise<Number>}\n */\n\n\nfunction ping(_x, _x2) {\n  return _ping.apply(this, arguments);\n}\n/**\n * Subscribe ping protocol handler.\n * @param {Libp2p} node\n */\n\n\nfunction _ping() {\n  _ping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(node, peer) {\n    var _yield$node$dialProto, stream, start, data, _yield$pipe, _yield$pipe2, result, end;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            log('dialing %s to %s', PROTOCOL, peer.toB58String());\n            _context.next = 3;\n            return node.dialProtocol(peer, PROTOCOL);\n\n          case 3:\n            _yield$node$dialProto = _context.sent;\n            stream = _yield$node$dialProto.stream;\n            start = new Date();\n            data = crypto.randomBytes(PING_LENGTH);\n            _context.next = 9;\n            return pipe([data], stream, function (stream) {\n              return take(1, stream);\n            }, toBuffer, collect);\n\n          case 9:\n            _yield$pipe = _context.sent;\n            _yield$pipe2 = _slicedToArray(_yield$pipe, 1);\n            result = _yield$pipe2[0];\n            end = Date.now();\n\n            if (data.equals(result)) {\n              _context.next = 15;\n              break;\n            }\n\n            throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK');\n\n          case 15:\n            return _context.abrupt(\"return\", end - start);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _ping.apply(this, arguments);\n}\n\nfunction mount(node) {\n  node.handle(PROTOCOL, function (_ref) {\n    var stream = _ref.stream;\n    return pipe(stream, stream);\n  });\n}\n/**\n * Unsubscribe ping protocol handler.\n * @param {Libp2p} node\n */\n\n\nfunction unmount(node) {\n  node.unhandle(PROTOCOL);\n}\n\nexports = module.exports = ping;\nexports.mount = mount;\nexports.unmount = unmount;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/ping/index.js"],"names":["debug","require","log","error","errCode","crypto","pipe","toBuffer","collect","take","PROTOCOL","PING_LENGTH","ping","node","peer","toB58String","dialProtocol","stream","start","Date","data","randomBytes","result","end","now","equals","Error","mount","handle","unmount","unhandle","exports","module"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGF,KAAK,CAAC,aAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,mBAAD,CAAjB;;AACA,IAAMI,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,SAAD,CAApB;;eACqBA,OAAO,CAAC,WAAD,C;IAApBM,Q,YAAAA,Q;;gBACkBN,OAAO,CAAC,qBAAD,C;IAAzBO,O,aAAAA,O;IAASC,I,aAAAA,I;;gBAEiBR,OAAO,CAAC,aAAD,C;IAAjCS,Q,aAAAA,Q;IAAUC,W,aAAAA,W;AAElB;;;;;;;;SAMeC,I;;;AAwBf;;;;;;;mEAxBA,iBAAqBC,IAArB,EAA2BC,IAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEZ,YAAAA,GAAG,CAAC,kBAAD,EAAqBQ,QAArB,EAA+BI,IAAI,CAACC,WAAL,EAA/B,CAAH;AADF;AAAA,mBAG2BF,IAAI,CAACG,YAAL,CAAkBF,IAAlB,EAAwBJ,QAAxB,CAH3B;;AAAA;AAAA;AAGUO,YAAAA,MAHV,yBAGUA,MAHV;AAKQC,YAAAA,KALR,GAKgB,IAAIC,IAAJ,EALhB;AAMQC,YAAAA,IANR,GAMef,MAAM,CAACgB,WAAP,CAAmBV,WAAnB,CANf;AAAA;AAAA,mBAQyBL,IAAI,CACzB,CAACc,IAAD,CADyB,EAEzBH,MAFyB,EAGzB,UAAAA,MAAM;AAAA,qBAAIR,IAAI,CAAC,CAAD,EAAIQ,MAAJ,CAAR;AAAA,aAHmB,EAIzBV,QAJyB,EAKzBC,OALyB,CAR7B;;AAAA;AAAA;AAAA;AAQSc,YAAAA,MART;AAeQC,YAAAA,GAfR,GAecJ,IAAI,CAACK,GAAL,EAfd;;AAAA,gBAiBOJ,IAAI,CAACK,MAAL,CAAYH,MAAZ,CAjBP;AAAA;AAAA;AAAA;;AAAA,kBAkBUlB,OAAO,CAAC,IAAIsB,KAAJ,CAAU,yBAAV,CAAD,EAAuC,oBAAvC,CAlBjB;;AAAA;AAAA,6CAqBSH,GAAG,GAAGL,KArBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4BA,SAASS,KAAT,CAAgBd,IAAhB,EAAsB;AACpBA,EAAAA,IAAI,CAACe,MAAL,CAAYlB,QAAZ,EAAsB;AAAA,QAAGO,MAAH,QAAGA,MAAH;AAAA,WAAgBX,IAAI,CAACW,MAAD,EAASA,MAAT,CAApB;AAAA,GAAtB;AACD;AAED;;;;;;AAIA,SAASY,OAAT,CAAkBhB,IAAlB,EAAwB;AACtBA,EAAAA,IAAI,CAACiB,QAAL,CAAcpB,QAAd;AACD;;AAEDqB,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBnB,IAA3B;AACAmB,OAAO,CAACJ,KAAR,GAAgBA,KAAhB;AACAI,OAAO,CAACF,OAAR,GAAkBA,OAAlB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p-ping')\nlog.error = debug('libp2p-ping:error')\nconst errCode = require('err-code')\n\nconst crypto = require('libp2p-crypto')\nconst pipe = require('it-pipe')\nconst { toBuffer } = require('it-buffer')\nconst { collect, take } = require('streaming-iterables')\n\nconst { PROTOCOL, PING_LENGTH } = require('./constants')\n\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n * @param {Libp2p} node\n * @param {PeerId} peer\n * @returns {Promise<Number>}\n */\nasync function ping (node, peer) {\n  log('dialing %s to %s', PROTOCOL, peer.toB58String())\n\n  const { stream } = await node.dialProtocol(peer, PROTOCOL)\n\n  const start = new Date()\n  const data = crypto.randomBytes(PING_LENGTH)\n\n  const [result] = await pipe(\n    [data],\n    stream,\n    stream => take(1, stream),\n    toBuffer,\n    collect\n  )\n  const end = Date.now()\n\n  if (!data.equals(result)) {\n    throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK')\n  }\n\n  return end - start\n}\n\n/**\n * Subscribe ping protocol handler.\n * @param {Libp2p} node\n */\nfunction mount (node) {\n  node.handle(PROTOCOL, ({ stream }) => pipe(stream, stream))\n}\n\n/**\n * Unsubscribe ping protocol handler.\n * @param {Libp2p} node\n */\nfunction unmount (node) {\n  node.unhandle(PROTOCOL)\n}\n\nexports = module.exports = ping\nexports.mount = mount\nexports.unmount = unmount\n"]},"metadata":{},"sourceType":"script"}