{"ast":null,"code":"'use strict';\n\nvar multiaddr = require('multiaddr');\n\nvar errCode = require('err-code');\n\nvar _require = require('ip-address'),\n    Address4 = _require.Address4,\n    Address6 = _require.Address6;\n\nvar errors = {\n  ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',\n  ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',\n  ERR_INVALID_IP: 'ERR_INVALID_IP'\n};\n\nmodule.exports = function (ip, port) {\n  if (typeof ip !== 'string') {\n    throw errCode(new Error(\"invalid ip provided: \".concat(ip)), errors.ERR_INVALID_IP_PARAMETER);\n  }\n\n  port = parseInt(port);\n\n  if (isNaN(port)) {\n    throw errCode(new Error(\"invalid port provided: \".concat(port)), errors.ERR_INVALID_PORT_PARAMETER);\n  }\n\n  if (new Address4(ip).isValid()) {\n    return multiaddr(\"/ip4/\".concat(ip, \"/tcp/\").concat(port));\n  }\n\n  var ip6 = new Address6(ip);\n\n  if (ip6.isValid()) {\n    return ip6.is4() ? multiaddr(\"/ip4/\".concat(ip6.to4().correctForm(), \"/tcp/\").concat(port)) : multiaddr(\"/ip6/\".concat(ip, \"/tcp/\").concat(port));\n  }\n\n  throw errCode(new Error(\"invalid ip:port for creating a multiaddr: \".concat(ip, \":\").concat(port)), errors.ERR_INVALID_IP);\n};\n\nmodule.exports.Errors = errors;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-utils/src/ip-port-to-multiaddr.js"],"names":["multiaddr","require","errCode","Address4","Address6","errors","ERR_INVALID_IP_PARAMETER","ERR_INVALID_PORT_PARAMETER","ERR_INVALID_IP","module","exports","ip","port","Error","parseInt","isNaN","isValid","ip6","is4","to4","correctForm","Errors"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;eAC+BA,OAAO,CAAC,YAAD,C;IAA9BE,Q,YAAAA,Q;IAAUC,Q,YAAAA,Q;;AAElB,IAAMC,MAAM,GAAG;AACbC,EAAAA,wBAAwB,EAAE,0BADb;AAEbC,EAAAA,0BAA0B,EAAE,4BAFf;AAGbC,EAAAA,cAAc,EAAE;AAHH,CAAf;;AAMAC,MAAM,CAACC,OAAP,GAAiB,UAACC,EAAD,EAAKC,IAAL,EAAc;AAC7B,MAAI,OAAOD,EAAP,KAAc,QAAlB,EAA4B;AAC1B,UAAMT,OAAO,CAAC,IAAIW,KAAJ,gCAAkCF,EAAlC,EAAD,EAA0CN,MAAM,CAACC,wBAAjD,CAAb;AACD;;AAEDM,EAAAA,IAAI,GAAGE,QAAQ,CAACF,IAAD,CAAf;;AAEA,MAAIG,KAAK,CAACH,IAAD,CAAT,EAAiB;AACf,UAAMV,OAAO,CAAC,IAAIW,KAAJ,kCAAoCD,IAApC,EAAD,EAA8CP,MAAM,CAACE,0BAArD,CAAb;AACD;;AAED,MAAI,IAAIJ,QAAJ,CAAaQ,EAAb,EAAiBK,OAAjB,EAAJ,EAAgC;AAC9B,WAAOhB,SAAS,gBAASW,EAAT,kBAAmBC,IAAnB,EAAhB;AACD;;AAED,MAAMK,GAAG,GAAG,IAAIb,QAAJ,CAAaO,EAAb,CAAZ;;AAEA,MAAIM,GAAG,CAACD,OAAJ,EAAJ,EAAmB;AACjB,WAAOC,GAAG,CAACC,GAAJ,KACHlB,SAAS,gBAASiB,GAAG,CAACE,GAAJ,GAAUC,WAAV,EAAT,kBAAwCR,IAAxC,EADN,GAEHZ,SAAS,gBAASW,EAAT,kBAAmBC,IAAnB,EAFb;AAGD;;AAED,QAAMV,OAAO,CAAC,IAAIW,KAAJ,qDAAuDF,EAAvD,cAA6DC,IAA7D,EAAD,EAAuEP,MAAM,CAACG,cAA9E,CAAb;AACD,CAxBD;;AA0BAC,MAAM,CAACC,OAAP,CAAeW,MAAf,GAAwBhB,MAAxB","sourcesContent":["'use strict'\n\nconst multiaddr = require('multiaddr')\nconst errCode = require('err-code')\nconst { Address4, Address6 } = require('ip-address')\n\nconst errors = {\n  ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',\n  ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',\n  ERR_INVALID_IP: 'ERR_INVALID_IP'\n}\n\nmodule.exports = (ip, port) => {\n  if (typeof ip !== 'string') {\n    throw errCode(new Error(`invalid ip provided: ${ip}`), errors.ERR_INVALID_IP_PARAMETER)\n  }\n\n  port = parseInt(port)\n\n  if (isNaN(port)) {\n    throw errCode(new Error(`invalid port provided: ${port}`), errors.ERR_INVALID_PORT_PARAMETER)\n  }\n\n  if (new Address4(ip).isValid()) {\n    return multiaddr(`/ip4/${ip}/tcp/${port}`)\n  }\n\n  const ip6 = new Address6(ip)\n\n  if (ip6.isValid()) {\n    return ip6.is4()\n      ? multiaddr(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`)\n      : multiaddr(`/ip6/${ip}/tcp/${port}`)\n  }\n\n  throw errCode(new Error(`invalid ip:port for creating a multiaddr: ${ip}:${port}`), errors.ERR_INVALID_IP)\n}\n\nmodule.exports.Errors = errors\n"]},"metadata":{},"sourceType":"script"}