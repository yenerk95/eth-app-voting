{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:peer-store:proto-book');\nlog.error = debug('libp2p:peer-store:proto-book:error');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst PeerId = require('peer-id');\n\nconst Book = require('./book');\n\nconst {\n  codes: {\n    ERR_INVALID_PARAMETERS\n  }\n} = require('../errors');\n/**\n * The MetadataBook is responsible for keeping the known supported\n * protocols of a peer.\n * @fires MetadataBook#change:metadata\n */\n\n\nclass MetadataBook extends Book {\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  constructor(peerStore) {\n    /**\n     * PeerStore Event emitter, used by the MetadataBook to emit:\n     * \"change:metadata\" - emitted when the known metadata of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:metadata',\n      eventProperty: 'metadata'\n    });\n    /**\n     * Map known peers to their known protocols.\n     * @type {Map<string, Map<string, Buffer>>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set metadata key and value of a provided peer.\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key metadata key\n   * @param {Buffer} value metadata value\n   * @returns {ProtoBook}\n   */\n\n\n  set(peerId, key, value) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (typeof key !== 'string' || !Buffer.isBuffer(value)) {\n      log.error('valid key and value must be provided to store data');\n      throw errcode(new Error('valid key and value must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    this._setValue(peerId, key, value);\n\n    return this;\n  }\n  /**\n   * Set data into the datastructure\n   * @override\n   */\n\n\n  _setValue(peerId, key, value, {\n    emit = true\n  } = {}) {\n    const id = peerId.toB58String();\n    const rec = this.data.get(id) || new Map();\n    const recMap = rec.get(key); // Already exists and is equal\n\n    if (recMap && value.equals(recMap)) {\n      log(`the metadata provided to store is equal to the already stored for ${id} on ${key}`);\n      return;\n    }\n\n    rec.set(key, value);\n    this.data.set(id, rec);\n    emit && this._emit(peerId, key);\n  }\n  /**\n   * Get the known data of a provided peer.\n   * @param {PeerId} peerId\n   * @returns {Map<string, Buffer>}\n   */\n\n\n  get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    return this.data.get(peerId.toB58String());\n  }\n  /**\n   * Get specific metadata value, if it exists\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {Buffer}\n   */\n\n\n  getValue(peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String());\n    return rec && rec.get(key);\n  }\n  /**\n   * Deletes the provided peer from the book.\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n\n\n  delete(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false;\n    }\n\n    this._emit(peerId);\n\n    return true;\n  }\n  /**\n   * Deletes the provided peer metadata key from the book.\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {boolean}\n   */\n\n\n  deleteValue(peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String());\n\n    if (!rec || !rec.delete(key)) {\n      return false;\n    }\n\n    this._emit(peerId, key);\n\n    return true;\n  }\n\n}\n\nmodule.exports = MetadataBook;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/peer-store/metadata-book.js"],"names":["errcode","require","debug","log","error","Buffer","PeerId","Book","codes","ERR_INVALID_PARAMETERS","MetadataBook","constructor","peerStore","eventName","eventProperty","data","Map","set","peerId","key","value","isPeerId","Error","isBuffer","_setValue","emit","id","toB58String","rec","get","recMap","equals","_emit","getValue","delete","deleteValue","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('libp2p:peer-store:proto-book')\nlog.error = debug('libp2p:peer-store:proto-book:error')\n\nconst { Buffer } = require('buffer')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * The MetadataBook is responsible for keeping the known supported\n * protocols of a peer.\n * @fires MetadataBook#change:metadata\n */\nclass MetadataBook extends Book {\n  /**\n  * @constructor\n  * @param {PeerStore} peerStore\n  */\n  constructor (peerStore) {\n    /**\n     * PeerStore Event emitter, used by the MetadataBook to emit:\n     * \"change:metadata\" - emitted when the known metadata of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:metadata',\n      eventProperty: 'metadata'\n    })\n\n    /**\n     * Map known peers to their known protocols.\n     * @type {Map<string, Map<string, Buffer>>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set metadata key and value of a provided peer.\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key metadata key\n   * @param {Buffer} value metadata value\n   * @returns {ProtoBook}\n   */\n  set (peerId, key, value) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (typeof key !== 'string' || !Buffer.isBuffer(value)) {\n      log.error('valid key and value must be provided to store data')\n      throw errcode(new Error('valid key and value must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    this._setValue(peerId, key, value)\n\n    return this\n  }\n\n  /**\n   * Set data into the datastructure\n   * @override\n   */\n  _setValue (peerId, key, value, { emit = true } = {}) {\n    const id = peerId.toB58String()\n    const rec = this.data.get(id) || new Map()\n    const recMap = rec.get(key)\n\n    // Already exists and is equal\n    if (recMap && value.equals(recMap)) {\n      log(`the metadata provided to store is equal to the already stored for ${id} on ${key}`)\n      return\n    }\n\n    rec.set(key, value)\n    this.data.set(id, rec)\n\n    emit && this._emit(peerId, key)\n  }\n\n  /**\n   * Get the known data of a provided peer.\n   * @param {PeerId} peerId\n   * @returns {Map<string, Buffer>}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    return this.data.get(peerId.toB58String())\n  }\n\n  /**\n   * Get specific metadata value, if it exists\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {Buffer}\n   */\n  getValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n    return rec && rec.get(key)\n  }\n\n  /**\n   * Deletes the provided peer from the book.\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n  delete (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false\n    }\n\n    this._emit(peerId)\n\n    return true\n  }\n\n  /**\n   * Deletes the provided peer metadata key from the book.\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {boolean}\n   */\n  deleteValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    if (!rec || !rec.delete(key)) {\n      return false\n    }\n\n    this._emit(peerId, key)\n\n    return true\n  }\n}\n\nmodule.exports = MetadataBook\n"]},"metadata":{},"sourceType":"script"}