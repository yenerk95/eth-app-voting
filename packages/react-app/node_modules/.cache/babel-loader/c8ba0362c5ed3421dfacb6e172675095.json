{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DLL; // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\n\nfunction DLL() {\n  this.head = this.tail = null;\n  this.length = 0;\n}\n\nfunction setInitial(dll, node) {\n  dll.length = 1;\n  dll.head = dll.tail = node;\n}\n\nDLL.prototype.removeLink = function (node) {\n  if (node.prev) node.prev.next = node.next;else this.head = node.next;\n  if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n  node.prev = node.next = null;\n  this.length -= 1;\n  return node;\n};\n\nDLL.prototype.empty = function () {\n  while (this.head) this.shift();\n\n  return this;\n};\n\nDLL.prototype.insertAfter = function (node, newNode) {\n  newNode.prev = node;\n  newNode.next = node.next;\n  if (node.next) node.next.prev = newNode;else this.tail = newNode;\n  node.next = newNode;\n  this.length += 1;\n};\n\nDLL.prototype.insertBefore = function (node, newNode) {\n  newNode.prev = node.prev;\n  newNode.next = node;\n  if (node.prev) node.prev.next = newNode;else this.head = newNode;\n  node.prev = newNode;\n  this.length += 1;\n};\n\nDLL.prototype.unshift = function (node) {\n  if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n};\n\nDLL.prototype.push = function (node) {\n  if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n};\n\nDLL.prototype.shift = function () {\n  return this.head && this.removeLink(this.head);\n};\n\nDLL.prototype.pop = function () {\n  return this.tail && this.removeLink(this.tail);\n};\n\nDLL.prototype.toArray = function () {\n  var arr = Array(this.length);\n  var curr = this.head;\n\n  for (var idx = 0; idx < this.length; idx++) {\n    arr[idx] = curr.data;\n    curr = curr.next;\n  }\n\n  return arr;\n};\n\nDLL.prototype.remove = function (testFn) {\n  var curr = this.head;\n\n  while (!!curr) {\n    var next = curr.next;\n\n    if (testFn(curr)) {\n      this.removeLink(curr);\n    }\n\n    curr = next;\n  }\n\n  return this;\n};\n\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/async/internal/DoublyLinkedList.js"],"names":["Object","defineProperty","exports","value","default","DLL","head","tail","length","setInitial","dll","node","prototype","removeLink","prev","next","empty","shift","insertAfter","newNode","insertBefore","unshift","push","pop","toArray","arr","Array","curr","idx","data","remove","testFn","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = DLL;\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nfunction DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nDLL.prototype.removeLink = function (node) {\n    if (node.prev) node.prev.next = node.next;else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n};\n\nDLL.prototype.empty = function () {\n    while (this.head) this.shift();\n    return this;\n};\n\nDLL.prototype.insertAfter = function (node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.insertBefore = function (node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.unshift = function (node) {\n    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n};\n\nDLL.prototype.push = function (node) {\n    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n};\n\nDLL.prototype.shift = function () {\n    return this.head && this.removeLink(this.head);\n};\n\nDLL.prototype.pop = function () {\n    return this.tail && this.removeLink(this.tail);\n};\n\nDLL.prototype.toArray = function () {\n    var arr = Array(this.length);\n    var curr = this.head;\n    for (var idx = 0; idx < this.length; idx++) {\n        arr[idx] = curr.data;\n        curr = curr.next;\n    }\n    return arr;\n};\n\nDLL.prototype.remove = function (testFn) {\n    var curr = this.head;\n    while (!!curr) {\n        var next = curr.next;\n        if (testFn(curr)) {\n            this.removeLink(curr);\n        }\n        curr = next;\n    }\n    return this;\n};\nmodule.exports = exports[\"default\"];"]},"metadata":{},"sourceType":"script"}