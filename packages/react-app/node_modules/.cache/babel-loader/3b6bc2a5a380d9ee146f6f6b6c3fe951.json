{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar PeerId = require('peer-id');\n\nvar basePacket = {\n  success: true,\n  time: 0,\n  text: ''\n};\n\nvar _require = require('../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var libp2p = _ref.libp2p;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _ping = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, options) {\n      var peer, packetCount, totalTime, i, time, average;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              options.count = options.count || 10;\n\n              if (!PeerId.isPeerId(peerId)) {\n                peerId = PeerId.createFromCID(peerId);\n              }\n\n              peer = libp2p.peerStore.get(peerId);\n\n              if (peer) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 7;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                text: \"Looking up peer \".concat(peerId)\n              });\n\n            case 7:\n              _context.next = 9;\n              return _awaitAsyncGenerator(libp2p.peerRouting.findPeer(peerId));\n\n            case 9:\n              peer = _context.sent;\n\n            case 10:\n              _context.next = 12;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                text: \"PING \".concat(peer.id.toB58String())\n              });\n\n            case 12:\n              packetCount = 0;\n              totalTime = 0;\n              i = 0;\n\n            case 15:\n              if (!(i < options.count)) {\n                _context.next = 33;\n                break;\n              }\n\n              _context.prev = 16;\n              _context.next = 19;\n              return _awaitAsyncGenerator(libp2p.ping(peer.id));\n\n            case 19:\n              time = _context.sent;\n              totalTime += time;\n              packetCount++;\n              _context.next = 24;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                time: time\n              });\n\n            case 24:\n              _context.next = 30;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](16);\n              _context.next = 30;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                success: false,\n                text: _context.t0.toString()\n              });\n\n            case 30:\n              i++;\n              _context.next = 15;\n              break;\n\n            case 33:\n              if (!packetCount) {\n                _context.next = 37;\n                break;\n              }\n\n              average = totalTime / packetCount;\n              _context.next = 37;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                text: \"Average latency: \".concat(average, \"ms\")\n              });\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16, 26]]);\n    }));\n\n    function ping(_x, _x2) {\n      return _ping.apply(this, arguments);\n    }\n\n    return ping;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/ping.js"],"names":["PeerId","require","basePacket","success","time","text","withTimeoutOption","module","exports","libp2p","peerId","options","count","isPeerId","createFromCID","peer","peerStore","get","peerRouting","findPeer","id","toB58String","packetCount","totalTime","i","ping","toString","average"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMC,UAAU,GAAG;AAAEC,EAAAA,OAAO,EAAE,IAAX;AAAiBC,EAAAA,IAAI,EAAE,CAAvB;AAA0BC,EAAAA,IAAI,EAAE;AAAhC,CAAnB;;eAC8BJ,OAAO,CAAC,UAAD,C;IAA7BK,iB,YAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAC/B,SAAOH,iBAAiB;AAAA,2EAAC,iBAAuBI,MAAvB,EAA+BC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,cAAAA,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACC,KAAR,IAAiB,EAAjC;;AAEA,kBAAI,CAACZ,MAAM,CAACa,QAAP,CAAgBH,MAAhB,CAAL,EAA8B;AAC5BA,gBAAAA,MAAM,GAAGV,MAAM,CAACc,aAAP,CAAqBJ,MAArB,CAAT;AACD;;AAEGK,cAAAA,IARmB,GAQZN,MAAM,CAACO,SAAP,CAAiBC,GAAjB,CAAqBP,MAArB,CARY;;AAAA,kBAUlBK,IAVkB;AAAA;AAAA;AAAA;;AAAA;AAWrB,qDAAWb,UAAX;AAAuBG,gBAAAA,IAAI,4BAAqBK,MAArB;AAA3B;;AAXqB;AAAA;AAAA,0CAYRD,MAAM,CAACS,WAAP,CAAmBC,QAAnB,CAA4BT,MAA5B,CAZQ;;AAAA;AAYrBK,cAAAA,IAZqB;;AAAA;AAAA;AAevB,qDAAWb,UAAX;AAAuBG,gBAAAA,IAAI,iBAAUU,IAAI,CAACK,EAAL,CAAQC,WAAR,EAAV;AAA3B;;AAfuB;AAiBnBC,cAAAA,WAjBmB,GAiBL,CAjBK;AAkBnBC,cAAAA,SAlBmB,GAkBP,CAlBO;AAoBdC,cAAAA,CApBc,GAoBV,CApBU;;AAAA;AAAA,oBAoBPA,CAAC,GAAGb,OAAO,CAACC,KApBL;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,0CAsBAH,MAAM,CAACgB,IAAP,CAAYV,IAAI,CAACK,EAAjB,CAtBA;;AAAA;AAsBbhB,cAAAA,IAtBa;AAuBnBmB,cAAAA,SAAS,IAAInB,IAAb;AACAkB,cAAAA,WAAW;AAxBQ;AAyBnB,qDAAWpB,UAAX;AAAuBE,gBAAAA,IAAI,EAAJA;AAAvB;;AAzBmB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA2BnB,qDAAWF,UAAX;AAAuBC,gBAAAA,OAAO,EAAE,KAAhC;AAAuCE,gBAAAA,IAAI,EAAE,YAAIqB,QAAJ;AAA7C;;AA3BmB;AAoBYF,cAAAA,CAAC,EApBb;AAAA;AAAA;;AAAA;AAAA,mBA+BnBF,WA/BmB;AAAA;AAAA;AAAA;;AAgCfK,cAAAA,OAhCe,GAgCLJ,SAAS,GAAGD,WAhCP;AAAA;AAiCrB,qDAAWpB,UAAX;AAAuBG,gBAAAA,IAAI,6BAAsBsB,OAAtB;AAA3B;;AAjCqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAkBF,IAAlB;AAAA;AAAA;;AAAA,WAAkBA,IAAlB;AAAA,MAAxB;AAoCD,CArCD","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst basePacket = { success: true, time: 0, text: '' }\nconst { withTimeoutOption } = require('../utils')\n\nmodule.exports = ({ libp2p }) => {\n  return withTimeoutOption(async function * ping (peerId, options) {\n    options = options || {}\n    options.count = options.count || 10\n\n    if (!PeerId.isPeerId(peerId)) {\n      peerId = PeerId.createFromCID(peerId)\n    }\n\n    let peer = libp2p.peerStore.get(peerId)\n\n    if (!peer) {\n      yield { ...basePacket, text: `Looking up peer ${peerId}` }\n      peer = await libp2p.peerRouting.findPeer(peerId)\n    }\n\n    yield { ...basePacket, text: `PING ${peer.id.toB58String()}` }\n\n    let packetCount = 0\n    let totalTime = 0\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(peer.id)\n        totalTime += time\n        packetCount++\n        yield { ...basePacket, time }\n      } catch (err) {\n        yield { ...basePacket, success: false, text: err.toString() }\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount\n      yield { ...basePacket, text: `Average latency: ${average}ms` }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}