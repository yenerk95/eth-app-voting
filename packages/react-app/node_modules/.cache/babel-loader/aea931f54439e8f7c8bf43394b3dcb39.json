{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar pkgversion = require('../../../package.json').version;\n\nvar multiaddr = require('multiaddr');\n\nvar _require = require('../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var peerId = _ref.peerId,\n      libp2p = _ref.libp2p;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var id, addresses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              id = peerId.toB58String();\n              addresses = [];\n\n              if (libp2p) {\n                // only available while the node is running\n                addresses = libp2p.transportManager.getAddrs();\n              }\n\n              return _context.abrupt(\"return\", {\n                id: id,\n                publicKey: peerId.pubKey.bytes.toString('base64'),\n                addresses: addresses.map(function (ma) {\n                  var str = ma.toString(); // some relay-style transports add our peer id to the ma for us\n                  // so don't double-add\n\n                  if (str.endsWith(\"/p2p/\".concat(id))) {\n                    return str;\n                  }\n\n                  return \"\".concat(str, \"/p2p/\").concat(id);\n                }).sort().map(function (ma) {\n                  return multiaddr(ma);\n                }),\n                agentVersion: \"js-ipfs/\".concat(pkgversion),\n                protocolVersion: '9000'\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function id() {\n      return _id.apply(this, arguments);\n    }\n\n    return id;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/id.js"],"names":["pkgversion","require","version","multiaddr","withTimeoutOption","module","exports","peerId","libp2p","id","toB58String","addresses","transportManager","getAddrs","publicKey","pubKey","bytes","toString","map","ma","str","endsWith","sort","agentVersion","protocolVersion"],"mappings":"AAAA;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,uBAAD,CAAP,CAAiCC,OAApD;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;eAC8BA,OAAO,CAAC,UAAD,C;IAA7BG,iB,YAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAwB;AAAA,MAArBC,MAAqB,QAArBA,MAAqB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AACvC,SAAOJ,iBAAiB;AAAA,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuB;AACxCK,cAAAA,EADiB,GACZF,MAAM,CAACG,WAAP,EADY;AAEnBC,cAAAA,SAFmB,GAEP,EAFO;;AAIvB,kBAAIH,MAAJ,EAAY;AACV;AACAG,gBAAAA,SAAS,GAAGH,MAAM,CAACI,gBAAP,CAAwBC,QAAxB,EAAZ;AACD;;AAPsB,+CAShB;AACLJ,gBAAAA,EAAE,EAAFA,EADK;AAELK,gBAAAA,SAAS,EAAEP,MAAM,CAACQ,MAAP,CAAcC,KAAd,CAAoBC,QAApB,CAA6B,QAA7B,CAFN;AAGLN,gBAAAA,SAAS,EAAEA,SAAS,CACjBO,GADQ,CACJ,UAAAC,EAAE,EAAI;AACT,sBAAMC,GAAG,GAAGD,EAAE,CAACF,QAAH,EAAZ,CADS,CAGT;AACA;;AACA,sBAAIG,GAAG,CAACC,QAAJ,gBAAqBZ,EAArB,EAAJ,EAAgC;AAC9B,2BAAOW,GAAP;AACD;;AAED,mCAAUA,GAAV,kBAAqBX,EAArB;AACD,iBAXQ,EAYRa,IAZQ,GAaRJ,GAbQ,CAaJ,UAAAC,EAAE;AAAA,yBAAIhB,SAAS,CAACgB,EAAD,CAAb;AAAA,iBAbE,CAHN;AAiBLI,gBAAAA,YAAY,oBAAavB,UAAb,CAjBP;AAkBLwB,gBAAAA,eAAe,EAAE;AAlBZ,eATgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBf,EAAhB;AAAA;AAAA;;AAAA,WAAgBA,EAAhB;AAAA,MAAxB;AA8BD,CA/BD","sourcesContent":["'use strict'\n\nconst pkgversion = require('../../../package.json').version\nconst multiaddr = require('multiaddr')\nconst { withTimeoutOption } = require('../utils')\n\nmodule.exports = ({ peerId, libp2p }) => {\n  return withTimeoutOption(async function id () { // eslint-disable-line require-await\n    const id = peerId.toB58String()\n    let addresses = []\n\n    if (libp2p) {\n      // only available while the node is running\n      addresses = libp2p.transportManager.getAddrs()\n    }\n\n    return {\n      id,\n      publicKey: peerId.pubKey.bytes.toString('base64'),\n      addresses: addresses\n        .map(ma => {\n          const str = ma.toString()\n\n          // some relay-style transports add our peer id to the ma for us\n          // so don't double-add\n          if (str.endsWith(`/p2p/${id}`)) {\n            return str\n          }\n\n          return `${str}/p2p/${id}`\n        })\n        .sort()\n        .map(ma => multiaddr(ma)),\n      agentVersion: `js-ipfs/${pkgversion}`,\n      protocolVersion: '9000'\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}