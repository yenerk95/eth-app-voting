{"ast":null,"code":"'use strict';\n\nrequire('node-forge/lib/ed25519');\n\nconst forge = require('node-forge/lib/forge');\n\nexports.publicKeyLength = forge.pki.ed25519.constants.PUBLIC_KEY_BYTE_LENGTH;\nexports.privateKeyLength = forge.pki.ed25519.constants.PRIVATE_KEY_BYTE_LENGTH;\n\nexports.generateKey = async function () {\n  // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair();\n}; // seed should be a 32 byte uint8array\n\n\nexports.generateKeyFromSeed = async function (seed) {\n  // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair({\n    seed\n  });\n};\n\nexports.hashAndSign = async function (key, msg) {\n  // eslint-disable-line require-await\n  return forge.pki.ed25519.sign({\n    message: msg,\n    privateKey: key\n  }); // return Buffer.from(nacl.sign.detached(msg, key))\n};\n\nexports.hashAndVerify = async function (key, sig, msg) {\n  // eslint-disable-line require-await\n  return forge.pki.ed25519.verify({\n    signature: sig,\n    message: msg,\n    publicKey: key\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/keys/ed25519.js"],"names":["require","forge","exports","publicKeyLength","pki","ed25519","constants","PUBLIC_KEY_BYTE_LENGTH","privateKeyLength","PRIVATE_KEY_BYTE_LENGTH","generateKey","generateKeyPair","generateKeyFromSeed","seed","hashAndSign","key","msg","sign","message","privateKey","hashAndVerify","sig","verify","signature","publicKey"],"mappings":"AAAA;;AAEAA,OAAO,CAAC,wBAAD,CAAP;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACAE,OAAO,CAACC,eAAR,GAA0BF,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BC,sBAAtD;AACAL,OAAO,CAACM,gBAAR,GAA2BP,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BG,uBAAvD;;AAEAP,OAAO,CAACQ,WAAR,GAAsB,kBAAkB;AAAE;AACxC,SAAOT,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBM,eAAlB,EAAP;AACD,CAFD,C,CAIA;;;AACAT,OAAO,CAACU,mBAAR,GAA8B,gBAAgBC,IAAhB,EAAsB;AAAE;AACpD,SAAOZ,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBM,eAAlB,CAAkC;AAAEE,IAAAA;AAAF,GAAlC,CAAP;AACD,CAFD;;AAIAX,OAAO,CAACY,WAAR,GAAsB,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AAAE;AAChD,SAAOf,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBY,IAAlB,CAAuB;AAAEC,IAAAA,OAAO,EAAEF,GAAX;AAAgBG,IAAAA,UAAU,EAAEJ;AAA5B,GAAvB,CAAP,CAD8C,CAE9C;AACD,CAHD;;AAKAb,OAAO,CAACkB,aAAR,GAAwB,gBAAgBL,GAAhB,EAAqBM,GAArB,EAA0BL,GAA1B,EAA+B;AAAE;AACvD,SAAOf,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBiB,MAAlB,CAAyB;AAAEC,IAAAA,SAAS,EAAEF,GAAb;AAAkBH,IAAAA,OAAO,EAAEF,GAA3B;AAAgCQ,IAAAA,SAAS,EAAET;AAA3C,GAAzB,CAAP;AACD,CAFD","sourcesContent":["'use strict'\n\nrequire('node-forge/lib/ed25519')\nconst forge = require('node-forge/lib/forge')\nexports.publicKeyLength = forge.pki.ed25519.constants.PUBLIC_KEY_BYTE_LENGTH\nexports.privateKeyLength = forge.pki.ed25519.constants.PRIVATE_KEY_BYTE_LENGTH\n\nexports.generateKey = async function () { // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair()\n}\n\n// seed should be a 32 byte uint8array\nexports.generateKeyFromSeed = async function (seed) { // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair({ seed })\n}\n\nexports.hashAndSign = async function (key, msg) { // eslint-disable-line require-await\n  return forge.pki.ed25519.sign({ message: msg, privateKey: key })\n  // return Buffer.from(nacl.sign.detached(msg, key))\n}\n\nexports.hashAndVerify = async function (key, sig, msg) { // eslint-disable-line require-await\n  return forge.pki.ed25519.verify({ signature: sig, message: msg, publicKey: key })\n}\n"]},"metadata":{},"sourceType":"script"}