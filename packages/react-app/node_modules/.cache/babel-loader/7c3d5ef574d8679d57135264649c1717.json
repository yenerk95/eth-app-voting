{"ast":null,"code":"'use strict';\n\nconst pkgversion = require('../../../package.json').version;\n\nconst multiaddr = require('multiaddr');\n\nconst {\n  withTimeoutOption\n} = require('../utils');\n\nmodule.exports = ({\n  peerId,\n  libp2p\n}) => {\n  return withTimeoutOption(async function id() {\n    // eslint-disable-line require-await\n    const id = peerId.toB58String();\n    let addresses = [];\n\n    if (libp2p) {\n      // only available while the node is running\n      addresses = libp2p.transportManager.getAddrs();\n    }\n\n    return {\n      id,\n      publicKey: peerId.pubKey.bytes.toString('base64'),\n      addresses: addresses.map(ma => {\n        const str = ma.toString(); // some relay-style transports add our peer id to the ma for us\n        // so don't double-add\n\n        if (str.endsWith(`/p2p/${id}`)) {\n          return str;\n        }\n\n        return `${str}/p2p/${id}`;\n      }).sort().map(ma => multiaddr(ma)),\n      agentVersion: `js-ipfs/${pkgversion}`,\n      protocolVersion: '9000'\n    };\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/id.js"],"names":["pkgversion","require","version","multiaddr","withTimeoutOption","module","exports","peerId","libp2p","id","toB58String","addresses","transportManager","getAddrs","publicKey","pubKey","bytes","toString","map","ma","str","endsWith","sort","agentVersion","protocolVersion"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,uBAAD,CAAP,CAAiCC,OAApD;;AACA,MAAMC,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAwBH,OAAO,CAAC,UAAD,CAArC;;AAEAI,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAwB;AACvC,SAAOJ,iBAAiB,CAAC,eAAeK,EAAf,GAAqB;AAAE;AAC9C,UAAMA,EAAE,GAAGF,MAAM,CAACG,WAAP,EAAX;AACA,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QAAIH,MAAJ,EAAY;AACV;AACAG,MAAAA,SAAS,GAAGH,MAAM,CAACI,gBAAP,CAAwBC,QAAxB,EAAZ;AACD;;AAED,WAAO;AACLJ,MAAAA,EADK;AAELK,MAAAA,SAAS,EAAEP,MAAM,CAACQ,MAAP,CAAcC,KAAd,CAAoBC,QAApB,CAA6B,QAA7B,CAFN;AAGLN,MAAAA,SAAS,EAAEA,SAAS,CACjBO,GADQ,CACJC,EAAE,IAAI;AACT,cAAMC,GAAG,GAAGD,EAAE,CAACF,QAAH,EAAZ,CADS,CAGT;AACA;;AACA,YAAIG,GAAG,CAACC,QAAJ,CAAc,QAAOZ,EAAG,EAAxB,CAAJ,EAAgC;AAC9B,iBAAOW,GAAP;AACD;;AAED,eAAQ,GAAEA,GAAI,QAAOX,EAAG,EAAxB;AACD,OAXQ,EAYRa,IAZQ,GAaRJ,GAbQ,CAaJC,EAAE,IAAIhB,SAAS,CAACgB,EAAD,CAbX,CAHN;AAiBLI,MAAAA,YAAY,EAAG,WAAUvB,UAAW,EAjB/B;AAkBLwB,MAAAA,eAAe,EAAE;AAlBZ,KAAP;AAoBD,GA7BuB,CAAxB;AA8BD,CA/BD","sourcesContent":["'use strict'\n\nconst pkgversion = require('../../../package.json').version\nconst multiaddr = require('multiaddr')\nconst { withTimeoutOption } = require('../utils')\n\nmodule.exports = ({ peerId, libp2p }) => {\n  return withTimeoutOption(async function id () { // eslint-disable-line require-await\n    const id = peerId.toB58String()\n    let addresses = []\n\n    if (libp2p) {\n      // only available while the node is running\n      addresses = libp2p.transportManager.getAddrs()\n    }\n\n    return {\n      id,\n      publicKey: peerId.pubKey.bytes.toString('base64'),\n      addresses: addresses\n        .map(ma => {\n          const str = ma.toString()\n\n          // some relay-style transports add our peer id to the ma for us\n          // so don't double-add\n          if (str.endsWith(`/p2p/${id}`)) {\n            return str\n          }\n\n          return `${str}/p2p/${id}`\n        })\n        .sort()\n        .map(ma => multiaddr(ma)),\n      agentVersion: `js-ipfs/${pkgversion}`,\n      protocolVersion: '9000'\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}