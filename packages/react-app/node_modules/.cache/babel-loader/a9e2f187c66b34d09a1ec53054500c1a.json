{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar Reader = require('it-reader');\n\nvar log = require('debug')('it-multistream-select:ls');\n\nvar multistream = require('./multistream');\n\nvar handshake = require('it-handshake');\n\nvar lp = require('it-length-prefixed');\n\nvar pipe = require('it-pipe');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stream) {\n    var _handshake, reader, writer, rest, shakeStream, res, protocolsReader, protocols;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _handshake = handshake(stream), reader = _handshake.reader, writer = _handshake.writer, rest = _handshake.rest, shakeStream = _handshake.stream;\n            log('write \"ls\"');\n            multistream.write(writer, 'ls');\n            rest(); // Next message from remote will be (e.g. for 2 protocols):\n            // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n\n            _context2.next = 6;\n            return multistream.read(reader);\n\n          case 6:\n            res = _context2.sent;\n            // After reading response we have:\n            // <varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n            protocolsReader = Reader([res]);\n            protocols = []; // Decode each of the protocols from the reader\n\n            _context2.next = 11;\n            return pipe(protocolsReader, lp.decode(), /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, protocol;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _iteratorNormalCompletion = true;\n                        _didIteratorError = false;\n                        _context.prev = 2;\n                        _iterator = _asyncIterator(source);\n\n                      case 4:\n                        _context.next = 6;\n                        return _iterator.next();\n\n                      case 6:\n                        _step = _context.sent;\n                        _iteratorNormalCompletion = _step.done;\n                        _context.next = 10;\n                        return _step.value;\n\n                      case 10:\n                        _value = _context.sent;\n\n                        if (_iteratorNormalCompletion) {\n                          _context.next = 17;\n                          break;\n                        }\n\n                        protocol = _value;\n                        // Remove the newline\n                        protocols.push(protocol.shallowSlice(0, -1).toString());\n\n                      case 14:\n                        _iteratorNormalCompletion = true;\n                        _context.next = 4;\n                        break;\n\n                      case 17:\n                        _context.next = 23;\n                        break;\n\n                      case 19:\n                        _context.prev = 19;\n                        _context.t0 = _context[\"catch\"](2);\n                        _didIteratorError = true;\n                        _iteratorError = _context.t0;\n\n                      case 23:\n                        _context.prev = 23;\n                        _context.prev = 24;\n\n                        if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                          _context.next = 28;\n                          break;\n                        }\n\n                        _context.next = 28;\n                        return _iterator.return();\n\n                      case 28:\n                        _context.prev = 28;\n\n                        if (!_didIteratorError) {\n                          _context.next = 31;\n                          break;\n                        }\n\n                        throw _iteratorError;\n\n                      case 31:\n                        return _context.finish(28);\n\n                      case 32:\n                        return _context.finish(23);\n\n                      case 33:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[2, 19, 23, 33], [24,, 28, 32]]);\n              }));\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 11:\n            return _context2.abrupt(\"return\", {\n              stream: shakeStream,\n              protocols: protocols\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/multistream-select/src/ls.js"],"names":["Reader","require","log","multistream","handshake","lp","pipe","module","exports","stream","reader","writer","rest","shakeStream","write","read","res","protocolsReader","protocols","decode","source","protocol","push","shallowSlice","toString"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAZ;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMI,EAAE,GAAGJ,OAAO,CAAC,oBAAD,CAAlB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,SAAD,CAApB;;AAEAM,MAAM,CAACC,OAAP;AAAA,sEAAiB,kBAAMC,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACuCL,SAAS,CAACK,MAAD,CADhD,EACPC,MADO,cACPA,MADO,EACCC,MADD,cACCA,MADD,EACSC,IADT,cACSA,IADT,EACuBC,WADvB,cACeJ,MADf;AAGfP,YAAAA,GAAG,CAAC,YAAD,CAAH;AACAC,YAAAA,WAAW,CAACW,KAAZ,CAAkBH,MAAlB,EAA0B,IAA1B;AACAC,YAAAA,IAAI,GALW,CAOf;AACA;;AARe;AAAA,mBASGT,WAAW,CAACY,IAAZ,CAAiBL,MAAjB,CATH;;AAAA;AASTM,YAAAA,GATS;AAWf;AACA;AACMC,YAAAA,eAbS,GAaSjB,MAAM,CAAC,CAACgB,GAAD,CAAD,CAbf;AAcTE,YAAAA,SAdS,GAcG,EAdH,EAgBf;;AAhBe;AAAA,mBAiBTZ,IAAI,CACRW,eADQ,EAERZ,EAAE,CAACc,MAAH,EAFQ;AAAA,mFAGR,iBAAMC,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAC+BA,MAD/B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACmBC,wBAAAA,QADnB;AAEI;AACAH,wBAAAA,SAAS,CAACI,IAAV,CAAeD,QAAQ,CAACE,YAAT,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,EAA6BC,QAA7B,EAAf;;AAHJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHQ;;AAAA;AAAA;AAAA;AAAA,gBAjBK;;AAAA;AAAA,8CA4BR;AAAEf,cAAAA,MAAM,EAAEI,WAAV;AAAuBK,cAAAA,SAAS,EAATA;AAAvB,aA5BQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst Reader = require('it-reader')\nconst log = require('debug')('it-multistream-select:ls')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\nconst lp = require('it-length-prefixed')\nconst pipe = require('it-pipe')\n\nmodule.exports = async stream => {\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  log('write \"ls\"')\n  multistream.write(writer, 'ls')\n  rest()\n\n  // Next message from remote will be (e.g. for 2 protocols):\n  // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const res = await multistream.read(reader)\n\n  // After reading response we have:\n  // <varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const protocolsReader = Reader([res])\n  const protocols = []\n\n  // Decode each of the protocols from the reader\n  await pipe(\n    protocolsReader,\n    lp.decode(),\n    async source => {\n      for await (const protocol of source) {\n        // Remove the newline\n        protocols.push(protocol.shallowSlice(0, -1).toString())\n      }\n    }\n  )\n\n  return { stream: shakeStream, protocols }\n}\n"]},"metadata":{},"sourceType":"script"}