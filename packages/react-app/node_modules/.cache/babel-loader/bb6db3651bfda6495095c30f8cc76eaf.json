{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar debounce = require('just-debounce-it');\n\nvar Message = require('../types/message');\n\nvar logger = require('../utils').logger;\n\nvar _require = require('../constants'),\n    wantlistSendDebounceMs = _require.wantlistSendDebounceMs;\n\nmodule.exports = /*#__PURE__*/function () {\n  function MsgQueue(selfPeerId, otherPeerId, network) {\n    _classCallCheck(this, MsgQueue);\n\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    this._entries = [];\n    this._log = logger(selfPeerId, 'msgqueue', otherPeerId.toB58String().slice(0, 8));\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);\n  }\n\n  _createClass(MsgQueue, [{\n    key: \"addMessage\",\n    value: function addMessage(msg) {\n      if (msg.empty) {\n        return;\n      }\n\n      this.send(msg);\n    }\n  }, {\n    key: \"addEntries\",\n    value: function addEntries(entries) {\n      this._entries = this._entries.concat(entries);\n      this.sendEntries();\n    }\n  }, {\n    key: \"_sendEntries\",\n    value: function _sendEntries() {\n      if (!this._entries.length) {\n        return;\n      }\n\n      var msg = new Message(false);\n\n      this._entries.forEach(function (entry) {\n        if (entry.cancel) {\n          msg.cancel(entry.cid);\n        } else {\n          msg.addEntry(entry.cid, entry.priority);\n        }\n      });\n\n      this._entries = [];\n      this.addMessage(msg);\n    }\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(msg) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.network.connectTo(this.peerId);\n\n              case 3:\n                _context.next = 9;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n\n                this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), _context.t0.message);\n\n                return _context.abrupt(\"return\");\n\n              case 9:\n                this._log('sending message to peer %s', this.peerId.toB58String()); // Note: Don't wait for sendMessage() to complete\n\n\n                this.network.sendMessage(this.peerId, msg).catch(function (err) {\n                  _this._log.error('send error: %s', err.message);\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }]);\n\n  return MsgQueue;\n}();","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-bitswap/src/want-manager/msg-queue.js"],"names":["debounce","require","Message","logger","wantlistSendDebounceMs","module","exports","selfPeerId","otherPeerId","network","peerId","refcnt","_entries","_log","toB58String","slice","sendEntries","_sendEntries","bind","msg","empty","send","entries","concat","length","forEach","entry","cancel","cid","addEntry","priority","addMessage","connectTo","error","message","sendMessage","catch","err"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AAEA,IAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAvB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,MAAnC;;eACmCF,OAAO,CAAC,cAAD,C;IAAlCG,sB,YAAAA,sB;;AAERC,MAAM,CAACC,OAAP;AACE,oBAAaC,UAAb,EAAyBC,WAAzB,EAAsCC,OAAtC,EAA+C;AAAA;;AAC7C,SAAKC,MAAL,GAAcF,WAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,MAAL,GAAc,CAAd;AAEA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,IAAL,GAAYV,MAAM,CAACI,UAAD,EAAa,UAAb,EAAyBC,WAAW,CAACM,WAAZ,GAA0BC,KAA1B,CAAgC,CAAhC,EAAmC,CAAnC,CAAzB,CAAlB;AACA,SAAKC,WAAL,GAAmBhB,QAAQ,CAAC,KAAKiB,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,EAA+Bd,sBAA/B,CAA3B;AACD;;AATH;AAAA;AAAA,+BAWce,GAXd,EAWmB;AACf,UAAIA,GAAG,CAACC,KAAR,EAAe;AACb;AACD;;AAED,WAAKC,IAAL,CAAUF,GAAV;AACD;AAjBH;AAAA;AAAA,+BAmBcG,OAnBd,EAmBuB;AACnB,WAAKV,QAAL,GAAgB,KAAKA,QAAL,CAAcW,MAAd,CAAqBD,OAArB,CAAhB;AACA,WAAKN,WAAL;AACD;AAtBH;AAAA;AAAA,mCAwBkB;AACd,UAAI,CAAC,KAAKJ,QAAL,CAAcY,MAAnB,EAA2B;AACzB;AACD;;AAED,UAAML,GAAG,GAAG,IAAIjB,OAAJ,CAAY,KAAZ,CAAZ;;AACA,WAAKU,QAAL,CAAca,OAAd,CAAsB,UAACC,KAAD,EAAW;AAC/B,YAAIA,KAAK,CAACC,MAAV,EAAkB;AAChBR,UAAAA,GAAG,CAACQ,MAAJ,CAAWD,KAAK,CAACE,GAAjB;AACD,SAFD,MAEO;AACLT,UAAAA,GAAG,CAACU,QAAJ,CAAaH,KAAK,CAACE,GAAnB,EAAwBF,KAAK,CAACI,QAA9B;AACD;AACF,OAND;;AAOA,WAAKlB,QAAL,GAAgB,EAAhB;AACA,WAAKmB,UAAL,CAAgBZ,GAAhB;AACD;AAvCH;AAAA;AAAA;AAAA,4FAyCcA,GAzCd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA2CY,KAAKV,OAAL,CAAauB,SAAb,CAAuB,KAAKtB,MAA5B,CA3CZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA6CM,qBAAKG,IAAL,CAAUoB,KAAV,CAAgB,6BAAhB,EAA+C,KAAKvB,MAAL,CAAYI,WAAZ,EAA/C,EAA0E,YAAIoB,OAA9E;;AA7CN;;AAAA;AAiDI,qBAAKrB,IAAL,CAAU,4BAAV,EAAwC,KAAKH,MAAL,CAAYI,WAAZ,EAAxC,EAjDJ,CAmDI;;;AACA,qBAAKL,OAAL,CAAa0B,WAAb,CAAyB,KAAKzB,MAA9B,EAAsCS,GAAtC,EAA2CiB,KAA3C,CAAiD,UAACC,GAAD,EAAS;AACxD,kBAAA,KAAI,CAACxB,IAAL,CAAUoB,KAAV,CAAgB,gBAAhB,EAAkCI,GAAG,CAACH,OAAtC;AACD,iBAFD;;AApDJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst debounce = require('just-debounce-it')\n\nconst Message = require('../types/message')\nconst logger = require('../utils').logger\nconst { wantlistSendDebounceMs } = require('../constants')\n\nmodule.exports = class MsgQueue {\n  constructor (selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId\n    this.network = network\n    this.refcnt = 1\n\n    this._entries = []\n    this._log = logger(selfPeerId, 'msgqueue', otherPeerId.toB58String().slice(0, 8))\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs)\n  }\n\n  addMessage (msg) {\n    if (msg.empty) {\n      return\n    }\n\n    this.send(msg)\n  }\n\n  addEntries (entries) {\n    this._entries = this._entries.concat(entries)\n    this.sendEntries()\n  }\n\n  _sendEntries () {\n    if (!this._entries.length) {\n      return\n    }\n\n    const msg = new Message(false)\n    this._entries.forEach((entry) => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid)\n      } else {\n        msg.addEntry(entry.cid, entry.priority)\n      }\n    })\n    this._entries = []\n    this.addMessage(msg)\n  }\n\n  async send (msg) {\n    try {\n      await this.network.connectTo(this.peerId)\n    } catch (err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message)\n      return\n    }\n\n    this._log('sending message to peer %s', this.peerId.toB58String())\n\n    // Note: Don't wait for sendMessage() to complete\n    this.network.sendMessage(this.peerId, msg).catch((err) => {\n      this._log.error('send error: %s', err.message)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}