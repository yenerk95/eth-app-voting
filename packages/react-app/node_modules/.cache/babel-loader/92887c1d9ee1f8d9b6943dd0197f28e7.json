{"ast":null,"code":"const ready = require('./ready');\n\nmodule.exports = (socket, options) => {\n  options = options || {};\n  options.closeOnEnd = options.closeOnEnd !== false;\n  return async source => {\n    for await (const data of source) {\n      try {\n        await ready(socket);\n      } catch (err) {\n        if (err.message === 'socket closed') break;\n        throw err;\n      }\n\n      socket.send(data);\n    }\n\n    if (options.closeOnEnd && socket.readyState <= 1) {\n      return new Promise((resolve, reject) => {\n        socket.addEventListener('close', event => {\n          if (event.wasClean || event.code === 1006) {\n            resolve();\n          } else {\n            const err = Object.assign(new Error('ws error'), {\n              event\n            });\n            reject(err);\n          }\n        });\n        setTimeout(() => socket.close());\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-ws/sink.js"],"names":["ready","require","module","exports","socket","options","closeOnEnd","source","data","err","message","send","readyState","Promise","resolve","reject","addEventListener","event","wasClean","code","Object","assign","Error","setTimeout","close"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,EAASC,OAAT,KAAqB;AACpCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACC,UAAR,GAAqBD,OAAO,CAACC,UAAR,KAAuB,KAA5C;AAEA,SAAO,MAAMC,MAAN,IAAgB;AACrB,eAAW,MAAMC,IAAjB,IAAyBD,MAAzB,EAAiC;AAC/B,UAAI;AACF,cAAMP,KAAK,CAACI,MAAD,CAAX;AACD,OAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,OAAJ,KAAgB,eAApB,EAAqC;AACrC,cAAMD,GAAN;AACD;;AAEDL,MAAAA,MAAM,CAACO,IAAP,CAAYH,IAAZ;AACD;;AAED,QAAIH,OAAO,CAACC,UAAR,IAAsBF,MAAM,CAACQ,UAAP,IAAqB,CAA/C,EAAkD;AAChD,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCX,QAAAA,MAAM,CAACY,gBAAP,CAAwB,OAAxB,EAAiCC,KAAK,IAAI;AACxC,cAAIA,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACE,IAAN,KAAe,IAArC,EAA2C;AACzCL,YAAAA,OAAO;AACR,WAFD,MAEO;AACL,kBAAML,GAAG,GAAGW,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAU,UAAV,CAAd,EAAqC;AAAEL,cAAAA;AAAF,aAArC,CAAZ;AACAF,YAAAA,MAAM,CAACN,GAAD,CAAN;AACD;AACF,SAPD;AASAc,QAAAA,UAAU,CAAC,MAAMnB,MAAM,CAACoB,KAAP,EAAP,CAAV;AACD,OAXM,CAAP;AAYD;AACF,GA1BD;AA2BD,CA/BD","sourcesContent":["const ready = require('./ready')\n\nmodule.exports = (socket, options) => {\n  options = options || {}\n  options.closeOnEnd = options.closeOnEnd !== false\n\n  return async source => {\n    for await (const data of source) {\n      try {\n        await ready(socket)\n      } catch (err) {\n        if (err.message === 'socket closed') break\n        throw err\n      }\n\n      socket.send(data)\n    }\n\n    if (options.closeOnEnd && socket.readyState <= 1) {\n      return new Promise((resolve, reject) => {\n        socket.addEventListener('close', event => {\n          if (event.wasClean || event.code === 1006) {\n            resolve()\n          } else {\n            const err = Object.assign(new Error('ws error'), { event })\n            reject(err)\n          }\n        })\n\n        setTimeout(() => socket.close())\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}