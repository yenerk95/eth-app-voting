{"ast":null,"code":"/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function (global, factory) {\n  /* global define, require, module */\n\n  /* AMD */\n  if (typeof define === 'function' && define.amd) define([\"protobufjs/minimal\"], factory);\n  /* CommonJS */\n  else if (typeof require === 'function' && typeof module === 'object' && module && module.exports) module.exports = factory(require(\"protobufjs/minimal\"));\n})(this, function ($protobuf) {\n  \"use strict\"; // Common aliases\n\n  var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util; // Exported root namespace\n\n  var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n  $root.pb = function () {\n    /**\n     * Namespace pb.\n     * @exports pb\n     * @namespace\n     */\n    var pb = {};\n\n    pb.NoiseHandshakePayload = function () {\n      /**\n       * Properties of a NoiseHandshakePayload.\n       * @memberof pb\n       * @interface INoiseHandshakePayload\n       * @property {Uint8Array|null} [identityKey] NoiseHandshakePayload identityKey\n       * @property {Uint8Array|null} [identitySig] NoiseHandshakePayload identitySig\n       * @property {Uint8Array|null} [data] NoiseHandshakePayload data\n       */\n\n      /**\n       * Constructs a new NoiseHandshakePayload.\n       * @memberof pb\n       * @classdesc Represents a NoiseHandshakePayload.\n       * @implements INoiseHandshakePayload\n       * @constructor\n       * @param {pb.INoiseHandshakePayload=} [properties] Properties to set\n       */\n      function NoiseHandshakePayload(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n      }\n      /**\n       * NoiseHandshakePayload identityKey.\n       * @member {Uint8Array} identityKey\n       * @memberof pb.NoiseHandshakePayload\n       * @instance\n       */\n\n\n      NoiseHandshakePayload.prototype.identityKey = $util.newBuffer([]);\n      /**\n       * NoiseHandshakePayload identitySig.\n       * @member {Uint8Array} identitySig\n       * @memberof pb.NoiseHandshakePayload\n       * @instance\n       */\n\n      NoiseHandshakePayload.prototype.identitySig = $util.newBuffer([]);\n      /**\n       * NoiseHandshakePayload data.\n       * @member {Uint8Array} data\n       * @memberof pb.NoiseHandshakePayload\n       * @instance\n       */\n\n      NoiseHandshakePayload.prototype.data = $util.newBuffer([]);\n      /**\n       * Creates a new NoiseHandshakePayload instance using the specified properties.\n       * @function create\n       * @memberof pb.NoiseHandshakePayload\n       * @static\n       * @param {pb.INoiseHandshakePayload=} [properties] Properties to set\n       * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload instance\n       */\n\n      NoiseHandshakePayload.create = function create(properties) {\n        return new NoiseHandshakePayload(properties);\n      };\n      /**\n       * Encodes the specified NoiseHandshakePayload message. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.\n       * @function encode\n       * @memberof pb.NoiseHandshakePayload\n       * @static\n       * @param {pb.INoiseHandshakePayload} message NoiseHandshakePayload message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      NoiseHandshakePayload.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.identityKey != null && message.hasOwnProperty(\"identityKey\")) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).bytes(message.identityKey);\n        if (message.identitySig != null && message.hasOwnProperty(\"identitySig\")) writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).bytes(message.identitySig);\n        if (message.data != null && message.hasOwnProperty(\"data\")) writer.uint32(\n        /* id 3, wireType 2 =*/\n        26).bytes(message.data);\n        return writer;\n      };\n      /**\n       * Encodes the specified NoiseHandshakePayload message, length delimited. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof pb.NoiseHandshakePayload\n       * @static\n       * @param {pb.INoiseHandshakePayload} message NoiseHandshakePayload message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      NoiseHandshakePayload.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a NoiseHandshakePayload message from the specified reader or buffer.\n       * @function decode\n       * @memberof pb.NoiseHandshakePayload\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      NoiseHandshakePayload.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.pb.NoiseHandshakePayload();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.identityKey = reader.bytes();\n              break;\n\n            case 2:\n              message.identitySig = reader.bytes();\n              break;\n\n            case 3:\n              message.data = reader.bytes();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a NoiseHandshakePayload message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof pb.NoiseHandshakePayload\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      NoiseHandshakePayload.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a NoiseHandshakePayload message.\n       * @function verify\n       * @memberof pb.NoiseHandshakePayload\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      NoiseHandshakePayload.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.identityKey != null && message.hasOwnProperty(\"identityKey\")) if (!(message.identityKey && typeof message.identityKey.length === \"number\" || $util.isString(message.identityKey))) return \"identityKey: buffer expected\";\n        if (message.identitySig != null && message.hasOwnProperty(\"identitySig\")) if (!(message.identitySig && typeof message.identitySig.length === \"number\" || $util.isString(message.identitySig))) return \"identitySig: buffer expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data))) return \"data: buffer expected\";\n        return null;\n      };\n      /**\n       * Creates a NoiseHandshakePayload message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof pb.NoiseHandshakePayload\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload\n       */\n\n\n      NoiseHandshakePayload.fromObject = function fromObject(object) {\n        if (object instanceof $root.pb.NoiseHandshakePayload) return object;\n        var message = new $root.pb.NoiseHandshakePayload();\n        if (object.identityKey != null) if (typeof object.identityKey === \"string\") $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);else if (object.identityKey.length) message.identityKey = object.identityKey;\n        if (object.identitySig != null) if (typeof object.identitySig === \"string\") $util.base64.decode(object.identitySig, message.identitySig = $util.newBuffer($util.base64.length(object.identitySig)), 0);else if (object.identitySig.length) message.identitySig = object.identitySig;\n        if (object.data != null) if (typeof object.data === \"string\") $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);else if (object.data.length) message.data = object.data;\n        return message;\n      };\n      /**\n       * Creates a plain object from a NoiseHandshakePayload message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof pb.NoiseHandshakePayload\n       * @static\n       * @param {pb.NoiseHandshakePayload} message NoiseHandshakePayload\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      NoiseHandshakePayload.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          if (options.bytes === String) object.identityKey = \"\";else {\n            object.identityKey = [];\n            if (options.bytes !== Array) object.identityKey = $util.newBuffer(object.identityKey);\n          }\n          if (options.bytes === String) object.identitySig = \"\";else {\n            object.identitySig = [];\n            if (options.bytes !== Array) object.identitySig = $util.newBuffer(object.identitySig);\n          }\n          if (options.bytes === String) object.data = \"\";else {\n            object.data = [];\n            if (options.bytes !== Array) object.data = $util.newBuffer(object.data);\n          }\n        }\n\n        if (message.identityKey != null && message.hasOwnProperty(\"identityKey\")) object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;\n        if (message.identitySig != null && message.hasOwnProperty(\"identitySig\")) object.identitySig = options.bytes === String ? $util.base64.encode(message.identitySig, 0, message.identitySig.length) : options.bytes === Array ? Array.prototype.slice.call(message.identitySig) : message.identitySig;\n        if (message.data != null && message.hasOwnProperty(\"data\")) object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n        return object;\n      };\n      /**\n       * Converts this NoiseHandshakePayload to JSON.\n       * @function toJSON\n       * @memberof pb.NoiseHandshakePayload\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      NoiseHandshakePayload.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return NoiseHandshakePayload;\n    }();\n\n    return pb;\n  }();\n\n  return $root;\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-noise/lib/proto/payload.js"],"names":["global","factory","define","amd","require","module","exports","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","pb","NoiseHandshakePayload","properties","keys","Object","i","length","prototype","identityKey","newBuffer","identitySig","data","create","encode","message","writer","hasOwnProperty","uint32","bytes","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isString","fromObject","object","base64","toObject","options","defaults","String","Array","slice","call","toJSON","constructor","toJSONOptions"],"mappings":"AAAA;AACA,CAAC,UAASA,MAAT,EAAiBC,OAAjB,EAA0B;AAAE;;AAEzB;AAAU,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EACND,MAAM,CAAC,CAAC,oBAAD,CAAD,EAAyBD,OAAzB,CAAN;AAEJ;AAHU,OAGU,IAAI,OAAOG,OAAP,KAAmB,UAAnB,IAAiC,OAAOC,MAAP,KAAkB,QAAnD,IAA+DA,MAA/D,IAAyEA,MAAM,CAACC,OAApF,EAChBD,MAAM,CAACC,OAAP,GAAiBL,OAAO,CAACG,OAAO,CAAC,oBAAD,CAAR,CAAxB;AAEP,CARD,EAQG,IARH,EAQS,UAASG,SAAT,EAAoB;AACzB,eADyB,CAGzB;;AACA,MAAIC,OAAO,GAAGD,SAAS,CAACE,MAAxB;AAAA,MAAgCC,OAAO,GAAGH,SAAS,CAACI,MAApD;AAAA,MAA4DC,KAAK,GAAGL,SAAS,CAACM,IAA9E,CAJyB,CAMzB;;AACA,MAAIC,KAAK,GAAGP,SAAS,CAACQ,KAAV,CAAgB,SAAhB,MAA+BR,SAAS,CAACQ,KAAV,CAAgB,SAAhB,IAA6B,EAA5D,CAAZ;;AAEAD,EAAAA,KAAK,CAACE,EAAN,GAAY,YAAW;AAEnB;;;;;AAKA,QAAIA,EAAE,GAAG,EAAT;;AAEAA,IAAAA,EAAE,CAACC,qBAAH,GAA4B,YAAW;AAEnC;;;;;;;;;AASA;;;;;;;;AAQA,eAASA,qBAAT,CAA+BC,UAA/B,EAA2C;AACvC,YAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE;AACI,cAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AAFR;AAGP;AAED;;;;;;;;AAMAJ,MAAAA,qBAAqB,CAACM,SAAtB,CAAgCC,WAAhC,GAA8CZ,KAAK,CAACa,SAAN,CAAgB,EAAhB,CAA9C;AAEA;;;;;;;AAMAR,MAAAA,qBAAqB,CAACM,SAAtB,CAAgCG,WAAhC,GAA8Cd,KAAK,CAACa,SAAN,CAAgB,EAAhB,CAA9C;AAEA;;;;;;;AAMAR,MAAAA,qBAAqB,CAACM,SAAtB,CAAgCI,IAAhC,GAAuCf,KAAK,CAACa,SAAN,CAAgB,EAAhB,CAAvC;AAEA;;;;;;;;;AAQAR,MAAAA,qBAAqB,CAACW,MAAtB,GAA+B,SAASA,MAAT,CAAgBV,UAAhB,EAA4B;AACvD,eAAO,IAAID,qBAAJ,CAA0BC,UAA1B,CAAP;AACH,OAFD;AAIA;;;;;;;;;;;AASAD,MAAAA,qBAAqB,CAACY,MAAtB,GAA+B,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AAC5D,YAAI,CAACA,MAAL,EACIA,MAAM,GAAGrB,OAAO,CAACkB,MAAR,EAAT;AACJ,YAAIE,OAAO,CAACN,WAAR,IAAuB,IAAvB,IAA+BM,OAAO,CAACE,cAAR,CAAuB,aAAvB,CAAnC,EACID,MAAM,CAACE,MAAP;AAAc;AAAuB,UAArC,EAAyCC,KAAzC,CAA+CJ,OAAO,CAACN,WAAvD;AACJ,YAAIM,OAAO,CAACJ,WAAR,IAAuB,IAAvB,IAA+BI,OAAO,CAACE,cAAR,CAAuB,aAAvB,CAAnC,EACID,MAAM,CAACE,MAAP;AAAc;AAAuB,UAArC,EAAyCC,KAAzC,CAA+CJ,OAAO,CAACJ,WAAvD;AACJ,YAAII,OAAO,CAACH,IAAR,IAAgB,IAAhB,IAAwBG,OAAO,CAACE,cAAR,CAAuB,MAAvB,CAA5B,EACID,MAAM,CAACE,MAAP;AAAc;AAAuB,UAArC,EAAyCC,KAAzC,CAA+CJ,OAAO,CAACH,IAAvD;AACJ,eAAOI,MAAP;AACH,OAVD;AAYA;;;;;;;;;;;AASAd,MAAAA,qBAAqB,CAACkB,eAAtB,GAAwC,SAASA,eAAT,CAAyBL,OAAzB,EAAkCC,MAAlC,EAA0C;AAC9E,eAAO,KAAKF,MAAL,CAAYC,OAAZ,EAAqBC,MAArB,EAA6BK,MAA7B,EAAP;AACH,OAFD;AAIA;;;;;;;;;;;;;AAWAnB,MAAAA,qBAAqB,CAACoB,MAAtB,GAA+B,SAASA,MAAT,CAAgBC,MAAhB,EAAwBhB,MAAxB,EAAgC;AAC3D,YAAI,EAAEgB,MAAM,YAAY9B,OAApB,CAAJ,EACI8B,MAAM,GAAG9B,OAAO,CAACoB,MAAR,CAAeU,MAAf,CAAT;AACJ,YAAIC,GAAG,GAAGjB,MAAM,KAAKkB,SAAX,GAAuBF,MAAM,CAACG,GAA9B,GAAoCH,MAAM,CAACI,GAAP,GAAapB,MAA3D;AAAA,YAAmEQ,OAAO,GAAG,IAAIhB,KAAK,CAACE,EAAN,CAASC,qBAAb,EAA7E;;AACA,eAAOqB,MAAM,CAACI,GAAP,GAAaH,GAApB,EAAyB;AACrB,cAAII,GAAG,GAAGL,MAAM,CAACL,MAAP,EAAV;;AACA,kBAAQU,GAAG,KAAK,CAAhB;AACA,iBAAK,CAAL;AACIb,cAAAA,OAAO,CAACN,WAAR,GAAsBc,MAAM,CAACJ,KAAP,EAAtB;AACA;;AACJ,iBAAK,CAAL;AACIJ,cAAAA,OAAO,CAACJ,WAAR,GAAsBY,MAAM,CAACJ,KAAP,EAAtB;AACA;;AACJ,iBAAK,CAAL;AACIJ,cAAAA,OAAO,CAACH,IAAR,GAAeW,MAAM,CAACJ,KAAP,EAAf;AACA;;AACJ;AACII,cAAAA,MAAM,CAACM,QAAP,CAAgBD,GAAG,GAAG,CAAtB;AACA;AAZJ;AAcH;;AACD,eAAOb,OAAP;AACH,OAtBD;AAwBA;;;;;;;;;;;;AAUAb,MAAAA,qBAAqB,CAAC4B,eAAtB,GAAwC,SAASA,eAAT,CAAyBP,MAAzB,EAAiC;AACrE,YAAI,EAAEA,MAAM,YAAY9B,OAApB,CAAJ,EACI8B,MAAM,GAAG,IAAI9B,OAAJ,CAAY8B,MAAZ,CAAT;AACJ,eAAO,KAAKD,MAAL,CAAYC,MAAZ,EAAoBA,MAAM,CAACL,MAAP,EAApB,CAAP;AACH,OAJD;AAMA;;;;;;;;;;AAQAhB,MAAAA,qBAAqB,CAAC6B,MAAtB,GAA+B,SAASA,MAAT,CAAgBhB,OAAhB,EAAyB;AACpD,YAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EACI,OAAO,iBAAP;AACJ,YAAIA,OAAO,CAACN,WAAR,IAAuB,IAAvB,IAA+BM,OAAO,CAACE,cAAR,CAAuB,aAAvB,CAAnC,EACI,IAAI,EAAEF,OAAO,CAACN,WAAR,IAAuB,OAAOM,OAAO,CAACN,WAAR,CAAoBF,MAA3B,KAAsC,QAA7D,IAAyEV,KAAK,CAACmC,QAAN,CAAejB,OAAO,CAACN,WAAvB,CAA3E,CAAJ,EACI,OAAO,8BAAP;AACR,YAAIM,OAAO,CAACJ,WAAR,IAAuB,IAAvB,IAA+BI,OAAO,CAACE,cAAR,CAAuB,aAAvB,CAAnC,EACI,IAAI,EAAEF,OAAO,CAACJ,WAAR,IAAuB,OAAOI,OAAO,CAACJ,WAAR,CAAoBJ,MAA3B,KAAsC,QAA7D,IAAyEV,KAAK,CAACmC,QAAN,CAAejB,OAAO,CAACJ,WAAvB,CAA3E,CAAJ,EACI,OAAO,8BAAP;AACR,YAAII,OAAO,CAACH,IAAR,IAAgB,IAAhB,IAAwBG,OAAO,CAACE,cAAR,CAAuB,MAAvB,CAA5B,EACI,IAAI,EAAEF,OAAO,CAACH,IAAR,IAAgB,OAAOG,OAAO,CAACH,IAAR,CAAaL,MAApB,KAA+B,QAA/C,IAA2DV,KAAK,CAACmC,QAAN,CAAejB,OAAO,CAACH,IAAvB,CAA7D,CAAJ,EACI,OAAO,uBAAP;AACR,eAAO,IAAP;AACH,OAbD;AAeA;;;;;;;;;;AAQAV,MAAAA,qBAAqB,CAAC+B,UAAtB,GAAmC,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AAC3D,YAAIA,MAAM,YAAYnC,KAAK,CAACE,EAAN,CAASC,qBAA/B,EACI,OAAOgC,MAAP;AACJ,YAAInB,OAAO,GAAG,IAAIhB,KAAK,CAACE,EAAN,CAASC,qBAAb,EAAd;AACA,YAAIgC,MAAM,CAACzB,WAAP,IAAsB,IAA1B,EACI,IAAI,OAAOyB,MAAM,CAACzB,WAAd,KAA8B,QAAlC,EACIZ,KAAK,CAACsC,MAAN,CAAab,MAAb,CAAoBY,MAAM,CAACzB,WAA3B,EAAwCM,OAAO,CAACN,WAAR,GAAsBZ,KAAK,CAACa,SAAN,CAAgBb,KAAK,CAACsC,MAAN,CAAa5B,MAAb,CAAoB2B,MAAM,CAACzB,WAA3B,CAAhB,CAA9D,EAAwH,CAAxH,EADJ,KAEK,IAAIyB,MAAM,CAACzB,WAAP,CAAmBF,MAAvB,EACDQ,OAAO,CAACN,WAAR,GAAsByB,MAAM,CAACzB,WAA7B;AACR,YAAIyB,MAAM,CAACvB,WAAP,IAAsB,IAA1B,EACI,IAAI,OAAOuB,MAAM,CAACvB,WAAd,KAA8B,QAAlC,EACId,KAAK,CAACsC,MAAN,CAAab,MAAb,CAAoBY,MAAM,CAACvB,WAA3B,EAAwCI,OAAO,CAACJ,WAAR,GAAsBd,KAAK,CAACa,SAAN,CAAgBb,KAAK,CAACsC,MAAN,CAAa5B,MAAb,CAAoB2B,MAAM,CAACvB,WAA3B,CAAhB,CAA9D,EAAwH,CAAxH,EADJ,KAEK,IAAIuB,MAAM,CAACvB,WAAP,CAAmBJ,MAAvB,EACDQ,OAAO,CAACJ,WAAR,GAAsBuB,MAAM,CAACvB,WAA7B;AACR,YAAIuB,MAAM,CAACtB,IAAP,IAAe,IAAnB,EACI,IAAI,OAAOsB,MAAM,CAACtB,IAAd,KAAuB,QAA3B,EACIf,KAAK,CAACsC,MAAN,CAAab,MAAb,CAAoBY,MAAM,CAACtB,IAA3B,EAAiCG,OAAO,CAACH,IAAR,GAAef,KAAK,CAACa,SAAN,CAAgBb,KAAK,CAACsC,MAAN,CAAa5B,MAAb,CAAoB2B,MAAM,CAACtB,IAA3B,CAAhB,CAAhD,EAAmG,CAAnG,EADJ,KAEK,IAAIsB,MAAM,CAACtB,IAAP,CAAYL,MAAhB,EACDQ,OAAO,CAACH,IAAR,GAAesB,MAAM,CAACtB,IAAtB;AACR,eAAOG,OAAP;AACH,OApBD;AAsBA;;;;;;;;;;;AASAb,MAAAA,qBAAqB,CAACkC,QAAtB,GAAiC,SAASA,QAAT,CAAkBrB,OAAlB,EAA2BsB,OAA3B,EAAoC;AACjE,YAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,YAAIH,MAAM,GAAG,EAAb;;AACA,YAAIG,OAAO,CAACC,QAAZ,EAAsB;AAClB,cAAID,OAAO,CAAClB,KAAR,KAAkBoB,MAAtB,EACIL,MAAM,CAACzB,WAAP,GAAqB,EAArB,CADJ,KAEK;AACDyB,YAAAA,MAAM,CAACzB,WAAP,GAAqB,EAArB;AACA,gBAAI4B,OAAO,CAAClB,KAAR,KAAkBqB,KAAtB,EACIN,MAAM,CAACzB,WAAP,GAAqBZ,KAAK,CAACa,SAAN,CAAgBwB,MAAM,CAACzB,WAAvB,CAArB;AACP;AACD,cAAI4B,OAAO,CAAClB,KAAR,KAAkBoB,MAAtB,EACIL,MAAM,CAACvB,WAAP,GAAqB,EAArB,CADJ,KAEK;AACDuB,YAAAA,MAAM,CAACvB,WAAP,GAAqB,EAArB;AACA,gBAAI0B,OAAO,CAAClB,KAAR,KAAkBqB,KAAtB,EACIN,MAAM,CAACvB,WAAP,GAAqBd,KAAK,CAACa,SAAN,CAAgBwB,MAAM,CAACvB,WAAvB,CAArB;AACP;AACD,cAAI0B,OAAO,CAAClB,KAAR,KAAkBoB,MAAtB,EACIL,MAAM,CAACtB,IAAP,GAAc,EAAd,CADJ,KAEK;AACDsB,YAAAA,MAAM,CAACtB,IAAP,GAAc,EAAd;AACA,gBAAIyB,OAAO,CAAClB,KAAR,KAAkBqB,KAAtB,EACIN,MAAM,CAACtB,IAAP,GAAcf,KAAK,CAACa,SAAN,CAAgBwB,MAAM,CAACtB,IAAvB,CAAd;AACP;AACJ;;AACD,YAAIG,OAAO,CAACN,WAAR,IAAuB,IAAvB,IAA+BM,OAAO,CAACE,cAAR,CAAuB,aAAvB,CAAnC,EACIiB,MAAM,CAACzB,WAAP,GAAqB4B,OAAO,CAAClB,KAAR,KAAkBoB,MAAlB,GAA2B1C,KAAK,CAACsC,MAAN,CAAarB,MAAb,CAAoBC,OAAO,CAACN,WAA5B,EAAyC,CAAzC,EAA4CM,OAAO,CAACN,WAAR,CAAoBF,MAAhE,CAA3B,GAAqG8B,OAAO,CAAClB,KAAR,KAAkBqB,KAAlB,GAA0BA,KAAK,CAAChC,SAAN,CAAgBiC,KAAhB,CAAsBC,IAAtB,CAA2B3B,OAAO,CAACN,WAAnC,CAA1B,GAA4EM,OAAO,CAACN,WAA9M;AACJ,YAAIM,OAAO,CAACJ,WAAR,IAAuB,IAAvB,IAA+BI,OAAO,CAACE,cAAR,CAAuB,aAAvB,CAAnC,EACIiB,MAAM,CAACvB,WAAP,GAAqB0B,OAAO,CAAClB,KAAR,KAAkBoB,MAAlB,GAA2B1C,KAAK,CAACsC,MAAN,CAAarB,MAAb,CAAoBC,OAAO,CAACJ,WAA5B,EAAyC,CAAzC,EAA4CI,OAAO,CAACJ,WAAR,CAAoBJ,MAAhE,CAA3B,GAAqG8B,OAAO,CAAClB,KAAR,KAAkBqB,KAAlB,GAA0BA,KAAK,CAAChC,SAAN,CAAgBiC,KAAhB,CAAsBC,IAAtB,CAA2B3B,OAAO,CAACJ,WAAnC,CAA1B,GAA4EI,OAAO,CAACJ,WAA9M;AACJ,YAAII,OAAO,CAACH,IAAR,IAAgB,IAAhB,IAAwBG,OAAO,CAACE,cAAR,CAAuB,MAAvB,CAA5B,EACIiB,MAAM,CAACtB,IAAP,GAAcyB,OAAO,CAAClB,KAAR,KAAkBoB,MAAlB,GAA2B1C,KAAK,CAACsC,MAAN,CAAarB,MAAb,CAAoBC,OAAO,CAACH,IAA5B,EAAkC,CAAlC,EAAqCG,OAAO,CAACH,IAAR,CAAaL,MAAlD,CAA3B,GAAuF8B,OAAO,CAAClB,KAAR,KAAkBqB,KAAlB,GAA0BA,KAAK,CAAChC,SAAN,CAAgBiC,KAAhB,CAAsBC,IAAtB,CAA2B3B,OAAO,CAACH,IAAnC,CAA1B,GAAqEG,OAAO,CAACH,IAAlL;AACJ,eAAOsB,MAAP;AACH,OAlCD;AAoCA;;;;;;;;;AAOAhC,MAAAA,qBAAqB,CAACM,SAAtB,CAAgCmC,MAAhC,GAAyC,SAASA,MAAT,GAAkB;AACvD,eAAO,KAAKC,WAAL,CAAiBR,QAAjB,CAA0B,IAA1B,EAAgC5C,SAAS,CAACM,IAAV,CAAe+C,aAA/C,CAAP;AACH,OAFD;;AAIA,aAAO3C,qBAAP;AACH,KAjQ0B,EAA3B;;AAmQA,WAAOD,EAAP;AACH,GA7QU,EAAX;;AA+QA,SAAOF,KAAP;AACH,CAjSD","sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof define === 'function' && define.amd)\n        define([\"protobufjs/minimal\"], factory);\n\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)\n        module.exports = factory(require(\"protobufjs/minimal\"));\n\n})(this, function($protobuf) {\n    \"use strict\";\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.pb = (function() {\n    \n        /**\n         * Namespace pb.\n         * @exports pb\n         * @namespace\n         */\n        var pb = {};\n    \n        pb.NoiseHandshakePayload = (function() {\n    \n            /**\n             * Properties of a NoiseHandshakePayload.\n             * @memberof pb\n             * @interface INoiseHandshakePayload\n             * @property {Uint8Array|null} [identityKey] NoiseHandshakePayload identityKey\n             * @property {Uint8Array|null} [identitySig] NoiseHandshakePayload identitySig\n             * @property {Uint8Array|null} [data] NoiseHandshakePayload data\n             */\n    \n            /**\n             * Constructs a new NoiseHandshakePayload.\n             * @memberof pb\n             * @classdesc Represents a NoiseHandshakePayload.\n             * @implements INoiseHandshakePayload\n             * @constructor\n             * @param {pb.INoiseHandshakePayload=} [properties] Properties to set\n             */\n            function NoiseHandshakePayload(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * NoiseHandshakePayload identityKey.\n             * @member {Uint8Array} identityKey\n             * @memberof pb.NoiseHandshakePayload\n             * @instance\n             */\n            NoiseHandshakePayload.prototype.identityKey = $util.newBuffer([]);\n    \n            /**\n             * NoiseHandshakePayload identitySig.\n             * @member {Uint8Array} identitySig\n             * @memberof pb.NoiseHandshakePayload\n             * @instance\n             */\n            NoiseHandshakePayload.prototype.identitySig = $util.newBuffer([]);\n    \n            /**\n             * NoiseHandshakePayload data.\n             * @member {Uint8Array} data\n             * @memberof pb.NoiseHandshakePayload\n             * @instance\n             */\n            NoiseHandshakePayload.prototype.data = $util.newBuffer([]);\n    \n            /**\n             * Creates a new NoiseHandshakePayload instance using the specified properties.\n             * @function create\n             * @memberof pb.NoiseHandshakePayload\n             * @static\n             * @param {pb.INoiseHandshakePayload=} [properties] Properties to set\n             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload instance\n             */\n            NoiseHandshakePayload.create = function create(properties) {\n                return new NoiseHandshakePayload(properties);\n            };\n    \n            /**\n             * Encodes the specified NoiseHandshakePayload message. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.\n             * @function encode\n             * @memberof pb.NoiseHandshakePayload\n             * @static\n             * @param {pb.INoiseHandshakePayload} message NoiseHandshakePayload message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NoiseHandshakePayload.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.identityKey);\n                if (message.identitySig != null && message.hasOwnProperty(\"identitySig\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.identitySig);\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified NoiseHandshakePayload message, length delimited. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof pb.NoiseHandshakePayload\n             * @static\n             * @param {pb.INoiseHandshakePayload} message NoiseHandshakePayload message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NoiseHandshakePayload.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a NoiseHandshakePayload message from the specified reader or buffer.\n             * @function decode\n             * @memberof pb.NoiseHandshakePayload\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NoiseHandshakePayload.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.NoiseHandshakePayload();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.identityKey = reader.bytes();\n                        break;\n                    case 2:\n                        message.identitySig = reader.bytes();\n                        break;\n                    case 3:\n                        message.data = reader.bytes();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a NoiseHandshakePayload message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof pb.NoiseHandshakePayload\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NoiseHandshakePayload.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a NoiseHandshakePayload message.\n             * @function verify\n             * @memberof pb.NoiseHandshakePayload\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            NoiseHandshakePayload.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                    if (!(message.identityKey && typeof message.identityKey.length === \"number\" || $util.isString(message.identityKey)))\n                        return \"identityKey: buffer expected\";\n                if (message.identitySig != null && message.hasOwnProperty(\"identitySig\"))\n                    if (!(message.identitySig && typeof message.identitySig.length === \"number\" || $util.isString(message.identitySig)))\n                        return \"identitySig: buffer expected\";\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\n                        return \"data: buffer expected\";\n                return null;\n            };\n    \n            /**\n             * Creates a NoiseHandshakePayload message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof pb.NoiseHandshakePayload\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload\n             */\n            NoiseHandshakePayload.fromObject = function fromObject(object) {\n                if (object instanceof $root.pb.NoiseHandshakePayload)\n                    return object;\n                var message = new $root.pb.NoiseHandshakePayload();\n                if (object.identityKey != null)\n                    if (typeof object.identityKey === \"string\")\n                        $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);\n                    else if (object.identityKey.length)\n                        message.identityKey = object.identityKey;\n                if (object.identitySig != null)\n                    if (typeof object.identitySig === \"string\")\n                        $util.base64.decode(object.identitySig, message.identitySig = $util.newBuffer($util.base64.length(object.identitySig)), 0);\n                    else if (object.identitySig.length)\n                        message.identitySig = object.identitySig;\n                if (object.data != null)\n                    if (typeof object.data === \"string\")\n                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\n                    else if (object.data.length)\n                        message.data = object.data;\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a NoiseHandshakePayload message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof pb.NoiseHandshakePayload\n             * @static\n             * @param {pb.NoiseHandshakePayload} message NoiseHandshakePayload\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            NoiseHandshakePayload.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if (options.bytes === String)\n                        object.identityKey = \"\";\n                    else {\n                        object.identityKey = [];\n                        if (options.bytes !== Array)\n                            object.identityKey = $util.newBuffer(object.identityKey);\n                    }\n                    if (options.bytes === String)\n                        object.identitySig = \"\";\n                    else {\n                        object.identitySig = [];\n                        if (options.bytes !== Array)\n                            object.identitySig = $util.newBuffer(object.identitySig);\n                    }\n                    if (options.bytes === String)\n                        object.data = \"\";\n                    else {\n                        object.data = [];\n                        if (options.bytes !== Array)\n                            object.data = $util.newBuffer(object.data);\n                    }\n                }\n                if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                    object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;\n                if (message.identitySig != null && message.hasOwnProperty(\"identitySig\"))\n                    object.identitySig = options.bytes === String ? $util.base64.encode(message.identitySig, 0, message.identitySig.length) : options.bytes === Array ? Array.prototype.slice.call(message.identitySig) : message.identitySig;\n                if (message.data != null && message.hasOwnProperty(\"data\"))\n                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n                return object;\n            };\n    \n            /**\n             * Converts this NoiseHandshakePayload to JSON.\n             * @function toJSON\n             * @memberof pb.NoiseHandshakePayload\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            NoiseHandshakePayload.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return NoiseHandshakePayload;\n        })();\n    \n        return pb;\n    })();\n\n    return $root;\n});\n"]},"metadata":{},"sourceType":"script"}