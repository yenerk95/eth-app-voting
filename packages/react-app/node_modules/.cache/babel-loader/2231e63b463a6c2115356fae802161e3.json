{"ast":null,"code":"'use strict';\n\nvar CID = require('cids');\n/**\n* Stringify a CID encoded in the requested base, upgrading to v1 if necessary.\n*\n* Setting upgrade to false will disable automatic CID upgrading from v0 to v1\n* which is necessary if the multibase is something other than base58btc. Note\n* that it will also not apply the encoding (since v0 CIDs can only be encoded\n* as base58btc).\n*\n* @param {CID|Buffer|String} cid The CID to encode\n* @param {Object} [options] Optional options\n* @param {String} [options.base] Name of multibase codec to encode the CID with\n* @param {Boolean} [options.upgrade] Automatically upgrade v0 CIDs to v1 when\n* necessary. Default: true.\n* @returns {String}\n*/\n\n\nexports.cidToString = function (cid, options) {\n  options = options || {};\n  options.upgrade = options.upgrade !== false;\n\n  if (!CID.isCID(cid)) {\n    cid = new CID(cid);\n  }\n\n  if (cid.version === 0 && options.base && options.base !== 'base58btc') {\n    if (!options.upgrade) return cid.toString();\n    cid = cid.toV1();\n  }\n\n  return cid.toBaseEncodedString(options.base);\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/utils/cid.js"],"names":["CID","require","exports","cidToString","cid","options","upgrade","isCID","version","base","toString","toV1","toBaseEncodedString"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;AAeAC,OAAO,CAACC,WAAR,GAAsB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACtCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACC,OAAR,GAAkBD,OAAO,CAACC,OAAR,KAAoB,KAAtC;;AAEA,MAAI,CAACN,GAAG,CAACO,KAAJ,CAAUH,GAAV,CAAL,EAAqB;AACnBA,IAAAA,GAAG,GAAG,IAAIJ,GAAJ,CAAQI,GAAR,CAAN;AACD;;AAED,MAAIA,GAAG,CAACI,OAAJ,KAAgB,CAAhB,IAAqBH,OAAO,CAACI,IAA7B,IAAqCJ,OAAO,CAACI,IAAR,KAAiB,WAA1D,EAAuE;AACrE,QAAI,CAACJ,OAAO,CAACC,OAAb,EAAsB,OAAOF,GAAG,CAACM,QAAJ,EAAP;AACtBN,IAAAA,GAAG,GAAGA,GAAG,CAACO,IAAJ,EAAN;AACD;;AAED,SAAOP,GAAG,CAACQ,mBAAJ,CAAwBP,OAAO,CAACI,IAAhC,CAAP;AACD,CAdD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\n\n/**\n* Stringify a CID encoded in the requested base, upgrading to v1 if necessary.\n*\n* Setting upgrade to false will disable automatic CID upgrading from v0 to v1\n* which is necessary if the multibase is something other than base58btc. Note\n* that it will also not apply the encoding (since v0 CIDs can only be encoded\n* as base58btc).\n*\n* @param {CID|Buffer|String} cid The CID to encode\n* @param {Object} [options] Optional options\n* @param {String} [options.base] Name of multibase codec to encode the CID with\n* @param {Boolean} [options.upgrade] Automatically upgrade v0 CIDs to v1 when\n* necessary. Default: true.\n* @returns {String}\n*/\nexports.cidToString = (cid, options) => {\n  options = options || {}\n  options.upgrade = options.upgrade !== false\n\n  if (!CID.isCID(cid)) {\n    cid = new CID(cid)\n  }\n\n  if (cid.version === 0 && options.base && options.base !== 'base58btc') {\n    if (!options.upgrade) return cid.toString()\n    cid = cid.toV1()\n  }\n\n  return cid.toBaseEncodedString(options.base)\n}\n"]},"metadata":{},"sourceType":"script"}