{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nrequire('node-forge/lib/pkcs7');\n\nrequire('node-forge/lib/pbe');\n\nvar forge = require('node-forge/lib/forge');\n\nvar _require = require('./util'),\n    certificateForKey = _require.certificateForKey,\n    findAsync = _require.findAsync;\n\nvar errcode = require('err-code');\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\n\n\nvar CMS = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {Keychain} keychain - the available keys\n   */\n  function CMS(keychain) {\n    _classCallCheck(this, CMS);\n\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED');\n    }\n\n    this.keychain = keychain;\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Buffer contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Buffer} plain - The data to encrypt.\n   * @returns {undefined}\n   */\n\n\n  _createClass(CMS, [{\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, plain) {\n        var key, pem, privateKey, certificate, p7, der;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (Buffer.isBuffer(plain)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('Plain data must be a Buffer'), 'ERR_INVALID_PARAMS');\n\n              case 2:\n                _context.next = 4;\n                return this.keychain.findKeyByName(name);\n\n              case 4:\n                key = _context.sent;\n                _context.next = 7;\n                return this.keychain._getPrivateKey(name);\n\n              case 7:\n                pem = _context.sent;\n                privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._());\n                _context.next = 11;\n                return certificateForKey(key, privateKey);\n\n              case 11:\n                certificate = _context.sent;\n                // create a p7 enveloped message\n                p7 = forge.pkcs7.createEnvelopedData();\n                p7.addRecipient(certificate);\n                p7.content = forge.util.createBuffer(plain);\n                p7.encrypt(); // convert message to DER\n\n                der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n                return _context.abrupt(\"return\", Buffer.from(der, 'binary'));\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function encrypt(_x, _x2) {\n        return _encrypt.apply(this, arguments);\n      }\n\n      return encrypt;\n    }()\n    /**\n     * Reads some protected data.\n     *\n     * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n     * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n     *\n     * @param {Buffer} cmsData - The CMS encrypted data to decrypt.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(cmsData) {\n        var _this = this;\n\n        var cms, buf, obj, recipients, r, missingKeys, key, pem, privateKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (Buffer.isBuffer(cmsData)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS');\n\n              case 2:\n                _context3.prev = 2;\n                buf = forge.util.createBuffer(cmsData.toString('binary'));\n                obj = forge.asn1.fromDer(buf);\n                cms = forge.pkcs7.messageFromAsn1(obj);\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](2);\n                throw errcode(new Error('Invalid CMS: ' + _context3.t0.message), 'ERR_INVALID_CMS');\n\n              case 11:\n                // Find a recipient whose key we hold. We only deal with recipient certs\n                // issued by ipfs (O=ipfs).\n                recipients = cms.recipients.filter(function (r) {\n                  return r.issuer.find(function (a) {\n                    return a.shortName === 'O' && a.value === 'ipfs';\n                  });\n                }).filter(function (r) {\n                  return r.issuer.find(function (a) {\n                    return a.shortName === 'CN';\n                  });\n                }).map(function (r) {\n                  return {\n                    recipient: r,\n                    keyId: r.issuer.find(function (a) {\n                      return a.shortName === 'CN';\n                    }).value\n                  };\n                });\n                _context3.next = 14;\n                return findAsync(recipients, /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(recipient) {\n                    var _key;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.prev = 0;\n                            _context2.next = 3;\n                            return _this.keychain.findKeyById(recipient.keyId);\n\n                          case 3:\n                            _key = _context2.sent;\n\n                            if (!_key) {\n                              _context2.next = 6;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", true);\n\n                          case 6:\n                            _context2.next = 11;\n                            break;\n\n                          case 8:\n                            _context2.prev = 8;\n                            _context2.t0 = _context2[\"catch\"](0);\n                            return _context2.abrupt(\"return\", false);\n\n                          case 11:\n                            return _context2.abrupt(\"return\", false);\n\n                          case 12:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[0, 8]]);\n                  }));\n\n                  return function (_x4) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 14:\n                r = _context3.sent;\n\n                if (r) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                missingKeys = recipients.map(function (r) {\n                  return r.keyId;\n                });\n                throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n                  missingKeys: missingKeys\n                });\n\n              case 18:\n                _context3.next = 20;\n                return this.keychain.findKeyById(r.keyId);\n\n              case 20:\n                key = _context3.sent;\n                _context3.next = 23;\n                return this.keychain._getPrivateKey(key.name);\n\n              case 23:\n                pem = _context3.sent;\n                privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._());\n                cms.decrypt(r.recipient, privateKey);\n                return _context3.abrupt(\"return\", Buffer.from(cms.content.getBytes(), 'binary'));\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 8]]);\n      }));\n\n      function decrypt(_x3) {\n        return _decrypt.apply(this, arguments);\n      }\n\n      return decrypt;\n    }()\n  }]);\n\n  return CMS;\n}();\n\nmodule.exports = CMS;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/keychain/cms.js"],"names":["require","forge","certificateForKey","findAsync","errcode","CMS","keychain","Error","name","plain","Buffer","isBuffer","findKeyByName","key","_getPrivateKey","pem","privateKey","pki","decryptRsaPrivateKey","_","certificate","p7","pkcs7","createEnvelopedData","addRecipient","content","util","createBuffer","encrypt","der","asn1","toDer","toAsn1","getBytes","from","cmsData","buf","toString","obj","fromDer","cms","messageFromAsn1","message","recipients","filter","r","issuer","find","a","shortName","value","map","recipient","keyId","findKeyById","missingKeys","join","decrypt","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nrequire('node-forge/lib/pkcs7')\nrequire('node-forge/lib/pbe')\nconst forge = require('node-forge/lib/forge')\nconst { certificateForKey, findAsync } = require('./util')\nconst errcode = require('err-code')\n\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nclass CMS {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {Keychain} keychain - the available keys\n   */\n  constructor (keychain) {\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED')\n    }\n\n    this.keychain = keychain\n  }\n\n  /**\n   * Creates some protected data.\n   *\n   * The output Buffer contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Buffer} plain - The data to encrypt.\n   * @returns {undefined}\n   */\n  async encrypt (name, plain) {\n    if (!Buffer.isBuffer(plain)) {\n      throw errcode(new Error('Plain data must be a Buffer'), 'ERR_INVALID_PARAMS')\n    }\n\n    const key = await this.keychain.findKeyByName(name)\n    const pem = await this.keychain._getPrivateKey(name)\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._())\n    const certificate = await certificateForKey(key, privateKey)\n\n    // create a p7 enveloped message\n    const p7 = forge.pkcs7.createEnvelopedData()\n    p7.addRecipient(certificate)\n    p7.content = forge.util.createBuffer(plain)\n    p7.encrypt()\n\n    // convert message to DER\n    const der = forge.asn1.toDer(p7.toAsn1()).getBytes()\n    return Buffer.from(der, 'binary')\n  }\n\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   *\n   * @param {Buffer} cmsData - The CMS encrypted data to decrypt.\n   * @returns {undefined}\n   */\n  async decrypt (cmsData) {\n    if (!Buffer.isBuffer(cmsData)) {\n      throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS')\n    }\n\n    let cms\n    try {\n      const buf = forge.util.createBuffer(cmsData.toString('binary'))\n      const obj = forge.asn1.fromDer(buf)\n      cms = forge.pkcs7.messageFromAsn1(obj)\n    } catch (err) {\n      throw errcode(new Error('Invalid CMS: ' + err.message), 'ERR_INVALID_CMS')\n    }\n\n    // Find a recipient whose key we hold. We only deal with recipient certs\n    // issued by ipfs (O=ipfs).\n    const recipients = cms.recipients\n      .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))\n      .filter(r => r.issuer.find(a => a.shortName === 'CN'))\n      .map(r => {\n        return {\n          recipient: r,\n          keyId: r.issuer.find(a => a.shortName === 'CN').value\n        }\n      })\n\n    const r = await findAsync(recipients, async (recipient) => {\n      try {\n        const key = await this.keychain.findKeyById(recipient.keyId)\n        if (key) return true\n      } catch (err) {\n        return false\n      }\n      return false\n    })\n\n    if (!r) {\n      const missingKeys = recipients.map(r => r.keyId)\n      throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n        missingKeys\n      })\n    }\n\n    const key = await this.keychain.findKeyById(r.keyId)\n    const pem = await this.keychain._getPrivateKey(key.name)\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._())\n    cms.decrypt(r.recipient, privateKey)\n    return Buffer.from(cms.content.getBytes(), 'binary')\n  }\n}\n\nmodule.exports = CMS\n"]},"metadata":{},"sourceType":"script"}