{"ast":null,"code":"'use strict';\n\nconst defer = require('p-defer');\n\nconst {\n  NotStartedError,\n  AlreadyInitializedError\n} = require('../errors');\n\nconst Components = require('./');\n\nconst {\n  withTimeoutOption\n} = require('../utils');\n\nmodule.exports = ({\n  apiManager,\n  options: constructorOptions,\n  bitswap,\n  blockService,\n  gcLock,\n  initOptions,\n  ipld,\n  ipns,\n  keychain,\n  libp2p,\n  mfsPreload,\n  peerId,\n  pinManager,\n  preload,\n  print,\n  repo\n}) => withTimeoutOption(async function stop() {\n  const stopPromise = defer();\n  const {\n    cancel\n  } = apiManager.update({\n    stop: () => stopPromise.promise\n  });\n\n  try {\n    blockService.unsetExchange();\n    bitswap.stop();\n    preload.stop();\n    await Promise.all([ipns.republisher.stop(), mfsPreload.stop(), libp2p.stop(), repo.close()]);\n    const api = createApi({\n      apiManager,\n      constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      keychain,\n      peerId,\n      pinManager,\n      preload,\n      print,\n      repo\n    });\n    apiManager.update(api, () => {\n      throw new NotStartedError();\n    });\n  } catch (err) {\n    cancel();\n    stopPromise.reject(err);\n    throw err;\n  }\n\n  stopPromise.resolve();\n});\n\nfunction createApi({\n  apiManager,\n  constructorOptions,\n  blockService,\n  gcLock,\n  initOptions,\n  ipld,\n  keychain,\n  peerId,\n  pinManager,\n  preload,\n  print,\n  repo\n}) {\n  const dag = {\n    get: Components.dag.get({\n      ipld,\n      preload\n    }),\n    resolve: Components.dag.resolve({\n      ipld,\n      preload\n    }),\n    tree: Components.dag.tree({\n      ipld,\n      preload\n    })\n  };\n  const object = {\n    data: Components.object.data({\n      ipld,\n      preload\n    }),\n    get: Components.object.get({\n      ipld,\n      preload\n    }),\n    links: Components.object.links({\n      dag\n    }),\n    new: Components.object.new({\n      ipld,\n      preload\n    }),\n    patch: {\n      addLink: Components.object.patch.addLink({\n        ipld,\n        gcLock,\n        preload\n      }),\n      appendData: Components.object.patch.appendData({\n        ipld,\n        gcLock,\n        preload\n      }),\n      rmLink: Components.object.patch.rmLink({\n        ipld,\n        gcLock,\n        preload\n      }),\n      setData: Components.object.patch.setData({\n        ipld,\n        gcLock,\n        preload\n      })\n    },\n    put: Components.object.put({\n      ipld,\n      gcLock,\n      preload\n    }),\n    stat: Components.object.stat({\n      ipld,\n      preload\n    })\n  };\n  const pin = {\n    add: Components.pin.add({\n      pinManager,\n      gcLock,\n      dag\n    }),\n    ls: Components.pin.ls({\n      pinManager,\n      dag\n    }),\n    rm: Components.pin.rm({\n      pinManager,\n      gcLock,\n      dag\n    })\n  }; // FIXME: resolve this circular dependency\n\n  dag.put = Components.dag.put({\n    ipld,\n    pin,\n    gcLock,\n    preload\n  });\n  const block = {\n    get: Components.block.get({\n      blockService,\n      preload\n    }),\n    put: Components.block.put({\n      blockService,\n      pin,\n      gcLock,\n      preload\n    }),\n    rm: Components.block.rm({\n      blockService,\n      gcLock,\n      pinManager\n    }),\n    stat: Components.block.stat({\n      blockService,\n      preload\n    })\n  };\n  const add = Components.add({\n    block,\n    preload,\n    pin,\n    gcLock,\n    options: constructorOptions\n  });\n  const resolve = Components.resolve({\n    ipld\n  });\n  const refs = Components.refs({\n    ipld,\n    resolve,\n    preload\n  });\n  refs.local = Components.refs.local({\n    repo\n  });\n\n  const notStarted = async () => {\n    // eslint-disable-line require-await\n    throw new NotStartedError();\n  };\n\n  const api = {\n    add,\n    bitswap: {\n      stat: notStarted,\n      unwant: notStarted,\n      wantlist: notStarted\n    },\n    block,\n    bootstrap: {\n      add: Components.bootstrap.add({\n        repo\n      }),\n      list: Components.bootstrap.list({\n        repo\n      }),\n      rm: Components.bootstrap.rm({\n        repo\n      })\n    },\n    cat: Components.cat({\n      ipld,\n      preload\n    }),\n    config: Components.config({\n      repo\n    }),\n    dag,\n    dns: Components.dns(),\n    files: Components.files({\n      ipld,\n      block,\n      blockService,\n      repo,\n      preload,\n      options: constructorOptions\n    }),\n    get: Components.get({\n      ipld,\n      preload\n    }),\n    id: Components.id({\n      peerId\n    }),\n    init: async () => {\n      // eslint-disable-line require-await\n      throw new AlreadyInitializedError();\n    },\n    isOnline: Components.isOnline({}),\n    key: {\n      export: Components.key.export({\n        keychain\n      }),\n      gen: Components.key.gen({\n        keychain\n      }),\n      import: Components.key.import({\n        keychain\n      }),\n      info: Components.key.info({\n        keychain\n      }),\n      list: Components.key.list({\n        keychain\n      }),\n      rename: Components.key.rename({\n        keychain\n      }),\n      rm: Components.key.rm({\n        keychain\n      })\n    },\n    ls: Components.ls({\n      ipld,\n      preload\n    }),\n    object,\n    pin,\n    refs,\n    repo: {\n      gc: Components.repo.gc({\n        gcLock,\n        pin,\n        pinManager,\n        refs,\n        repo\n      }),\n      stat: Components.repo.stat({\n        repo\n      }),\n      version: Components.repo.version({\n        repo\n      })\n    },\n    resolve,\n    start: Components.start({\n      apiManager,\n      options: constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      keychain,\n      peerId,\n      pinManager,\n      preload,\n      print,\n      repo\n    }),\n    stats: {\n      bitswap: notStarted,\n      bw: notStarted,\n      repo: Components.repo.stat({\n        repo\n      })\n    },\n    stop: () => {},\n    swarm: {\n      addrs: notStarted,\n      connect: notStarted,\n      disconnect: notStarted,\n      localAddrs: Components.swarm.localAddrs({\n        multiaddrs: []\n      }),\n      peers: notStarted\n    },\n    version: Components.version({\n      repo\n    })\n  };\n  return api;\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/stop.js"],"names":["defer","require","NotStartedError","AlreadyInitializedError","Components","withTimeoutOption","module","exports","apiManager","options","constructorOptions","bitswap","blockService","gcLock","initOptions","ipld","ipns","keychain","libp2p","mfsPreload","peerId","pinManager","preload","print","repo","stop","stopPromise","cancel","update","promise","unsetExchange","Promise","all","republisher","close","api","createApi","err","reject","resolve","dag","get","tree","object","data","links","new","patch","addLink","appendData","rmLink","setData","put","stat","pin","add","ls","rm","block","refs","local","notStarted","unwant","wantlist","bootstrap","list","cat","config","dns","files","id","init","isOnline","key","export","gen","import","info","rename","gc","version","start","stats","bw","swarm","addrs","connect","disconnect","localAddrs","multiaddrs","peers"],"mappings":"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","sourcesContent":["'use strict'\n\nconst defer = require('p-defer')\nconst { NotStartedError, AlreadyInitializedError } = require('../errors')\nconst Components = require('./')\nconst { withTimeoutOption } = require('../utils')\n\nmodule.exports = ({\n  apiManager,\n  options: constructorOptions,\n  bitswap,\n  blockService,\n  gcLock,\n  initOptions,\n  ipld,\n  ipns,\n  keychain,\n  libp2p,\n  mfsPreload,\n  peerId,\n  pinManager,\n  preload,\n  print,\n  repo\n}) => withTimeoutOption(async function stop () {\n  const stopPromise = defer()\n  const { cancel } = apiManager.update({ stop: () => stopPromise.promise })\n\n  try {\n    blockService.unsetExchange()\n    bitswap.stop()\n    preload.stop()\n\n    await Promise.all([\n      ipns.republisher.stop(),\n      mfsPreload.stop(),\n      libp2p.stop(),\n      repo.close()\n    ])\n\n    const api = createApi({\n      apiManager,\n      constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      keychain,\n      peerId,\n      pinManager,\n      preload,\n      print,\n      repo\n    })\n\n    apiManager.update(api, () => { throw new NotStartedError() })\n  } catch (err) {\n    cancel()\n    stopPromise.reject(err)\n    throw err\n  }\n\n  stopPromise.resolve()\n})\n\nfunction createApi ({\n  apiManager,\n  constructorOptions,\n  blockService,\n  gcLock,\n  initOptions,\n  ipld,\n  keychain,\n  peerId,\n  pinManager,\n  preload,\n  print,\n  repo\n}) {\n  const dag = {\n    get: Components.dag.get({ ipld, preload }),\n    resolve: Components.dag.resolve({ ipld, preload }),\n    tree: Components.dag.tree({ ipld, preload })\n  }\n  const object = {\n    data: Components.object.data({ ipld, preload }),\n    get: Components.object.get({ ipld, preload }),\n    links: Components.object.links({ dag }),\n    new: Components.object.new({ ipld, preload }),\n    patch: {\n      addLink: Components.object.patch.addLink({ ipld, gcLock, preload }),\n      appendData: Components.object.patch.appendData({ ipld, gcLock, preload }),\n      rmLink: Components.object.patch.rmLink({ ipld, gcLock, preload }),\n      setData: Components.object.patch.setData({ ipld, gcLock, preload })\n    },\n    put: Components.object.put({ ipld, gcLock, preload }),\n    stat: Components.object.stat({ ipld, preload })\n  }\n\n  const pin = {\n    add: Components.pin.add({ pinManager, gcLock, dag }),\n    ls: Components.pin.ls({ pinManager, dag }),\n    rm: Components.pin.rm({ pinManager, gcLock, dag })\n  }\n\n  // FIXME: resolve this circular dependency\n  dag.put = Components.dag.put({ ipld, pin, gcLock, preload })\n\n  const block = {\n    get: Components.block.get({ blockService, preload }),\n    put: Components.block.put({ blockService, pin, gcLock, preload }),\n    rm: Components.block.rm({ blockService, gcLock, pinManager }),\n    stat: Components.block.stat({ blockService, preload })\n  }\n\n  const add = Components.add({ block, preload, pin, gcLock, options: constructorOptions })\n  const resolve = Components.resolve({ ipld })\n  const refs = Components.refs({ ipld, resolve, preload })\n  refs.local = Components.refs.local({ repo })\n\n  const notStarted = async () => { // eslint-disable-line require-await\n    throw new NotStartedError()\n  }\n\n  const api = {\n    add,\n    bitswap: {\n      stat: notStarted,\n      unwant: notStarted,\n      wantlist: notStarted\n    },\n    block,\n    bootstrap: {\n      add: Components.bootstrap.add({ repo }),\n      list: Components.bootstrap.list({ repo }),\n      rm: Components.bootstrap.rm({ repo })\n    },\n    cat: Components.cat({ ipld, preload }),\n    config: Components.config({ repo }),\n    dag,\n    dns: Components.dns(),\n    files: Components.files({ ipld, block, blockService, repo, preload, options: constructorOptions }),\n    get: Components.get({ ipld, preload }),\n    id: Components.id({ peerId }),\n    init: async () => { // eslint-disable-line require-await\n      throw new AlreadyInitializedError()\n    },\n    isOnline: Components.isOnline({}),\n    key: {\n      export: Components.key.export({ keychain }),\n      gen: Components.key.gen({ keychain }),\n      import: Components.key.import({ keychain }),\n      info: Components.key.info({ keychain }),\n      list: Components.key.list({ keychain }),\n      rename: Components.key.rename({ keychain }),\n      rm: Components.key.rm({ keychain })\n    },\n    ls: Components.ls({ ipld, preload }),\n    object,\n    pin,\n    refs,\n    repo: {\n      gc: Components.repo.gc({ gcLock, pin, pinManager, refs, repo }),\n      stat: Components.repo.stat({ repo }),\n      version: Components.repo.version({ repo })\n    },\n    resolve,\n    start: Components.start({\n      apiManager,\n      options: constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      keychain,\n      peerId,\n      pinManager,\n      preload,\n      print,\n      repo\n    }),\n    stats: {\n      bitswap: notStarted,\n      bw: notStarted,\n      repo: Components.repo.stat({ repo })\n    },\n    stop: () => {},\n    swarm: {\n      addrs: notStarted,\n      connect: notStarted,\n      disconnect: notStarted,\n      localAddrs: Components.swarm.localAddrs({ multiaddrs: [] }),\n      peers: notStarted\n    },\n    version: Components.version({ repo })\n  }\n\n  return api\n}\n"]},"metadata":{},"sourceType":"script"}