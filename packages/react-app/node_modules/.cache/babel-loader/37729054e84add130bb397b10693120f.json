{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error');\n\nconst DuplexPair = require('it-pair/duplex');\n\nconst pipe = require('it-pipe');\n\nconst lp = require('it-length-prefixed');\n\nconst Wrap = require('it-pb-rpc');\n\nconst {\n  int32BEEncode,\n  int32BEDecode\n} = lp; // Maximum length of the data section of the message\n// 8MB, https://github.com/libp2p/specs/blob/94ad1bd/secio/README.md#message-framing\n\nconst MAX_DATA_LENGTH = 0x800000;\n\nconst etm = require('../etm');\n\nconst crypto = require('./crypto'); // step 3. Finish\n// -- send expected message to verify encryption works (send local nonce)\n\n\nmodule.exports = async function finish(state, wrapped) {\n  log('3. finish - start');\n  const proto = state.protocols;\n  const [secure, user] = DuplexPair();\n  const network = wrapped.unwrap();\n  pipe(secure, // this is FROM the user\n  etm.createBoxStream(proto.local.cipher, proto.local.mac), lp.encode({\n    lengthEncoder: int32BEEncode\n  }), network, // and gets piped INTO and FROM the network\n  lp.decode({\n    lengthDecoder: int32BEDecode,\n    maxDataLength: MAX_DATA_LENGTH\n  }), etm.createUnboxStream(proto.remote.cipher, proto.remote.mac), secure // and gets piped TO the user\n  ).catch(err => {\n    log.error('an error occurred in the crypto stream', err);\n  }); // Exchange nonces over the encrypted stream for final verification\n\n  const shake = Wrap(user);\n  shake.write(state.proposal.in.rand);\n  const nonceBack = await shake.read(state.proposal.in.rand.length);\n  crypto.verifyNonce(state, nonceBack.slice());\n  log('3. finish - finish'); // Awesome that's all folks.\n\n  state.secure = shake.unwrap();\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-secio/src/handshake/finish.js"],"names":["debug","require","log","error","DuplexPair","pipe","lp","Wrap","int32BEEncode","int32BEDecode","MAX_DATA_LENGTH","etm","crypto","module","exports","finish","state","wrapped","proto","protocols","secure","user","network","unwrap","createBoxStream","local","cipher","mac","encode","lengthEncoder","decode","lengthDecoder","maxDataLength","createUnboxStream","remote","catch","err","shake","write","proposal","in","rand","nonceBack","read","length","verifyNonce","slice"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGF,KAAK,CAAC,cAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,oBAAD,CAAjB;;AAEA,MAAMI,UAAU,GAAGH,OAAO,CAAC,gBAAD,CAA1B;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,SAAD,CAApB;;AACA,MAAMK,EAAE,GAAGL,OAAO,CAAC,oBAAD,CAAlB;;AACA,MAAMM,IAAI,GAAGN,OAAO,CAAC,WAAD,CAApB;;AACA,MAAM;AAAEO,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,IAAmCH,EAAzC,C,CAEA;AACA;;AACA,MAAMI,eAAe,GAAG,QAAxB;;AAEA,MAAMC,GAAG,GAAGV,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMW,MAAM,GAAGX,OAAO,CAAC,UAAD,CAAtB,C,CAEA;AACA;;;AACAY,MAAM,CAACC,OAAP,GAAiB,eAAeC,MAAf,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuC;AACtDf,EAAAA,GAAG,CAAC,mBAAD,CAAH;AAEA,QAAMgB,KAAK,GAAGF,KAAK,CAACG,SAApB;AAEA,QAAM,CAACC,MAAD,EAASC,IAAT,IAAiBjB,UAAU,EAAjC;AACA,QAAMkB,OAAO,GAAGL,OAAO,CAACM,MAAR,EAAhB;AAEAlB,EAAAA,IAAI,CACFe,MADE,EACM;AACRT,EAAAA,GAAG,CAACa,eAAJ,CAAoBN,KAAK,CAACO,KAAN,CAAYC,MAAhC,EAAwCR,KAAK,CAACO,KAAN,CAAYE,GAApD,CAFE,EAGFrB,EAAE,CAACsB,MAAH,CAAU;AAAEC,IAAAA,aAAa,EAAErB;AAAjB,GAAV,CAHE,EAIFc,OAJE,EAIO;AACThB,EAAAA,EAAE,CAACwB,MAAH,CAAU;AAAEC,IAAAA,aAAa,EAAEtB,aAAjB;AAAgCuB,IAAAA,aAAa,EAAEtB;AAA/C,GAAV,CALE,EAMFC,GAAG,CAACsB,iBAAJ,CAAsBf,KAAK,CAACgB,MAAN,CAAaR,MAAnC,EAA2CR,KAAK,CAACgB,MAAN,CAAaP,GAAxD,CANE,EAOFP,MAPE,CAOK;AAPL,GAAJ,CAQEe,KARF,CAQQC,GAAG,IAAI;AACblC,IAAAA,GAAG,CAACC,KAAJ,CAAU,wCAAV,EAAoDiC,GAApD;AACD,GAVD,EARsD,CAoBtD;;AACA,QAAMC,KAAK,GAAG9B,IAAI,CAACc,IAAD,CAAlB;AACAgB,EAAAA,KAAK,CAACC,KAAN,CAAYtB,KAAK,CAACuB,QAAN,CAAeC,EAAf,CAAkBC,IAA9B;AACA,QAAMC,SAAS,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW3B,KAAK,CAACuB,QAAN,CAAeC,EAAf,CAAkBC,IAAlB,CAAuBG,MAAlC,CAAxB;AACAhC,EAAAA,MAAM,CAACiC,WAAP,CAAmB7B,KAAnB,EAA0B0B,SAAS,CAACI,KAAV,EAA1B;AAEA5C,EAAAA,GAAG,CAAC,oBAAD,CAAH,CA1BsD,CA4BtD;;AACAc,EAAAA,KAAK,CAACI,MAAN,GAAeiB,KAAK,CAACd,MAAN,EAAf;AACD,CA9BD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\nconst DuplexPair = require('it-pair/duplex')\nconst pipe = require('it-pipe')\nconst lp = require('it-length-prefixed')\nconst Wrap = require('it-pb-rpc')\nconst { int32BEEncode, int32BEDecode } = lp\n\n// Maximum length of the data section of the message\n// 8MB, https://github.com/libp2p/specs/blob/94ad1bd/secio/README.md#message-framing\nconst MAX_DATA_LENGTH = 0x800000\n\nconst etm = require('../etm')\nconst crypto = require('./crypto')\n\n// step 3. Finish\n// -- send expected message to verify encryption works (send local nonce)\nmodule.exports = async function finish (state, wrapped) {\n  log('3. finish - start')\n\n  const proto = state.protocols\n\n  const [secure, user] = DuplexPair()\n  const network = wrapped.unwrap()\n\n  pipe(\n    secure, // this is FROM the user\n    etm.createBoxStream(proto.local.cipher, proto.local.mac),\n    lp.encode({ lengthEncoder: int32BEEncode }),\n    network, // and gets piped INTO and FROM the network\n    lp.decode({ lengthDecoder: int32BEDecode, maxDataLength: MAX_DATA_LENGTH }),\n    etm.createUnboxStream(proto.remote.cipher, proto.remote.mac),\n    secure // and gets piped TO the user\n  ).catch(err => {\n    log.error('an error occurred in the crypto stream', err)\n  })\n\n  // Exchange nonces over the encrypted stream for final verification\n  const shake = Wrap(user)\n  shake.write(state.proposal.in.rand)\n  const nonceBack = await shake.read(state.proposal.in.rand.length)\n  crypto.verifyNonce(state, nonceBack.slice())\n\n  log('3. finish - finish')\n\n  // Awesome that's all folks.\n  state.secure = shake.unwrap()\n}\n"]},"metadata":{},"sourceType":"script"}