{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar multicodec = require('multicodec');\n\nvar multihashing = require('multihashing-async');\n\nexports = module.exports;\nexports.codec = multicodec.DAG_PB;\nexports.defaultHashAlg = multicodec.SHA2_256;\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\n\nvar cid = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(binaryBlob, userOptions) {\n    var defaultOptions, options, multihash, codecName, cid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            defaultOptions = {\n              cidVersion: 1,\n              hashAlg: exports.defaultHashAlg\n            };\n            options = Object.assign(defaultOptions, userOptions);\n            _context.next = 4;\n            return multihashing(binaryBlob, options.hashAlg);\n\n          case 4:\n            multihash = _context.sent;\n            codecName = multicodec.print[exports.codec];\n            cid = new CID(options.cidVersion, codecName, multihash);\n            return _context.abrupt(\"return\", cid);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function cid(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.cid = cid;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipld-dag-pb/src/genCid.js"],"names":["CID","require","multicodec","multihashing","exports","module","codec","DAG_PB","defaultHashAlg","SHA2_256","cid","binaryBlob","userOptions","defaultOptions","cidVersion","hashAlg","options","Object","assign","multihash","codecName","print"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,oBAAD,CAA5B;;AAEAG,OAAO,GAAGC,MAAM,CAACD,OAAjB;AAEAA,OAAO,CAACE,KAAR,GAAgBJ,UAAU,CAACK,MAA3B;AACAH,OAAO,CAACI,cAAR,GAAyBN,UAAU,CAACO,QAApC;AAEA;;;;;;;;;;AASA,IAAMC,GAAG;AAAA,sEAAG,iBAAOC,UAAP,EAAmBC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,YAAAA,cADI,GACa;AAAEC,cAAAA,UAAU,EAAE,CAAd;AAAiBC,cAAAA,OAAO,EAAEX,OAAO,CAACI;AAAlC,aADb;AAEJQ,YAAAA,OAFI,GAEMC,MAAM,CAACC,MAAP,CAAcL,cAAd,EAA8BD,WAA9B,CAFN;AAAA;AAAA,mBAIcT,YAAY,CAACQ,UAAD,EAAaK,OAAO,CAACD,OAArB,CAJ1B;;AAAA;AAIJI,YAAAA,SAJI;AAKJC,YAAAA,SALI,GAKQlB,UAAU,CAACmB,KAAX,CAAiBjB,OAAO,CAACE,KAAzB,CALR;AAMJI,YAAAA,GANI,GAME,IAAIV,GAAJ,CAAQgB,OAAO,CAACF,UAAhB,EAA4BM,SAA5B,EAAuCD,SAAvC,CANF;AAAA,6CAQHT,GARG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA;AAAA;AAAA;AAAA,GAAT;;AAWAN,OAAO,CAACM,GAAR,GAAcA,GAAd","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\n\nexports = module.exports\n\nexports.codec = multicodec.DAG_PB\nexports.defaultHashAlg = multicodec.SHA2_256\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\nconst cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = { cidVersion: 1, hashAlg: exports.defaultHashAlg }\n  const options = Object.assign(defaultOptions, userOptions)\n\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\n  const codecName = multicodec.print[exports.codec]\n  const cid = new CID(options.cidVersion, codecName, multihash)\n\n  return cid\n}\n\nexports.cid = cid\n"]},"metadata":{},"sourceType":"script"}