{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar distance = require('xor-distance');\n\nvar utils = require('../utils');\n\nvar pMap = require('p-map');\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\n\n\nvar PeerDistanceList = /*#__PURE__*/function () {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Buffer} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  function PeerDistanceList(originDhtKey, capacity) {\n    _classCallCheck(this, PeerDistanceList);\n\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n\n\n  _createClass(PeerDistanceList, [{\n    key: \"add\",\n\n    /**\n     * Add a peerId to the list.\n     *\n     * @param {PeerId} peerId\n     * @returns {Promise<void>}\n     */\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId) {\n        var dhtKey, el;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.peerDistances.find(function (pd) {\n                  return pd.peerId.id.equals(peerId.id);\n                })) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.next = 4;\n                return utils.convertPeerId(peerId);\n\n              case 4:\n                dhtKey = _context.sent;\n                el = {\n                  peerId: peerId,\n                  distance: distance(this.originDhtKey, dhtKey)\n                };\n                this.peerDistances.push(el);\n                this.peerDistances.sort(function (a, b) {\n                  return distance.compare(a.distance, b.distance);\n                });\n                this.peerDistances = this.peerDistances.slice(0, this.capacity);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function add(_x) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * Indicates whether any of the peerIds passed as a parameter are closer\n     * to the origin key than the furthest peerId in the PeerDistanceList.\n     *\n     * @param {Array<PeerId>} peerIds\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"anyCloser\",\n    value: function () {\n      var _anyCloser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(peerIds) {\n        var dhtKeys, furthestDistance, _iterator, _step, dhtKey, keyDistance;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (peerIds.length) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 2:\n                if (this.length) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", true);\n\n              case 4:\n                _context2.next = 6;\n                return pMap(peerIds, function (peerId) {\n                  return utils.convertPeerId(peerId);\n                });\n\n              case 6:\n                dhtKeys = _context2.sent;\n                furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n                _iterator = _createForOfIteratorHelper(dhtKeys);\n                _context2.prev = 9;\n\n                _iterator.s();\n\n              case 11:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                dhtKey = _step.value;\n                keyDistance = distance(this.originDhtKey, dhtKey);\n\n                if (!(distance.compare(keyDistance, furthestDistance) < 0)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", true);\n\n              case 16:\n                _context2.next = 11;\n                break;\n\n              case 18:\n                _context2.next = 23;\n                break;\n\n              case 20:\n                _context2.prev = 20;\n                _context2.t0 = _context2[\"catch\"](9);\n\n                _iterator.e(_context2.t0);\n\n              case 23:\n                _context2.prev = 23;\n\n                _iterator.f();\n\n                return _context2.finish(23);\n\n              case 26:\n                return _context2.abrupt(\"return\", false);\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[9, 20, 23, 26]]);\n      }));\n\n      function anyCloser(_x2) {\n        return _anyCloser.apply(this, arguments);\n      }\n\n      return anyCloser;\n    }()\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.peerDistances.length;\n    }\n    /**\n     * The peerIds in the list, in order of distance from the origin key\n     */\n\n  }, {\n    key: \"peers\",\n    get: function get() {\n      return this.peerDistances.map(function (pd) {\n        return pd.peerId;\n      });\n    }\n  }]);\n\n  return PeerDistanceList;\n}();\n\nmodule.exports = PeerDistanceList;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/peer-list/peer-distance-list.js"],"names":["distance","require","utils","pMap","PeerDistanceList","originDhtKey","capacity","peerDistances","peerId","find","pd","id","equals","convertPeerId","dhtKey","el","push","sort","a","b","compare","slice","peerIds","length","dhtKeys","furthestDistance","keyDistance","map","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,OAAD,CAApB;AAEA;;;;;IAGMG,gB;AACJ;;;;;;AAMA,4BAAaC,YAAb,EAA2BC,QAA3B,EAAqC;AAAA;;AACnC,SAAKD,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACD;AAED;;;;;;;;AAcA;;;;;;;2FAMWC,M;;;;;;qBACL,KAAKD,aAAL,CAAmBE,IAAnB,CAAwB,UAAAC,EAAE;AAAA,yBAAIA,EAAE,CAACF,MAAH,CAAUG,EAAV,CAAaC,MAAb,CAAoBJ,MAAM,CAACG,EAA3B,CAAJ;AAAA,iBAA1B,C;;;;;;;;;uBAIiBT,KAAK,CAACW,aAAN,CAAoBL,MAApB,C;;;AAAfM,gBAAAA,M;AACAC,gBAAAA,E,GAAK;AACTP,kBAAAA,MAAM,EAANA,MADS;AAETR,kBAAAA,QAAQ,EAAEA,QAAQ,CAAC,KAAKK,YAAN,EAAoBS,MAApB;AAFT,iB;AAKX,qBAAKP,aAAL,CAAmBS,IAAnB,CAAwBD,EAAxB;AACA,qBAAKR,aAAL,CAAmBU,IAAnB,CAAwB,UAACC,CAAD,EAAIC,CAAJ;AAAA,yBAAUnB,QAAQ,CAACoB,OAAT,CAAiBF,CAAC,CAAClB,QAAnB,EAA6BmB,CAAC,CAACnB,QAA/B,CAAV;AAAA,iBAAxB;AACA,qBAAKO,aAAL,GAAqB,KAAKA,aAAL,CAAmBc,KAAnB,CAAyB,CAAzB,EAA4B,KAAKf,QAAjC,CAArB;;;;;;;;;;;;;;;;AAGF;;;;;;;;;;;kGAOiBgB,O;;;;;;;oBACVA,OAAO,CAACC,M;;;;;kDACJ,K;;;oBAGJ,KAAKA,M;;;;;kDACD,I;;;;uBAGapB,IAAI,CAACmB,OAAD,EAAU,UAACd,MAAD;AAAA,yBAAYN,KAAK,CAACW,aAAN,CAAoBL,MAApB,CAAZ;AAAA,iBAAV,C;;;AAApBgB,gBAAAA,O;AAEAC,gBAAAA,gB,GAAmB,KAAKlB,aAAL,CAAmB,KAAKA,aAAL,CAAmBgB,MAAnB,GAA4B,CAA/C,EAAkDvB,Q;uDACtDwB,O;;;;;;;;;;;AAAVV,gBAAAA,M;AACHY,gBAAAA,W,GAAc1B,QAAQ,CAAC,KAAKK,YAAN,EAAoBS,MAApB,C;;sBACxBd,QAAQ,CAACoB,OAAT,CAAiBM,WAAjB,EAA8BD,gBAA9B,IAAkD,C;;;;;kDAC7C,I;;;;;;;;;;;;;;;;;;;;;;;;kDAGJ,K;;;;;;;;;;;;;;;;;;wBA1DK;AACZ,aAAO,KAAKlB,aAAL,CAAmBgB,MAA1B;AACD;AAED;;;;;;wBAGa;AACX,aAAO,KAAKhB,aAAL,CAAmBoB,GAAnB,CAAuB,UAAAjB,EAAE;AAAA,eAAIA,EAAE,CAACF,MAAP;AAAA,OAAzB,CAAP;AACD;;;;;;AAqDHoB,MAAM,CAACC,OAAP,GAAiBzB,gBAAjB","sourcesContent":["'use strict'\n\nconst distance = require('xor-distance')\nconst utils = require('../utils')\nconst pMap = require('p-map')\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nclass PeerDistanceList {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Buffer} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  constructor (originDhtKey, capacity) {\n    this.originDhtKey = originDhtKey\n    this.capacity = capacity\n    this.peerDistances = []\n  }\n\n  /**\n   * The length of the list\n   */\n  get length () {\n    return this.peerDistances.length\n  }\n\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n  get peers () {\n    return this.peerDistances.map(pd => pd.peerId)\n  }\n\n  /**\n   * Add a peerId to the list.\n   *\n   * @param {PeerId} peerId\n   * @returns {Promise<void>}\n   */\n  async add (peerId) {\n    if (this.peerDistances.find(pd => pd.peerId.id.equals(peerId.id))) {\n      return\n    }\n\n    const dhtKey = await utils.convertPeerId(peerId)\n    const el = {\n      peerId,\n      distance: distance(this.originDhtKey, dhtKey)\n    }\n\n    this.peerDistances.push(el)\n    this.peerDistances.sort((a, b) => distance.compare(a.distance, b.distance))\n    this.peerDistances = this.peerDistances.slice(0, this.capacity)\n  }\n\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   *\n   * @param {Array<PeerId>} peerIds\n   * @returns {Boolean}\n   */\n  async anyCloser (peerIds) {\n    if (!peerIds.length) {\n      return false\n    }\n\n    if (!this.length) {\n      return true\n    }\n\n    const dhtKeys = await pMap(peerIds, (peerId) => utils.convertPeerId(peerId))\n\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance\n    for (const dhtKey of dhtKeys) {\n      const keyDistance = distance(this.originDhtKey, dhtKey)\n      if (distance.compare(keyDistance, furthestDistance) < 0) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nmodule.exports = PeerDistanceList\n"]},"metadata":{},"sourceType":"script"}