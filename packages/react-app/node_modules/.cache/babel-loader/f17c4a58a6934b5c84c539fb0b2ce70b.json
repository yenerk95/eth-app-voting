{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('p-queue'),\n    PQueue = _require.default;\n\nvar HTTP = require('ipfs-utils/src/http');\n\nvar debug = require('debug');\n\nvar log = debug('ipfs:preload');\nlog.error = debug('ipfs:preload:error'); // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nvar httpQueue = new PQueue({\n  concurrency: 4\n});\n\nmodule.exports = function preload(url, options) {\n  log(url);\n  options = options || {};\n  return httpQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, reader, _yield$reader$read, done;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return HTTP.get(url, {\n              signal: options.signal\n            });\n\n          case 2:\n            res = _context.sent;\n            reader = res.body.getReader();\n            _context.prev = 4;\n\n          case 5:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 8;\n            return reader.read();\n\n          case 8:\n            _yield$reader$read = _context.sent;\n            done = _yield$reader$read.done;\n\n            if (!done) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 12:\n            _context.next = 5;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            reader.releaseLock();\n            return _context.finish(14);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4,, 14, 17]]);\n  })));\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/runtime/preload-browser.js"],"names":["require","PQueue","default","HTTP","debug","log","error","httpQueue","concurrency","module","exports","preload","url","options","add","get","signal","res","reader","body","getReader","read","done","releaseLock"],"mappings":"AAAA;AACA;;;;;;eAE4BA,OAAO,CAAC,SAAD,C;IAAlBC,M,YAATC,O;;AACR,IAAMC,IAAI,GAAGH,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMK,GAAG,GAAGD,KAAK,CAAC,cAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,oBAAD,CAAjB,C,CAEA;AACA;;AACA,IAAMG,SAAS,GAAG,IAAIN,MAAJ,CAAW;AAAEO,EAAAA,WAAW,EAAE;AAAf,CAAX,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC/CR,EAAAA,GAAG,CAACO,GAAD,CAAH;AACAC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAON,SAAS,CAACO,GAAV,wEAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDX,IAAI,CAACY,GAAL,CAASH,GAAT,EAAc;AAAEI,cAAAA,MAAM,EAAEH,OAAO,CAACG;AAAlB,aAAd,CADC;;AAAA;AACbC,YAAAA,GADa;AAEbC,YAAAA,MAFa,GAEJD,GAAG,CAACE,IAAJ,CAASC,SAAT,EAFI;AAAA;;AAAA;AAAA,iBAKV,IALU;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMQF,MAAM,CAACG,IAAP,EANR;;AAAA;AAAA;AAMPC,YAAAA,IANO,sBAMPA,IANO;;AAAA,iBAOXA,IAPW;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAWjBJ,YAAAA,MAAM,CAACK,WAAP;AAXiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd,GAAP;AAcD,CAlBD","sourcesContent":["/* eslint-env browser */\n'use strict'\n\nconst { default: PQueue } = require('p-queue')\nconst HTTP = require('ipfs-utils/src/http')\nconst debug = require('debug')\n\nconst log = debug('ipfs:preload')\nlog.error = debug('ipfs:preload:error')\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new PQueue({ concurrency: 4 })\n\nmodule.exports = function preload (url, options) {\n  log(url)\n  options = options || {}\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.get(url, { signal: options.signal })\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}