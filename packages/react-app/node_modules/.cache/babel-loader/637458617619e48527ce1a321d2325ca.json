{"ast":null,"code":"'use strict';\n\nconst Reader = require('it-reader');\n\nconst Writer = require('it-pushable');\n\nconst defer = require('p-defer'); // Convert a duplex stream into a reader and writer and rest stream\n\n\nmodule.exports = stream => {\n  const writer = Writer(); // Write bytes on demand to the sink\n\n  const reader = Reader(stream.source); // Read bytes on demand from the source\n  // Waits for a source to be passed to the rest stream's sink\n\n  const sourcePromise = defer();\n  const sinkPromise = stream.sink(async function* () {\n    yield* writer;\n    const source = await sourcePromise.promise;\n    yield* source;\n  }());\n  const rest = {\n    sink: source => {\n      sourcePromise.resolve(source);\n      return sinkPromise;\n    },\n    source: reader\n  };\n  return {\n    reader,\n    writer,\n    stream: rest,\n    rest: () => writer.end(),\n    write: writer.push,\n    read: async () => {\n      return (await reader.next()).value;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-handshake/src/index.js"],"names":["Reader","require","Writer","defer","module","exports","stream","writer","reader","source","sourcePromise","sinkPromise","sink","promise","rest","resolve","end","write","push","read","next","value"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB,C,CAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;AACzB,QAAMC,MAAM,GAAGL,MAAM,EAArB,CADyB,CACD;;AACxB,QAAMM,MAAM,GAAGR,MAAM,CAACM,MAAM,CAACG,MAAR,CAArB,CAFyB,CAEY;AAErC;;AACA,QAAMC,aAAa,GAAGP,KAAK,EAA3B;AAEA,QAAMQ,WAAW,GAAGL,MAAM,CAACM,IAAP,CAAa,mBAAoB;AACnD,WAAQL,MAAR;AACA,UAAME,MAAM,GAAG,MAAMC,aAAa,CAACG,OAAnC;AACA,WAAQJ,MAAR;AACD,GAJ+B,EAAZ,CAApB;AAMA,QAAMK,IAAI,GAAG;AACXF,IAAAA,IAAI,EAAEH,MAAM,IAAI;AACdC,MAAAA,aAAa,CAACK,OAAd,CAAsBN,MAAtB;AACA,aAAOE,WAAP;AACD,KAJU;AAKXF,IAAAA,MAAM,EAAED;AALG,GAAb;AAQA,SAAO;AACLA,IAAAA,MADK;AAELD,IAAAA,MAFK;AAGLD,IAAAA,MAAM,EAAEQ,IAHH;AAILA,IAAAA,IAAI,EAAE,MAAMP,MAAM,CAACS,GAAP,EAJP;AAKLC,IAAAA,KAAK,EAAEV,MAAM,CAACW,IALT;AAMLC,IAAAA,IAAI,EAAE,YAAY;AAChB,aAAO,CAAC,MAAMX,MAAM,CAACY,IAAP,EAAP,EAAsBC,KAA7B;AACD;AARI,GAAP;AAUD,CA/BD","sourcesContent":["'use strict'\n\nconst Reader = require('it-reader')\nconst Writer = require('it-pushable')\nconst defer = require('p-defer')\n\n// Convert a duplex stream into a reader and writer and rest stream\nmodule.exports = stream => {\n  const writer = Writer() // Write bytes on demand to the sink\n  const reader = Reader(stream.source) // Read bytes on demand from the source\n\n  // Waits for a source to be passed to the rest stream's sink\n  const sourcePromise = defer()\n\n  const sinkPromise = stream.sink((async function * () {\n    yield * writer\n    const source = await sourcePromise.promise\n    yield * source\n  })())\n\n  const rest = {\n    sink: source => {\n      sourcePromise.resolve(source)\n      return sinkPromise\n    },\n    source: reader\n  }\n\n  return {\n    reader,\n    writer,\n    stream: rest,\n    rest: () => writer.end(),\n    write: writer.push,\n    read: async () => {\n      return (await reader.next()).value\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}