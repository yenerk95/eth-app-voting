{"ast":null,"code":"const {\n  Buffer\n} = require('buffer');\n\nconst {\n  EventIterator\n} = require('event-iterator'); // copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\n\n\nfunction isArrayBuffer(obj) {\n  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';\n}\n\nmodule.exports = socket => {\n  const removeListener = socket.removeEventListener || socket.removeListener;\n\n  const source = async function* () {\n    const messages = new EventIterator((push, stop, fail) => {\n      socket.addEventListener('message', push);\n      socket.addEventListener('error', fail);\n      socket.addEventListener('close', stop);\n    }, (push, stop, fail) => {\n      removeListener.call(socket, 'message', push);\n      removeListener.call(socket, 'error', fail);\n      removeListener.call(socket, 'close', stop);\n    }, {\n      highWaterMark: Infinity\n    });\n\n    for await (const {\n      data\n    } of messages) {\n      yield isArrayBuffer(data) ? Buffer.from(data) : data;\n    }\n  }();\n\n  let connected = socket.readyState === 1;\n  let connError;\n  socket.addEventListener('open', () => {\n    connected = true;\n    connError = null;\n  });\n  socket.addEventListener('close', () => {\n    connected = false;\n    connError = null;\n  });\n  socket.addEventListener('error', err => {\n    if (!connected) connError = err;\n  });\n\n  source.connected = () => new Promise((resolve, reject) => {\n    if (connected) return resolve();\n    if (connError) return reject(connError);\n\n    const cleanUp = cont => {\n      removeListener.call(socket, 'open', onOpen);\n      removeListener.call(socket, 'error', onError);\n      cont();\n    };\n\n    const onOpen = () => cleanUp(resolve);\n\n    const onError = err => cleanUp(() => reject(err));\n\n    socket.addEventListener('open', onOpen);\n    socket.addEventListener('error', onError);\n  });\n\n  return source;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/it-ws/source.js"],"names":["Buffer","require","EventIterator","isArrayBuffer","obj","ArrayBuffer","constructor","name","byteLength","module","exports","socket","removeListener","removeEventListener","source","messages","push","stop","fail","addEventListener","call","highWaterMark","Infinity","data","from","connected","readyState","connError","err","Promise","resolve","reject","cleanUp","cont","onOpen","onError"],"mappings":"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","sourcesContent":["const { Buffer } = require('buffer')\nconst { EventIterator } = require('event-iterator')\n\n// copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\nmodule.exports = socket => {\n  const removeListener = socket.removeEventListener || socket.removeListener\n\n  const source = (async function * () {\n    const messages = new EventIterator(\n      (push, stop, fail) => {\n        socket.addEventListener('message', push)\n        socket.addEventListener('error', fail)\n        socket.addEventListener('close', stop)\n      },\n      (push, stop, fail) => {\n        removeListener.call(socket, 'message', push)\n        removeListener.call(socket, 'error', fail)\n        removeListener.call(socket, 'close', stop)\n      },\n      { highWaterMark: Infinity }\n    )\n\n    for await (const { data } of messages) {\n      yield isArrayBuffer(data) ? Buffer.from(data) : data\n    }\n  })()\n\n  let connected = socket.readyState === 1\n  let connError\n\n  socket.addEventListener('open', () => {\n    connected = true\n    connError = null\n  })\n\n  socket.addEventListener('close', () => {\n    connected = false\n    connError = null\n  })\n\n  socket.addEventListener('error', err => {\n    if (!connected) connError = err\n  })\n\n  source.connected = () => new Promise((resolve, reject) => {\n    if (connected) return resolve()\n    if (connError) return reject(connError)\n\n    const cleanUp = cont => {\n      removeListener.call(socket, 'open', onOpen)\n      removeListener.call(socket, 'error', onError)\n      cont()\n    }\n\n    const onOpen = () => cleanUp(resolve)\n    const onError = err => cleanUp(() => reject(err))\n\n    socket.addEventListener('open', onOpen)\n    socket.addEventListener('error', onError)\n  })\n\n  return source\n}\n"]},"metadata":{},"sourceType":"script"}