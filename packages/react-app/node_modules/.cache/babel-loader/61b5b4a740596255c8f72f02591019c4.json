{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar protons = require('protons');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar pb = protons(require('./record.proto')).Record;\n\nvar utils = require('./utils');\n\nvar Record = /*#__PURE__*/function () {\n  /**\n   * @param {Buffer} [key]\n   * @param {Buffer} [value]\n   * @param {Date} [recvtime]\n   */\n  function Record(key, value, recvtime) {\n    _classCallCheck(this, Record);\n\n    if (key && !Buffer.isBuffer(key)) {\n      throw new Error('key must be a Buffer');\n    }\n\n    if (value && !Buffer.isBuffer(value)) {\n      throw new Error('value must be a buffer');\n    }\n\n    this.key = key;\n    this.value = value;\n    this.timeReceived = recvtime;\n  }\n  /**\n   * @returns {Buffer}\n   */\n\n\n  _createClass(Record, [{\n    key: \"serialize\",\n    value: function serialize() {\n      return pb.encode(this.prepareSerialize());\n    }\n    /**\n     * Return the object format ready to be given to the protobuf library.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"prepareSerialize\",\n    value: function prepareSerialize() {\n      return {\n        key: this.key,\n        value: this.value,\n        timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n      };\n    }\n    /**\n     * Decode a protobuf encoded record.\n     *\n     * @param {Buffer} raw\n     * @returns {Record}\n     */\n\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(raw) {\n      var dec = pb.decode(raw);\n      return Record.fromDeserialized(dec);\n    }\n    /**\n     * Create a record from the raw object returned from the protobuf library.\n     *\n     * @param {Object} obj\n     * @returns {Record}\n     */\n\n  }, {\n    key: \"fromDeserialized\",\n    value: function fromDeserialized(obj) {\n      var recvtime;\n\n      if (obj.timeReceived) {\n        recvtime = utils.parseRFC3339(obj.timeReceived);\n      }\n\n      var rec = new Record(obj.key, obj.value, recvtime);\n      return rec;\n    }\n  }]);\n\n  return Record;\n}();\n\nmodule.exports = Record;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-record/src/record.js"],"names":["protons","require","Buffer","pb","Record","utils","key","value","recvtime","isBuffer","Error","timeReceived","encode","prepareSerialize","toRFC3339","raw","dec","decode","fromDeserialized","obj","parseRFC3339","rec","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;eACmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,EAAE,GAAGH,OAAO,CAACC,OAAO,CAAC,gBAAD,CAAR,CAAP,CAAmCG,MAA9C;;AACA,IAAMC,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAArB;;IAEMG,M;AACJ;;;;;AAKA,kBAAaE,GAAb,EAAkBC,KAAlB,EAAyBC,QAAzB,EAAmC;AAAA;;AACjC,QAAIF,GAAG,IAAI,CAACJ,MAAM,CAACO,QAAP,CAAgBH,GAAhB,CAAZ,EAAkC;AAChC,YAAM,IAAII,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAIH,KAAK,IAAI,CAACL,MAAM,CAACO,QAAP,CAAgBF,KAAhB,CAAd,EAAsC;AACpC,YAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,SAAKJ,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKI,YAAL,GAAoBH,QAApB;AACD;AAED;;;;;;;gCAGa;AACX,aAAOL,EAAE,CAACS,MAAH,CAAU,KAAKC,gBAAL,EAAV,CAAP;AACD;AAED;;;;;;;;uCAKoB;AAClB,aAAO;AACLP,QAAAA,GAAG,EAAE,KAAKA,GADL;AAELC,QAAAA,KAAK,EAAE,KAAKA,KAFP;AAGLI,QAAAA,YAAY,EAAE,KAAKA,YAAL,IAAqBN,KAAK,CAACS,SAAN,CAAgB,KAAKH,YAArB;AAH9B,OAAP;AAKD;AAED;;;;;;;;;gCAMoBI,G,EAAK;AACvB,UAAMC,GAAG,GAAGb,EAAE,CAACc,MAAH,CAAUF,GAAV,CAAZ;AACA,aAAOX,MAAM,CAACc,gBAAP,CAAwBF,GAAxB,CAAP;AACD;AAED;;;;;;;;;qCAMyBG,G,EAAK;AAC5B,UAAIX,QAAJ;;AACA,UAAIW,GAAG,CAACR,YAAR,EAAsB;AACpBH,QAAAA,QAAQ,GAAGH,KAAK,CAACe,YAAN,CAAmBD,GAAG,CAACR,YAAvB,CAAX;AACD;;AAED,UAAMU,GAAG,GAAG,IAAIjB,MAAJ,CACVe,GAAG,CAACb,GADM,EACDa,GAAG,CAACZ,KADH,EACUC,QADV,CAAZ;AAIA,aAAOa,GAAP;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBnB,MAAjB","sourcesContent":["'use strict'\n\nconst protons = require('protons')\nconst { Buffer } = require('buffer')\nconst pb = protons(require('./record.proto')).Record\nconst utils = require('./utils')\n\nclass Record {\n  /**\n   * @param {Buffer} [key]\n   * @param {Buffer} [value]\n   * @param {Date} [recvtime]\n   */\n  constructor (key, value, recvtime) {\n    if (key && !Buffer.isBuffer(key)) {\n      throw new Error('key must be a Buffer')\n    }\n\n    if (value && !Buffer.isBuffer(value)) {\n      throw new Error('value must be a buffer')\n    }\n\n    this.key = key\n    this.value = value\n    this.timeReceived = recvtime\n  }\n\n  /**\n   * @returns {Buffer}\n   */\n  serialize () {\n    return pb.encode(this.prepareSerialize())\n  }\n\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   *\n   * @returns {Object}\n   */\n  prepareSerialize () {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    }\n  }\n\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Buffer} raw\n   * @returns {Record}\n   */\n  static deserialize (raw) {\n    const dec = pb.decode(raw)\n    return Record.fromDeserialized(dec)\n  }\n\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {Object} obj\n   * @returns {Record}\n   */\n  static fromDeserialized (obj) {\n    let recvtime\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived)\n    }\n\n    const rec = new Record(\n      obj.key, obj.value, recvtime\n    )\n\n    return rec\n  }\n}\n\nmodule.exports = Record\n"]},"metadata":{},"sourceType":"script"}