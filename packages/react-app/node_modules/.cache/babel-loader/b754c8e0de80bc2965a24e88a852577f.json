{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar CID = require('cids');\n\nvar withIs = require('class-is');\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @constructor\n * @param {Buffer} data - The data to be stored in the block as a buffer.\n * @param {CID} cid - The cid of the data\n *\n * @example\n * const block = new Block(new Buffer('a012d83b20f9371...'))\n */\n\n\nvar Block = /*#__PURE__*/function () {\n  function Block(data, cid) {\n    _classCallCheck(this, Block);\n\n    if (!data || !ArrayBuffer.isView(data)) {\n      throw new Error('first argument  must be a buffer or typed array');\n    } else if (!Buffer.isBuffer(data)) {\n      data = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n\n    this._data = data;\n    this._cid = cid;\n  }\n  /**\n   * The data of this block.\n   *\n   * @type {Buffer}\n   */\n\n\n  _createClass(Block, [{\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    },\n    set: function set(val) {\n      throw new Error('Tried to change an immutable block');\n    }\n    /**\n     * The cid of the data this block represents.\n     *\n     * @type {CID}\n     */\n\n  }, {\n    key: \"cid\",\n    get: function get() {\n      return this._cid;\n    },\n    set: function set(val) {\n      throw new Error('Tried to change an immutable block');\n    }\n  }]);\n\n  return Block;\n}();\n\nmodule.exports = withIs(Block, {\n  className: 'Block',\n  symbolName: '@ipld/js-ipld-block/block'\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipld-block/src/index.js"],"names":["require","Buffer","CID","withIs","Block","data","cid","ArrayBuffer","isView","Error","isBuffer","from","buffer","byteOffset","byteLength","isCID","_data","_cid","val","module","exports","className","symbolName"],"mappings":"AAAA;;;;;;eAEmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;AAEA;;;;;;;;;;;;IAUMI,K;AACJ,iBAAaC,IAAb,EAAmBC,GAAnB,EAAwB;AAAA;;AACtB,QAAI,CAACD,IAAD,IAAS,CAACE,WAAW,CAACC,MAAZ,CAAmBH,IAAnB,CAAd,EAAwC;AACtC,YAAM,IAAII,KAAJ,CAAU,iDAAV,CAAN;AACD,KAFD,MAEO,IAAI,CAACR,MAAM,CAACS,QAAP,CAAgBL,IAAhB,CAAL,EAA4B;AACjCA,MAAAA,IAAI,GAAGJ,MAAM,CAACU,IAAP,CAAYN,IAAI,CAACO,MAAjB,EAAyBP,IAAI,CAACQ,UAA9B,EAA0CR,IAAI,CAACS,UAA/C,CAAP;AACD;;AAED,QAAI,CAACR,GAAD,IAAQ,CAACJ,GAAG,CAACa,KAAJ,CAAUT,GAAV,CAAb,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,SAAKO,KAAL,GAAaX,IAAb;AACA,SAAKY,IAAL,GAAYX,GAAZ;AACD;AAED;;;;;;;;;wBAKY;AACV,aAAO,KAAKU,KAAZ;AACD,K;sBAESE,G,EAAK;AACb,YAAM,IAAIT,KAAJ,CAAU,oCAAV,CAAN;AACD;AAED;;;;;;;;wBAKW;AACT,aAAO,KAAKQ,IAAZ;AACD,K;sBAEQC,G,EAAK;AACZ,YAAM,IAAIT,KAAJ,CAAU,oCAAV,CAAN;AACD;;;;;;AAGHU,MAAM,CAACC,OAAP,GAAiBjB,MAAM,CAACC,KAAD,EAAQ;AAAEiB,EAAAA,SAAS,EAAE,OAAb;AAAsBC,EAAAA,UAAU,EAAE;AAAlC,CAAR,CAAvB","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst CID = require('cids')\nconst withIs = require('class-is')\n\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @constructor\n * @param {Buffer} data - The data to be stored in the block as a buffer.\n * @param {CID} cid - The cid of the data\n *\n * @example\n * const block = new Block(new Buffer('a012d83b20f9371...'))\n */\nclass Block {\n  constructor (data, cid) {\n    if (!data || !ArrayBuffer.isView(data)) {\n      throw new Error('first argument  must be a buffer or typed array')\n    } else if (!Buffer.isBuffer(data)) {\n      data = Buffer.from(data.buffer, data.byteOffset, data.byteLength)\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID')\n    }\n\n    this._data = data\n    this._cid = cid\n  }\n\n  /**\n   * The data of this block.\n   *\n   * @type {Buffer}\n   */\n  get data () {\n    return this._data\n  }\n\n  set data (val) {\n    throw new Error('Tried to change an immutable block')\n  }\n\n  /**\n   * The cid of the data this block represents.\n   *\n   * @type {CID}\n   */\n  get cid () {\n    return this._cid\n  }\n\n  set cid (val) {\n    throw new Error('Tried to change an immutable block')\n  }\n}\n\nmodule.exports = withIs(Block, { className: 'Block', symbolName: '@ipld/js-ipld-block/block' })\n"]},"metadata":{},"sourceType":"script"}