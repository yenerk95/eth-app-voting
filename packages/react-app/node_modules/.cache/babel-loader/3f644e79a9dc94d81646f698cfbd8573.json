{"ast":null,"code":"'use strict';\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst CID = require('cids');\n\nconst multibase = require('multibase');\n\nconst errcode = require('err-code');\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\n\n\nexports.cidToKey = cid => {\n  if (!CID.isCID(cid)) {\n    throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n\n  return new Key('/' + multibase.encode('base32', cid.buffer).toString().slice(1).toUpperCase(), false);\n};\n/**\n * Transform a datastore Key instance to a CID\n *\n * @param {Key} key\n * @returns {CID}\n */\n\n\nexports.keyToCid = key => {\n  return new CID(multibase.decode('b' + key.toString().slice(1).toLowerCase()));\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo/src/blockstore-utils.js"],"names":["Key","require","CID","multibase","errcode","exports","cidToKey","cid","isCID","Error","encode","buffer","toString","slice","toUpperCase","keyToCid","key","decode","toLowerCase"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;AAEA;;;;;;;;AAMAI,OAAO,CAACC,QAAR,GAAmBC,GAAG,IAAI;AACxB,MAAI,CAACL,GAAG,CAACM,KAAJ,CAAUD,GAAV,CAAL,EAAqB;AACnB,UAAMH,OAAO,CAAC,IAAIK,KAAJ,CAAU,iBAAV,CAAD,EAA+B,iBAA/B,CAAb;AACD;;AAED,SAAO,IAAIT,GAAJ,CAAQ,MAAMG,SAAS,CAACO,MAAV,CAAiB,QAAjB,EAA2BH,GAAG,CAACI,MAA/B,EAAuCC,QAAvC,GAAkDC,KAAlD,CAAwD,CAAxD,EAA2DC,WAA3D,EAAd,EAAwF,KAAxF,CAAP;AACD,CAND;AAQA;;;;;;;;AAMAT,OAAO,CAACU,QAAR,GAAmBC,GAAG,IAAI;AACxB,SAAO,IAAId,GAAJ,CAAQC,SAAS,CAACc,MAAV,CAAiB,MAAMD,GAAG,CAACJ,QAAJ,GAAeC,KAAf,CAAqB,CAArB,EAAwBK,WAAxB,EAAvB,CAAR,CAAP;AACD,CAFD","sourcesContent":["'use strict'\n\nconst { Key } = require('interface-datastore')\nconst CID = require('cids')\nconst multibase = require('multibase')\nconst errcode = require('err-code')\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\nexports.cidToKey = cid => {\n  if (!CID.isCID(cid)) {\n    throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  return new Key('/' + multibase.encode('base32', cid.buffer).toString().slice(1).toUpperCase(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n *\n * @param {Key} key\n * @returns {CID}\n */\nexports.keyToCid = key => {\n  return new CID(multibase.decode('b' + key.toString().slice(1).toLowerCase()))\n}\n"]},"metadata":{},"sourceType":"script"}