{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar debug = require('debug');\n\nvar _require = require('../utils/cid'),\n    cidToString = _require.cidToString;\n\nvar log = debug('ipfs:mfs-preload');\nlog.error = debug('ipfs:mfs-preload:error');\n\nmodule.exports = function (_ref) {\n  var preload = _ref.preload,\n      files = _ref.files,\n      options = _ref.options;\n  options = options || {};\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    var noop = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function noop() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  var rootCid, timeoutId;\n\n  var preloadMfs = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var stats, nextRootCid;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return files.stat('/');\n\n            case 3:\n              stats = _context2.sent;\n              nextRootCid = cidToString(stats.cid, {\n                base: 'base32'\n              });\n\n              if (!(rootCid !== nextRootCid)) {\n                _context2.next = 10;\n                break;\n              }\n\n              log(\"preloading updated MFS root \".concat(rootCid, \" -> \").concat(stats.cid));\n              _context2.next = 9;\n              return preload(stats.cid);\n\n            case 9:\n              rootCid = nextRootCid;\n\n            case 10:\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](0);\n              log.error('failed to preload MFS root', _context2.t0);\n\n            case 15:\n              _context2.prev = 15;\n              timeoutId = setTimeout(preloadMfs, options.interval);\n              return _context2.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 12, 15, 18]]);\n    }));\n\n    return function preloadMfs() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    start: function start() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var stats;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return files.stat('/');\n\n              case 2:\n                stats = _context3.sent;\n                rootCid = cidToString(stats.cid, {\n                  base: 'base32'\n                });\n                log(\"monitoring MFS root \".concat(stats.cid));\n                timeoutId = setTimeout(preloadMfs, options.interval);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    stop: function stop() {\n      clearTimeout(timeoutId);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/mfs-preload.js"],"names":["debug","require","cidToString","log","error","module","exports","preload","files","options","interval","enabled","noop","start","stop","rootCid","timeoutId","preloadMfs","stat","stats","nextRootCid","cid","base","setTimeout","clearTimeout"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;eACwBA,OAAO,CAAC,cAAD,C;IAAvBC,W,YAAAA,W;;AACR,IAAMC,GAAG,GAAGH,KAAK,CAAC,kBAAD,CAAjB;AACAG,GAAG,CAACC,KAAJ,GAAYJ,KAAK,CAAC,wBAAD,CAAjB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,gBAAiC;AAAA,MAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,MAArBC,KAAqB,QAArBA,KAAqB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAChDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,IAAoB,KAAK,IAA5C;;AAEA,MAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;AACpBR,IAAAA,GAAG,CAAC,sBAAD,CAAH;;AACA,QAAMS,IAAI;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAJA,IAAI;AAAA;AAAA;AAAA,OAAV;;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAED,IAAT;AAAeE,MAAAA,IAAI,EAAEF;AAArB,KAAP;AACD;;AAED,MAAIG,OAAJ,EAAaC,SAAb;;AAEA,MAAMC,UAAU;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEKT,KAAK,CAACU,IAAN,CAAW,GAAX,CAFL;;AAAA;AAETC,cAAAA,KAFS;AAGTC,cAAAA,WAHS,GAGKlB,WAAW,CAACiB,KAAK,CAACE,GAAP,EAAY;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAAZ,CAHhB;;AAAA,oBAKXP,OAAO,KAAKK,WALD;AAAA;AAAA;AAAA;;AAMbjB,cAAAA,GAAG,uCAAgCY,OAAhC,iBAA8CI,KAAK,CAACE,GAApD,EAAH;AANa;AAAA,qBAOPd,OAAO,CAACY,KAAK,CAACE,GAAP,CAPA;;AAAA;AAQbN,cAAAA,OAAO,GAAGK,WAAV;;AARa;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWfjB,cAAAA,GAAG,CAACC,KAAJ,CAAU,4BAAV;;AAXe;AAAA;AAafY,cAAAA,SAAS,GAAGO,UAAU,CAACN,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AAbe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVO,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAiBA,SAAO;AACCJ,IAAAA,KADD,mBACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACOL,KAAK,CAACU,IAAN,CAAW,GAAX,CADP;;AAAA;AACPC,gBAAAA,KADO;AAEbJ,gBAAAA,OAAO,GAAGb,WAAW,CAACiB,KAAK,CAACE,GAAP,EAAY;AAAEC,kBAAAA,IAAI,EAAE;AAAR,iBAAZ,CAArB;AACAnB,gBAAAA,GAAG,+BAAwBgB,KAAK,CAACE,GAA9B,EAAH;AACAL,gBAAAA,SAAS,GAAGO,UAAU,CAACN,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;;AAJa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKd,KANI;AAOLI,IAAAA,IAPK,kBAOG;AACNU,MAAAA,YAAY,CAACR,SAAD,CAAZ;AACD;AATI,GAAP;AAWD,CAxCD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst { cidToString } = require('../utils/cid')\nconst log = debug('ipfs:mfs-preload')\nlog.error = debug('ipfs:mfs-preload:error')\n\nmodule.exports = ({ preload, files, options }) => {\n  options = options || {}\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid, timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = cidToString(stats.cid, { base: 'base32' })\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = cidToString(stats.cid, { base: 'base32' })\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}