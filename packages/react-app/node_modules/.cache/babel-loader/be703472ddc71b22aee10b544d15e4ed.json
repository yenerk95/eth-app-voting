{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar errCode = require('err-code');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nfunction normalizeMultihash(multihash, enc) {\n  if (typeof multihash === 'string') {\n    if (enc === 'base58' || !enc) {\n      return multihash;\n    }\n\n    return Buffer.from(multihash, enc);\n  } else if (Buffer.isBuffer(multihash)) {\n    return multihash;\n  } else if (CID.isCID(multihash)) {\n    return multihash.buffer;\n  }\n\n  throw new Error('unsupported multihash');\n}\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(multihash, options) {\n      var mh, cid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              options = options || {};\n              _context.prev = 1;\n              mh = normalizeMultihash(multihash, options.enc);\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](1);\n              throw errCode(_context.t0, 'ERR_INVALID_MULTIHASH');\n\n            case 8:\n              _context.prev = 8;\n              cid = new CID(mh);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t1 = _context[\"catch\"](8);\n              throw errCode(_context.t1, 'ERR_INVALID_CID');\n\n            case 15:\n              if (options.cidVersion === 1) {\n                cid = cid.toV1();\n              }\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", ipld.get(cid, {\n                signal: options.signal\n              }));\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 5], [8, 12]]);\n    }));\n\n    function get(_x, _x2) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/object/get.js"],"names":["CID","require","errCode","Buffer","withTimeoutOption","normalizeMultihash","multihash","enc","from","isBuffer","isCID","buffer","Error","module","exports","ipld","preload","options","mh","cid","cidVersion","toV1","get","signal"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;eACmBA,OAAO,CAAC,QAAD,C;IAAlBE,M,YAAAA,M;;gBACsBF,OAAO,CAAC,aAAD,C;IAA7BG,iB,aAAAA,iB;;AAER,SAASC,kBAAT,CAA6BC,SAA7B,EAAwCC,GAAxC,EAA6C;AAC3C,MAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjC,QAAIC,GAAG,KAAK,QAAR,IAAoB,CAACA,GAAzB,EAA8B;AAC5B,aAAOD,SAAP;AACD;;AACD,WAAOH,MAAM,CAACK,IAAP,CAAYF,SAAZ,EAAuBC,GAAvB,CAAP;AACD,GALD,MAKO,IAAIJ,MAAM,CAACM,QAAP,CAAgBH,SAAhB,CAAJ,EAAgC;AACrC,WAAOA,SAAP;AACD,GAFM,MAEA,IAAIN,GAAG,CAACU,KAAJ,CAAUJ,SAAV,CAAJ,EAA0B;AAC/B,WAAOA,SAAS,CAACK,MAAjB;AACD;;AACD,QAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB,gBAAuB;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AACtC,SAAOZ,iBAAiB;AAAA,wEAAC,iBAAoBE,SAApB,EAA+BW,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACjEA,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AADuB;AAMrBC,cAAAA,EAAE,GAAGb,kBAAkB,CAACC,SAAD,EAAYW,OAAO,CAACV,GAApB,CAAvB;AANqB;AAAA;;AAAA;AAAA;AAAA;AAAA,oBAQfL,OAAO,cAAM,uBAAN,CARQ;;AAAA;AAAA;AAYrBiB,cAAAA,GAAG,GAAG,IAAInB,GAAJ,CAAQkB,EAAR,CAAN;AAZqB;AAAA;;AAAA;AAAA;AAAA;AAAA,oBAcfhB,OAAO,cAAM,iBAAN,CAdQ;;AAAA;AAiBvB,kBAAIe,OAAO,CAACG,UAAR,KAAuB,CAA3B,EAA8B;AAC5BD,gBAAAA,GAAG,GAAGA,GAAG,CAACE,IAAJ,EAAN;AACD;;AAED,kBAAIJ,OAAO,CAACD,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,gBAAAA,OAAO,CAACG,GAAD,CAAP;AACD;;AAvBsB,+CAyBhBJ,IAAI,CAACO,GAAL,CAASH,GAAT,EAAc;AAAEI,gBAAAA,MAAM,EAAEN,OAAO,CAACM;AAAlB,eAAd,CAzBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBD,GAAhB;AAAA;AAAA;;AAAA,WAAgBA,GAAhB;AAAA,MAAxB;AA2BD,CA5BD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst errCode = require('err-code')\nconst { Buffer } = require('buffer')\nconst { withTimeoutOption } = require('../../utils')\n\nfunction normalizeMultihash (multihash, enc) {\n  if (typeof multihash === 'string') {\n    if (enc === 'base58' || !enc) {\n      return multihash\n    }\n    return Buffer.from(multihash, enc)\n  } else if (Buffer.isBuffer(multihash)) {\n    return multihash\n  } else if (CID.isCID(multihash)) {\n    return multihash.buffer\n  }\n  throw new Error('unsupported multihash')\n}\n\nmodule.exports = ({ ipld, preload }) => {\n  return withTimeoutOption(async function get (multihash, options) { // eslint-disable-line require-await\n    options = options || {}\n\n    let mh, cid\n\n    try {\n      mh = normalizeMultihash(multihash, options.enc)\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_MULTIHASH')\n    }\n\n    try {\n      cid = new CID(mh)\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n\n    if (options.cidVersion === 1) {\n      cid = cid.toV1()\n    }\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return ipld.get(cid, { signal: options.signal })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}