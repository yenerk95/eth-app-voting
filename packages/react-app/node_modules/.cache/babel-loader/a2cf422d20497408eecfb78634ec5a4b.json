{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nconst {\n  default: PQueue\n} = require('p-queue');\n\nconst HTTP = require('ipfs-utils/src/http');\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:preload');\nlog.error = debug('ipfs:preload:error'); // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nconst httpQueue = new PQueue({\n  concurrency: 4\n});\n\nmodule.exports = function preload(url, options) {\n  log(url);\n  options = options || {};\n  return httpQueue.add(async () => {\n    const res = await HTTP.get(url, {\n      signal: options.signal\n    });\n    const reader = res.body.getReader();\n\n    try {\n      while (true) {\n        const {\n          done\n        } = await reader.read();\n        if (done) return; // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/runtime/preload-browser.js"],"names":["default","PQueue","require","HTTP","debug","log","error","httpQueue","concurrency","module","exports","preload","url","options","add","res","get","signal","reader","body","getReader","done","read","releaseLock"],"mappings":"AAAA;AACA;;AAEA,MAAM;AAAEA,EAAAA,OAAO,EAAEC;AAAX,IAAsBC,OAAO,CAAC,SAAD,CAAnC;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMG,GAAG,GAAGD,KAAK,CAAC,cAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,oBAAD,CAAjB,C,CAEA;AACA;;AACA,MAAMG,SAAS,GAAG,IAAIN,MAAJ,CAAW;AAAEO,EAAAA,WAAW,EAAE;AAAf,CAAX,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC/CR,EAAAA,GAAG,CAACO,GAAD,CAAH;AACAC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAON,SAAS,CAACO,GAAV,CAAc,YAAY;AAC/B,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAACa,GAAL,CAASJ,GAAT,EAAc;AAAEK,MAAAA,MAAM,EAAEJ,OAAO,CAACI;AAAlB,KAAd,CAAlB;AACA,UAAMC,MAAM,GAAGH,GAAG,CAACI,IAAJ,CAASC,SAAT,EAAf;;AAEA,QAAI;AACF,aAAO,IAAP,EAAa;AACX,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMH,MAAM,CAACI,IAAP,EAAvB;AACA,YAAID,IAAJ,EAAU,OAFC,CAGX;AACD;AACF,KAND,SAMU;AACRH,MAAAA,MAAM,CAACK,WAAP;AACD;AACF,GAbM,CAAP;AAcD,CAlBD","sourcesContent":["/* eslint-env browser */\n'use strict'\n\nconst { default: PQueue } = require('p-queue')\nconst HTTP = require('ipfs-utils/src/http')\nconst debug = require('debug')\n\nconst log = debug('ipfs:preload')\nlog.error = debug('ipfs:preload:error')\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new PQueue({ concurrency: 4 })\n\nmodule.exports = function preload (url, options) {\n  log(url)\n  options = options || {}\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.get(url, { signal: options.signal })\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}