{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events');\n\nvar Big = require('bignumber.js');\n\nvar MovingAverage = require('moving-average');\n\nvar retimer = require('retimer');\n/**\n * A queue based manager for stat processing\n *\n * @param {Array<string>} initialCounters\n * @param {any} options\n */\n\n\nvar Stats = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Stats, _EventEmitter);\n\n  var _super = _createSuper(Stats);\n\n  function Stats(initialCounters, options) {\n    var _this;\n\n    _classCallCheck(this, Stats);\n\n    _this = _super.call(this);\n    _this._options = options;\n    _this._queue = [];\n    _this._stats = {};\n    _this._frequencyLastTime = Date.now();\n    _this._frequencyAccumulators = {};\n    _this._movingAverages = {};\n    _this._update = _this._update.bind(_assertThisInitialized(_this));\n    var intervals = _this._options.movingAverageIntervals;\n\n    for (var i = 0; i < initialCounters.length; i++) {\n      var key = initialCounters[i];\n      _this._stats[key] = Big(0);\n      _this._movingAverages[key] = {};\n\n      for (var k = 0; k < intervals.length; k++) {\n        var interval = intervals[k];\n        var ma = _this._movingAverages[key][interval] = MovingAverage(interval);\n        ma.push(_this._frequencyLastTime, 0);\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Initializes the internal timer if there are items in the queue. This\n   * should only need to be called if `Stats.stop` was previously called, as\n   * `Stats.push` will also start the processing.\n   *\n   * @returns {void}\n   */\n\n\n  _createClass(Stats, [{\n    key: \"start\",\n    value: function start() {\n      if (this._queue.length) {\n        this._resetComputeTimeout();\n      }\n    }\n    /**\n     * Stops processing and computing of stats by clearing the internal\n     * timer.\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timeout) {\n        this._timeout.clear();\n\n        this._timeout = null;\n      }\n    }\n    /**\n     * Returns a clone of the current stats.\n     *\n     * @returns {Map<string, Stat>}\n     */\n\n  }, {\n    key: \"toJSON\",\n\n    /**\n     * Returns a plain JSON object of the stats\n     *\n     * @returns {*}\n     */\n    value: function toJSON() {\n      var snapshot = this.snapshot;\n      var movingAverages = this.movingAverages;\n      var data = {\n        dataReceived: snapshot.dataReceived.toString(),\n        dataSent: snapshot.dataSent.toString(),\n        movingAverages: {}\n      };\n      var counters = Object.keys(movingAverages);\n\n      for (var _i = 0, _counters = counters; _i < _counters.length; _i++) {\n        var key = _counters[_i];\n        data.movingAverages[key] = {};\n\n        for (var _i2 = 0, _Object$keys = Object.keys(movingAverages[key]); _i2 < _Object$keys.length; _i2++) {\n          var interval = _Object$keys[_i2];\n          data.movingAverages[key][interval] = movingAverages[key][interval].movingAverage();\n        }\n      }\n\n      return data;\n    }\n    /**\n     * Pushes the given operation data to the queue, along with the\n     * current Timestamp, then resets the update timer.\n     *\n     * @param {string} counter\n     * @param {number} inc\n     * @returns {void}\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(counter, inc) {\n      this._queue.push([counter, inc, Date.now()]);\n\n      this._resetComputeTimeout();\n    }\n    /**\n     * Resets the timeout for triggering updates.\n     *\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_resetComputeTimeout\",\n    value: function _resetComputeTimeout() {\n      if (this._timeout) {\n        this._timeout.reschedule(this._nextTimeout());\n      } else {\n        this._timeout = retimer(this._update, this._nextTimeout());\n      }\n    }\n    /**\n     * Calculates and returns the timeout for the next update based on\n     * the urgency of the update.\n     *\n     * @private\n     * @returns {number}\n     */\n\n  }, {\n    key: \"_nextTimeout\",\n    value: function _nextTimeout() {\n      // calculate the need for an update, depending on the queue length\n      var urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n      var timeout = Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n      return timeout;\n    }\n    /**\n     * If there are items in the queue, they will will be processed and\n     * the frequency for all items will be updated based on the Timestamp\n     * of the last item in the queue. The `update` event will also be emitted\n     * with the latest stats.\n     *\n     * If there are no items in the queue, no action is taken.\n     *\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._timeout = null;\n\n      if (this._queue.length) {\n        var last;\n\n        var _iterator = _createForOfIteratorHelper(this._queue),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            last = _step.value;\n\n            this._applyOp(last);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this._queue = [];\n\n        this._updateFrequency(last[2]); // contains timestamp of last op\n\n\n        this.emit('update', this._stats);\n      }\n    }\n    /**\n     * For each key in the stats, the frequency and moving averages\n     * will be updated via Stats._updateFrequencyFor based on the time\n     * difference between calls to this method.\n     *\n     * @private\n     * @param {Timestamp} latestTime\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_updateFrequency\",\n    value: function _updateFrequency(latestTime) {\n      var _this2 = this;\n\n      var timeDiff = latestTime - this._frequencyLastTime;\n      Object.keys(this._stats).forEach(function (key) {\n        _this2._updateFrequencyFor(key, timeDiff, latestTime);\n      });\n      this._frequencyLastTime = latestTime;\n    }\n    /**\n     * Updates the `movingAverages` for the given `key` and also\n     * resets the `frequencyAccumulator` for the `key`.\n     *\n     * @private\n     * @param {string} key\n     * @param {number} timeDiffMS Time in milliseconds\n     * @param {Timestamp} latestTime Time in ticks\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_updateFrequencyFor\",\n    value: function _updateFrequencyFor(key, timeDiffMS, latestTime) {\n      var count = this._frequencyAccumulators[key] || 0;\n      this._frequencyAccumulators[key] = 0; // if `timeDiff` is zero, `hz` becomes Infinity, so we fallback to 1ms\n\n      var safeTimeDiff = timeDiffMS || 1;\n      var hz = count / safeTimeDiff * 1000;\n      var movingAverages = this._movingAverages[key];\n\n      if (!movingAverages) {\n        movingAverages = this._movingAverages[key] = {};\n      }\n\n      var intervals = this._options.movingAverageIntervals;\n\n      for (var i = 0; i < intervals.length; i++) {\n        var movingAverageInterval = intervals[i];\n        var movingAverage = movingAverages[movingAverageInterval];\n\n        if (!movingAverage) {\n          movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);\n        }\n\n        movingAverage.push(latestTime, hz);\n      }\n    }\n    /**\n     * For the given operation, `op`, the stats and `frequencyAccumulator`\n     * will be updated or initialized if they don't already exist.\n     *\n     * @private\n     * @param {Array<string, number>} op\n     * @throws {InvalidNumber}\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_applyOp\",\n    value: function _applyOp(op) {\n      var key = op[0];\n      var inc = op[1];\n\n      if (typeof inc !== 'number') {\n        throw new Error('invalid increment number:', inc);\n      }\n\n      var n;\n\n      if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n        n = this._stats[key] = Big(0);\n      } else {\n        n = this._stats[key];\n      }\n\n      this._stats[key] = n.plus(inc);\n\n      if (!this._frequencyAccumulators[key]) {\n        this._frequencyAccumulators[key] = 0;\n      }\n\n      this._frequencyAccumulators[key] += inc;\n    }\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      return Object.assign({}, this._stats);\n    }\n    /**\n     * Returns a clone of the internal movingAverages\n     *\n     * @returns {Array<MovingAverage>}\n     */\n\n  }, {\n    key: \"movingAverages\",\n    get: function get() {\n      return Object.assign({}, this._movingAverages);\n    }\n  }]);\n\n  return Stats;\n}(EventEmitter);\n\nmodule.exports = Stats;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p/src/metrics/stats.js"],"names":["EventEmitter","require","Big","MovingAverage","retimer","Stats","initialCounters","options","_options","_queue","_stats","_frequencyLastTime","Date","now","_frequencyAccumulators","_movingAverages","_update","bind","intervals","movingAverageIntervals","i","length","key","k","interval","ma","push","_resetComputeTimeout","_timeout","clear","snapshot","movingAverages","data","dataReceived","toString","dataSent","counters","Object","keys","movingAverage","counter","inc","reschedule","_nextTimeout","urgency","computeThrottleMaxQueueSize","timeout","Math","max","computeThrottleTimeout","last","_applyOp","_updateFrequency","emit","latestTime","timeDiff","forEach","_updateFrequencyFor","timeDiffMS","count","safeTimeDiff","hz","movingAverageInterval","op","Error","n","prototype","hasOwnProperty","call","plus","assign","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events')\nconst Big = require('bignumber.js')\nconst MovingAverage = require('moving-average')\nconst retimer = require('retimer')\n\n/**\n * A queue based manager for stat processing\n *\n * @param {Array<string>} initialCounters\n * @param {any} options\n */\nclass Stats extends EventEmitter {\n  constructor (initialCounters, options) {\n    super()\n\n    this._options = options\n    this._queue = []\n    this._stats = {}\n\n    this._frequencyLastTime = Date.now()\n    this._frequencyAccumulators = {}\n    this._movingAverages = {}\n\n    this._update = this._update.bind(this)\n\n    const intervals = this._options.movingAverageIntervals\n\n    for (var i = 0; i < initialCounters.length; i++) {\n      var key = initialCounters[i]\n      this._stats[key] = Big(0)\n      this._movingAverages[key] = {}\n      for (var k = 0; k < intervals.length; k++) {\n        var interval = intervals[k]\n        var ma = this._movingAverages[key][interval] = MovingAverage(interval)\n        ma.push(this._frequencyLastTime, 0)\n      }\n    }\n  }\n\n  /**\n   * Initializes the internal timer if there are items in the queue. This\n   * should only need to be called if `Stats.stop` was previously called, as\n   * `Stats.push` will also start the processing.\n   *\n   * @returns {void}\n   */\n  start () {\n    if (this._queue.length) {\n      this._resetComputeTimeout()\n    }\n  }\n\n  /**\n   * Stops processing and computing of stats by clearing the internal\n   * timer.\n   *\n   * @returns {void}\n   */\n  stop () {\n    if (this._timeout) {\n      this._timeout.clear()\n      this._timeout = null\n    }\n  }\n\n  /**\n   * Returns a clone of the current stats.\n   *\n   * @returns {Map<string, Stat>}\n   */\n  get snapshot () {\n    return Object.assign({}, this._stats)\n  }\n\n  /**\n   * Returns a clone of the internal movingAverages\n   *\n   * @returns {Array<MovingAverage>}\n   */\n  get movingAverages () {\n    return Object.assign({}, this._movingAverages)\n  }\n\n  /**\n   * Returns a plain JSON object of the stats\n   *\n   * @returns {*}\n   */\n  toJSON () {\n    const snapshot = this.snapshot\n    const movingAverages = this.movingAverages\n    const data = {\n      dataReceived: snapshot.dataReceived.toString(),\n      dataSent: snapshot.dataSent.toString(),\n      movingAverages: {}\n    }\n\n    const counters = Object.keys(movingAverages)\n    for (const key of counters) {\n      data.movingAverages[key] = {}\n      for (const interval of Object.keys(movingAverages[key])) {\n        data.movingAverages[key][interval] = movingAverages[key][interval].movingAverage()\n      }\n    }\n\n    return data\n  }\n\n  /**\n   * Pushes the given operation data to the queue, along with the\n   * current Timestamp, then resets the update timer.\n   *\n   * @param {string} counter\n   * @param {number} inc\n   * @returns {void}\n   */\n  push (counter, inc) {\n    this._queue.push([counter, inc, Date.now()])\n    this._resetComputeTimeout()\n  }\n\n  /**\n   * Resets the timeout for triggering updates.\n   *\n   * @private\n   * @returns {void}\n   */\n  _resetComputeTimeout () {\n    if (this._timeout) {\n      this._timeout.reschedule(this._nextTimeout())\n    } else {\n      this._timeout = retimer(this._update, this._nextTimeout())\n    }\n  }\n\n  /**\n   * Calculates and returns the timeout for the next update based on\n   * the urgency of the update.\n   *\n   * @private\n   * @returns {number}\n   */\n  _nextTimeout () {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize\n    const timeout = Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0)\n    return timeout\n  }\n\n  /**\n   * If there are items in the queue, they will will be processed and\n   * the frequency for all items will be updated based on the Timestamp\n   * of the last item in the queue. The `update` event will also be emitted\n   * with the latest stats.\n   *\n   * If there are no items in the queue, no action is taken.\n   *\n   * @private\n   * @returns {void}\n   */\n  _update () {\n    this._timeout = null\n    if (this._queue.length) {\n      let last\n      for (last of this._queue) {\n        this._applyOp(last)\n      }\n      this._queue = []\n\n      this._updateFrequency(last[2]) // contains timestamp of last op\n\n      this.emit('update', this._stats)\n    }\n  }\n\n  /**\n   * For each key in the stats, the frequency and moving averages\n   * will be updated via Stats._updateFrequencyFor based on the time\n   * difference between calls to this method.\n   *\n   * @private\n   * @param {Timestamp} latestTime\n   * @returns {void}\n   */\n  _updateFrequency (latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime\n\n    Object.keys(this._stats).forEach((key) => {\n      this._updateFrequencyFor(key, timeDiff, latestTime)\n    })\n\n    this._frequencyLastTime = latestTime\n  }\n\n  /**\n   * Updates the `movingAverages` for the given `key` and also\n   * resets the `frequencyAccumulator` for the `key`.\n   *\n   * @private\n   * @param {string} key\n   * @param {number} timeDiffMS Time in milliseconds\n   * @param {Timestamp} latestTime Time in ticks\n   * @returns {void}\n   */\n  _updateFrequencyFor (key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0\n    this._frequencyAccumulators[key] = 0\n    // if `timeDiff` is zero, `hz` becomes Infinity, so we fallback to 1ms\n    const safeTimeDiff = timeDiffMS || 1\n    const hz = (count / safeTimeDiff) * 1000\n\n    let movingAverages = this._movingAverages[key]\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {}\n    }\n\n    const intervals = this._options.movingAverageIntervals\n\n    for (var i = 0; i < intervals.length; i++) {\n      var movingAverageInterval = intervals[i]\n      var movingAverage = movingAverages[movingAverageInterval]\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval)\n      }\n      movingAverage.push(latestTime, hz)\n    }\n  }\n\n  /**\n   * For the given operation, `op`, the stats and `frequencyAccumulator`\n   * will be updated or initialized if they don't already exist.\n   *\n   * @private\n   * @param {Array<string, number>} op\n   * @throws {InvalidNumber}\n   * @returns {void}\n   */\n  _applyOp (op) {\n    const key = op[0]\n    const inc = op[1]\n\n    if (typeof inc !== 'number') {\n      throw new Error('invalid increment number:', inc)\n    }\n\n    let n\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      n = this._stats[key] = Big(0)\n    } else {\n      n = this._stats[key]\n    }\n    this._stats[key] = n.plus(inc)\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0\n    }\n    this._frequencyAccumulators[key] += inc\n  }\n}\n\nmodule.exports = Stats\n"]},"metadata":{},"sourceType":"script"}