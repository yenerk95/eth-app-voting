{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar Message = require('../../message');\n\nvar utils = require('../../utils');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerId, 'rpc:find-node');\n  /**\n   * Process `FindNode` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  return /*#__PURE__*/function () {\n    var _findNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, msg) {\n      var closer, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              log('start');\n\n              if (!msg.key.equals(dht.peerId.id)) {\n                _context.next = 5;\n                break;\n              }\n\n              closer = [{\n                id: dht.peerId\n              }];\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.next = 7;\n              return dht._betterPeersToQuery(msg, peerId);\n\n            case 7:\n              closer = _context.sent;\n\n            case 8:\n              response = new Message(msg.type, Buffer.alloc(0), msg.clusterLevel);\n\n              if (closer.length > 0) {\n                response.closerPeers = closer;\n              } else {\n                log('handle FindNode %s: could not find anything', peerId.toB58String());\n              }\n\n              return _context.abrupt(\"return\", response);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function findNode(_x, _x2) {\n      return _findNode.apply(this, arguments);\n    }\n\n    return findNode;\n  }();\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/rpc/handlers/find-node.js"],"names":["require","Buffer","Message","utils","module","exports","dht","log","logger","peerId","msg","key","equals","id","closer","_betterPeersToQuery","response","type","alloc","clusterLevel","length","closerPeers","toB58String","findNode"],"mappings":"AAAA;;;;;;eAEmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,OAAO,GAAGF,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,aAAD,CAArB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAS;AACxB,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,eAAzB,CAAZ;AAEA;;;;;;;;AAOA;AAAA,6EAAO,iBAAyBA,MAAzB,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACLH,cAAAA,GAAG,CAAC,OAAD,CAAH;;AADK,mBAIDG,GAAG,CAACC,GAAJ,CAAQC,MAAR,CAAeN,GAAG,CAACG,MAAJ,CAAWI,EAA1B,CAJC;AAAA;AAAA;AAAA;;AAKHC,cAAAA,MAAM,GAAG,CAAC;AACRD,gBAAAA,EAAE,EAAEP,GAAG,CAACG;AADA,eAAD,CAAT;AALG;AAAA;;AAAA;AAAA;AAAA,qBASYH,GAAG,CAACS,mBAAJ,CAAwBL,GAAxB,EAA6BD,MAA7B,CATZ;;AAAA;AASHK,cAAAA,MATG;;AAAA;AAYCE,cAAAA,QAZD,GAYY,IAAId,OAAJ,CAAYQ,GAAG,CAACO,IAAhB,EAAsBhB,MAAM,CAACiB,KAAP,CAAa,CAAb,CAAtB,EAAuCR,GAAG,CAACS,YAA3C,CAZZ;;AAcL,kBAAIL,MAAM,CAACM,MAAP,GAAgB,CAApB,EAAuB;AACrBJ,gBAAAA,QAAQ,CAACK,WAAT,GAAuBP,MAAvB;AACD,eAFD,MAEO;AACLP,gBAAAA,GAAG,CAAC,6CAAD,EAAgDE,MAAM,CAACa,WAAP,EAAhD,CAAH;AACD;;AAlBI,+CAoBEN,QApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAsBO,QAAtB;AAAA;AAAA;;AAAA,WAAsBA,QAAtB;AAAA;AAsBD,CAhCD","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst Message = require('../../message')\nconst utils = require('../../utils')\n\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:find-node')\n\n  /**\n   * Process `FindNode` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n  return async function findNode (peerId, msg) {\n    log('start')\n\n    let closer\n    if (msg.key.equals(dht.peerId.id)) {\n      closer = [{\n        id: dht.peerId\n      }]\n    } else {\n      closer = await dht._betterPeersToQuery(msg, peerId)\n    }\n\n    const response = new Message(msg.type, Buffer.alloc(0), msg.clusterLevel)\n\n    if (closer.length > 0) {\n      response.closerPeers = closer\n    } else {\n      log('handle FindNode %s: could not find anything', peerId.toB58String())\n    }\n\n    return response\n  }\n}\n"]},"metadata":{},"sourceType":"script"}