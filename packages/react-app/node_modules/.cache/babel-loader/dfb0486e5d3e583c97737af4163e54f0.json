{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n/**\n * Select the best record out of the given records.\n *\n * @param {Object} selectors\n * @param {Buffer} k\n * @param {Array<Buffer>} records\n * @returns {number} - The index of the best record.\n */\n\n\nconst bestRecord = (selectors, k, records) => {\n  if (records.length === 0) {\n    const errMsg = 'No records given';\n    throw errcode(new Error(errMsg), 'ERR_NO_RECORDS_RECEIVED');\n  }\n\n  const parts = k.toString().split('/');\n\n  if (parts.length < 3) {\n    const errMsg = 'Record key does not have a selector function';\n    throw errcode(new Error(errMsg), 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY');\n  }\n\n  const selector = selectors[parts[1].toString()];\n\n  if (!selector) {\n    const errMsg = `Unrecognized key prefix: ${parts[1]}`;\n    throw errcode(new Error(errMsg), 'ERR_UNRECOGNIZED_KEY_PREFIX');\n  }\n\n  return selector(k, records);\n};\n\nmodule.exports = {\n  bestRecord: bestRecord,\n  selectors: require('./selectors')\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-record/src/selection.js"],"names":["errcode","require","bestRecord","selectors","k","records","length","errMsg","Error","parts","toString","split","selector","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;AACA;;;;;;;;;;AAQA,MAAMC,UAAU,GAAG,CAACC,SAAD,EAAYC,CAAZ,EAAeC,OAAf,KAA2B;AAC5C,MAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAMC,MAAM,GAAG,kBAAf;AAEA,UAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAUD,MAAV,CAAD,EAAoB,yBAApB,CAAb;AACD;;AAED,QAAME,KAAK,GAAGL,CAAC,CAACM,QAAF,GAAaC,KAAb,CAAmB,GAAnB,CAAd;;AAEA,MAAIF,KAAK,CAACH,MAAN,GAAe,CAAnB,EAAsB;AACpB,UAAMC,MAAM,GAAG,8CAAf;AAEA,UAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAUD,MAAV,CAAD,EAAoB,yCAApB,CAAb;AACD;;AAED,QAAMK,QAAQ,GAAGT,SAAS,CAACM,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,EAAD,CAA1B;;AAEA,MAAI,CAACE,QAAL,EAAe;AACb,UAAML,MAAM,GAAI,4BAA2BE,KAAK,CAAC,CAAD,CAAI,EAApD;AAEA,UAAMT,OAAO,CAAC,IAAIQ,KAAJ,CAAUD,MAAV,CAAD,EAAoB,6BAApB,CAAb;AACD;;AAED,SAAOK,QAAQ,CAACR,CAAD,EAAIC,OAAJ,CAAf;AACD,CAxBD;;AA0BAQ,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA,UAAU,EAAEA,UADG;AAEfC,EAAAA,SAAS,EAAEF,OAAO,CAAC,aAAD;AAFH,CAAjB","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\n/**\n * Select the best record out of the given records.\n *\n * @param {Object} selectors\n * @param {Buffer} k\n * @param {Array<Buffer>} records\n * @returns {number} - The index of the best record.\n */\nconst bestRecord = (selectors, k, records) => {\n  if (records.length === 0) {\n    const errMsg = 'No records given'\n\n    throw errcode(new Error(errMsg), 'ERR_NO_RECORDS_RECEIVED')\n  }\n\n  const parts = k.toString().split('/')\n\n  if (parts.length < 3) {\n    const errMsg = 'Record key does not have a selector function'\n\n    throw errcode(new Error(errMsg), 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY')\n  }\n\n  const selector = selectors[parts[1].toString()]\n\n  if (!selector) {\n    const errMsg = `Unrecognized key prefix: ${parts[1]}`\n\n    throw errcode(new Error(errMsg), 'ERR_UNRECOGNIZED_KEY_PREFIX')\n  }\n\n  return selector(k, records)\n}\n\nmodule.exports = {\n  bestRecord: bestRecord,\n  selectors: require('./selectors')\n}\n"]},"metadata":{},"sourceType":"script"}