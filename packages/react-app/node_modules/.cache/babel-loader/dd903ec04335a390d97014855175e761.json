{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar errcode = require('err-code');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar webcrypto = require('../webcrypto');\n\nvar _require2 = require('../util'),\n    bufferToBase64url = _require2.bufferToBase64url,\n    base64urlToBuffer = _require2.base64urlToBuffer;\n\nvar validateCurveType = require('./validate-curve-type');\n\nvar bits = {\n  'P-256': 256,\n  'P-384': 384,\n  'P-521': 521\n};\n\nexports.generateEphmeralKeyPair = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(curve) {\n    var pair, genSharedKey, publicKey;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            validateCurveType(Object.keys(bits), curve);\n            _context2.next = 3;\n            return webcrypto.get().subtle.generateKey({\n              name: 'ECDH',\n              namedCurve: curve\n            }, true, ['deriveBits']);\n\n          case 3:\n            pair = _context2.sent;\n\n            // forcePrivate is used for testing only\n            genSharedKey = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(theirPub, forcePrivate) {\n                var privateKey, keys;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!forcePrivate) {\n                          _context.next = 6;\n                          break;\n                        }\n\n                        _context.next = 3;\n                        return webcrypto.get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {\n                          name: 'ECDH',\n                          namedCurve: curve\n                        }, false, ['deriveBits']);\n\n                      case 3:\n                        privateKey = _context.sent;\n                        _context.next = 7;\n                        break;\n\n                      case 6:\n                        privateKey = pair.privateKey;\n\n                      case 7:\n                        _context.next = 9;\n                        return webcrypto.get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {\n                          name: 'ECDH',\n                          namedCurve: curve\n                        }, false, []);\n\n                      case 9:\n                        _context.t0 = _context.sent;\n                        _context.t1 = privateKey;\n                        keys = [_context.t0, _context.t1];\n                        _context.t2 = Buffer;\n                        _context.next = 15;\n                        return webcrypto.get().subtle.deriveBits({\n                          name: 'ECDH',\n                          namedCurve: curve,\n                          public: keys[0]\n                        }, keys[1], bits[curve]);\n\n                      case 15:\n                        _context.t3 = _context.sent;\n                        return _context.abrupt(\"return\", _context.t2.from.call(_context.t2, _context.t3));\n\n                      case 17:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function genSharedKey(_x2, _x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            _context2.next = 7;\n            return webcrypto.get().subtle.exportKey('jwk', pair.publicKey);\n\n          case 7:\n            publicKey = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              key: marshalPublicKey(publicKey),\n              genSharedKey: genSharedKey\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar curveLengths = {\n  'P-256': 32,\n  'P-384': 48,\n  'P-521': 66\n}; // Marshal converts a jwk encodec ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\n\nfunction marshalPublicKey(jwk) {\n  var byteLen = curveLengths[jwk.crv];\n  return Buffer.concat([Buffer.from([4]), // uncompressed point\n  base64urlToBuffer(jwk.x, byteLen), base64urlToBuffer(jwk.y, byteLen)], 1 + byteLen * 2);\n} // Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\n\n\nfunction unmarshalPublicKey(curve, key) {\n  var byteLen = curveLengths[curve];\n\n  if (!key.slice(0, 1).equals(Buffer.from([4]))) {\n    throw errcode(new Error('Cannot unmarshal public key - invalid key format'), 'ERR_INVALID_KEY_FORMAT');\n  }\n\n  return {\n    kty: 'EC',\n    crv: curve,\n    x: bufferToBase64url(key.slice(1, byteLen + 1), byteLen),\n    y: bufferToBase64url(key.slice(1 + byteLen), byteLen),\n    ext: true\n  };\n}\n\nvar unmarshalPrivateKey = function unmarshalPrivateKey(curve, key) {\n  return _objectSpread(_objectSpread({}, unmarshalPublicKey(curve, key.public)), {}, {\n    d: bufferToBase64url(key.private)\n  });\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/keys/ecdh-browser.js"],"names":["errcode","require","Buffer","webcrypto","bufferToBase64url","base64urlToBuffer","validateCurveType","bits","exports","generateEphmeralKeyPair","curve","Object","keys","get","subtle","generateKey","name","namedCurve","pair","genSharedKey","theirPub","forcePrivate","importKey","unmarshalPrivateKey","privateKey","unmarshalPublicKey","deriveBits","public","from","exportKey","publicKey","key","marshalPublicKey","curveLengths","jwk","byteLen","crv","concat","x","y","slice","equals","Error","kty","ext","d","private"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst { Buffer } = require('buffer')\nconst webcrypto = require('../webcrypto')\nconst { bufferToBase64url, base64urlToBuffer } = require('../util')\nconst validateCurveType = require('./validate-curve-type')\n\nconst bits = {\n  'P-256': 256,\n  'P-384': 384,\n  'P-521': 521\n}\n\nexports.generateEphmeralKeyPair = async function (curve) {\n  validateCurveType(Object.keys(bits), curve)\n  const pair = await webcrypto.get().subtle.generateKey(\n    {\n      name: 'ECDH',\n      namedCurve: curve\n    },\n    true,\n    ['deriveBits']\n  )\n\n  // forcePrivate is used for testing only\n  const genSharedKey = async (theirPub, forcePrivate) => {\n    let privateKey\n\n    if (forcePrivate) {\n      privateKey = await webcrypto.get().subtle.importKey(\n        'jwk',\n        unmarshalPrivateKey(curve, forcePrivate),\n        {\n          name: 'ECDH',\n          namedCurve: curve\n        },\n        false,\n        ['deriveBits']\n      )\n    } else {\n      privateKey = pair.privateKey\n    }\n\n    const keys = [\n      await webcrypto.get().subtle.importKey(\n        'jwk',\n        unmarshalPublicKey(curve, theirPub),\n        {\n          name: 'ECDH',\n          namedCurve: curve\n        },\n        false,\n        []\n      ),\n      privateKey\n    ]\n\n    return Buffer.from(await webcrypto.get().subtle.deriveBits(\n      {\n        name: 'ECDH',\n        namedCurve: curve,\n        public: keys[0]\n      },\n      keys[1],\n      bits[curve]\n    ))\n  }\n\n  const publicKey = await webcrypto.get().subtle.exportKey('jwk', pair.publicKey)\n\n  return {\n    key: marshalPublicKey(publicKey),\n    genSharedKey\n  }\n}\n\nconst curveLengths = {\n  'P-256': 32,\n  'P-384': 48,\n  'P-521': 66\n}\n\n// Marshal converts a jwk encodec ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\nfunction marshalPublicKey (jwk) {\n  const byteLen = curveLengths[jwk.crv]\n\n  return Buffer.concat([\n    Buffer.from([4]), // uncompressed point\n    base64urlToBuffer(jwk.x, byteLen),\n    base64urlToBuffer(jwk.y, byteLen)\n  ], 1 + byteLen * 2)\n}\n\n// Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\nfunction unmarshalPublicKey (curve, key) {\n  const byteLen = curveLengths[curve]\n\n  if (!key.slice(0, 1).equals(Buffer.from([4]))) {\n    throw errcode(new Error('Cannot unmarshal public key - invalid key format'), 'ERR_INVALID_KEY_FORMAT')\n  }\n\n  return {\n    kty: 'EC',\n    crv: curve,\n    x: bufferToBase64url(key.slice(1, byteLen + 1), byteLen),\n    y: bufferToBase64url(key.slice(1 + byteLen), byteLen),\n    ext: true\n  }\n}\n\nconst unmarshalPrivateKey = (curve, key) => ({\n  ...unmarshalPublicKey(curve, key.public),\n  d: bufferToBase64url(key.private)\n})\n"]},"metadata":{},"sourceType":"script"}