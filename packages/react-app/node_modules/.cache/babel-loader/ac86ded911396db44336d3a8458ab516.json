{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar errcode = require('err-code');\n\nvar utils = require('../../utils');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerId, 'rpc:add-provider');\n  /**\n   * Process `AddProvider` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n\n  return /*#__PURE__*/function () {\n    var _addProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, msg) {\n      var cid, errMsg;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              log('start');\n\n              if (!(!msg.key || msg.key.length === 0)) {\n                _context.next = 3;\n                break;\n              }\n\n              throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY');\n\n            case 3:\n              _context.prev = 3;\n              cid = new CID(msg.key);\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](3);\n              errMsg = \"Invalid CID: \".concat(_context.t0.message);\n              throw errcode(new Error(errMsg), 'ERR_INVALID_CID');\n\n            case 11:\n              msg.providerPeers.forEach(function (pi) {\n                // Ignore providers not from the originator\n                if (!pi.id.isEqual(peerId)) {\n                  log('invalid provider peer %s from %s', pi.id.toB58String(), peerId.toB58String());\n                  return;\n                }\n\n                if (pi.multiaddrs.length < 1) {\n                  log('no valid addresses for provider %s. Ignore', peerId.toB58String());\n                  return;\n                }\n\n                log('received provider %s for %s (addrs %s)', peerId.toB58String(), cid.toBaseEncodedString(), pi.multiaddrs.map(function (m) {\n                  return m.toString();\n                }));\n\n                if (!dht._isSelf(pi.id)) {\n                  // Add known address to peer store\n                  dht.peerStore.addressBook.add(pi.id, pi.multiaddrs);\n                  return dht.providers.addProvider(cid, pi.id);\n                }\n              }); // Previous versions of the JS DHT sent erroneous providers in the\n              // `providerPeers` field. In order to accommodate older clients that have\n              // this bug, we fall back to assuming the originator is the provider if\n              // we can't find any valid providers in the payload.\n              // https://github.com/libp2p/js-libp2p-kad-dht/pull/127\n              // https://github.com/libp2p/js-libp2p-kad-dht/issues/128\n\n              return _context.abrupt(\"return\", dht.providers.addProvider(cid, peerId));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 7]]);\n    }));\n\n    function addProvider(_x, _x2) {\n      return _addProvider.apply(this, arguments);\n    }\n\n    return addProvider;\n  }();\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/rpc/handlers/add-provider.js"],"names":["CID","require","errcode","utils","module","exports","dht","log","logger","peerId","msg","key","length","Error","cid","errMsg","message","providerPeers","forEach","pi","id","isEqual","toB58String","multiaddrs","toBaseEncodedString","map","m","toString","_isSelf","peerStore","addressBook","add","providers","addProvider"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAME,KAAK,GAAGF,OAAO,CAAC,aAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAS;AACxB,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,kBAAzB,CAAZ;AACA;;;;;;;;AAOA;AAAA,gFAAO,iBAA4BA,MAA5B,EAAoCC,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAChDH,cAAAA,GAAG,CAAC,OAAD,CAAH;;AADK,oBAGD,CAACG,GAAG,CAACC,GAAL,IAAYD,GAAG,CAACC,GAAJ,CAAQC,MAAR,KAAmB,CAH9B;AAAA;AAAA;AAAA;;AAAA,oBAIGV,OAAO,CAAC,IAAIW,KAAJ,CAAU,aAAV,CAAD,EAA2B,iBAA3B,CAJV;;AAAA;AAAA;AASHC,cAAAA,GAAG,GAAG,IAAId,GAAJ,CAAQU,GAAG,CAACC,GAAZ,CAAN;AATG;AAAA;;AAAA;AAAA;AAAA;AAWGI,cAAAA,MAXH,0BAW4B,YAAIC,OAXhC;AAAA,oBAYGd,OAAO,CAAC,IAAIW,KAAJ,CAAUE,MAAV,CAAD,EAAoB,iBAApB,CAZV;;AAAA;AAeLL,cAAAA,GAAG,CAACO,aAAJ,CAAkBC,OAAlB,CAA0B,UAACC,EAAD,EAAQ;AAChC;AACA,oBAAI,CAACA,EAAE,CAACC,EAAH,CAAMC,OAAN,CAAcZ,MAAd,CAAL,EAA4B;AAC1BF,kBAAAA,GAAG,CAAC,kCAAD,EAAqCY,EAAE,CAACC,EAAH,CAAME,WAAN,EAArC,EAA0Db,MAAM,CAACa,WAAP,EAA1D,CAAH;AACA;AACD;;AAED,oBAAIH,EAAE,CAACI,UAAH,CAAcX,MAAd,GAAuB,CAA3B,EAA8B;AAC5BL,kBAAAA,GAAG,CAAC,4CAAD,EAA+CE,MAAM,CAACa,WAAP,EAA/C,CAAH;AACA;AACD;;AAEDf,gBAAAA,GAAG,CAAC,wCAAD,EAA2CE,MAAM,CAACa,WAAP,EAA3C,EAAiER,GAAG,CAACU,mBAAJ,EAAjE,EAA4FL,EAAE,CAACI,UAAH,CAAcE,GAAd,CAAkB,UAACC,CAAD;AAAA,yBAAOA,CAAC,CAACC,QAAF,EAAP;AAAA,iBAAlB,CAA5F,CAAH;;AAEA,oBAAI,CAACrB,GAAG,CAACsB,OAAJ,CAAYT,EAAE,CAACC,EAAf,CAAL,EAAyB;AACvB;AACAd,kBAAAA,GAAG,CAACuB,SAAJ,CAAcC,WAAd,CAA0BC,GAA1B,CAA8BZ,EAAE,CAACC,EAAjC,EAAqCD,EAAE,CAACI,UAAxC;AACA,yBAAOjB,GAAG,CAAC0B,SAAJ,CAAcC,WAAd,CAA0BnB,GAA1B,EAA+BK,EAAE,CAACC,EAAlC,CAAP;AACD;AACF,eAnBD,EAfK,CAoCL;AACA;AACA;AACA;AACA;AACA;;AAzCK,+CA0CEd,GAAG,CAAC0B,SAAJ,CAAcC,WAAd,CAA0BnB,GAA1B,EAA+BL,MAA/B,CA1CF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAsBwB,WAAtB;AAAA;AAAA;;AAAA,WAAsBA,WAAtB;AAAA;AA4CD,CArDD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst errcode = require('err-code')\n\nconst utils = require('../../utils')\n\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:add-provider')\n  /**\n   * Process `AddProvider` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n  return async function addProvider (peerId, msg) { // eslint-disable-line require-await\n    log('start')\n\n    if (!msg.key || msg.key.length === 0) {\n      throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY')\n    }\n\n    let cid\n    try {\n      cid = new CID(msg.key)\n    } catch (err) {\n      const errMsg = `Invalid CID: ${err.message}`\n      throw errcode(new Error(errMsg), 'ERR_INVALID_CID')\n    }\n\n    msg.providerPeers.forEach((pi) => {\n      // Ignore providers not from the originator\n      if (!pi.id.isEqual(peerId)) {\n        log('invalid provider peer %s from %s', pi.id.toB58String(), peerId.toB58String())\n        return\n      }\n\n      if (pi.multiaddrs.length < 1) {\n        log('no valid addresses for provider %s. Ignore', peerId.toB58String())\n        return\n      }\n\n      log('received provider %s for %s (addrs %s)', peerId.toB58String(), cid.toBaseEncodedString(), pi.multiaddrs.map((m) => m.toString()))\n\n      if (!dht._isSelf(pi.id)) {\n        // Add known address to peer store\n        dht.peerStore.addressBook.add(pi.id, pi.multiaddrs)\n        return dht.providers.addProvider(cid, pi.id)\n      }\n    })\n\n    // Previous versions of the JS DHT sent erroneous providers in the\n    // `providerPeers` field. In order to accommodate older clients that have\n    // this bug, we fall back to assuming the originator is the provider if\n    // we can't find any valid providers in the payload.\n    // https://github.com/libp2p/js-libp2p-kad-dht/pull/127\n    // https://github.com/libp2p/js-libp2p-kad-dht/issues/128\n    return dht.providers.addProvider(cid, peerId)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}