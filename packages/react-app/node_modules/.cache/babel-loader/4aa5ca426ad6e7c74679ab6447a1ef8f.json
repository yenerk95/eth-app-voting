{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst CIPHER_MODES = {\n  16: 'aes-128-ctr',\n  32: 'aes-256-ctr'\n};\n\nmodule.exports = function (key) {\n  const mode = CIPHER_MODES[key.length];\n\n  if (!mode) {\n    const modes = Object.entries(CIPHER_MODES).map(([k, v]) => `${k} (${v})`).join(' / ');\n    throw errcode(new Error(`Invalid key length ${key.length} bytes. Must be ${modes}`), 'ERR_INVALID_KEY_LENGTH');\n  }\n\n  return mode;\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-crypto/src/aes/cipher-mode.js"],"names":["errcode","require","CIPHER_MODES","module","exports","key","mode","length","modes","Object","entries","map","k","v","join","Error"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMC,YAAY,GAAG;AACnB,MAAI,aADe;AAEnB,MAAI;AAFe,CAArB;;AAKAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC9B,QAAMC,IAAI,GAAGJ,YAAY,CAACG,GAAG,CAACE,MAAL,CAAzB;;AACA,MAAI,CAACD,IAAL,EAAW;AACT,UAAME,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAeR,YAAf,EAA6BS,GAA7B,CAAiC,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAa,GAAED,CAAE,KAAIC,CAAE,GAAxD,EAA4DC,IAA5D,CAAiE,KAAjE,CAAd;AACA,UAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAW,sBAAqBV,GAAG,CAACE,MAAO,mBAAkBC,KAAM,EAAnE,CAAD,EAAwE,wBAAxE,CAAb;AACD;;AACD,SAAOF,IAAP;AACD,CAPD","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\n\nconst CIPHER_MODES = {\n  16: 'aes-128-ctr',\n  32: 'aes-256-ctr'\n}\n\nmodule.exports = function (key) {\n  const mode = CIPHER_MODES[key.length]\n  if (!mode) {\n    const modes = Object.entries(CIPHER_MODES).map(([k, v]) => `${k} (${v})`).join(' / ')\n    throw errcode(new Error(`Invalid key length ${key.length} bytes. Must be ${modes}`), 'ERR_INVALID_KEY_LENGTH')\n  }\n  return mode\n}\n"]},"metadata":{},"sourceType":"script"}