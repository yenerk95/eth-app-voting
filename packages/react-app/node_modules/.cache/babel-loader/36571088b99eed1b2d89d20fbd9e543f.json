{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst PeerId = require('peer-id');\n\nconst {\n  Message\n} = require('./index');\n\nconst SignPrefix = Buffer.from('libp2p-pubsub:');\n/**\n * Signs the provided message with the given `peerId`\n *\n * @param {PeerId} peerId\n * @param {Message} message\n * @returns {Promise<Message>}\n */\n\nasync function signMessage(peerId, message) {\n  // Get the message in bytes, and prepend with the pubsub prefix\n  const bytes = Buffer.concat([SignPrefix, Message.encode(message)]);\n  const signature = await peerId.privKey.sign(bytes);\n  return { ...message,\n    signature: signature,\n    key: peerId.pubKey.bytes\n  };\n}\n/**\n * Verifies the signature of the given message\n * @param {rpc.RPC.Message} message\n * @returns {Promise<Boolean>}\n */\n\n\nasync function verifySignature(message) {\n  // Get message sans the signature\n  const baseMessage = { ...message\n  };\n  delete baseMessage.signature;\n  delete baseMessage.key;\n  const bytes = Buffer.concat([SignPrefix, Message.encode(baseMessage)]); // Get the public key\n\n  const pubKey = await messagePublicKey(message); // verify the base message\n\n  return pubKey.verify(bytes, message.signature);\n}\n/**\n * Returns the PublicKey associated with the given message.\n * If no, valid PublicKey can be retrieved an error will be returned.\n *\n * @param {Message} message\n * @returns {Promise<PublicKey>}\n */\n\n\nasync function messagePublicKey(message) {\n  if (message.key) {\n    const peerId = await PeerId.createFromPubKey(message.key); // the key belongs to the sender, return the key\n\n    if (peerId.isEqual(message.from)) return peerId.pubKey; // We couldn't validate pubkey is from the originator, error\n\n    throw new Error('Public Key does not match the originator');\n  } else {\n    // should be available in the from property of the message (peer id)\n    const from = PeerId.createFromBytes(message.from);\n\n    if (from.pubKey) {\n      return from.pubKey;\n    } else {\n      throw new Error('Could not get the public key from the originator id');\n    }\n  }\n}\n\nmodule.exports = {\n  messagePublicKey,\n  signMessage,\n  SignPrefix,\n  verifySignature\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-pubsub/src/message/sign.js"],"names":["Buffer","require","PeerId","Message","SignPrefix","from","signMessage","peerId","message","bytes","concat","encode","signature","privKey","sign","key","pubKey","verifySignature","baseMessage","messagePublicKey","verify","createFromPubKey","isEqual","Error","createFromBytes","module","exports"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAcF,OAAO,CAAC,SAAD,CAA3B;;AACA,MAAMG,UAAU,GAAGJ,MAAM,CAACK,IAAP,CAAY,gBAAZ,CAAnB;AAEA;;;;;;;;AAOA,eAAeC,WAAf,CAA4BC,MAA5B,EAAoCC,OAApC,EAA6C;AAC3C;AACA,QAAMC,KAAK,GAAGT,MAAM,CAACU,MAAP,CAAc,CAC1BN,UAD0B,EAE1BD,OAAO,CAACQ,MAAR,CAAeH,OAAf,CAF0B,CAAd,CAAd;AAKA,QAAMI,SAAS,GAAG,MAAML,MAAM,CAACM,OAAP,CAAeC,IAAf,CAAoBL,KAApB,CAAxB;AAEA,SAAO,EACL,GAAGD,OADE;AAELI,IAAAA,SAAS,EAAEA,SAFN;AAGLG,IAAAA,GAAG,EAAER,MAAM,CAACS,MAAP,CAAcP;AAHd,GAAP;AAKD;AAED;;;;;;;AAKA,eAAeQ,eAAf,CAAgCT,OAAhC,EAAyC;AACvC;AACA,QAAMU,WAAW,GAAG,EAAE,GAAGV;AAAL,GAApB;AACA,SAAOU,WAAW,CAACN,SAAnB;AACA,SAAOM,WAAW,CAACH,GAAnB;AACA,QAAMN,KAAK,GAAGT,MAAM,CAACU,MAAP,CAAc,CAC1BN,UAD0B,EAE1BD,OAAO,CAACQ,MAAR,CAAeO,WAAf,CAF0B,CAAd,CAAd,CALuC,CAUvC;;AACA,QAAMF,MAAM,GAAG,MAAMG,gBAAgB,CAACX,OAAD,CAArC,CAXuC,CAavC;;AACA,SAAOQ,MAAM,CAACI,MAAP,CAAcX,KAAd,EAAqBD,OAAO,CAACI,SAA7B,CAAP;AACD;AAED;;;;;;;;;AAOA,eAAeO,gBAAf,CAAiCX,OAAjC,EAA0C;AACxC,MAAIA,OAAO,CAACO,GAAZ,EAAiB;AACf,UAAMR,MAAM,GAAG,MAAML,MAAM,CAACmB,gBAAP,CAAwBb,OAAO,CAACO,GAAhC,CAArB,CADe,CAGf;;AACA,QAAIR,MAAM,CAACe,OAAP,CAAed,OAAO,CAACH,IAAvB,CAAJ,EAAkC,OAAOE,MAAM,CAACS,MAAd,CAJnB,CAKf;;AACA,UAAM,IAAIO,KAAJ,CAAU,0CAAV,CAAN;AACD,GAPD,MAOO;AACL;AACA,UAAMlB,IAAI,GAAGH,MAAM,CAACsB,eAAP,CAAuBhB,OAAO,CAACH,IAA/B,CAAb;;AAEA,QAAIA,IAAI,CAACW,MAAT,EAAiB;AACf,aAAOX,IAAI,CAACW,MAAZ;AACD,KAFD,MAEO;AACL,YAAM,IAAIO,KAAJ,CAAU,qDAAV,CAAN;AACD;AACF;AACF;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACfP,EAAAA,gBADe;AAEfb,EAAAA,WAFe;AAGfF,EAAAA,UAHe;AAIfa,EAAAA;AAJe,CAAjB","sourcesContent":["'use strict'\nconst { Buffer } = require('buffer')\nconst PeerId = require('peer-id')\nconst { Message } = require('./index')\nconst SignPrefix = Buffer.from('libp2p-pubsub:')\n\n/**\n * Signs the provided message with the given `peerId`\n *\n * @param {PeerId} peerId\n * @param {Message} message\n * @returns {Promise<Message>}\n */\nasync function signMessage (peerId, message) {\n  // Get the message in bytes, and prepend with the pubsub prefix\n  const bytes = Buffer.concat([\n    SignPrefix,\n    Message.encode(message)\n  ])\n\n  const signature = await peerId.privKey.sign(bytes)\n\n  return {\n    ...message,\n    signature: signature,\n    key: peerId.pubKey.bytes\n  }\n}\n\n/**\n * Verifies the signature of the given message\n * @param {rpc.RPC.Message} message\n * @returns {Promise<Boolean>}\n */\nasync function verifySignature (message) {\n  // Get message sans the signature\n  const baseMessage = { ...message }\n  delete baseMessage.signature\n  delete baseMessage.key\n  const bytes = Buffer.concat([\n    SignPrefix,\n    Message.encode(baseMessage)\n  ])\n\n  // Get the public key\n  const pubKey = await messagePublicKey(message)\n\n  // verify the base message\n  return pubKey.verify(bytes, message.signature)\n}\n\n/**\n * Returns the PublicKey associated with the given message.\n * If no, valid PublicKey can be retrieved an error will be returned.\n *\n * @param {Message} message\n * @returns {Promise<PublicKey>}\n */\nasync function messagePublicKey (message) {\n  if (message.key) {\n    const peerId = await PeerId.createFromPubKey(message.key)\n\n    // the key belongs to the sender, return the key\n    if (peerId.isEqual(message.from)) return peerId.pubKey\n    // We couldn't validate pubkey is from the originator, error\n    throw new Error('Public Key does not match the originator')\n  } else {\n    // should be available in the from property of the message (peer id)\n    const from = PeerId.createFromBytes(message.from)\n\n    if (from.pubKey) {\n      return from.pubKey\n    } else {\n      throw new Error('Could not get the public key from the originator id')\n    }\n  }\n}\n\nmodule.exports = {\n  messagePublicKey,\n  signMessage,\n  SignPrefix,\n  verifySignature\n}\n"]},"metadata":{},"sourceType":"script"}