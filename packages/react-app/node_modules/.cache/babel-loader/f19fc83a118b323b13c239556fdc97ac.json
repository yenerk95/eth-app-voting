{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar Key = require('interface-datastore').Key;\n\nvar apiFile = new Key('api');\n\nmodule.exports = function (store) {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @returns {Promise<String>}\n     */\n    get: function get() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var value;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return store.get(apiFile);\n\n              case 2:\n                value = _context.sent;\n                return _context.abrupt(\"return\", value && value.toString());\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {Object} value - the api address to be written\n     * @returns {Promise<?>}\n     */\n    set: function set(value) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", store.put(apiFile, Buffer.from(value.toString())));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n\n    /**\n     * Deletes api file\n     *\n     * @returns {Promise<void>}\n     */\n    delete: function _delete() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", store.delete(apiFile));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs-repo/src/api-addr.js"],"names":["require","Buffer","Key","apiFile","module","exports","store","get","value","toString","set","put","from","delete"],"mappings":"AAAA;;;;;;eAEmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,GAAG,GAAGF,OAAO,CAAC,qBAAD,CAAP,CAA+BE,GAA3C;;AAEA,IAAMC,OAAO,GAAG,IAAID,GAAJ,CAAQ,KAAR,CAAhB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAACC,KAAD,EAAW;AAC1B,SAAO;AACL;;;;;AAKMC,IAAAA,GAND,iBAMQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACSD,KAAK,CAACC,GAAN,CAAUJ,OAAV,CADT;;AAAA;AACLK,gBAAAA,KADK;AAAA,iDAEJA,KAAK,IAAIA,KAAK,CAACC,QAAN,EAFL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGZ,KATI;;AAUL;;;;;;AAMMC,IAAAA,GAhBD,eAgBMF,KAhBN,EAgBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDACTF,KAAK,CAACK,GAAN,CAAUR,OAAV,EAAmBF,MAAM,CAACW,IAAP,CAAYJ,KAAK,CAACC,QAAN,EAAZ,CAAnB,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjB,KAlBI;;AAmBL;;;;;AAKMI,IAAAA,MAxBD,qBAwBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDACPP,KAAK,CAACO,MAAN,CAAaV,OAAb,CADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEf;AA1BI,GAAP;AA4BD,CA7BD","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst Key = require('interface-datastore').Key\n\nconst apiFile = new Key('api')\n\nmodule.exports = (store) => {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @returns {Promise<String>}\n     */\n    async get () {\n      const value = await store.get(apiFile)\n      return value && value.toString()\n    },\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {Object} value - the api address to be written\n     * @returns {Promise<?>}\n     */\n    async set (value) { // eslint-disable-line require-await\n      return store.put(apiFile, Buffer.from(value.toString()))\n    },\n    /**\n     * Deletes api file\n     *\n     * @returns {Promise<void>}\n     */\n    async delete () { // eslint-disable-line require-await\n      return store.delete(apiFile)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}