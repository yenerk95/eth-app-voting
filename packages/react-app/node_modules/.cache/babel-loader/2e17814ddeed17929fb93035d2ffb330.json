{"ast":null,"code":"'use strict';\n\nconst withIs = require('class-is');\n\nconst noop = () => {};\n\nclass Topology {\n  /**\n   * @param {Object} props\n   * @param {number} props.min minimum needed connections (default: 0)\n   * @param {number} props.max maximum needed connections (default: Infinity)\n   * @param {Object} [props.handlers]\n   * @param {function} [props.handlers.onConnect] protocol \"onConnect\" handler\n   * @param {function} [props.handlers.onDisconnect] protocol \"onDisconnect\" handler\n   * @constructor\n   */\n  constructor({\n    min = 0,\n    max = Infinity,\n    handlers = {}\n  }) {\n    this.min = min;\n    this.max = max; // Handlers\n\n    this._onConnect = handlers.onConnect || noop;\n    this._onDisconnect = handlers.onDisconnect || noop;\n    /**\n     * Set of peers that support the protocol.\n     * @type {Set<string>}\n     */\n\n    this.peers = new Set();\n  }\n\n  set registrar(registrar) {\n    this._registrar = registrar;\n  }\n  /**\n   * Notify about peer disconnected event.\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n\n\n  disconnect(peerId) {\n    this._onDisconnect(peerId);\n  }\n\n}\n\nmodule.exports = withIs(Topology, {\n  className: 'Topology',\n  symbolName: '@libp2p/js-interfaces/topology'\n});","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-interfaces/src/topology/index.js"],"names":["withIs","require","noop","Topology","constructor","min","max","Infinity","handlers","_onConnect","onConnect","_onDisconnect","onDisconnect","peers","Set","registrar","_registrar","disconnect","peerId","module","exports","className","symbolName"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,MAAMC,QAAN,CAAe;AACb;;;;;;;;;AASAC,EAAAA,WAAW,CAAE;AACXC,IAAAA,GAAG,GAAG,CADK;AAEXC,IAAAA,GAAG,GAAGC,QAFK;AAGXC,IAAAA,QAAQ,GAAG;AAHA,GAAF,EAIR;AACD,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAWA,GAAX,CAFC,CAID;;AACA,SAAKG,UAAL,GAAkBD,QAAQ,CAACE,SAAT,IAAsBR,IAAxC;AACA,SAAKS,aAAL,GAAqBH,QAAQ,CAACI,YAAT,IAAyBV,IAA9C;AAEA;;;;;AAIA,SAAKW,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;;AAED,MAAIC,SAAJ,CAAeA,SAAf,EAA0B;AACxB,SAAKC,UAAL,GAAkBD,SAAlB;AACD;AAED;;;;;;;AAKAE,EAAAA,UAAU,CAAEC,MAAF,EAAU;AAClB,SAAKP,aAAL,CAAmBO,MAAnB;AACD;;AAxCY;;AA2CfC,MAAM,CAACC,OAAP,GAAiBpB,MAAM,CAACG,QAAD,EAAW;AAAEkB,EAAAA,SAAS,EAAE,UAAb;AAAyBC,EAAAA,UAAU,EAAE;AAArC,CAAX,CAAvB","sourcesContent":["'use strict'\n\nconst withIs = require('class-is')\n\nconst noop = () => {}\n\nclass Topology {\n  /**\n   * @param {Object} props\n   * @param {number} props.min minimum needed connections (default: 0)\n   * @param {number} props.max maximum needed connections (default: Infinity)\n   * @param {Object} [props.handlers]\n   * @param {function} [props.handlers.onConnect] protocol \"onConnect\" handler\n   * @param {function} [props.handlers.onDisconnect] protocol \"onDisconnect\" handler\n   * @constructor\n   */\n  constructor ({\n    min = 0,\n    max = Infinity,\n    handlers = {}\n  }) {\n    this.min = min\n    this.max = max\n\n    // Handlers\n    this._onConnect = handlers.onConnect || noop\n    this._onDisconnect = handlers.onDisconnect || noop\n\n    /**\n     * Set of peers that support the protocol.\n     * @type {Set<string>}\n     */\n    this.peers = new Set()\n  }\n\n  set registrar (registrar) {\n    this._registrar = registrar\n  }\n\n  /**\n   * Notify about peer disconnected event.\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n  disconnect (peerId) {\n    this._onDisconnect(peerId)\n  }\n}\n\nmodule.exports = withIs(Topology, { className: 'Topology', symbolName: '@libp2p/js-interfaces/topology' })\n"]},"metadata":{},"sourceType":"script"}