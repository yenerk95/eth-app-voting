{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar PeerId = require('peer-id');\n\nvar CID = require('cids');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var bitswap = _ref.bitswap;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _wantlist = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId) {\n      var options,\n          list,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              // eslint-disable-line require-await\n              if (peerId && !CID.isCID(peerId) && typeof peerId !== 'string' && !Buffer.isBuffer(peerId) && !PeerId.isPeerId(peerId)) {\n                options = peerId;\n                peerId = null;\n              }\n\n              list = peerId ? bitswap.wantlistForPeer(PeerId.createFromCID(peerId)) : bitswap.getWantlist(options);\n              return _context.abrupt(\"return\", Array.from(list).map(function (e) {\n                return e[1].cid;\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function wantlist(_x) {\n      return _wantlist.apply(this, arguments);\n    }\n\n    return wantlist;\n  }());\n};","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/bitswap/wantlist.js"],"names":["PeerId","require","CID","withTimeoutOption","module","exports","bitswap","peerId","options","isCID","Buffer","isBuffer","isPeerId","list","wantlistForPeer","createFromCID","getWantlist","Array","from","map","e","cid","wantlist"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;eAC8BA,OAAO,CAAC,aAAD,C;IAA7BE,iB,YAAAA,iB;;AAERC,MAAM,CAACC,OAAP,GAAiB,gBAAiB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAChC,SAAOH,iBAAiB;AAAA,6EAAC,iBAAyBI,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiCC,cAAAA,OAAjC,2DAA2C,EAA3C;;AAAiD;AACxE,kBAAID,MAAM,IAAI,CAACL,GAAG,CAACO,KAAJ,CAAUF,MAAV,CAAX,IAAgC,OAAOA,MAAP,KAAkB,QAAlD,IAA8D,CAACG,MAAM,CAACC,QAAP,CAAgBJ,MAAhB,CAA/D,IAA0F,CAACP,MAAM,CAACY,QAAP,CAAgBL,MAAhB,CAA/F,EAAwH;AACtHC,gBAAAA,OAAO,GAAGD,MAAV;AACAA,gBAAAA,MAAM,GAAG,IAAT;AACD;;AAEKM,cAAAA,IANiB,GAMVN,MAAM,GACfD,OAAO,CAACQ,eAAR,CAAwBd,MAAM,CAACe,aAAP,CAAqBR,MAArB,CAAxB,CADe,GAEfD,OAAO,CAACU,WAAR,CAAoBR,OAApB,CARmB;AAAA,+CAUhBS,KAAK,CAACC,IAAN,CAAWL,IAAX,EAAiBM,GAAjB,CAAqB,UAAAC,CAAC;AAAA,uBAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAT;AAAA,eAAtB,CAVgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,aAAgBC,QAAhB;AAAA;AAAA;;AAAA,WAAgBA,QAAhB;AAAA,MAAxB;AAYD,CAbD","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst CID = require('cids')\nconst { withTimeoutOption } = require('../../utils')\n\nmodule.exports = ({ bitswap }) => {\n  return withTimeoutOption(async function wantlist (peerId, options = {}) { // eslint-disable-line require-await\n    if (peerId && !CID.isCID(peerId) && typeof peerId !== 'string' && !Buffer.isBuffer(peerId) && !PeerId.isPeerId(peerId)) {\n      options = peerId\n      peerId = null\n    }\n\n    const list = peerId\n      ? bitswap.wantlistForPeer(PeerId.createFromCID(peerId))\n      : bitswap.getWantlist(options)\n\n    return Array.from(list).map(e => e[1].cid)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}