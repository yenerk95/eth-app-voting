{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _awaitAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar errcode = require('err-code');\n\nvar libp2pRecord = require('libp2p-record');\n\nvar _require2 = require('interface-datastore'),\n    MemoryDatastore = _require2.MemoryDatastore;\n\nvar RoutingTable = require('./routing');\n\nvar utils = require('./utils');\n\nvar c = require('./constants');\n\nvar Network = require('./network');\n\nvar contentFetching = require('./content-fetching');\n\nvar contentRouting = require('./content-routing');\n\nvar peerRouting = require('./peer-routing');\n\nvar Message = require('./message');\n\nvar Providers = require('./providers');\n\nvar RandomWalk = require('./random-walk');\n\nvar QueryManager = require('./query-manager');\n\nvar Record = libp2pRecord.Record;\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\n\nvar KadDHT = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(KadDHT, _EventEmitter);\n\n  var _super = _createSuper(KadDHT);\n\n  /**\n   * Random walk options\n   * @typedef {Object} randomWalkOptions\n   * @property {boolean} enabled discovery enabled (default: true)\n   * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n   * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n   * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n   * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n   */\n\n  /**\n   * Create a new KadDHT.\n   * @param {Object} props\n   * @param {Libp2p} [props.libp2p] the libp2p instance\n   * @param {Dialer} props.dialer libp2p dialer instance\n   * @param {PeerId} props.peerId peer's peerId\n   * @param {PeerStore} props.peerStore libp2p peerStore\n   * @param {Object} props.registrar libp2p registrar instance\n   * @param {function} props.registrar.handle\n   * @param {function} props.registrar.register\n   * @param {function} props.registrar.unregister\n   * @param {number} props.kBucketSize k-bucket size (default 20)\n   * @param {boolean} props.clientMode If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)\n   * @param {number} props.concurrency alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore datastore (default MemoryDatastore)\n   * @param {object} props.validators validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors selectors object with namespace as keys and function(key, records)\n   * @param {randomWalkOptions} options.randomWalk randomWalk options\n   */\n  function KadDHT(_ref) {\n    var _this3;\n\n    var libp2p = _ref.libp2p,\n        dialer = _ref.dialer,\n        peerId = _ref.peerId,\n        peerStore = _ref.peerStore,\n        registrar = _ref.registrar,\n        _ref$datastore = _ref.datastore,\n        datastore = _ref$datastore === void 0 ? new MemoryDatastore() : _ref$datastore,\n        _ref$kBucketSize = _ref.kBucketSize,\n        kBucketSize = _ref$kBucketSize === void 0 ? c.K : _ref$kBucketSize,\n        _ref$clientMode = _ref.clientMode,\n        clientMode = _ref$clientMode === void 0 ? false : _ref$clientMode,\n        _ref$concurrency = _ref.concurrency,\n        concurrency = _ref$concurrency === void 0 ? c.ALPHA : _ref$concurrency,\n        _ref$validators = _ref.validators,\n        validators = _ref$validators === void 0 ? {} : _ref$validators,\n        _ref$selectors = _ref.selectors,\n        selectors = _ref$selectors === void 0 ? {} : _ref$selectors,\n        _ref$randomWalk = _ref.randomWalk,\n        randomWalk = _ref$randomWalk === void 0 ? {} : _ref$randomWalk;\n\n    _classCallCheck(this, KadDHT);\n\n    _this3 = _super.call(this);\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer');\n    }\n    /**\n     * Local reference to the libp2p instance. May be undefined.\n     * @type {Libp2p}\n     */\n\n\n    _this3.libp2p = libp2p;\n    /**\n     * Local reference to the libp2p dialer instance\n     * @type {Dialer}\n     */\n\n    _this3.dialer = dialer;\n    /**\n     * Local peer-id\n     * @type {PeerId}\n     */\n\n    _this3.peerId = peerId;\n    /**\n     * Local PeerStore\n     * @type {PeerStore}\n     */\n\n    _this3.peerStore = peerStore;\n    /**\n     * Local peer info\n     * @type {Registrar}\n     */\n\n    _this3.registrar = registrar;\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n\n    _this3.kBucketSize = kBucketSize;\n    _this3._clientMode = clientMode;\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     * @type {number}\n     */\n\n    _this3.concurrency = concurrency;\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     * @type {number}\n     */\n\n    _this3.disjointPaths = Math.ceil(_this3.kBucketSize / 2);\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n\n    _this3.routingTable = new RoutingTable(_this3.peerId, _this3.kBucketSize);\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n\n    _this3.datastore = datastore;\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n\n    _this3.providers = new Providers(_this3.datastore, _this3.peerId);\n    _this3.validators = _objectSpread({\n      pk: libp2pRecord.validator.validators.pk\n    }, validators);\n    _this3.selectors = _objectSpread({\n      pk: libp2pRecord.selection.selectors.pk\n    }, selectors);\n    _this3.network = new Network(_assertThisInitialized(_this3));\n    _this3._log = utils.logger(_this3.peerId);\n    /**\n     * Random walk management\n     *\n     * @type {RandomWalk}\n     */\n\n    _this3.randomWalk = new RandomWalk(_assertThisInitialized(_this3), randomWalk);\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n\n    _this3._queryManager = new QueryManager();\n    _this3._running = false; // DHT components\n\n    _this3.contentFetching = contentFetching(_assertThisInitialized(_this3));\n    _this3.contentRouting = contentRouting(_assertThisInitialized(_this3));\n    _this3.peerRouting = peerRouting(_assertThisInitialized(_this3));\n    return _this3;\n  }\n  /**\n   * Is this DHT running.\n   * @type {bool}\n   */\n\n\n  _createClass(KadDHT, [{\n    key: \"start\",\n\n    /**\n     * Start listening to incoming connections.\n     * @returns {Promise<void>}\n     */\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._running = true;\n                this.providers.start();\n\n                this._queryManager.start();\n\n                _context.next = 5;\n                return this.network.start();\n\n              case 5:\n                // Start random walk, it will not run if it's disabled\n                this.randomWalk.start();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n    /**\n     * Stop accepting incoming connections and sending outgoing\n     * messages.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._running = false;\n      this.randomWalk.stop();\n      this.providers.stop();\n\n      this._queryManager.stop();\n\n      return this.network.stop();\n    }\n    /**\n     * Store the given key/value  pair in the DHT.\n     * @param {Buffer} key\n     * @param {Buffer} value\n     * @param {Object} [options] - put options\n     * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, value) {\n        var options,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n                return _context2.abrupt(\"return\", this.contentFetching.put(key, value, options));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * Get the value to the given key.\n     * Times out after 1 minute by default.\n     * @param {Buffer} key\n     * @param {Object} [options] - get options\n     * @param {number} [options.timeout] - optional timeout (default: 60000)\n     * @returns {Promise<Buffer>}\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                return _context3.abrupt(\"return\", this.contentFetching.get(key, options));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Get the `n` values to the given key without sorting.\n     * @param {Buffer} key\n     * @param {number} nvals\n     * @param {Object} [options] - get options\n     * @param {number} [options.timeout] - optional timeout (default: 60000)\n     * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}\n     */\n\n  }, {\n    key: \"getMany\",\n    value: function () {\n      var _getMany = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key, nvals) {\n        var options,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n                return _context4.abrupt(\"return\", this.contentFetching.getMany(key, nvals, options));\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getMany(_x4, _x5) {\n        return _getMany.apply(this, arguments);\n      }\n\n      return getMany;\n    }() // ----------- Content Routing\n\n    /**\n     * Announce to the network that we can provide given key's value.\n     * @param {CID} key\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"provide\",\n    value: function () {\n      var _provide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.contentRouting.provide(key));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function provide(_x6) {\n        return _provide.apply(this, arguments);\n      }\n\n      return provide;\n    }()\n    /**\n     * Search the dht for up to `K` providers of the given CID.\n     * @param {CID} key\n     * @param {Object} options - findProviders options\n     * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n     * @param {number} options.maxNumProviders - maximum number of providers to find\n     * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n\n  }, {\n    key: \"findProviders\",\n    value: function findProviders(key) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, peerData;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context6.prev = 2;\n                _iterator = _asyncIterator(_this.contentRouting.findProviders(key, options));\n\n              case 4:\n                _context6.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                _step = _context6.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context6.next = 10;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 10:\n                _value = _context6.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context6.next = 18;\n                  break;\n                }\n\n                peerData = _value;\n                _context6.next = 15;\n                return peerData;\n\n              case 15:\n                _iteratorNormalCompletion = true;\n                _context6.next = 4;\n                break;\n\n              case 18:\n                _context6.next = 24;\n                break;\n\n              case 20:\n                _context6.prev = 20;\n                _context6.t0 = _context6[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context6.t0;\n\n              case 24:\n                _context6.prev = 24;\n                _context6.prev = 25;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                _context6.next = 29;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 29:\n                _context6.prev = 29;\n\n                if (!_didIteratorError) {\n                  _context6.next = 32;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 32:\n                return _context6.finish(29);\n\n              case 33:\n                return _context6.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    } // ----------- Peer Routing -----------\n\n    /**\n     * Search for a peer with the given ID.\n     *\n     * @param {PeerId} id\n     * @param {Object} options - findPeer options\n     * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n     * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n\n  }, {\n    key: \"findPeer\",\n    value: function () {\n      var _findPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {\n        var options,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n                return _context7.abrupt(\"return\", this.peerRouting.findPeer(id, options));\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function findPeer(_x7) {\n        return _findPeer.apply(this, arguments);\n      }\n\n      return findPeer;\n    }()\n    /**\n     * Kademlia 'node lookup' operation.\n     * @param {Buffer} key\n     * @param {Object} [options]\n     * @param {boolean} [options.shallow] shallow query (default: false)\n     * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n\n  }, {\n    key: \"getClosestPeers\",\n    value: function getClosestPeers(key) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        shallow: false\n      };\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, pId;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _context8.prev = 2;\n                _iterator2 = _asyncIterator(_this2.peerRouting.getClosestPeers(key, options));\n\n              case 4:\n                _context8.next = 6;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 6:\n                _step2 = _context8.sent;\n                _iteratorNormalCompletion2 = _step2.done;\n                _context8.next = 10;\n                return _awaitAsyncGenerator(_step2.value);\n\n              case 10:\n                _value2 = _context8.sent;\n\n                if (_iteratorNormalCompletion2) {\n                  _context8.next = 18;\n                  break;\n                }\n\n                pId = _value2;\n                _context8.next = 15;\n                return pId;\n\n              case 15:\n                _iteratorNormalCompletion2 = true;\n                _context8.next = 4;\n                break;\n\n              case 18:\n                _context8.next = 24;\n                break;\n\n              case 20:\n                _context8.prev = 20;\n                _context8.t0 = _context8[\"catch\"](2);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context8.t0;\n\n              case 24:\n                _context8.prev = 24;\n                _context8.prev = 25;\n\n                if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                  _context8.next = 29;\n                  break;\n                }\n\n                _context8.next = 29;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 29:\n                _context8.prev = 29;\n\n                if (!_didIteratorError2) {\n                  _context8.next = 32;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 32:\n                return _context8.finish(29);\n\n              case 33:\n                return _context8.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    }\n    /**\n     * Get the public key for the given peer id.\n     * @param {PeerId} peer\n     * @returns {Promise<PubKey>}\n     */\n\n  }, {\n    key: \"getPublicKey\",\n    value: function () {\n      var _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(peer) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.peerRouting.getPublicKey(peer));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getPublicKey(_x8) {\n        return _getPublicKey.apply(this, arguments);\n      }\n\n      return getPublicKey;\n    }() // ----------- Discovery -----------\n\n  }, {\n    key: \"_peerDiscovered\",\n    value: function _peerDiscovered(peerId, multiaddrs) {\n      this.emit('peer', {\n        id: peerId,\n        multiaddrs: multiaddrs\n      });\n    } // ----------- Internals -----------\n\n    /**\n     * Returns the routing tables closest peers, for the key of\n     * the message.\n     *\n     * @param {Message} msg\n     * @returns {Promise<Array<{ id: PeerId, multiaddrs: Multiaddr[] }>>}\n     * @private\n     */\n\n  }, {\n    key: \"_nearestPeersToQuery\",\n    value: function () {\n      var _nearestPeersToQuery2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(msg) {\n        var _this4 = this;\n\n        var key, ids;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return utils.convertBuffer(msg.key);\n\n              case 2:\n                key = _context10.sent;\n                ids = this.routingTable.closestPeers(key, this.kBucketSize);\n                return _context10.abrupt(\"return\", ids.map(function (p) {\n                  var peer = _this4.peerStore.get(p);\n\n                  return {\n                    id: p,\n                    multiaddrs: peer ? peer.addresses.map(function (address) {\n                      return address.multiaddr;\n                    }) : []\n                  };\n                }));\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _nearestPeersToQuery(_x9) {\n        return _nearestPeersToQuery2.apply(this, arguments);\n      }\n\n      return _nearestPeersToQuery;\n    }()\n    /**\n     * Get the nearest peers to the given query, but iff closer\n     * than self.\n     *\n     * @param {Message} msg\n     * @param {PeerId} peerId\n     * @returns {Promise<Array<{ id: PeerId, multiaddrs: Multiaddr[] }>>}\n     * @private\n     */\n\n  }, {\n    key: \"_betterPeersToQuery\",\n    value: function () {\n      var _betterPeersToQuery2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(msg, peerId) {\n        var _this5 = this;\n\n        var closer;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                this._log('betterPeersToQuery');\n\n                _context11.next = 3;\n                return this._nearestPeersToQuery(msg);\n\n              case 3:\n                closer = _context11.sent;\n                return _context11.abrupt(\"return\", closer.filter(function (closer) {\n                  if (_this5._isSelf(closer.id)) {\n                    // Should bail, not sure\n                    _this5._log.error('trying to return self as closer');\n\n                    return false;\n                  }\n\n                  return !closer.id.isEqual(peerId);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function _betterPeersToQuery(_x10, _x11) {\n        return _betterPeersToQuery2.apply(this, arguments);\n      }\n\n      return _betterPeersToQuery;\n    }()\n    /**\n     * Try to fetch a given record by from the local datastore.\n     * Returns the record iff it is still valid, meaning\n     * - it was either authored by this node, or\n     * - it was received less than `MAX_RECORD_AGE` ago.\n     *\n     * @param {Buffer} key\n     * @returns {Promise<Record>}\n     * @private\n     */\n\n  }, {\n    key: \"_checkLocalDatastore\",\n    value: function () {\n      var _checkLocalDatastore2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(key) {\n        var dsKey, rawRecord, record;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this._log('checkLocalDatastore: %b', key);\n\n                dsKey = utils.bufferToKey(key); // Fetch value from ds\n\n                _context12.prev = 2;\n                _context12.next = 5;\n                return this.datastore.get(dsKey);\n\n              case 5:\n                rawRecord = _context12.sent;\n                _context12.next = 13;\n                break;\n\n              case 8:\n                _context12.prev = 8;\n                _context12.t0 = _context12[\"catch\"](2);\n\n                if (!(_context12.t0.code === 'ERR_NOT_FOUND')) {\n                  _context12.next = 12;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\", undefined);\n\n              case 12:\n                throw _context12.t0;\n\n              case 13:\n                // Create record from the returned bytes\n                record = Record.deserialize(rawRecord);\n\n                if (record) {\n                  _context12.next = 16;\n                  break;\n                }\n\n                throw errcode('Invalid record', 'ERR_INVALID_RECORD');\n\n              case 16:\n                if (!(record.timeReceived == null || utils.now() - record.timeReceived > c.MAX_RECORD_AGE)) {\n                  _context12.next = 20;\n                  break;\n                }\n\n                _context12.next = 19;\n                return this.datastore.delete(dsKey);\n\n              case 19:\n                return _context12.abrupt(\"return\", undefined);\n\n              case 20:\n                return _context12.abrupt(\"return\", record);\n\n              case 21:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this, [[2, 8]]);\n      }));\n\n      function _checkLocalDatastore(_x12) {\n        return _checkLocalDatastore2.apply(this, arguments);\n      }\n\n      return _checkLocalDatastore;\n    }()\n    /**\n     * Add the peer to the routing table and update it in the peerStore.\n     * @param {PeerId} peerId\n     * @returns {Promise<void>}\n     * @private\n     */\n\n  }, {\n    key: \"_add\",\n    value: function () {\n      var _add2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(peerId) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.routingTable.add(peerId);\n\n              case 2:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function _add(_x13) {\n        return _add2.apply(this, arguments);\n      }\n\n      return _add;\n    }()\n    /**\n     * Verify a record without searching the DHT.\n     *\n     * @param {Record} record\n     * @returns {Promise<void>}\n     * @private\n     */\n\n  }, {\n    key: \"_verifyRecordLocally\",\n    value: function () {\n      var _verifyRecordLocally2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(record) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this._log('verifyRecordLocally');\n\n                _context14.next = 3;\n                return libp2pRecord.validator.verifyRecord(this.validators, record);\n\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function _verifyRecordLocally(_x14) {\n        return _verifyRecordLocally2.apply(this, arguments);\n      }\n\n      return _verifyRecordLocally;\n    }()\n    /**\n     * Is the given peer id our PeerId?\n     *\n     * @param {PeerId} other\n     * @returns {bool}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_isSelf\",\n    value: function _isSelf(other) {\n      return other && this.peerId.id.equals(other.id);\n    }\n    /**\n     * Store the given key/value pair at the peer `target`.\n     *\n     * @param {Buffer} key\n     * @param {Buffer} rec - encoded record\n     * @param {PeerId} target\n     * @returns {Promise<void>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_putValueToPeer\",\n    value: function () {\n      var _putValueToPeer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(key, rec, target) {\n        var msg, resp;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                msg = new Message(Message.TYPES.PUT_VALUE, key, 0);\n                msg.record = rec;\n                _context15.next = 4;\n                return this.network.sendRequest(target, msg);\n\n              case 4:\n                resp = _context15.sent;\n\n                if (resp.record.value.equals(Record.deserialize(rec).value)) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID');\n\n              case 7:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function _putValueToPeer(_x15, _x16, _x17) {\n        return _putValueToPeer2.apply(this, arguments);\n      }\n\n      return _putValueToPeer;\n    }()\n    /**\n     * Query a particular peer for the value for the given key.\n     * It will either return the value or a list of closer peers.\n     *\n     * Note: The peerStore is updated with new addresses found for the given peer.\n     *\n     * @param {PeerId} peer\n     * @param {Buffer} key\n     * @returns {Promise<{Record, Array<{ id: PeerId, multiaddrs: Multiaddr[] }}>}\n     * @private\n     */\n\n  }, {\n    key: \"_getValueOrPeers\",\n    value: function () {\n      var _getValueOrPeers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(peer, key) {\n        var msg, peers, record, errMsg;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this._getValueSingle(peer, key);\n\n              case 2:\n                msg = _context16.sent;\n                peers = msg.closerPeers;\n                record = msg.record;\n\n                if (!record) {\n                  _context16.next = 17;\n                  break;\n                }\n\n                _context16.prev = 6;\n                _context16.next = 9;\n                return this._verifyRecordOnline(record);\n\n              case 9:\n                _context16.next = 16;\n                break;\n\n              case 11:\n                _context16.prev = 11;\n                _context16.t0 = _context16[\"catch\"](6);\n                errMsg = 'invalid record received, discarded';\n\n                this._log(errMsg);\n\n                throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD');\n\n              case 16:\n                return _context16.abrupt(\"return\", {\n                  record: record,\n                  peers: peers\n                });\n\n              case 17:\n                if (!(peers.length > 0)) {\n                  _context16.next = 19;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\", {\n                  peers: peers\n                });\n\n              case 19:\n                throw errcode(new Error('Not found'), 'ERR_NOT_FOUND');\n\n              case 20:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[6, 11]]);\n      }));\n\n      function _getValueOrPeers(_x18, _x19) {\n        return _getValueOrPeers2.apply(this, arguments);\n      }\n\n      return _getValueOrPeers;\n    }()\n    /**\n     * Get a value via rpc call for the given parameters.\n     *\n     * @param {PeerId} peer\n     * @param {Buffer} key\n     * @returns {Promise<Message>}\n     * @private\n     */\n\n  }, {\n    key: \"_getValueSingle\",\n    value: function () {\n      var _getValueSingle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(peer, key) {\n        var msg;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                // eslint-disable-line require-await\n                msg = new Message(Message.TYPES.GET_VALUE, key, 0);\n                return _context17.abrupt(\"return\", this.network.sendRequest(peer, msg));\n\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function _getValueSingle(_x20, _x21) {\n        return _getValueSingle2.apply(this, arguments);\n      }\n\n      return _getValueSingle;\n    }()\n    /**\n     * Verify a record, fetching missing public keys from the network.\n     * Calls back with an error if the record is invalid.\n     *\n     * @param {Record} record\n     * @returns {Promise<void>}\n     * @private\n     */\n\n  }, {\n    key: \"_verifyRecordOnline\",\n    value: function () {\n      var _verifyRecordOnline2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(record) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return libp2pRecord.validator.verifyRecord(this.validators, record);\n\n              case 2:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function _verifyRecordOnline(_x22) {\n        return _verifyRecordOnline2.apply(this, arguments);\n      }\n\n      return _verifyRecordOnline;\n    }()\n  }, {\n    key: \"isStarted\",\n    get: function get() {\n      return this._running;\n    }\n  }]);\n\n  return KadDHT;\n}(EventEmitter);\n\nmodule.exports = KadDHT;\nmodule.exports.multicodec = c.PROTOCOL_DHT;","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/libp2p-kad-dht/src/index.js"],"names":["require","EventEmitter","errcode","libp2pRecord","MemoryDatastore","RoutingTable","utils","c","Network","contentFetching","contentRouting","peerRouting","Message","Providers","RandomWalk","QueryManager","Record","KadDHT","libp2p","dialer","peerId","peerStore","registrar","datastore","kBucketSize","K","clientMode","concurrency","ALPHA","validators","selectors","randomWalk","Error","_clientMode","disjointPaths","Math","ceil","routingTable","providers","pk","validator","selection","network","_log","logger","_queryManager","_running","start","stop","key","value","options","put","get","nvals","getMany","provide","findProviders","peerData","id","findPeer","shallow","getClosestPeers","pId","peer","getPublicKey","multiaddrs","emit","msg","convertBuffer","ids","closestPeers","map","p","addresses","address","multiaddr","_nearestPeersToQuery","closer","filter","_isSelf","error","isEqual","dsKey","bufferToKey","rawRecord","code","undefined","record","deserialize","timeReceived","now","MAX_RECORD_AGE","delete","add","verifyRecord","other","equals","rec","target","TYPES","PUT_VALUE","sendRequest","resp","_getValueSingle","peers","closerPeers","_verifyRecordOnline","errMsg","length","GET_VALUE","module","exports","multicodec","PROTOCOL_DHT"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;eAEyBA,OAAO,CAAC,QAAD,C;IAAxBC,Y,YAAAA,Y;;AACR,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAMG,YAAY,GAAGH,OAAO,CAAC,eAAD,CAA5B;;gBAC4BA,OAAO,CAAC,qBAAD,C;IAA3BI,e,aAAAA,e;;AAER,IAAMC,YAAY,GAAGL,OAAO,CAAC,WAAD,CAA5B;;AACA,IAAMM,KAAK,GAAGN,OAAO,CAAC,SAAD,CAArB;;AACA,IAAMO,CAAC,GAAGP,OAAO,CAAC,aAAD,CAAjB;;AACA,IAAMQ,OAAO,GAAGR,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMS,eAAe,GAAGT,OAAO,CAAC,oBAAD,CAA/B;;AACA,IAAMU,cAAc,GAAGV,OAAO,CAAC,mBAAD,CAA9B;;AACA,IAAMW,WAAW,GAAGX,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAMY,OAAO,GAAGZ,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMa,SAAS,GAAGb,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMc,UAAU,GAAGd,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAMe,YAAY,GAAGf,OAAO,CAAC,iBAAD,CAA5B;;AAEA,IAAMgB,MAAM,GAAGb,YAAY,CAACa,MAA5B;AAEA;;;;;IAIMC,M;;;;;AACJ;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;AAmBA,wBAaG;AAAA;;AAAA,QAZDC,MAYC,QAZDA,MAYC;AAAA,QAXDC,MAWC,QAXDA,MAWC;AAAA,QAVDC,MAUC,QAVDA,MAUC;AAAA,QATDC,SASC,QATDA,SASC;AAAA,QARDC,SAQC,QARDA,SAQC;AAAA,8BAPDC,SAOC;AAAA,QAPDA,SAOC,+BAPW,IAAInB,eAAJ,EAOX;AAAA,gCANDoB,WAMC;AAAA,QANDA,WAMC,iCANajB,CAAC,CAACkB,CAMf;AAAA,+BALDC,UAKC;AAAA,QALDA,UAKC,gCALY,KAKZ;AAAA,gCAJDC,WAIC;AAAA,QAJDA,WAIC,iCAJapB,CAAC,CAACqB,KAIf;AAAA,+BAHDC,UAGC;AAAA,QAHDA,UAGC,gCAHY,EAGZ;AAAA,8BAFDC,SAEC;AAAA,QAFDA,SAEC,+BAFW,EAEX;AAAA,+BADDC,UACC;AAAA,QADDA,UACC,gCADY,EACZ;;AAAA;;AACD;;AAEA,QAAI,CAACZ,MAAL,EAAa;AACX,YAAM,IAAIa,KAAJ,CAAU,+CAAV,CAAN;AACD;AAED;;;;;;AAIA,WAAKd,MAAL,GAAcA,MAAd;AAEA;;;;;AAIA,WAAKC,MAAL,GAAcA,MAAd;AAEA;;;;;AAIA,WAAKC,MAAL,GAAcA,MAAd;AAEA;;;;;AAIA,WAAKC,SAAL,GAAiBA,SAAjB;AAEA;;;;;AAIA,WAAKC,SAAL,GAAiBA,SAAjB;AAEA;;;;;;AAKA,WAAKE,WAAL,GAAmBA,WAAnB;AAEA,WAAKS,WAAL,GAAmBP,UAAnB;AAEA;;;;;AAIA,WAAKC,WAAL,GAAmBA,WAAnB;AAEA;;;;;;AAKA,WAAKO,aAAL,GAAqBC,IAAI,CAACC,IAAL,CAAU,OAAKZ,WAAL,GAAmB,CAA7B,CAArB;AAEA;;;;;;AAKA,WAAKa,YAAL,GAAoB,IAAIhC,YAAJ,CAAiB,OAAKe,MAAtB,EAA8B,OAAKI,WAAnC,CAApB;AAEA;;;;;;AAKA,WAAKD,SAAL,GAAiBA,SAAjB;AAEA;;;;;;AAKA,WAAKe,SAAL,GAAiB,IAAIzB,SAAJ,CAAc,OAAKU,SAAnB,EAA8B,OAAKH,MAAnC,CAAjB;AAEA,WAAKS,UAAL;AACEU,MAAAA,EAAE,EAAEpC,YAAY,CAACqC,SAAb,CAAuBX,UAAvB,CAAkCU;AADxC,OAEKV,UAFL;AAKA,WAAKC,SAAL;AACES,MAAAA,EAAE,EAAEpC,YAAY,CAACsC,SAAb,CAAuBX,SAAvB,CAAiCS;AADvC,OAEKT,SAFL;AAKA,WAAKY,OAAL,GAAe,IAAIlC,OAAJ,gCAAf;AAEA,WAAKmC,IAAL,GAAYrC,KAAK,CAACsC,MAAN,CAAa,OAAKxB,MAAlB,CAAZ;AAEA;;;;;;AAKA,WAAKW,UAAL,GAAkB,IAAIjB,UAAJ,iCAAqBiB,UAArB,CAAlB;AAEA;;;;;;AAKA,WAAKc,aAAL,GAAqB,IAAI9B,YAAJ,EAArB;AAEA,WAAK+B,QAAL,GAAgB,KAAhB,CA5GC,CA8GD;;AACA,WAAKrC,eAAL,GAAuBA,eAAe,gCAAtC;AACA,WAAKC,cAAL,GAAsBA,cAAc,gCAApC;AACA,WAAKC,WAAL,GAAmBA,WAAW,gCAA9B;AAjHC;AAkHF;AAED;;;;;;;;;AAQA;;;;;;;;;;AAKE,qBAAKmC,QAAL,GAAgB,IAAhB;AACA,qBAAKR,SAAL,CAAeS,KAAf;;AACA,qBAAKF,aAAL,CAAmBE,KAAnB;;;uBACM,KAAKL,OAAL,CAAaK,KAAb,E;;;AAEN;AACA,qBAAKhB,UAAL,CAAgBgB,KAAhB;;;;;;;;;;;;;;;;AAGF;;;;;;;;2BAKQ;AACN,WAAKD,QAAL,GAAgB,KAAhB;AACA,WAAKf,UAAL,CAAgBiB,IAAhB;AACA,WAAKV,SAAL,CAAeU,IAAf;;AACA,WAAKH,aAAL,CAAmBG,IAAnB;;AACA,aAAO,KAAKN,OAAL,CAAaM,IAAb,EAAP;AACD;AAED;;;;;;;;;;;;4FAQWC,G,EAAKC,K;;;;;;;AAAOC,gBAAAA,O,8DAAU,E;kDACxB,KAAK1C,eAAL,CAAqB2C,GAArB,CAAyBH,GAAzB,EAA8BC,KAA9B,EAAqCC,OAArC,C;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;4FAQWF,G;;;;;;;AAAKE,gBAAAA,O,8DAAU,E;kDACjB,KAAK1C,eAAL,CAAqB4C,GAArB,CAAyBJ,GAAzB,EAA8BE,OAA9B,C;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;gGAQeF,G,EAAKK,K;;;;;;;AAAOH,gBAAAA,O,8DAAU,E;kDAC5B,KAAK1C,eAAL,CAAqB8C,OAArB,CAA6BN,GAA7B,EAAkCK,KAAlC,EAAyCH,OAAzC,C;;;;;;;;;;;;;;;QAGT;;AAEA;;;;;;;;;gGAKeF,G;;;;;kDACN,KAAKvC,cAAL,CAAoB8C,OAApB,CAA4BP,GAA5B,C;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;kCAQuBA,G,EAAmB;AAAA;;AAAA,UAAdE,OAAc,uEAAJ,EAAI;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACX,KAAI,CAACzC,cAAL,CAAoB+C,aAApB,CAAkCR,GAAlC,EAAuCE,OAAvC,CADW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACvBO,gBAAAA,QADuB;AAAA;AAEtC,uBAAMA,QAAN;;AAFsC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIzC,K,CAED;;AAEA;;;;;;;;;;;;iGAQgBC,E;;;;;;;AAAIR,gBAAAA,O,8DAAU,E;kDACrB,KAAKxC,WAAL,CAAiBiD,QAAjB,CAA0BD,EAA1B,EAA8BR,OAA9B,C;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;oCAOyBF,G,EAAmC;AAAA;;AAAA,UAA9BE,OAA8B,uEAApB;AAAEU,QAAAA,OAAO,EAAE;AAAX,OAAoB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAClC,MAAI,CAAClD,WAAL,CAAiBmD,eAAjB,CAAiCb,GAAjC,EAAsCE,OAAtC,CADkC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACzCY,gBAAAA,GADyC;AAAA;AAExD,uBAAMA,GAAN;;AAFwD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI3D;AAED;;;;;;;;;qGAKoBC,I;;;;;kDACX,KAAKrD,WAAL,CAAiBsD,YAAjB,CAA8BD,IAA9B,C;;;;;;;;;;;;;;;QAGT;;;;oCAEiB5C,M,EAAQ8C,U,EAAY;AACnC,WAAKC,IAAL,CAAU,MAAV,EAAkB;AAChBR,QAAAA,EAAE,EAAEvC,MADY;AAEhB8C,QAAAA,UAAU,EAAVA;AAFgB,OAAlB;AAID,K,CAED;;AAEA;;;;;;;;;;;;8GAQ4BE,G;;;;;;;;;uBACR9D,KAAK,CAAC+D,aAAN,CAAoBD,GAAG,CAACnB,GAAxB,C;;;AAAZA,gBAAAA,G;AACAqB,gBAAAA,G,GAAM,KAAKjC,YAAL,CAAkBkC,YAAlB,CAA+BtB,GAA/B,EAAoC,KAAKzB,WAAzC,C;mDAEL8C,GAAG,CAACE,GAAJ,CAAQ,UAACC,CAAD,EAAO;AACpB,sBAAMT,IAAI,GAAG,MAAI,CAAC3C,SAAL,CAAegC,GAAf,CAAmBoB,CAAnB,CAAb;;AAEA,yBAAO;AACLd,oBAAAA,EAAE,EAAEc,CADC;AAELP,oBAAAA,UAAU,EAAEF,IAAI,GAAGA,IAAI,CAACU,SAAL,CAAeF,GAAf,CAAmB,UAACG,OAAD;AAAA,6BAAaA,OAAO,CAACC,SAArB;AAAA,qBAAnB,CAAH,GAAwD;AAFnE,mBAAP;AAID,iBAPM,C;;;;;;;;;;;;;;;;AAUT;;;;;;;;;;;;;6GAS2BR,G,EAAKhD,M;;;;;;;;AAC9B,qBAAKuB,IAAL,CAAU,oBAAV;;;uBACqB,KAAKkC,oBAAL,CAA0BT,GAA1B,C;;;AAAfU,gBAAAA,M;mDAECA,MAAM,CAACC,MAAP,CAAc,UAACD,MAAD,EAAY;AAC/B,sBAAI,MAAI,CAACE,OAAL,CAAaF,MAAM,CAACnB,EAApB,CAAJ,EAA6B;AAC3B;AACA,oBAAA,MAAI,CAAChB,IAAL,CAAUsC,KAAV,CAAgB,iCAAhB;;AACA,2BAAO,KAAP;AACD;;AAED,yBAAO,CAACH,MAAM,CAACnB,EAAP,CAAUuB,OAAV,CAAkB9D,MAAlB,CAAR;AACD,iBARM,C;;;;;;;;;;;;;;;;AAWT;;;;;;;;;;;;;;8GAW4B6B,G;;;;;;AAC1B,qBAAKN,IAAL,CAAU,yBAAV,EAAqCM,GAArC;;AACMkC,gBAAAA,K,GAAQ7E,KAAK,CAAC8E,WAAN,CAAkBnC,GAAlB,C,EAEd;;;;uBAGoB,KAAK1B,SAAL,CAAe8B,GAAf,CAAmB8B,KAAnB,C;;;AAAlBE,gBAAAA,S;;;;;;;;sBAEI,cAAIC,IAAJ,KAAa,e;;;;;mDACRC,S;;;;;;AAKX;AACMC,gBAAAA,M,GAASxE,MAAM,CAACyE,WAAP,CAAmBJ,SAAnB,C;;oBAEVG,M;;;;;sBACGtF,OAAO,CAAC,gBAAD,EAAmB,oBAAnB,C;;;sBAIXsF,MAAM,CAACE,YAAP,IAAuB,IAAvB,IACFpF,KAAK,CAACqF,GAAN,KAAcH,MAAM,CAACE,YAArB,GAAoCnF,CAAC,CAACqF,c;;;;;;uBAEhC,KAAKrE,SAAL,CAAesE,MAAf,CAAsBV,KAAtB,C;;;mDACCI,S;;;mDAIFC,M;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;8FAMYpE,M;;;;;;uBACJ,KAAKiB,YAAL,CAAkByD,GAAlB,CAAsB1E,MAAtB,C;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;;8GAQ4BoE,M;;;;;AAC1B,qBAAK7C,IAAL,CAAU,qBAAV;;;uBAEMxC,YAAY,CAACqC,SAAb,CAAuBuD,YAAvB,CAAoC,KAAKlE,UAAzC,EAAqD2D,MAArD,C;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;;4BASSQ,K,EAAO;AACd,aAAOA,KAAK,IAAI,KAAK5E,MAAL,CAAYuC,EAAZ,CAAesC,MAAf,CAAsBD,KAAK,CAACrC,EAA5B,CAAhB;AACD;AAED;;;;;;;;;;;;;;yGAWuBV,G,EAAKiD,G,EAAKC,M;;;;;;AACzB/B,gBAAAA,G,GAAM,IAAIxD,OAAJ,CAAYA,OAAO,CAACwF,KAAR,CAAcC,SAA1B,EAAqCpD,GAArC,EAA0C,CAA1C,C;AACZmB,gBAAAA,GAAG,CAACoB,MAAJ,GAAaU,GAAb;;uBAEmB,KAAKxD,OAAL,CAAa4D,WAAb,CAAyBH,MAAzB,EAAiC/B,GAAjC,C;;;AAAbmC,gBAAAA,I;;oBAEDA,IAAI,CAACf,MAAL,CAAYtC,KAAZ,CAAkB+C,MAAlB,CAAyBjF,MAAM,CAACyE,WAAP,CAAmBS,GAAnB,EAAwBhD,KAAjD,C;;;;;sBACGhD,OAAO,CAAC,IAAI8B,KAAJ,CAAU,yBAAV,CAAD,EAAuC,uBAAvC,C;;;;;;;;;;;;;;;;AAIjB;;;;;;;;;;;;;;;0GAYwBgC,I,EAAMf,G;;;;;;;uBACV,KAAKuD,eAAL,CAAqBxC,IAArB,EAA2Bf,GAA3B,C;;;AAAZmB,gBAAAA,G;AAEAqC,gBAAAA,K,GAAQrC,GAAG,CAACsC,W;AACZlB,gBAAAA,M,GAASpB,GAAG,CAACoB,M;;qBAEfA,M;;;;;;;uBAGM,KAAKmB,mBAAL,CAAyBnB,MAAzB,C;;;;;;;;;AAEAoB,gBAAAA,M,GAAS,oC;;AACf,qBAAKjE,IAAL,CAAUiE,MAAV;;sBACM1G,OAAO,CAAC,IAAI8B,KAAJ,CAAU4E,MAAV,CAAD,EAAoB,oBAApB,C;;;mDAGR;AAAEpB,kBAAAA,MAAM,EAANA,MAAF;AAAUiB,kBAAAA,KAAK,EAALA;AAAV,iB;;;sBAGLA,KAAK,CAACI,MAAN,GAAe,C;;;;;mDACV;AAAEJ,kBAAAA,KAAK,EAALA;AAAF,iB;;;sBAGHvG,OAAO,CAAC,IAAI8B,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,C;;;;;;;;;;;;;;;;AAGf;;;;;;;;;;;;yGASuBgC,I,EAAMf,G;;;;;;AAAO;AAC5BmB,gBAAAA,G,GAAM,IAAIxD,OAAJ,CAAYA,OAAO,CAACwF,KAAR,CAAcU,SAA1B,EAAqC7D,GAArC,EAA0C,CAA1C,C;mDACL,KAAKP,OAAL,CAAa4D,WAAb,CAAyBtC,IAAzB,EAA+BI,GAA/B,C;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;6GAS2BoB,M;;;;;;uBACnBrF,YAAY,CAACqC,SAAb,CAAuBuD,YAAvB,CAAoC,KAAKlE,UAAzC,EAAqD2D,MAArD,C;;;;;;;;;;;;;;;;;;wBA/VS;AACf,aAAO,KAAK1C,QAAZ;AACD;;;;EArKkB7C,Y;;AAsgBrB8G,MAAM,CAACC,OAAP,GAAiB/F,MAAjB;AACA8F,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B1G,CAAC,CAAC2G,YAA9B","sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst errcode = require('err-code')\n\nconst libp2pRecord = require('libp2p-record')\nconst { MemoryDatastore } = require('interface-datastore')\n\nconst RoutingTable = require('./routing')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Network = require('./network')\nconst contentFetching = require('./content-fetching')\nconst contentRouting = require('./content-routing')\nconst peerRouting = require('./peer-routing')\nconst Message = require('./message')\nconst Providers = require('./providers')\nconst RandomWalk = require('./random-walk')\nconst QueryManager = require('./query-manager')\n\nconst Record = libp2pRecord.Record\n\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nclass KadDHT extends EventEmitter {\n  /**\n   * Random walk options\n   * @typedef {Object} randomWalkOptions\n   * @property {boolean} enabled discovery enabled (default: true)\n   * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n   * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n   * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n   * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n   */\n\n  /**\n   * Create a new KadDHT.\n   * @param {Object} props\n   * @param {Libp2p} [props.libp2p] the libp2p instance\n   * @param {Dialer} props.dialer libp2p dialer instance\n   * @param {PeerId} props.peerId peer's peerId\n   * @param {PeerStore} props.peerStore libp2p peerStore\n   * @param {Object} props.registrar libp2p registrar instance\n   * @param {function} props.registrar.handle\n   * @param {function} props.registrar.register\n   * @param {function} props.registrar.unregister\n   * @param {number} props.kBucketSize k-bucket size (default 20)\n   * @param {boolean} props.clientMode If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)\n   * @param {number} props.concurrency alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore datastore (default MemoryDatastore)\n   * @param {object} props.validators validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors selectors object with namespace as keys and function(key, records)\n   * @param {randomWalkOptions} options.randomWalk randomWalk options\n   */\n  constructor ({\n    libp2p,\n    dialer,\n    peerId,\n    peerStore,\n    registrar,\n    datastore = new MemoryDatastore(),\n    kBucketSize = c.K,\n    clientMode = false,\n    concurrency = c.ALPHA,\n    validators = {},\n    selectors = {},\n    randomWalk = {}\n  }) {\n    super()\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer')\n    }\n\n    /**\n     * Local reference to the libp2p instance. May be undefined.\n     * @type {Libp2p}\n     */\n    this.libp2p = libp2p\n\n    /**\n     * Local reference to the libp2p dialer instance\n     * @type {Dialer}\n     */\n    this.dialer = dialer\n\n    /**\n     * Local peer-id\n     * @type {PeerId}\n     */\n    this.peerId = peerId\n\n    /**\n     * Local PeerStore\n     * @type {PeerStore}\n     */\n    this.peerStore = peerStore\n\n    /**\n     * Local peer info\n     * @type {Registrar}\n     */\n    this.registrar = registrar\n\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n    this.kBucketSize = kBucketSize\n\n    this._clientMode = clientMode\n\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     * @type {number}\n     */\n    this.concurrency = concurrency\n\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     * @type {number}\n     */\n    this.disjointPaths = Math.ceil(this.kBucketSize / 2)\n\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n    this.routingTable = new RoutingTable(this.peerId, this.kBucketSize)\n\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n    this.datastore = datastore\n\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n    this.providers = new Providers(this.datastore, this.peerId)\n\n    this.validators = {\n      pk: libp2pRecord.validator.validators.pk,\n      ...validators\n    }\n\n    this.selectors = {\n      pk: libp2pRecord.selection.selectors.pk,\n      ...selectors\n    }\n\n    this.network = new Network(this)\n\n    this._log = utils.logger(this.peerId)\n\n    /**\n     * Random walk management\n     *\n     * @type {RandomWalk}\n     */\n    this.randomWalk = new RandomWalk(this, randomWalk)\n\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n    this._queryManager = new QueryManager()\n\n    this._running = false\n\n    // DHT components\n    this.contentFetching = contentFetching(this)\n    this.contentRouting = contentRouting(this)\n    this.peerRouting = peerRouting(this)\n  }\n\n  /**\n   * Is this DHT running.\n   * @type {bool}\n   */\n  get isStarted () {\n    return this._running\n  }\n\n  /**\n   * Start listening to incoming connections.\n   * @returns {Promise<void>}\n   */\n  async start () {\n    this._running = true\n    this.providers.start()\n    this._queryManager.start()\n    await this.network.start()\n\n    // Start random walk, it will not run if it's disabled\n    this.randomWalk.start()\n  }\n\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   * @returns {Promise<void>}\n   */\n  stop () {\n    this._running = false\n    this.randomWalk.stop()\n    this.providers.stop()\n    this._queryManager.stop()\n    return this.network.stop()\n  }\n\n  /**\n   * Store the given key/value  pair in the DHT.\n   * @param {Buffer} key\n   * @param {Buffer} value\n   * @param {Object} [options] - put options\n   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n   * @returns {Promise<void>}\n   */\n  async put (key, value, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.put(key, value, options)\n  }\n\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   * @param {Buffer} key\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Buffer>}\n   */\n  async get (key, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.get(key, options)\n  }\n\n  /**\n   * Get the `n` values to the given key without sorting.\n   * @param {Buffer} key\n   * @param {number} nvals\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}\n   */\n  async getMany (key, nvals, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.getMany(key, nvals, options)\n  }\n\n  // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value.\n   * @param {CID} key\n   * @returns {Promise<void>}\n   */\n  async provide (key) { // eslint-disable-line require-await\n    return this.contentRouting.provide(key)\n  }\n\n  /**\n   * Search the dht for up to `K` providers of the given CID.\n   * @param {CID} key\n   * @param {Object} options - findProviders options\n   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n   * @param {number} options.maxNumProviders - maximum number of providers to find\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async * findProviders (key, options = {}) {\n    for await (const peerData of this.contentRouting.findProviders(key, options)) {\n      yield peerData\n    }\n  }\n\n  // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID.\n   *\n   * @param {PeerId} id\n   * @param {Object} options - findPeer options\n   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async findPeer (id, options = {}) { // eslint-disable-line require-await\n    return this.peerRouting.findPeer(id, options)\n  }\n\n  /**\n   * Kademlia 'node lookup' operation.\n   * @param {Buffer} key\n   * @param {Object} [options]\n   * @param {boolean} [options.shallow] shallow query (default: false)\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async * getClosestPeers (key, options = { shallow: false }) {\n    for await (const pId of this.peerRouting.getClosestPeers(key, options)) {\n      yield pId\n    }\n  }\n\n  /**\n   * Get the public key for the given peer id.\n   * @param {PeerId} peer\n   * @returns {Promise<PubKey>}\n   */\n  async getPublicKey (peer) { // eslint-disable-line require-await\n    return this.peerRouting.getPublicKey(peer)\n  }\n\n  // ----------- Discovery -----------\n\n  _peerDiscovered (peerId, multiaddrs) {\n    this.emit('peer', {\n      id: peerId,\n      multiaddrs\n    })\n  }\n\n  // ----------- Internals -----------\n\n  /**\n   * Returns the routing tables closest peers, for the key of\n   * the message.\n   *\n   * @param {Message} msg\n   * @returns {Promise<Array<{ id: PeerId, multiaddrs: Multiaddr[] }>>}\n   * @private\n   */\n  async _nearestPeersToQuery (msg) {\n    const key = await utils.convertBuffer(msg.key)\n    const ids = this.routingTable.closestPeers(key, this.kBucketSize)\n\n    return ids.map((p) => {\n      const peer = this.peerStore.get(p)\n\n      return {\n        id: p,\n        multiaddrs: peer ? peer.addresses.map((address) => address.multiaddr) : []\n      }\n    })\n  }\n\n  /**\n   * Get the nearest peers to the given query, but iff closer\n   * than self.\n   *\n   * @param {Message} msg\n   * @param {PeerId} peerId\n   * @returns {Promise<Array<{ id: PeerId, multiaddrs: Multiaddr[] }>>}\n   * @private\n   */\n  async _betterPeersToQuery (msg, peerId) {\n    this._log('betterPeersToQuery')\n    const closer = await this._nearestPeersToQuery(msg)\n\n    return closer.filter((closer) => {\n      if (this._isSelf(closer.id)) {\n        // Should bail, not sure\n        this._log.error('trying to return self as closer')\n        return false\n      }\n\n      return !closer.id.isEqual(peerId)\n    })\n  }\n\n  /**\n   * Try to fetch a given record by from the local datastore.\n   * Returns the record iff it is still valid, meaning\n   * - it was either authored by this node, or\n   * - it was received less than `MAX_RECORD_AGE` ago.\n   *\n   * @param {Buffer} key\n   * @returns {Promise<Record>}\n   * @private\n   */\n\n  async _checkLocalDatastore (key) {\n    this._log('checkLocalDatastore: %b', key)\n    const dsKey = utils.bufferToKey(key)\n\n    // Fetch value from ds\n    let rawRecord\n    try {\n      rawRecord = await this.datastore.get(dsKey)\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined\n      }\n      throw err\n    }\n\n    // Create record from the returned bytes\n    const record = Record.deserialize(rawRecord)\n\n    if (!record) {\n      throw errcode('Invalid record', 'ERR_INVALID_RECORD')\n    }\n\n    // Check validity: compare time received with max record age\n    if (record.timeReceived == null ||\n      utils.now() - record.timeReceived > c.MAX_RECORD_AGE) {\n      // If record is bad delete it and return\n      await this.datastore.delete(dsKey)\n      return undefined\n    }\n\n    // Record is valid\n    return record\n  }\n\n  /**\n   * Add the peer to the routing table and update it in the peerStore.\n   * @param {PeerId} peerId\n   * @returns {Promise<void>}\n   * @private\n   */\n  async _add (peerId) {\n    await this.routingTable.add(peerId)\n  }\n\n  /**\n   * Verify a record without searching the DHT.\n   *\n   * @param {Record} record\n   * @returns {Promise<void>}\n   * @private\n   */\n\n  async _verifyRecordLocally (record) {\n    this._log('verifyRecordLocally')\n\n    await libp2pRecord.validator.verifyRecord(this.validators, record)\n  }\n\n  /**\n   * Is the given peer id our PeerId?\n   *\n   * @param {PeerId} other\n   * @returns {bool}\n   *\n   * @private\n   */\n\n  _isSelf (other) {\n    return other && this.peerId.id.equals(other.id)\n  }\n\n  /**\n   * Store the given key/value pair at the peer `target`.\n   *\n   * @param {Buffer} key\n   * @param {Buffer} rec - encoded record\n   * @param {PeerId} target\n   * @returns {Promise<void>}\n   *\n   * @private\n   */\n\n  async _putValueToPeer (key, rec, target) {\n    const msg = new Message(Message.TYPES.PUT_VALUE, key, 0)\n    msg.record = rec\n\n    const resp = await this.network.sendRequest(target, msg)\n\n    if (!resp.record.value.equals(Record.deserialize(rec).value)) {\n      throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID')\n    }\n  }\n\n  /**\n   * Query a particular peer for the value for the given key.\n   * It will either return the value or a list of closer peers.\n   *\n   * Note: The peerStore is updated with new addresses found for the given peer.\n   *\n   * @param {PeerId} peer\n   * @param {Buffer} key\n   * @returns {Promise<{Record, Array<{ id: PeerId, multiaddrs: Multiaddr[] }}>}\n   * @private\n   */\n\n  async _getValueOrPeers (peer, key) {\n    const msg = await this._getValueSingle(peer, key)\n\n    const peers = msg.closerPeers\n    const record = msg.record\n\n    if (record) {\n      // We have a record\n      try {\n        await this._verifyRecordOnline(record)\n      } catch (err) {\n        const errMsg = 'invalid record received, discarded'\n        this._log(errMsg)\n        throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD')\n      }\n\n      return { record, peers }\n    }\n\n    if (peers.length > 0) {\n      return { peers }\n    }\n\n    throw errcode(new Error('Not found'), 'ERR_NOT_FOUND')\n  }\n\n  /**\n   * Get a value via rpc call for the given parameters.\n   *\n   * @param {PeerId} peer\n   * @param {Buffer} key\n   * @returns {Promise<Message>}\n   * @private\n   */\n\n  async _getValueSingle (peer, key) { // eslint-disable-line require-await\n    const msg = new Message(Message.TYPES.GET_VALUE, key, 0)\n    return this.network.sendRequest(peer, msg)\n  }\n\n  /**\n   * Verify a record, fetching missing public keys from the network.\n   * Calls back with an error if the record is invalid.\n   *\n   * @param {Record} record\n   * @returns {Promise<void>}\n   * @private\n   */\n\n  async _verifyRecordOnline (record) {\n    await libp2pRecord.validator.verifyRecord(this.validators, record)\n  }\n}\n\nmodule.exports = KadDHT\nmodule.exports.multicodec = c.PROTOCOL_DHT\n"]},"metadata":{},"sourceType":"script"}