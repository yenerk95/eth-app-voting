{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:components:init');\n\nconst PeerId = require('peer-id');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst mergeOptions = require('merge-options');\n\nconst getDefaultConfig = require('../runtime/config-nodejs.js');\n\nconst createRepo = require('../runtime/repo-nodejs');\n\nconst mortice = require('mortice');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst UnixFs = require('ipfs-unixfs');\n\nconst multicodec = require('multicodec');\n\nconst {\n  AlreadyInitializingError,\n  AlreadyInitializedError,\n  NotStartedError,\n  NotEnabledError\n} = require('../errors');\n\nconst BlockService = require('ipfs-block-service');\n\nconst Ipld = require('ipld');\n\nconst getDefaultIpldOptions = require('../runtime/ipld-nodejs');\n\nconst createPreloader = require('../preload');\n\nconst {\n  ERR_REPO_NOT_INITIALIZED\n} = require('ipfs-repo').errors;\n\nconst IPNS = require('../ipns');\n\nconst OfflineDatastore = require('../ipns/routing/offline-datastore');\n\nconst initAssets = require('../runtime/init-assets-nodejs');\n\nconst PinManager = require('./pin/pin-manager');\n\nconst Components = require('./');\n\nmodule.exports = ({\n  apiManager,\n  print,\n  options: constructorOptions\n}) => async function init(options) {\n  const {\n    cancel\n  } = apiManager.update({\n    init: () => {\n      throw new AlreadyInitializingError();\n    }\n  });\n\n  try {\n    options = options || {};\n\n    if (typeof constructorOptions.init === 'object') {\n      options = mergeOptions(constructorOptions.init, options);\n    }\n\n    options.pass = options.pass || constructorOptions.pass;\n\n    if (constructorOptions.config) {\n      options.config = mergeOptions(options.config, constructorOptions.config);\n    }\n\n    options.repo = options.repo || constructorOptions.repo;\n    options.repoAutoMigrate = options.repoAutoMigrate || constructorOptions.repoAutoMigrate;\n    const repo = typeof options.repo === 'string' || options.repo == null ? createRepo({\n      path: options.repo,\n      autoMigrate: options.repoAutoMigrate\n    }) : options.repo;\n    let isInitialized = true;\n\n    if (repo.closed) {\n      try {\n        await repo.open();\n      } catch (err) {\n        if (err.code === ERR_REPO_NOT_INITIALIZED) {\n          isInitialized = false;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    if (!isInitialized && options.allowNew === false) {\n      throw new NotEnabledError('new repo initialization is not enabled');\n    }\n\n    const {\n      peerId,\n      keychain\n    } = isInitialized ? await initExistingRepo(repo, options) : await initNewRepo(repo, { ...options,\n      print\n    });\n    log('peer created');\n    const blockService = new BlockService(repo);\n    const ipld = new Ipld(getDefaultIpldOptions(blockService, constructorOptions.ipld, log));\n    const preload = createPreloader(constructorOptions.preload);\n    await preload.start(); // Make sure GC lock is specific to repo, for tests where there are\n    // multiple instances of IPFS\n\n    const gcLock = mortice(repo.path, {\n      singleProcess: constructorOptions.repoOwner !== false\n    });\n    const dag = {\n      get: Components.dag.get({\n        ipld,\n        preload\n      }),\n      resolve: Components.dag.resolve({\n        ipld,\n        preload\n      }),\n      tree: Components.dag.tree({\n        ipld,\n        preload\n      })\n    };\n    const object = {\n      data: Components.object.data({\n        ipld,\n        preload\n      }),\n      get: Components.object.get({\n        ipld,\n        preload\n      }),\n      links: Components.object.links({\n        dag\n      }),\n      new: Components.object.new({\n        ipld,\n        preload\n      }),\n      patch: {\n        addLink: Components.object.patch.addLink({\n          ipld,\n          gcLock,\n          preload\n        }),\n        appendData: Components.object.patch.appendData({\n          ipld,\n          gcLock,\n          preload\n        }),\n        rmLink: Components.object.patch.rmLink({\n          ipld,\n          gcLock,\n          preload\n        }),\n        setData: Components.object.patch.setData({\n          ipld,\n          gcLock,\n          preload\n        })\n      },\n      put: Components.object.put({\n        ipld,\n        gcLock,\n        preload\n      }),\n      stat: Components.object.stat({\n        ipld,\n        preload\n      })\n    };\n    const pinManager = new PinManager(repo, dag);\n    await pinManager.load();\n    const pin = {\n      add: Components.pin.add({\n        pinManager,\n        gcLock,\n        dag\n      }),\n      ls: Components.pin.ls({\n        pinManager,\n        dag\n      }),\n      rm: Components.pin.rm({\n        pinManager,\n        gcLock,\n        dag\n      })\n    }; // FIXME: resolve this circular dependency\n\n    dag.put = Components.dag.put({\n      ipld,\n      pin,\n      gcLock,\n      preload\n    });\n    const block = {\n      get: Components.block.get({\n        blockService,\n        preload\n      }),\n      put: Components.block.put({\n        blockService,\n        pin,\n        gcLock,\n        preload\n      }),\n      rm: Components.block.rm({\n        blockService,\n        gcLock,\n        pinManager\n      }),\n      stat: Components.block.stat({\n        blockService,\n        preload\n      })\n    };\n    const add = Components.add({\n      block,\n      preload,\n      pin,\n      gcLock,\n      options: constructorOptions\n    });\n\n    if (!isInitialized && !options.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const emptyDirCid = await addEmptyDir({\n        dag\n      });\n      log('adding default assets');\n      await initAssets({\n        add,\n        print\n      });\n      log('initializing IPNS keyspace'); // Setup the offline routing for IPNS.\n      // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n\n      const offlineDatastore = new OfflineDatastore(repo);\n      const ipns = new IPNS(offlineDatastore, repo.datastore, peerId, keychain, {\n        pass: options.pass\n      });\n      await ipns.initializeKeyspace(peerId.privKey, emptyDirCid.toString());\n    }\n\n    const api = createApi({\n      add,\n      apiManager,\n      constructorOptions,\n      block,\n      blockService,\n      dag,\n      gcLock,\n      initOptions: options,\n      ipld,\n      keychain,\n      object,\n      peerId,\n      pin,\n      pinManager,\n      preload,\n      print,\n      repo\n    });\n    apiManager.update(api, () => {\n      throw new NotStartedError();\n    });\n  } catch (err) {\n    cancel();\n    throw err;\n  }\n\n  return apiManager.api;\n};\n\nasync function initNewRepo(repo, {\n  privateKey,\n  emptyRepo,\n  bits,\n  profiles,\n  config,\n  pass,\n  print\n}) {\n  emptyRepo = emptyRepo || false;\n  bits = bits == null ? 2048 : Number(bits);\n  config = mergeOptions(applyProfiles(profiles, getDefaultConfig()), config); // Verify repo does not exist yet\n\n  const exists = await repo.exists();\n  log('repo exists?', exists);\n\n  if (exists === true) {\n    throw new Error('repo already exists');\n  }\n\n  const peerId = await createPeerId({\n    privateKey,\n    bits,\n    print\n  });\n  log('identity generated');\n  config.Identity = {\n    PeerID: peerId.toB58String(),\n    PrivKey: peerId.privKey.bytes.toString('base64')\n  };\n  privateKey = peerId.privKey;\n  log('peer identity: %s', config.Identity.PeerID);\n  await repo.init(config);\n  await repo.open();\n  log('repo opened'); // Create libp2p for Keychain creation\n\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass\n    }\n  });\n\n  if (libp2p.keychain && libp2p.keychain.opts) {\n    await libp2p.loadKeychain();\n    await repo.config.set('Keychain', {\n      dek: libp2p.keychain.opts.dek\n    });\n  }\n\n  return {\n    peerId,\n    keychain: libp2p.keychain\n  };\n}\n\nasync function initExistingRepo(repo, {\n  config: newConfig,\n  profiles,\n  pass\n}) {\n  let config = await repo.config.getAll();\n\n  if (newConfig || profiles) {\n    if (profiles) {\n      config = applyProfiles(profiles, config);\n    }\n\n    if (newConfig) {\n      config = mergeOptions(config, newConfig);\n    }\n\n    await repo.config.set(config);\n  }\n\n  const peerId = await PeerId.createFromPrivKey(config.Identity.PrivKey);\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass,\n      ...config.Keychain\n    }\n  });\n  libp2p.keychain && (await libp2p.loadKeychain());\n  return {\n    peerId,\n    keychain: libp2p.keychain\n  };\n}\n\nfunction createPeerId({\n  privateKey,\n  bits,\n  print\n}) {\n  if (privateKey) {\n    log('using user-supplied private-key');\n    return typeof privateKey === 'object' ? privateKey : PeerId.createFromPrivKey(Buffer.from(privateKey, 'base64'));\n  } else {\n    // Generate peer identity keypair + transform to desired format + add to config.\n    print('generating %s-bit RSA keypair...', bits);\n    return PeerId.create({\n      bits\n    });\n  }\n}\n\nfunction addEmptyDir({\n  dag\n}) {\n  const node = new DAGNode(new UnixFs('directory').marshal());\n  return dag.put(node, {\n    version: 0,\n    format: multicodec.DAG_PB,\n    hashAlg: multicodec.SHA2_256,\n    preload: false\n  });\n} // Apply profiles (e.g. ['server', 'lowpower']) to config\n\n\nfunction applyProfiles(profiles, config) {\n  return (profiles || []).reduce((config, name) => {\n    const profile = require('./config').profiles[name];\n\n    if (!profile) {\n      throw new Error(`Could not find profile with name '${name}'`);\n    }\n\n    log('applying profile %s', name);\n    return profile.transform(config);\n  }, config);\n}\n\nfunction createApi({\n  add,\n  apiManager,\n  constructorOptions,\n  block,\n  blockService,\n  dag,\n  gcLock,\n  initOptions,\n  ipld,\n  keychain,\n  object,\n  peerId,\n  pin,\n  pinManager,\n  preload,\n  print,\n  repo\n}) {\n  const notStarted = async () => {\n    // eslint-disable-line require-await\n    throw new NotStartedError();\n  };\n\n  const resolve = Components.resolve({\n    ipld\n  });\n  const refs = Components.refs({\n    ipld,\n    resolve,\n    preload\n  });\n  refs.local = Components.refs.local({\n    repo\n  });\n  const api = {\n    add,\n    bitswap: {\n      stat: notStarted,\n      unwant: notStarted,\n      wantlist: notStarted\n    },\n    bootstrap: {\n      add: Components.bootstrap.add({\n        repo\n      }),\n      list: Components.bootstrap.list({\n        repo\n      }),\n      rm: Components.bootstrap.rm({\n        repo\n      })\n    },\n    block,\n    cat: Components.cat({\n      ipld,\n      preload\n    }),\n    config: Components.config({\n      repo\n    }),\n    dag,\n    dns: Components.dns(),\n    files: Components.files({\n      ipld,\n      block,\n      blockService,\n      repo,\n      preload,\n      options: constructorOptions\n    }),\n    get: Components.get({\n      ipld,\n      preload\n    }),\n    id: Components.id({\n      peerId\n    }),\n    init: async () => {\n      throw new AlreadyInitializedError();\n    },\n    // eslint-disable-line require-await\n    isOnline: Components.isOnline({}),\n    key: {\n      export: Components.key.export({\n        keychain\n      }),\n      gen: Components.key.gen({\n        keychain\n      }),\n      import: Components.key.import({\n        keychain\n      }),\n      info: Components.key.info({\n        keychain\n      }),\n      list: Components.key.list({\n        keychain\n      }),\n      rename: Components.key.rename({\n        keychain\n      }),\n      rm: Components.key.rm({\n        keychain\n      })\n    },\n    ls: Components.ls({\n      ipld,\n      preload\n    }),\n    object,\n    pin,\n    refs,\n    repo: {\n      gc: Components.repo.gc({\n        gcLock,\n        pin,\n        pinManager,\n        refs,\n        repo\n      }),\n      stat: Components.repo.stat({\n        repo\n      }),\n      version: Components.repo.version({\n        repo\n      })\n    },\n    resolve,\n    start: Components.start({\n      apiManager,\n      options: constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      keychain,\n      peerId,\n      pinManager,\n      preload,\n      print,\n      repo\n    }),\n    stats: {\n      bitswap: notStarted,\n      bw: notStarted,\n      repo: Components.repo.stat({\n        repo\n      })\n    },\n    stop: () => {},\n    swarm: {\n      addrs: notStarted,\n      connect: notStarted,\n      disconnect: notStarted,\n      localAddrs: Components.swarm.localAddrs({\n        multiaddrs: []\n      }),\n      peers: notStarted\n    },\n    version: Components.version({\n      repo\n    })\n  };\n  return api;\n}","map":{"version":3,"sources":["/Users/yenerkaraca/Documents/GitHub/eth-app/node_modules/ipfs/src/core/components/init.js"],"names":["log","require","PeerId","Buffer","mergeOptions","getDefaultConfig","createRepo","mortice","DAGNode","UnixFs","multicodec","AlreadyInitializingError","AlreadyInitializedError","NotStartedError","NotEnabledError","BlockService","Ipld","getDefaultIpldOptions","createPreloader","ERR_REPO_NOT_INITIALIZED","errors","IPNS","OfflineDatastore","initAssets","PinManager","Components","module","exports","apiManager","print","options","constructorOptions","init","cancel","update","pass","config","repo","repoAutoMigrate","path","autoMigrate","isInitialized","closed","open","err","code","allowNew","peerId","keychain","initExistingRepo","initNewRepo","blockService","ipld","preload","start","gcLock","singleProcess","repoOwner","dag","get","resolve","tree","object","data","links","new","patch","addLink","appendData","rmLink","setData","put","stat","pinManager","load","pin","add","ls","rm","block","emptyRepo","emptyDirCid","addEmptyDir","offlineDatastore","ipns","datastore","initializeKeyspace","privKey","toString","api","createApi","initOptions","privateKey","bits","profiles","Number","applyProfiles","exists","Error","createPeerId","Identity","PeerID","toB58String","PrivKey","bytes","libp2p","keychainConfig","opts","loadKeychain","set","dek","newConfig","getAll","createFromPrivKey","Keychain","from","create","node","marshal","version","format","DAG_PB","hashAlg","SHA2_256","reduce","name","profile","transform","notStarted","refs","local","bitswap","unwant","wantlist","bootstrap","list","cat","dns","files","id","isOnline","key","export","gen","import","info","rename","gc","stats","bw","stop","swarm","addrs","connect","disconnect","localAddrs","multiaddrs","peers"],"mappings":"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","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:components:init')\nconst PeerId = require('peer-id')\nconst { Buffer } = require('buffer')\n\nconst mergeOptions = require('merge-options')\nconst getDefaultConfig = require('../runtime/config-nodejs.js')\nconst createRepo = require('../runtime/repo-nodejs')\nconst mortice = require('mortice')\nconst { DAGNode } = require('ipld-dag-pb')\nconst UnixFs = require('ipfs-unixfs')\nconst multicodec = require('multicodec')\nconst {\n  AlreadyInitializingError,\n  AlreadyInitializedError,\n  NotStartedError,\n  NotEnabledError\n} = require('../errors')\nconst BlockService = require('ipfs-block-service')\nconst Ipld = require('ipld')\nconst getDefaultIpldOptions = require('../runtime/ipld-nodejs')\nconst createPreloader = require('../preload')\nconst { ERR_REPO_NOT_INITIALIZED } = require('ipfs-repo').errors\nconst IPNS = require('../ipns')\nconst OfflineDatastore = require('../ipns/routing/offline-datastore')\nconst initAssets = require('../runtime/init-assets-nodejs')\nconst PinManager = require('./pin/pin-manager')\nconst Components = require('./')\n\nmodule.exports = ({\n  apiManager,\n  print,\n  options: constructorOptions\n}) => async function init (options) {\n  const { cancel } = apiManager.update({ init: () => { throw new AlreadyInitializingError() } })\n\n  try {\n    options = options || {}\n\n    if (typeof constructorOptions.init === 'object') {\n      options = mergeOptions(constructorOptions.init, options)\n    }\n\n    options.pass = options.pass || constructorOptions.pass\n\n    if (constructorOptions.config) {\n      options.config = mergeOptions(options.config, constructorOptions.config)\n    }\n\n    options.repo = options.repo || constructorOptions.repo\n    options.repoAutoMigrate = options.repoAutoMigrate || constructorOptions.repoAutoMigrate\n\n    const repo = typeof options.repo === 'string' || options.repo == null\n      ? createRepo({ path: options.repo, autoMigrate: options.repoAutoMigrate })\n      : options.repo\n\n    let isInitialized = true\n\n    if (repo.closed) {\n      try {\n        await repo.open()\n      } catch (err) {\n        if (err.code === ERR_REPO_NOT_INITIALIZED) {\n          isInitialized = false\n        } else {\n          throw err\n        }\n      }\n    }\n\n    if (!isInitialized && options.allowNew === false) {\n      throw new NotEnabledError('new repo initialization is not enabled')\n    }\n\n    const { peerId, keychain } = isInitialized\n      ? await initExistingRepo(repo, options)\n      : await initNewRepo(repo, { ...options, print })\n\n    log('peer created')\n\n    const blockService = new BlockService(repo)\n    const ipld = new Ipld(getDefaultIpldOptions(blockService, constructorOptions.ipld, log))\n\n    const preload = createPreloader(constructorOptions.preload)\n    await preload.start()\n\n    // Make sure GC lock is specific to repo, for tests where there are\n    // multiple instances of IPFS\n    const gcLock = mortice(repo.path, { singleProcess: constructorOptions.repoOwner !== false })\n    const dag = {\n      get: Components.dag.get({ ipld, preload }),\n      resolve: Components.dag.resolve({ ipld, preload }),\n      tree: Components.dag.tree({ ipld, preload })\n    }\n    const object = {\n      data: Components.object.data({ ipld, preload }),\n      get: Components.object.get({ ipld, preload }),\n      links: Components.object.links({ dag }),\n      new: Components.object.new({ ipld, preload }),\n      patch: {\n        addLink: Components.object.patch.addLink({ ipld, gcLock, preload }),\n        appendData: Components.object.patch.appendData({ ipld, gcLock, preload }),\n        rmLink: Components.object.patch.rmLink({ ipld, gcLock, preload }),\n        setData: Components.object.patch.setData({ ipld, gcLock, preload })\n      },\n      put: Components.object.put({ ipld, gcLock, preload }),\n      stat: Components.object.stat({ ipld, preload })\n    }\n\n    const pinManager = new PinManager(repo, dag)\n    await pinManager.load()\n\n    const pin = {\n      add: Components.pin.add({ pinManager, gcLock, dag }),\n      ls: Components.pin.ls({ pinManager, dag }),\n      rm: Components.pin.rm({ pinManager, gcLock, dag })\n    }\n\n    // FIXME: resolve this circular dependency\n    dag.put = Components.dag.put({ ipld, pin, gcLock, preload })\n\n    const block = {\n      get: Components.block.get({ blockService, preload }),\n      put: Components.block.put({ blockService, pin, gcLock, preload }),\n      rm: Components.block.rm({ blockService, gcLock, pinManager }),\n      stat: Components.block.stat({ blockService, preload })\n    }\n\n    const add = Components.add({ block, preload, pin, gcLock, options: constructorOptions })\n\n    if (!isInitialized && !options.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const emptyDirCid = await addEmptyDir({ dag })\n\n      log('adding default assets')\n      await initAssets({ add, print })\n\n      log('initializing IPNS keyspace')\n      // Setup the offline routing for IPNS.\n      // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n      const offlineDatastore = new OfflineDatastore(repo)\n      const ipns = new IPNS(offlineDatastore, repo.datastore, peerId, keychain, { pass: options.pass })\n      await ipns.initializeKeyspace(peerId.privKey, emptyDirCid.toString())\n    }\n\n    const api = createApi({\n      add,\n      apiManager,\n      constructorOptions,\n      block,\n      blockService,\n      dag,\n      gcLock,\n      initOptions: options,\n      ipld,\n      keychain,\n      object,\n      peerId,\n      pin,\n      pinManager,\n      preload,\n      print,\n      repo\n    })\n\n    apiManager.update(api, () => { throw new NotStartedError() })\n  } catch (err) {\n    cancel()\n    throw err\n  }\n\n  return apiManager.api\n}\n\nasync function initNewRepo (repo, { privateKey, emptyRepo, bits, profiles, config, pass, print }) {\n  emptyRepo = emptyRepo || false\n  bits = bits == null ? 2048 : Number(bits)\n\n  config = mergeOptions(applyProfiles(profiles, getDefaultConfig()), config)\n\n  // Verify repo does not exist yet\n  const exists = await repo.exists()\n  log('repo exists?', exists)\n\n  if (exists === true) {\n    throw new Error('repo already exists')\n  }\n\n  const peerId = await createPeerId({ privateKey, bits, print })\n\n  log('identity generated')\n\n  config.Identity = {\n    PeerID: peerId.toB58String(),\n    PrivKey: peerId.privKey.bytes.toString('base64')\n  }\n\n  privateKey = peerId.privKey\n\n  log('peer identity: %s', config.Identity.PeerID)\n\n  await repo.init(config)\n  await repo.open()\n\n  log('repo opened')\n\n  // Create libp2p for Keychain creation\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass\n    }\n  })\n\n  if (libp2p.keychain && libp2p.keychain.opts) {\n    await libp2p.loadKeychain()\n\n    await repo.config.set('Keychain', {\n      dek: libp2p.keychain.opts.dek\n    })\n  }\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\nasync function initExistingRepo (repo, { config: newConfig, profiles, pass }) {\n  let config = await repo.config.getAll()\n\n  if (newConfig || profiles) {\n    if (profiles) {\n      config = applyProfiles(profiles, config)\n    }\n    if (newConfig) {\n      config = mergeOptions(config, newConfig)\n    }\n    await repo.config.set(config)\n  }\n\n  const peerId = await PeerId.createFromPrivKey(config.Identity.PrivKey)\n\n  const libp2p = Components.libp2p({\n    peerId,\n    repo,\n    config,\n    keychainConfig: {\n      pass,\n      ...config.Keychain\n    }\n  })\n\n  libp2p.keychain && await libp2p.loadKeychain()\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\nfunction createPeerId ({ privateKey, bits, print }) {\n  if (privateKey) {\n    log('using user-supplied private-key')\n    return typeof privateKey === 'object'\n      ? privateKey\n      : PeerId.createFromPrivKey(Buffer.from(privateKey, 'base64'))\n  } else {\n    // Generate peer identity keypair + transform to desired format + add to config.\n    print('generating %s-bit RSA keypair...', bits)\n    return PeerId.create({ bits })\n  }\n}\n\nfunction addEmptyDir ({ dag }) {\n  const node = new DAGNode(new UnixFs('directory').marshal())\n  return dag.put(node, {\n    version: 0,\n    format: multicodec.DAG_PB,\n    hashAlg: multicodec.SHA2_256,\n    preload: false\n  })\n}\n\n// Apply profiles (e.g. ['server', 'lowpower']) to config\nfunction applyProfiles (profiles, config) {\n  return (profiles || []).reduce((config, name) => {\n    const profile = require('./config').profiles[name]\n    if (!profile) {\n      throw new Error(`Could not find profile with name '${name}'`)\n    }\n    log('applying profile %s', name)\n    return profile.transform(config)\n  }, config)\n}\n\nfunction createApi ({\n  add,\n  apiManager,\n  constructorOptions,\n  block,\n  blockService,\n  dag,\n  gcLock,\n  initOptions,\n  ipld,\n  keychain,\n  object,\n  peerId,\n  pin,\n  pinManager,\n  preload,\n  print,\n  repo\n}) {\n  const notStarted = async () => { // eslint-disable-line require-await\n    throw new NotStartedError()\n  }\n\n  const resolve = Components.resolve({ ipld })\n  const refs = Components.refs({ ipld, resolve, preload })\n  refs.local = Components.refs.local({ repo })\n\n  const api = {\n    add,\n    bitswap: {\n      stat: notStarted,\n      unwant: notStarted,\n      wantlist: notStarted\n    },\n    bootstrap: {\n      add: Components.bootstrap.add({ repo }),\n      list: Components.bootstrap.list({ repo }),\n      rm: Components.bootstrap.rm({ repo })\n    },\n    block,\n    cat: Components.cat({ ipld, preload }),\n    config: Components.config({ repo }),\n    dag,\n    dns: Components.dns(),\n    files: Components.files({ ipld, block, blockService, repo, preload, options: constructorOptions }),\n    get: Components.get({ ipld, preload }),\n    id: Components.id({ peerId }),\n    init: async () => { throw new AlreadyInitializedError() }, // eslint-disable-line require-await\n    isOnline: Components.isOnline({}),\n    key: {\n      export: Components.key.export({ keychain }),\n      gen: Components.key.gen({ keychain }),\n      import: Components.key.import({ keychain }),\n      info: Components.key.info({ keychain }),\n      list: Components.key.list({ keychain }),\n      rename: Components.key.rename({ keychain }),\n      rm: Components.key.rm({ keychain })\n    },\n    ls: Components.ls({ ipld, preload }),\n    object,\n    pin,\n    refs,\n    repo: {\n      gc: Components.repo.gc({ gcLock, pin, pinManager, refs, repo }),\n      stat: Components.repo.stat({ repo }),\n      version: Components.repo.version({ repo })\n    },\n    resolve,\n    start: Components.start({\n      apiManager,\n      options: constructorOptions,\n      blockService,\n      gcLock,\n      initOptions,\n      ipld,\n      keychain,\n      peerId,\n      pinManager,\n      preload,\n      print,\n      repo\n    }),\n    stats: {\n      bitswap: notStarted,\n      bw: notStarted,\n      repo: Components.repo.stat({ repo })\n    },\n    stop: () => {},\n    swarm: {\n      addrs: notStarted,\n      connect: notStarted,\n      disconnect: notStarted,\n      localAddrs: Components.swarm.localAddrs({ multiaddrs: [] }),\n      peers: notStarted\n    },\n    version: Components.version({ repo })\n  }\n\n  return api\n}\n"]},"metadata":{},"sourceType":"script"}