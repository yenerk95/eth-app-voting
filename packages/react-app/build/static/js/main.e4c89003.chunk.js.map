{"version":3,"sources":["App.js","../../contracts/src/abis.js","../../contracts/src/addresses.js","index.js","ethereumLogo.png"],"names":["node","abis","ipfs","storage","addresses","ZERO_ADDRESS","defaultProvider","ethers","providers","Web3Provider","window","ethereum","ipfsContract","Contract","storageContract","a","IPFS","create","version","console","log","readCurrentUserFile","userFiles","getSigner","getAddress","result","request","method","accounts","getaccount","Object","values","account","JSON","stringify","App","useState","ipfsHash","setIpfsHash","useEffect","initIpfs","enable","file","readFile","accountHash","setAccountHash","setFile","hash","ipfsWithSigner","connect","tx","store","storageWithSigner","buyerUpload","sellerUpload","SetEndTime","itemInput","ExtendTime","itemInput1","file1","uploadFile","useCallback","files","path","name","content","add","cid","string","onDrop","acceptedFiles","useDropzone","multiple","getRootProps","getInputProps","isDragActive","setItemInput","setItemInput1","className","style","cursor","src","logo","alt","href","target","rel","type","placeholder","value","onChange","e","onClick","client","ApolloClient","uri","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e4c89003.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { ethers } from \"ethers\";\nimport IPFS from \"ipfs\";\n\nimport logo from \"./ethereumLogo.png\";\nimport { addresses, abis } from \"@project/contracts\";\n\nimport \"./App.css\";\nconst ZERO_ADDRESS =\n  \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\nlet node;\n\nconst defaultProvider = new ethers.providers.Web3Provider(window.ethereum);\nconst ipfsContract = new ethers.Contract(\n  addresses.ipfs,\n  abis.ipfs,\n  defaultProvider\n);\nconst storageContract = new ethers.Contract(\n  addresses.storage,\n  abis.storage,\n  defaultProvider\n);\n\n\nasync function initIpfs() {\n  node = await IPFS.create();\n  const version = await node.version();\n  console.log(\"IPFS Node Version:\", version.version);\n}\n\nasync function readCurrentUserFile() {\n  const result = await ipfsContract.userFiles(\n    defaultProvider.getSigner().getAddress()\n    \n  \n  );\n  console.log({ result });\n \n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  const account = accounts[0];//metamask current account\n\n  \n  return result;\n}\nasync function getaccount(){\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  Object.values(accounts);\n  const account =JSON.stringify(accounts[0]);\n  console.log(\"FUNC\");\n\n  console.log({ account });\n\nreturn account\n}\n\nfunction App() {\n  const [ipfsHash, setIpfsHash] = useState(\"\");\n  useEffect(() => {\n    initIpfs();\n    window.ethereum.enable();\n  }, []);\n\n  useEffect(() => {\n    async function readFile() {\n      const file = await readCurrentUserFile();\n\n      if (file !== ZERO_ADDRESS) setIpfsHash(file);\n    }\n    readFile();\n  }, []);\n\n\n\n\n  const [accountHash, setAccountHash] = useState(\"\");\n  useEffect(() => {\n    window.ethereum.enable();\n  }, []);\n\n  useEffect(() => {\n    async function readFile() {\n      const file1 = await getaccount();\n\n      if (file1 !== ZERO_ADDRESS) setAccountHash(file1);\n    }\n    readFile();\n  }, []);\n\n\n\n\n  async function setFile(hash) {\n    const ipfsWithSigner = ipfsContract.connect(defaultProvider.getSigner());\n    const tx = await ipfsWithSigner.setFile(hash);\n    console.log({ tx });\n\n    setIpfsHash(hash);\n    \n    ipfsWithSigner.store(hash);\n\n  \n  }\n\n\n  async function Buyer() {\n\n    \n    const storageWithSigner = storageContract.connect(defaultProvider.getSigner());\n  \n    await storageWithSigner.buyerUpload(ipfsHash);\n  \n  }\n\n\n  async function Seller() {\n\n    \n    const storageWithSigner = storageContract.connect(defaultProvider.getSigner());\n    \n    await storageWithSigner.sellerUpload(ipfsHash);\n\n  \n  }\n  async function Set() {\n\n    \n    const storageWithSigner = storageContract.connect(defaultProvider.getSigner());\n    await storageWithSigner.SetEndTime(itemInput);\n\n  \n  }\n  async function Extend() {\n\n    \n    const storageWithSigner = storageContract.connect(defaultProvider.getSigner());\n    \n    await storageWithSigner.ExtendTime(itemInput1);\n\n  \n  }\n  \n  console.log(ipfsHash);\n  \n\n  const uploadFile = useCallback(async (file) => {\n    const files = [\n      {\n        path: file.name + file.path,\n        content: file,\n      },\n    ];\n\n    for await (const result of node.add(files)) {\n      await setFile(result.cid.string);\n    }\n  }, []);\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      uploadFile(acceptedFiles[0]);\n    },\n    [uploadFile]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    multiple: false,\n    onDrop,\n  });\n\n  const [itemInput, setItemInput] = useState(\"\");\n  console.log(itemInput);\n  const [itemInput1, setItemInput1] = useState(\"\");\n  console.log(itemInput1);\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\n          <img src={logo} className=\"App-logo\" alt=\"react-logo\" />\n          <input {...getInputProps()} />\n          {isDragActive ? (\n            <p>Drop the files here ...</p>\n          ) : (\n            <p>\n              Drag 'n' drop some files here to upload to IPFS (or click the\n              logo)\n            </p>\n          )}\n        </div>\n        \n        <div>\n          {ipfsHash !== \"\" ? (   \n            <p>IPFS Hash: <mark className=\"mark-red\">\"{ipfsHash}\"</mark></p>\n            ) : (\n              \"\"\n            )}\n        \n        </div>  \n        <div>User Hash:<mark className=\"mark-yellow\">{accountHash}</mark></div>\n   \n        <div>\n          {ipfsHash !== \"\" ? (\n            \n\n            <a\n            \n              href={`https://ipfs.io/ipfs/${ipfsHash}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              See current user file \n            </a>\n          ) : (\n            \"No user file set yet\"\n          )}\n\n        </div>\n        <div>Buyer Can Set and Extend Time</div>\n      \n        <div>\n          Set End Time:\n\n         \n          <input type=\"text\" placeholder=\"Enter an item\" value={itemInput} onChange={e => setItemInput(e.target.value)}\n        \n          />\n          <button onClick={Set}>Buyer Set</button>\n         </div>\n         <div>\n          Extend Time:\n          <input type=\"text\" placeholder=\"Enter an item\" value={itemInput1} onChange={e => setItemInput1(e.target.value)}\n         \n          />\n          <button onClick={Extend}>Buyer Extend</button>\n         </div>\n         <div>Buyer Clicks to Upload to Smart Contract:   <button onClick={Buyer}>Buyer Upload</button></div>\n         <div>Seller Clicks to Upload to Smart Contract:   <button onClick={Seller}>Seller Upload</button></div>\n         <script></script>\n      </header>\n\n    </div>\n  );\n  \n}\n\nexport default App;\n\n\n","\nimport ipfsStorage from \"./abis/IpfsStorage.json\";\nimport Storage from \"./abis/Storage.json\";\nconst abis = {\n  ipfs: ipfsStorage,\n  storage: Storage,\n};\n\nexport default abis;\n","const addresses = {\n  ipfs: \"0xdc9802a1e6d201acf1c37b66c8e7cea28f11dbde\",\n  storage: \"0xAe253B54ddC65A30A1A14710469F7DFf063557b5\",\n};\n\nexport default addresses;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// You should replace this uri with your own and put it into a .env file\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","module.exports = __webpack_public_path__ + \"static/media/ethereumLogo.0020ce37.png\";"],"sourceRoot":""}